
matrix_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d3f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000e5c  00802000  0000d3f4  0000d488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000efb  00802e5c  00802e5c  0000e2e4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000e2e4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000010a0  00000000  00000000  0000e340  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00025f49  00000000  00000000  0000f3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00004f3e  00000000  00000000  00035329  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000d572  00000000  00000000  0003a267  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000041b8  00000000  00000000  000477dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00005d8a  00000000  00000000  0004b994  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00017b02  00000000  00000000  0005171e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001118  00000000  00000000  00069220  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c7       	rjmp	.+3730   	; 0xe94 <_StackPaint>
       2:	00 00       	nop
       4:	84 c7       	rjmp	.+3848   	; 0xf0e <__bad_interrupt>
       6:	00 00       	nop
       8:	82 c7       	rjmp	.+3844   	; 0xf0e <__bad_interrupt>
       a:	00 00       	nop
       c:	80 c7       	rjmp	.+3840   	; 0xf0e <__bad_interrupt>
       e:	00 00       	nop
      10:	7e c7       	rjmp	.+3836   	; 0xf0e <__bad_interrupt>
      12:	00 00       	nop
      14:	7c c7       	rjmp	.+3832   	; 0xf0e <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 54 09 	jmp	0x12a8	; 0x12a8 <__vector_6>
      1c:	78 c7       	rjmp	.+3824   	; 0xf0e <__bad_interrupt>
      1e:	00 00       	nop
      20:	76 c7       	rjmp	.+3820   	; 0xf0e <__bad_interrupt>
      22:	00 00       	nop
      24:	74 c7       	rjmp	.+3816   	; 0xf0e <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__vector_10>
      2c:	70 c7       	rjmp	.+3808   	; 0xf0e <__bad_interrupt>
      2e:	00 00       	nop
      30:	6e c7       	rjmp	.+3804   	; 0xf0e <__bad_interrupt>
      32:	00 00       	nop
      34:	6c c7       	rjmp	.+3800   	; 0xf0e <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 2d 49 	jmp	0x925a	; 0x925a <__vector_14>
      3c:	68 c7       	rjmp	.+3792   	; 0xf0e <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 e9 59 	jmp	0xb3d2	; 0xb3d2 <__vector_16>
      44:	0c 94 fb 48 	jmp	0x91f6	; 0x91f6 <__vector_17>
      48:	0c 94 b6 1b 	jmp	0x376c	; 0x376c <__vector_18>
      4c:	0c 94 1c 5a 	jmp	0xb438	; 0xb438 <__vector_19>
      50:	0c 94 d8 13 	jmp	0x27b0	; 0x27b0 <__vector_20>
      54:	5c c7       	rjmp	.+3768   	; 0xf0e <__bad_interrupt>
      56:	00 00       	nop
      58:	5a c7       	rjmp	.+3764   	; 0xf0e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	58 c7       	rjmp	.+3760   	; 0xf0e <__bad_interrupt>
      5e:	00 00       	nop
      60:	56 c7       	rjmp	.+3756   	; 0xf0e <__bad_interrupt>
      62:	00 00       	nop
      64:	54 c7       	rjmp	.+3752   	; 0xf0e <__bad_interrupt>
      66:	00 00       	nop
      68:	52 c7       	rjmp	.+3748   	; 0xf0e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	50 c7       	rjmp	.+3744   	; 0xf0e <__bad_interrupt>
      6e:	00 00       	nop
      70:	4e c7       	rjmp	.+3740   	; 0xf0e <__bad_interrupt>
      72:	00 00       	nop
      74:	4c c7       	rjmp	.+3736   	; 0xf0e <__bad_interrupt>
      76:	00 00       	nop
      78:	4a c7       	rjmp	.+3732   	; 0xf0e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	48 c7       	rjmp	.+3728   	; 0xf0e <__bad_interrupt>
      7e:	00 00       	nop
      80:	46 c7       	rjmp	.+3724   	; 0xf0e <__bad_interrupt>
      82:	00 00       	nop
      84:	44 c7       	rjmp	.+3720   	; 0xf0e <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 24 0e 	jmp	0x1c48	; 0x1c48 <__vector_34>
      8c:	40 c7       	rjmp	.+3712   	; 0xf0e <__bad_interrupt>
      8e:	00 00       	nop
      90:	3e c7       	rjmp	.+3708   	; 0xf0e <__bad_interrupt>
      92:	00 00       	nop
      94:	3c c7       	rjmp	.+3704   	; 0xf0e <__bad_interrupt>
      96:	00 00       	nop
      98:	3a c7       	rjmp	.+3700   	; 0xf0e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	38 c7       	rjmp	.+3696   	; 0xf0e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	36 c7       	rjmp	.+3692   	; 0xf0e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	34 c7       	rjmp	.+3688   	; 0xf0e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	32 c7       	rjmp	.+3684   	; 0xf0e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	30 c7       	rjmp	.+3680   	; 0xf0e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2e c7       	rjmp	.+3676   	; 0xf0e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2c c7       	rjmp	.+3672   	; 0xf0e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2a c7       	rjmp	.+3668   	; 0xf0e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	28 c7       	rjmp	.+3664   	; 0xf0e <__bad_interrupt>
      be:	00 00       	nop
      c0:	26 c7       	rjmp	.+3660   	; 0xf0e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	24 c7       	rjmp	.+3656   	; 0xf0e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	22 c7       	rjmp	.+3652   	; 0xf0e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	20 c7       	rjmp	.+3648   	; 0xf0e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	1e c7       	rjmp	.+3644   	; 0xf0e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	1c c7       	rjmp	.+3640   	; 0xf0e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	1a c7       	rjmp	.+3636   	; 0xf0e <__bad_interrupt>
      da:	00 00       	nop
      dc:	18 c7       	rjmp	.+3632   	; 0xf0e <__bad_interrupt>
      de:	00 00       	nop
      e0:	16 c7       	rjmp	.+3628   	; 0xf0e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	14 c7       	rjmp	.+3624   	; 0xf0e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	12 c7       	rjmp	.+3620   	; 0xf0e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	10 c7       	rjmp	.+3616   	; 0xf0e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	0e c7       	rjmp	.+3612   	; 0xf0e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	0c c7       	rjmp	.+3608   	; 0xf0e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	0a c7       	rjmp	.+3604   	; 0xf0e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	08 c7       	rjmp	.+3600   	; 0xf0e <__bad_interrupt>
      fe:	00 00       	nop
     100:	06 c7       	rjmp	.+3596   	; 0xf0e <__bad_interrupt>
     102:	00 00       	nop
     104:	04 c7       	rjmp	.+3592   	; 0xf0e <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <__vector_66>
     10c:	0c 94 66 0e 	jmp	0x1ccc	; 0x1ccc <__vector_67>
     110:	fe c6       	rjmp	.+3580   	; 0xf0e <__bad_interrupt>
     112:	00 00       	nop
     114:	fc c6       	rjmp	.+3576   	; 0xf0e <__bad_interrupt>
     116:	00 00       	nop
     118:	fa c6       	rjmp	.+3572   	; 0xf0e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	f8 c6       	rjmp	.+3568   	; 0xf0e <__bad_interrupt>
     11e:	00 00       	nop
     120:	f6 c6       	rjmp	.+3564   	; 0xf0e <__bad_interrupt>
     122:	00 00       	nop
     124:	f4 c6       	rjmp	.+3560   	; 0xf0e <__bad_interrupt>
     126:	00 00       	nop
     128:	f2 c6       	rjmp	.+3556   	; 0xf0e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	f0 c6       	rjmp	.+3552   	; 0xf0e <__bad_interrupt>
     12e:	00 00       	nop
     130:	ee c6       	rjmp	.+3548   	; 0xf0e <__bad_interrupt>
     132:	00 00       	nop
     134:	ec c6       	rjmp	.+3544   	; 0xf0e <__bad_interrupt>
     136:	00 00       	nop
     138:	ea c6       	rjmp	.+3540   	; 0xf0e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	e8 c6       	rjmp	.+3536   	; 0xf0e <__bad_interrupt>
     13e:	00 00       	nop
     140:	e6 c6       	rjmp	.+3532   	; 0xf0e <__bad_interrupt>
     142:	00 00       	nop
     144:	e4 c6       	rjmp	.+3528   	; 0xf0e <__bad_interrupt>
     146:	00 00       	nop
     148:	0c 94 58 5b 	jmp	0xb6b0	; 0xb6b0 <__vector_82>
     14c:	e0 c6       	rjmp	.+3520   	; 0xf0e <__bad_interrupt>
     14e:	00 00       	nop
     150:	de c6       	rjmp	.+3516   	; 0xf0e <__bad_interrupt>
     152:	00 00       	nop
     154:	dc c6       	rjmp	.+3512   	; 0xf0e <__bad_interrupt>
     156:	00 00       	nop
     158:	da c6       	rjmp	.+3508   	; 0xf0e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	d8 c6       	rjmp	.+3504   	; 0xf0e <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 58 35 	jmp	0x6ab0	; 0x6ab0 <__vector_88>
     164:	d4 c6       	rjmp	.+3496   	; 0xf0e <__bad_interrupt>
     166:	00 00       	nop
     168:	d2 c6       	rjmp	.+3492   	; 0xf0e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	d0 c6       	rjmp	.+3488   	; 0xf0e <__bad_interrupt>
     16e:	00 00       	nop
     170:	ce c6       	rjmp	.+3484   	; 0xf0e <__bad_interrupt>
     172:	00 00       	nop
     174:	cc c6       	rjmp	.+3480   	; 0xf0e <__bad_interrupt>
     176:	00 00       	nop
     178:	ca c6       	rjmp	.+3476   	; 0xf0e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	c8 c6       	rjmp	.+3472   	; 0xf0e <__bad_interrupt>
     17e:	00 00       	nop
     180:	c6 c6       	rjmp	.+3468   	; 0xf0e <__bad_interrupt>
     182:	00 00       	nop
     184:	c4 c6       	rjmp	.+3464   	; 0xf0e <__bad_interrupt>
     186:	00 00       	nop
     188:	c2 c6       	rjmp	.+3460   	; 0xf0e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	c0 c6       	rjmp	.+3456   	; 0xf0e <__bad_interrupt>
     18e:	00 00       	nop
     190:	be c6       	rjmp	.+3452   	; 0xf0e <__bad_interrupt>
     192:	00 00       	nop
     194:	bc c6       	rjmp	.+3448   	; 0xf0e <__bad_interrupt>
     196:	00 00       	nop
     198:	ba c6       	rjmp	.+3444   	; 0xf0e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	b8 c6       	rjmp	.+3440   	; 0xf0e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	b6 c6       	rjmp	.+3436   	; 0xf0e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	b4 c6       	rjmp	.+3432   	; 0xf0e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	b2 c6       	rjmp	.+3428   	; 0xf0e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	b0 c6       	rjmp	.+3424   	; 0xf0e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	ae c6       	rjmp	.+3420   	; 0xf0e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	ac c6       	rjmp	.+3416   	; 0xf0e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	aa c6       	rjmp	.+3412   	; 0xf0e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	a8 c6       	rjmp	.+3408   	; 0xf0e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	a6 c6       	rjmp	.+3404   	; 0xf0e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	a4 c6       	rjmp	.+3400   	; 0xf0e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	a2 c6       	rjmp	.+3396   	; 0xf0e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	a0 c6       	rjmp	.+3392   	; 0xf0e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	9e c6       	rjmp	.+3388   	; 0xf0e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	9c c6       	rjmp	.+3384   	; 0xf0e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	9a c6       	rjmp	.+3380   	; 0xf0e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	98 c6       	rjmp	.+3376   	; 0xf0e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	96 c6       	rjmp	.+3372   	; 0xf0e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	94 c6       	rjmp	.+3368   	; 0xf0e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	92 c6       	rjmp	.+3364   	; 0xf0e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	90 c6       	rjmp	.+3360   	; 0xf0e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	8e c6       	rjmp	.+3356   	; 0xf0e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	8c c6       	rjmp	.+3352   	; 0xf0e <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	8a c6       	rjmp	.+3348   	; 0xf0e <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	ea 2d       	mov	r30, r10
     1fe:	16 2e       	mov	r1, r22
     200:	f4 2b       	or	r31, r20
     202:	16 2e       	mov	r1, r22
     204:	60 2d       	mov	r22, r0
     206:	08 2e       	mov	r0, r24
     208:	ea 2d       	mov	r30, r10
     20a:	73 2d       	mov	r23, r3
     20c:	ea 2d       	mov	r30, r10
     20e:	91 2d       	mov	r25, r1
     210:	ea 2d       	mov	r30, r10
     212:	8e 2c       	mov	r8, r14
     214:	16 2e       	mov	r1, r22
     216:	ea 2d       	mov	r30, r10
     218:	c3 2d       	mov	r28, r3
     21a:	ea 2d       	mov	r30, r10
     21c:	ea 2d       	mov	r30, r10
     21e:	16 2e       	mov	r1, r22
     220:	2a 2c       	mov	r2, r10
     222:	ea 2d       	mov	r30, r10
     224:	ea 2d       	mov	r30, r10
     226:	35 2d       	mov	r19, r5
     228:	52 2d       	mov	r21, r2
     22a:	d9 2d       	mov	r29, r9
     22c:	f7 2d       	mov	r31, r7
     22e:	ea 2d       	mov	r30, r10
     230:	16 2e       	mov	r1, r22
     232:	16 2e       	mov	r1, r22
     234:	16 2e       	mov	r1, r22
     236:	16 2e       	mov	r1, r22
     238:	ea 2d       	mov	r30, r10
     23a:	ea 2d       	mov	r30, r10
     23c:	ea 2d       	mov	r30, r10
     23e:	12 58       	subi	r17, 0x82	; 130
     240:	0c 58       	subi	r16, 0x8C	; 140
     242:	0f 58       	subi	r16, 0x8F	; 143
     244:	03 58       	subi	r16, 0x83	; 131
     246:	09 58       	subi	r16, 0x89	; 137
     248:	fd 57       	subi	r31, 0x7D	; 125
     24a:	06 58       	subi	r16, 0x86	; 134
     24c:	00 58       	subi	r16, 0x80	; 128
     24e:	61 58       	subi	r22, 0x81	; 129
     250:	48 58       	subi	r20, 0x88	; 136
     252:	50 58       	subi	r21, 0x80	; 128
     254:	3e 58       	subi	r19, 0x8E	; 142
     256:	42 58       	subi	r20, 0x82	; 130
     258:	33 58       	subi	r19, 0x83	; 131
     25a:	3e 58       	subi	r19, 0x8E	; 142
     25c:	3a 58       	subi	r19, 0x8A	; 138
     25e:	af 58       	subi	r26, 0x8F	; 143
     260:	bc 58       	subi	r27, 0x8C	; 140
     262:	ba 58       	subi	r27, 0x8A	; 138
     264:	b8 58       	subi	r27, 0x88	; 136
     266:	b6 58       	subi	r27, 0x86	; 134
     268:	b2 58       	subi	r27, 0x82	; 130
     26a:	b4 58       	subi	r27, 0x84	; 132
     26c:	07 5c       	subi	r16, 0xC7	; 199
     26e:	09 5c       	subi	r16, 0xC9	; 201
     270:	07 5c       	subi	r16, 0xC7	; 199
     272:	10 5c       	subi	r17, 0xC0	; 192
     274:	07 5c       	subi	r16, 0xC7	; 199
     276:	10 5c       	subi	r17, 0xC0	; 192
     278:	07 5c       	subi	r16, 0xC7	; 199
     27a:	07 5c       	subi	r16, 0xC7	; 199
     27c:	10 5c       	subi	r17, 0xC0	; 192
     27e:	07 5c       	subi	r16, 0xC7	; 199
     280:	10 5c       	subi	r17, 0xC0	; 192
     282:	07 5c       	subi	r16, 0xC7	; 199

00000284 <__trampolines_end>:
     284:	00 00       	nop
     286:	00 00       	nop
     288:	00 00       	nop
     28a:	20 50       	subi	r18, 0x00	; 0
     28c:	70 50       	subi	r23, 0x00	; 0
     28e:	20 00       	.word	0x0020	; ????
     290:	20 70       	andi	r18, 0x00	; 0
     292:	50 70       	andi	r21, 0x00	; 0
     294:	20 00       	.word	0x0020	; ????
     296:	00 50       	subi	r16, 0x00	; 0
     298:	70 70       	andi	r23, 0x00	; 0
     29a:	20 00       	.word	0x0020	; ????
     29c:	00 20       	and	r0, r0
     29e:	70 70       	andi	r23, 0x00	; 0
     2a0:	20 00       	.word	0x0020	; ????
     2a2:	20 70       	andi	r18, 0x00	; 0
     2a4:	70 20       	and	r7, r0
     2a6:	70 00       	.word	0x0070	; ????
     2a8:	20 20       	and	r2, r0
     2aa:	70 20       	and	r7, r0
     2ac:	70 00       	.word	0x0070	; ????
     2ae:	00 00       	nop
     2b0:	20 00       	.word	0x0020	; ????
     2b2:	00 00       	nop
     2b4:	f0 f0       	brcs	.+60     	; 0x2f2 <__trampolines_end+0x6e>
     2b6:	d0 f0       	brcs	.+52     	; 0x2ec <__trampolines_end+0x68>
     2b8:	f0 f0       	brcs	.+60     	; 0x2f6 <__trampolines_end+0x72>
     2ba:	00 70       	andi	r16, 0x00	; 0
     2bc:	50 70       	andi	r21, 0x00	; 0
     2be:	00 00       	nop
     2c0:	f0 80       	ld	r15, Z
     2c2:	a0 80       	ld	r10, Z
     2c4:	f0 f0       	brcs	.+60     	; 0x302 <__trampolines_end+0x7e>
     2c6:	00 30       	cpi	r16, 0x00	; 0
     2c8:	10 60       	ori	r17, 0x00	; 0
     2ca:	60 00       	.word	0x0060	; ????
     2cc:	20 50       	subi	r18, 0x00	; 0
     2ce:	20 70       	andi	r18, 0x00	; 0
     2d0:	20 00       	.word	0x0020	; ????
     2d2:	20 30       	cpi	r18, 0x00	; 0
     2d4:	20 20       	and	r2, r0
     2d6:	60 00       	.word	0x0060	; ????
     2d8:	20 30       	cpi	r18, 0x00	; 0
     2da:	50 10       	cpse	r5, r0
     2dc:	20 00       	.word	0x0020	; ????
     2de:	20 70       	andi	r18, 0x00	; 0
     2e0:	50 70       	andi	r21, 0x00	; 0
     2e2:	20 00       	.word	0x0020	; ????
     2e4:	40 60       	ori	r20, 0x00	; 0
     2e6:	70 60       	ori	r23, 0x00	; 0
     2e8:	40 00       	.word	0x0040	; ????
     2ea:	10 30       	cpi	r17, 0x00	; 0
     2ec:	70 30       	cpi	r23, 0x00	; 0
     2ee:	10 00       	.word	0x0010	; ????
     2f0:	20 70       	andi	r18, 0x00	; 0
     2f2:	20 70       	andi	r18, 0x00	; 0
     2f4:	20 00       	.word	0x0020	; ????
     2f6:	50 50       	subi	r21, 0x00	; 0
     2f8:	50 00       	.word	0x0050	; ????
     2fa:	50 00       	.word	0x0050	; ????
     2fc:	70 d0       	rcall	.+224    	; 0x3de <__trampolines_end+0x15a>
     2fe:	d0 50       	subi	r29, 0x00	; 0
     300:	50 00       	.word	0x0050	; ????
     302:	30 60       	ori	r19, 0x00	; 0
     304:	50 30       	cpi	r21, 0x00	; 0
     306:	60 00       	.word	0x0060	; ????
     308:	00 00       	nop
     30a:	00 00       	nop
     30c:	70 00       	.word	0x0070	; ????
     30e:	20 70       	andi	r18, 0x00	; 0
     310:	20 70       	andi	r18, 0x00	; 0
     312:	20 70       	andi	r18, 0x00	; 0
     314:	20 70       	andi	r18, 0x00	; 0
     316:	20 20       	and	r2, r0
     318:	20 00       	.word	0x0020	; ????
     31a:	20 20       	and	r2, r0
     31c:	20 70       	andi	r18, 0x00	; 0
     31e:	20 00       	.word	0x0020	; ????
     320:	00 20       	and	r0, r0
     322:	f0 20       	and	r15, r0
     324:	00 00       	nop
     326:	00 40       	sbci	r16, 0x00	; 0
     328:	f0 40       	sbci	r31, 0x00	; 0
     32a:	00 00       	nop
     32c:	00 00       	nop
     32e:	40 70       	andi	r20, 0x00	; 0
     330:	00 00       	nop
     332:	00 50       	subi	r16, 0x00	; 0
     334:	70 50       	subi	r23, 0x00	; 0
     336:	00 00       	nop
     338:	00 20       	and	r0, r0
     33a:	70 70       	andi	r23, 0x00	; 0
     33c:	00 00       	nop
     33e:	00 70       	andi	r16, 0x00	; 0
     340:	70 20       	and	r7, r0
	...
     34a:	20 20       	and	r2, r0
     34c:	20 00       	.word	0x0020	; ????
     34e:	20 00       	.word	0x0020	; ????
     350:	50 50       	subi	r21, 0x00	; 0
     352:	00 00       	nop
     354:	00 00       	nop
     356:	50 70       	andi	r21, 0x00	; 0
     358:	50 70       	andi	r21, 0x00	; 0
     35a:	50 00       	.word	0x0050	; ????
     35c:	20 30       	cpi	r18, 0x00	; 0
     35e:	60 30       	cpi	r22, 0x00	; 0
     360:	60 20       	and	r6, r0
     362:	40 10       	cpse	r4, r0
     364:	20 40       	sbci	r18, 0x00	; 0
     366:	10 00       	.word	0x0010	; ????
     368:	20 50       	subi	r18, 0x00	; 0
     36a:	30 50       	subi	r19, 0x00	; 0
     36c:	70 00       	.word	0x0070	; ????
     36e:	60 40       	sbci	r22, 0x00	; 0
     370:	00 00       	nop
     372:	00 00       	nop
     374:	20 40       	sbci	r18, 0x00	; 0
     376:	40 40       	sbci	r20, 0x00	; 0
     378:	20 00       	.word	0x0020	; ????
     37a:	40 20       	and	r4, r0
     37c:	20 20       	and	r2, r0
     37e:	40 00       	.word	0x0040	; ????
     380:	50 20       	and	r5, r0
     382:	70 20       	and	r7, r0
     384:	50 00       	.word	0x0050	; ????
     386:	00 20       	and	r0, r0
     388:	70 20       	and	r7, r0
     38a:	00 00       	nop
     38c:	00 00       	nop
     38e:	00 00       	nop
     390:	60 40       	sbci	r22, 0x00	; 0
     392:	00 00       	nop
     394:	70 00       	.word	0x0070	; ????
     396:	00 00       	nop
     398:	00 00       	nop
     39a:	00 00       	nop
     39c:	20 00       	.word	0x0020	; ????
     39e:	10 10       	cpse	r1, r0
     3a0:	20 40       	sbci	r18, 0x00	; 0
     3a2:	40 00       	.word	0x0040	; ????
     3a4:	20 50       	subi	r18, 0x00	; 0
     3a6:	50 50       	subi	r21, 0x00	; 0
     3a8:	20 00       	.word	0x0020	; ????
     3aa:	20 60       	ori	r18, 0x00	; 0
     3ac:	20 20       	and	r2, r0
     3ae:	70 00       	.word	0x0070	; ????
     3b0:	60 10       	cpse	r6, r0
     3b2:	20 40       	sbci	r18, 0x00	; 0
     3b4:	70 00       	.word	0x0070	; ????
     3b6:	60 10       	cpse	r6, r0
     3b8:	20 10       	cpse	r2, r0
     3ba:	60 00       	.word	0x0060	; ????
     3bc:	10 50       	subi	r17, 0x00	; 0
     3be:	70 10       	cpse	r7, r0
     3c0:	10 00       	.word	0x0010	; ????
     3c2:	70 40       	sbci	r23, 0x00	; 0
     3c4:	60 10       	cpse	r6, r0
     3c6:	60 00       	.word	0x0060	; ????
     3c8:	20 40       	sbci	r18, 0x00	; 0
     3ca:	60 50       	subi	r22, 0x00	; 0
     3cc:	20 00       	.word	0x0020	; ????
     3ce:	70 10       	cpse	r7, r0
     3d0:	30 20       	and	r3, r0
     3d2:	20 00       	.word	0x0020	; ????
     3d4:	20 50       	subi	r18, 0x00	; 0
     3d6:	20 50       	subi	r18, 0x00	; 0
     3d8:	20 00       	.word	0x0020	; ????
     3da:	20 50       	subi	r18, 0x00	; 0
     3dc:	30 10       	cpse	r3, r0
     3de:	20 00       	.word	0x0020	; ????
     3e0:	00 00       	nop
     3e2:	20 00       	.word	0x0020	; ????
     3e4:	20 00       	.word	0x0020	; ????
     3e6:	00 00       	nop
     3e8:	20 00       	.word	0x0020	; ????
     3ea:	60 40       	sbci	r22, 0x00	; 0
     3ec:	10 20       	and	r1, r0
     3ee:	40 20       	and	r4, r0
     3f0:	10 00       	.word	0x0010	; ????
     3f2:	00 00       	nop
     3f4:	70 00       	.word	0x0070	; ????
     3f6:	70 00       	.word	0x0070	; ????
     3f8:	40 20       	and	r4, r0
     3fa:	10 20       	and	r1, r0
     3fc:	40 00       	.word	0x0040	; ????
     3fe:	60 10       	cpse	r6, r0
     400:	20 00       	.word	0x0020	; ????
     402:	20 00       	.word	0x0020	; ????
     404:	70 50       	subi	r23, 0x00	; 0
     406:	50 40       	sbci	r21, 0x00	; 0
     408:	70 00       	.word	0x0070	; ????
     40a:	20 50       	subi	r18, 0x00	; 0
     40c:	70 50       	subi	r23, 0x00	; 0
     40e:	50 00       	.word	0x0050	; ????
     410:	60 50       	subi	r22, 0x00	; 0
     412:	60 50       	subi	r22, 0x00	; 0
     414:	60 00       	.word	0x0060	; ????
     416:	30 40       	sbci	r19, 0x00	; 0
     418:	40 40       	sbci	r20, 0x00	; 0
     41a:	30 00       	.word	0x0030	; ????
     41c:	60 50       	subi	r22, 0x00	; 0
     41e:	50 50       	subi	r21, 0x00	; 0
     420:	60 00       	.word	0x0060	; ????
     422:	70 40       	sbci	r23, 0x00	; 0
     424:	60 40       	sbci	r22, 0x00	; 0
     426:	70 00       	.word	0x0070	; ????
     428:	70 40       	sbci	r23, 0x00	; 0
     42a:	60 40       	sbci	r22, 0x00	; 0
     42c:	40 00       	.word	0x0040	; ????
     42e:	30 40       	sbci	r19, 0x00	; 0
     430:	50 50       	subi	r21, 0x00	; 0
     432:	30 00       	.word	0x0030	; ????
     434:	50 50       	subi	r21, 0x00	; 0
     436:	70 50       	subi	r23, 0x00	; 0
     438:	50 00       	.word	0x0050	; ????
     43a:	70 20       	and	r7, r0
     43c:	20 20       	and	r2, r0
     43e:	70 00       	.word	0x0070	; ????
     440:	10 10       	cpse	r1, r0
     442:	10 50       	subi	r17, 0x00	; 0
     444:	20 00       	.word	0x0020	; ????
     446:	50 50       	subi	r21, 0x00	; 0
     448:	60 50       	subi	r22, 0x00	; 0
     44a:	50 00       	.word	0x0050	; ????
     44c:	40 40       	sbci	r20, 0x00	; 0
     44e:	40 40       	sbci	r20, 0x00	; 0
     450:	70 00       	.word	0x0070	; ????
     452:	50 70       	andi	r21, 0x00	; 0
     454:	70 50       	subi	r23, 0x00	; 0
     456:	50 00       	.word	0x0050	; ????
     458:	60 50       	subi	r22, 0x00	; 0
     45a:	50 50       	subi	r21, 0x00	; 0
     45c:	50 00       	.word	0x0050	; ????
     45e:	70 50       	subi	r23, 0x00	; 0
     460:	50 50       	subi	r21, 0x00	; 0
     462:	70 00       	.word	0x0070	; ????
     464:	60 50       	subi	r22, 0x00	; 0
     466:	60 40       	sbci	r22, 0x00	; 0
     468:	40 00       	.word	0x0040	; ????
     46a:	20 50       	subi	r18, 0x00	; 0
     46c:	50 70       	andi	r21, 0x00	; 0
     46e:	30 00       	.word	0x0030	; ????
     470:	60 50       	subi	r22, 0x00	; 0
     472:	60 50       	subi	r22, 0x00	; 0
     474:	50 00       	.word	0x0050	; ????
     476:	30 40       	sbci	r19, 0x00	; 0
     478:	70 10       	cpse	r7, r0
     47a:	60 00       	.word	0x0060	; ????
     47c:	70 20       	and	r7, r0
     47e:	20 20       	and	r2, r0
     480:	20 00       	.word	0x0020	; ????
     482:	50 50       	subi	r21, 0x00	; 0
     484:	50 50       	subi	r21, 0x00	; 0
     486:	70 00       	.word	0x0070	; ????
     488:	50 50       	subi	r21, 0x00	; 0
     48a:	50 50       	subi	r21, 0x00	; 0
     48c:	20 00       	.word	0x0020	; ????
     48e:	50 50       	subi	r21, 0x00	; 0
     490:	70 70       	andi	r23, 0x00	; 0
     492:	50 00       	.word	0x0050	; ????
     494:	50 50       	subi	r21, 0x00	; 0
     496:	20 50       	subi	r18, 0x00	; 0
     498:	50 00       	.word	0x0050	; ????
     49a:	50 50       	subi	r21, 0x00	; 0
     49c:	20 20       	and	r2, r0
     49e:	20 00       	.word	0x0020	; ????
     4a0:	70 10       	cpse	r7, r0
     4a2:	20 40       	sbci	r18, 0x00	; 0
     4a4:	70 00       	.word	0x0070	; ????
     4a6:	60 40       	sbci	r22, 0x00	; 0
     4a8:	40 40       	sbci	r20, 0x00	; 0
     4aa:	60 00       	.word	0x0060	; ????
     4ac:	40 40       	sbci	r20, 0x00	; 0
     4ae:	20 10       	cpse	r2, r0
     4b0:	10 00       	.word	0x0010	; ????
     4b2:	60 20       	and	r6, r0
     4b4:	20 20       	and	r2, r0
     4b6:	60 00       	.word	0x0060	; ????
     4b8:	20 50       	subi	r18, 0x00	; 0
	...
     4c2:	00 f0       	brcs	.+0      	; 0x4c4 <__trampolines_end+0x240>
     4c4:	60 20       	and	r6, r0
     4c6:	00 00       	nop
     4c8:	00 00       	nop
     4ca:	00 00       	nop
     4cc:	30 50       	subi	r19, 0x00	; 0
     4ce:	70 00       	.word	0x0070	; ????
     4d0:	40 40       	sbci	r20, 0x00	; 0
     4d2:	60 50       	subi	r22, 0x00	; 0
     4d4:	60 00       	.word	0x0060	; ????
     4d6:	00 00       	nop
     4d8:	30 40       	sbci	r19, 0x00	; 0
     4da:	30 00       	.word	0x0030	; ????
     4dc:	10 10       	cpse	r1, r0
     4de:	30 50       	subi	r19, 0x00	; 0
     4e0:	30 00       	.word	0x0030	; ????
     4e2:	00 00       	nop
     4e4:	70 60       	ori	r23, 0x00	; 0
     4e6:	30 00       	.word	0x0030	; ????
     4e8:	10 20       	and	r1, r0
     4ea:	70 20       	and	r7, r0
     4ec:	20 00       	.word	0x0020	; ????
     4ee:	00 00       	nop
     4f0:	70 50       	subi	r23, 0x00	; 0
     4f2:	10 70       	andi	r17, 0x00	; 0
     4f4:	40 40       	sbci	r20, 0x00	; 0
     4f6:	60 50       	subi	r22, 0x00	; 0
     4f8:	50 00       	.word	0x0050	; ????
     4fa:	20 00       	.word	0x0020	; ????
     4fc:	20 20       	and	r2, r0
     4fe:	20 00       	.word	0x0020	; ????
     500:	20 00       	.word	0x0020	; ????
     502:	20 20       	and	r2, r0
     504:	20 60       	ori	r18, 0x00	; 0
     506:	40 40       	sbci	r20, 0x00	; 0
     508:	50 60       	ori	r21, 0x00	; 0
     50a:	50 00       	.word	0x0050	; ????
     50c:	20 20       	and	r2, r0
     50e:	20 20       	and	r2, r0
     510:	20 00       	.word	0x0020	; ????
     512:	00 00       	nop
     514:	70 70       	andi	r23, 0x00	; 0
     516:	50 00       	.word	0x0050	; ????
     518:	00 00       	nop
     51a:	60 50       	subi	r22, 0x00	; 0
     51c:	50 00       	.word	0x0050	; ????
     51e:	00 00       	nop
     520:	20 50       	subi	r18, 0x00	; 0
     522:	20 00       	.word	0x0020	; ????
     524:	00 00       	nop
     526:	60 50       	subi	r22, 0x00	; 0
     528:	60 40       	sbci	r22, 0x00	; 0
     52a:	00 00       	nop
     52c:	30 50       	subi	r19, 0x00	; 0
     52e:	30 10       	cpse	r3, r0
     530:	00 00       	nop
     532:	60 40       	sbci	r22, 0x00	; 0
     534:	40 00       	.word	0x0040	; ????
     536:	00 00       	nop
     538:	30 20       	and	r3, r0
     53a:	60 00       	.word	0x0060	; ????
     53c:	00 20       	and	r0, r0
     53e:	70 20       	and	r7, r0
     540:	30 00       	.word	0x0030	; ????
     542:	00 00       	nop
     544:	50 50       	subi	r21, 0x00	; 0
     546:	70 00       	.word	0x0070	; ????
     548:	00 00       	nop
     54a:	50 50       	subi	r21, 0x00	; 0
     54c:	20 00       	.word	0x0020	; ????
     54e:	00 00       	nop
     550:	50 70       	andi	r21, 0x00	; 0
     552:	70 00       	.word	0x0070	; ????
     554:	00 00       	nop
     556:	50 20       	and	r5, r0
     558:	50 00       	.word	0x0050	; ????
     55a:	00 00       	nop
     55c:	50 50       	subi	r21, 0x00	; 0
     55e:	20 40       	sbci	r18, 0x00	; 0
     560:	00 00       	nop
     562:	60 20       	and	r6, r0
     564:	30 00       	.word	0x0030	; ????
     566:	30 20       	and	r3, r0
     568:	60 20       	and	r6, r0
     56a:	30 00       	.word	0x0030	; ????
     56c:	20 20       	and	r2, r0
     56e:	20 20       	and	r2, r0
     570:	20 00       	.word	0x0020	; ????
     572:	60 20       	and	r6, r0
     574:	30 20       	and	r3, r0
     576:	60 00       	.word	0x0060	; ????
     578:	50 a0       	ldd	r5, Z+32	; 0x20
     57a:	00 00       	nop
     57c:	00 00       	nop
     57e:	00 20       	and	r0, r0
     580:	50 70       	andi	r21, 0x00	; 0
     582:	00 00       	nop
     584:	30 40       	sbci	r19, 0x00	; 0
     586:	40 70       	andi	r20, 0x00	; 0
     588:	20 40       	sbci	r18, 0x00	; 0
     58a:	50 00       	.word	0x0050	; ????
     58c:	50 50       	subi	r21, 0x00	; 0
     58e:	30 00       	.word	0x0030	; ????
     590:	10 20       	and	r1, r0
     592:	70 60       	ori	r23, 0x00	; 0
     594:	30 00       	.word	0x0030	; ????
     596:	20 50       	subi	r18, 0x00	; 0
     598:	30 50       	subi	r19, 0x00	; 0
     59a:	70 00       	.word	0x0070	; ????
     59c:	50 00       	.word	0x0050	; ????
     59e:	30 50       	subi	r19, 0x00	; 0
     5a0:	70 00       	.word	0x0070	; ????
     5a2:	40 20       	and	r4, r0
     5a4:	30 50       	subi	r19, 0x00	; 0
     5a6:	70 00       	.word	0x0070	; ????
     5a8:	20 00       	.word	0x0020	; ????
     5aa:	30 50       	subi	r19, 0x00	; 0
     5ac:	70 00       	.word	0x0070	; ????
     5ae:	00 70       	andi	r16, 0x00	; 0
     5b0:	40 70       	andi	r20, 0x00	; 0
     5b2:	20 60       	ori	r18, 0x00	; 0
     5b4:	20 50       	subi	r18, 0x00	; 0
     5b6:	70 60       	ori	r23, 0x00	; 0
     5b8:	30 00       	.word	0x0030	; ????
     5ba:	50 00       	.word	0x0050	; ????
     5bc:	70 60       	ori	r23, 0x00	; 0
     5be:	30 00       	.word	0x0030	; ????
     5c0:	40 20       	and	r4, r0
     5c2:	70 60       	ori	r23, 0x00	; 0
     5c4:	30 00       	.word	0x0030	; ????
     5c6:	50 00       	.word	0x0050	; ????
     5c8:	20 20       	and	r2, r0
     5ca:	20 00       	.word	0x0020	; ????
     5cc:	20 50       	subi	r18, 0x00	; 0
     5ce:	00 20       	and	r0, r0
     5d0:	20 00       	.word	0x0020	; ????
     5d2:	40 20       	and	r4, r0
     5d4:	00 20       	and	r0, r0
     5d6:	20 00       	.word	0x0020	; ????
     5d8:	50 20       	and	r5, r0
     5da:	50 70       	andi	r21, 0x00	; 0
     5dc:	50 00       	.word	0x0050	; ????
     5de:	20 20       	and	r2, r0
     5e0:	50 70       	andi	r21, 0x00	; 0
     5e2:	50 00       	.word	0x0050	; ????
     5e4:	10 20       	and	r1, r0
     5e6:	70 60       	ori	r23, 0x00	; 0
     5e8:	70 00       	.word	0x0070	; ????
     5ea:	00 00       	nop
     5ec:	30 70       	andi	r19, 0x00	; 0
     5ee:	60 00       	.word	0x0060	; ????
     5f0:	30 60       	ori	r19, 0x00	; 0
     5f2:	70 60       	ori	r23, 0x00	; 0
     5f4:	70 00       	.word	0x0070	; ????
     5f6:	20 50       	subi	r18, 0x00	; 0
     5f8:	20 50       	subi	r18, 0x00	; 0
     5fa:	20 00       	.word	0x0020	; ????
     5fc:	50 00       	.word	0x0050	; ????
     5fe:	20 50       	subi	r18, 0x00	; 0
     600:	20 00       	.word	0x0020	; ????
     602:	40 20       	and	r4, r0
     604:	20 50       	subi	r18, 0x00	; 0
     606:	20 00       	.word	0x0020	; ????
     608:	20 50       	subi	r18, 0x00	; 0
     60a:	00 50       	subi	r16, 0x00	; 0
     60c:	70 00       	.word	0x0070	; ????
     60e:	40 20       	and	r4, r0
     610:	50 50       	subi	r21, 0x00	; 0
     612:	70 00       	.word	0x0070	; ????
     614:	50 00       	.word	0x0050	; ????
     616:	50 50       	subi	r21, 0x00	; 0
     618:	20 40       	sbci	r18, 0x00	; 0
     61a:	50 20       	and	r5, r0
     61c:	50 50       	subi	r21, 0x00	; 0
     61e:	20 00       	.word	0x0020	; ????
     620:	50 00       	.word	0x0050	; ????
     622:	50 50       	subi	r21, 0x00	; 0
     624:	70 00       	.word	0x0070	; ????
     626:	20 70       	andi	r18, 0x00	; 0
     628:	40 70       	andi	r20, 0x00	; 0
     62a:	20 00       	.word	0x0020	; ????
     62c:	10 20       	and	r1, r0
     62e:	70 20       	and	r7, r0
     630:	70 00       	.word	0x0070	; ????
     632:	50 70       	andi	r21, 0x00	; 0
     634:	20 70       	andi	r18, 0x00	; 0
     636:	20 00       	.word	0x0020	; ????
     638:	00 60       	ori	r16, 0x00	; 0
     63a:	60 50       	subi	r22, 0x00	; 0
     63c:	50 00       	.word	0x0050	; ????
     63e:	30 20       	and	r3, r0
     640:	30 20       	and	r3, r0
     642:	60 00       	.word	0x0060	; ????
     644:	10 20       	and	r1, r0
     646:	30 50       	subi	r19, 0x00	; 0
     648:	70 00       	.word	0x0070	; ????
     64a:	10 20       	and	r1, r0
     64c:	00 20       	and	r0, r0
     64e:	20 00       	.word	0x0020	; ????
     650:	10 20       	and	r1, r0
     652:	70 50       	subi	r23, 0x00	; 0
     654:	70 00       	.word	0x0070	; ????
     656:	10 20       	and	r1, r0
     658:	00 50       	subi	r16, 0x00	; 0
     65a:	70 00       	.word	0x0070	; ????
     65c:	70 00       	.word	0x0070	; ????
     65e:	70 50       	subi	r23, 0x00	; 0
     660:	50 00       	.word	0x0050	; ????
     662:	70 00       	.word	0x0070	; ????
     664:	50 70       	andi	r21, 0x00	; 0
     666:	50 00       	.word	0x0050	; ????
     668:	30 50       	subi	r19, 0x00	; 0
     66a:	70 00       	.word	0x0070	; ????
     66c:	70 00       	.word	0x0070	; ????
     66e:	20 50       	subi	r18, 0x00	; 0
     670:	20 00       	.word	0x0020	; ????
     672:	70 00       	.word	0x0070	; ????
     674:	20 00       	.word	0x0020	; ????
     676:	20 40       	sbci	r18, 0x00	; 0
     678:	30 00       	.word	0x0030	; ????
     67a:	00 70       	andi	r16, 0x00	; 0
     67c:	40 40       	sbci	r20, 0x00	; 0
     67e:	00 00       	nop
     680:	00 e0       	ldi	r16, 0x00	; 0
     682:	20 20       	and	r2, r0
     684:	00 00       	nop
     686:	40 50       	subi	r20, 0x00	; 0
     688:	20 50       	subi	r18, 0x00	; 0
     68a:	30 00       	.word	0x0030	; ????
     68c:	40 50       	subi	r20, 0x00	; 0
     68e:	20 70       	andi	r18, 0x00	; 0
     690:	10 00       	.word	0x0010	; ????
     692:	20 00       	.word	0x0020	; ????
     694:	20 20       	and	r2, r0
     696:	20 00       	.word	0x0020	; ????
     698:	00 50       	subi	r16, 0x00	; 0
     69a:	a0 50       	subi	r26, 0x00	; 0
     69c:	00 00       	nop
     69e:	00 a0       	ldd	r0, Z+32	; 0x20
     6a0:	50 a0       	ldd	r5, Z+32	; 0x20
     6a2:	00 00       	nop
     6a4:	40 10       	cpse	r4, r0
     6a6:	40 10       	cpse	r4, r0
     6a8:	40 10       	cpse	r4, r0
     6aa:	50 a0       	ldd	r5, Z+32	; 0x20
     6ac:	50 a0       	ldd	r5, Z+32	; 0x20
     6ae:	50 a0       	ldd	r5, Z+32	; 0x20
     6b0:	b0 e0       	ldi	r27, 0x00	; 0
     6b2:	b0 e0       	ldi	r27, 0x00	; 0
     6b4:	b0 e0       	ldi	r27, 0x00	; 0
     6b6:	20 20       	and	r2, r0
     6b8:	20 20       	and	r2, r0
     6ba:	20 20       	and	r2, r0
     6bc:	20 20       	and	r2, r0
     6be:	e0 20       	and	r14, r0
     6c0:	20 20       	and	r2, r0
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	20 20       	and	r2, r0
     6c8:	50 50       	subi	r21, 0x00	; 0
     6ca:	d0 50       	subi	r29, 0x00	; 0
     6cc:	50 50       	subi	r21, 0x00	; 0
     6ce:	00 00       	nop
     6d0:	f0 50       	subi	r31, 0x00	; 0
     6d2:	50 50       	subi	r21, 0x00	; 0
     6d4:	00 e0       	ldi	r16, 0x00	; 0
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	20 20       	and	r2, r0
     6da:	50 d0       	rcall	.+160    	; 0x77c <__trampolines_end+0x4f8>
     6dc:	10 d0       	rcall	.+32     	; 0x6fe <__trampolines_end+0x47a>
     6de:	50 50       	subi	r21, 0x00	; 0
     6e0:	50 50       	subi	r21, 0x00	; 0
     6e2:	50 50       	subi	r21, 0x00	; 0
     6e4:	50 50       	subi	r21, 0x00	; 0
     6e6:	00 f0       	brcs	.+0      	; 0x6e8 <__trampolines_end+0x464>
     6e8:	10 d0       	rcall	.+32     	; 0x70a <__trampolines_end+0x486>
     6ea:	50 50       	subi	r21, 0x00	; 0
     6ec:	50 d0       	rcall	.+160    	; 0x78e <__trampolines_end+0x50a>
     6ee:	10 f0       	brcs	.+4      	; 0x6f4 <__trampolines_end+0x470>
     6f0:	00 00       	nop
     6f2:	50 50       	subi	r21, 0x00	; 0
     6f4:	f0 00       	.word	0x00f0	; ????
     6f6:	00 00       	nop
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	20 e0       	ldi	r18, 0x00	; 0
     6fc:	00 00       	nop
     6fe:	00 00       	nop
     700:	e0 20       	and	r14, r0
     702:	20 20       	and	r2, r0
     704:	20 20       	and	r2, r0
     706:	30 00       	.word	0x0030	; ????
     708:	00 00       	nop
     70a:	20 20       	and	r2, r0
     70c:	f0 00       	.word	0x00f0	; ????
     70e:	00 00       	nop
     710:	00 00       	nop
     712:	f0 20       	and	r15, r0
     714:	20 20       	and	r2, r0
     716:	20 20       	and	r2, r0
     718:	30 20       	and	r3, r0
     71a:	20 20       	and	r2, r0
     71c:	00 00       	nop
     71e:	f0 00       	.word	0x00f0	; ????
     720:	00 00       	nop
     722:	20 20       	and	r2, r0
     724:	f0 20       	and	r15, r0
     726:	20 20       	and	r2, r0
     728:	20 30       	cpi	r18, 0x00	; 0
     72a:	20 30       	cpi	r18, 0x00	; 0
     72c:	20 20       	and	r2, r0
     72e:	50 50       	subi	r21, 0x00	; 0
     730:	50 50       	subi	r21, 0x00	; 0
     732:	50 50       	subi	r21, 0x00	; 0
     734:	50 50       	subi	r21, 0x00	; 0
     736:	40 70       	andi	r20, 0x00	; 0
     738:	00 00       	nop
     73a:	00 70       	andi	r16, 0x00	; 0
     73c:	40 50       	subi	r20, 0x00	; 0
     73e:	50 50       	subi	r21, 0x00	; 0
     740:	50 d0       	rcall	.+160    	; 0x7e2 <__trampolines_end+0x55e>
     742:	00 f0       	brcs	.+0      	; 0x744 <__trampolines_end+0x4c0>
     744:	00 00       	nop
     746:	00 f0       	brcs	.+0      	; 0x748 <__trampolines_end+0x4c4>
     748:	00 d0       	rcall	.+0      	; 0x74a <__trampolines_end+0x4c6>
     74a:	50 50       	subi	r21, 0x00	; 0
     74c:	50 50       	subi	r21, 0x00	; 0
     74e:	40 50       	subi	r20, 0x00	; 0
     750:	50 50       	subi	r21, 0x00	; 0
     752:	00 f0       	brcs	.+0      	; 0x754 <__trampolines_end+0x4d0>
     754:	00 f0       	brcs	.+0      	; 0x756 <__trampolines_end+0x4d2>
     756:	00 00       	nop
     758:	50 d0       	rcall	.+160    	; 0x7fa <__trampolines_end+0x576>
     75a:	00 d0       	rcall	.+0      	; 0x75c <__trampolines_end+0x4d8>
     75c:	50 50       	subi	r21, 0x00	; 0
     75e:	20 f0       	brcs	.+8      	; 0x768 <__trampolines_end+0x4e4>
     760:	00 f0       	brcs	.+0      	; 0x762 <__trampolines_end+0x4de>
     762:	00 00       	nop
     764:	50 50       	subi	r21, 0x00	; 0
     766:	f0 00       	.word	0x00f0	; ????
     768:	00 00       	nop
     76a:	00 f0       	brcs	.+0      	; 0x76c <__trampolines_end+0x4e8>
     76c:	00 f0       	brcs	.+0      	; 0x76e <__trampolines_end+0x4ea>
     76e:	20 20       	and	r2, r0
     770:	00 00       	nop
     772:	f0 50       	subi	r31, 0x00	; 0
     774:	50 50       	subi	r21, 0x00	; 0
     776:	50 50       	subi	r21, 0x00	; 0
     778:	70 00       	.word	0x0070	; ????
     77a:	00 00       	nop
     77c:	20 30       	cpi	r18, 0x00	; 0
     77e:	20 30       	cpi	r18, 0x00	; 0
     780:	00 00       	nop
     782:	00 30       	cpi	r16, 0x00	; 0
     784:	20 30       	cpi	r18, 0x00	; 0
     786:	20 20       	and	r2, r0
     788:	00 00       	nop
     78a:	70 50       	subi	r23, 0x00	; 0
     78c:	50 50       	subi	r21, 0x00	; 0
     78e:	50 50       	subi	r21, 0x00	; 0
     790:	d0 50       	subi	r29, 0x00	; 0
     792:	50 50       	subi	r21, 0x00	; 0
     794:	20 f0       	brcs	.+8      	; 0x79e <__trampolines_end+0x51a>
     796:	00 f0       	brcs	.+0      	; 0x798 <__trampolines_end+0x514>
     798:	20 20       	and	r2, r0
     79a:	20 20       	and	r2, r0
     79c:	e0 00       	.word	0x00e0	; ????
     79e:	00 00       	nop
     7a0:	00 00       	nop
     7a2:	30 20       	and	r3, r0
     7a4:	20 20       	and	r2, r0
     7a6:	f0 f0       	brcs	.+60     	; 0x7e4 <__trampolines_end+0x560>
     7a8:	f0 f0       	brcs	.+60     	; 0x7e6 <__trampolines_end+0x562>
     7aa:	f0 f0       	brcs	.+60     	; 0x7e8 <__trampolines_end+0x564>
     7ac:	00 00       	nop
     7ae:	00 f0       	brcs	.+0      	; 0x7b0 <__trampolines_end+0x52c>
     7b0:	f0 f0       	brcs	.+60     	; 0x7ee <__trampolines_end+0x56a>
     7b2:	c0 c0       	rjmp	.+384    	; 0x934 <font_5x7+0xb0>
     7b4:	c0 c0       	rjmp	.+384    	; 0x936 <font_5x7+0xb2>
     7b6:	c0 c0       	rjmp	.+384    	; 0x938 <font_5x7+0xb4>
     7b8:	30 30       	cpi	r19, 0x00	; 0
     7ba:	30 30       	cpi	r19, 0x00	; 0
     7bc:	30 30       	cpi	r19, 0x00	; 0
     7be:	f0 f0       	brcs	.+60     	; 0x7fc <__trampolines_end+0x578>
     7c0:	f0 00       	.word	0x00f0	; ????
     7c2:	00 00       	nop
     7c4:	00 00       	nop
     7c6:	70 60       	ori	r23, 0x00	; 0
     7c8:	70 00       	.word	0x0070	; ????
     7ca:	20 50       	subi	r18, 0x00	; 0
     7cc:	60 50       	subi	r22, 0x00	; 0
     7ce:	60 40       	sbci	r22, 0x00	; 0
     7d0:	70 50       	subi	r23, 0x00	; 0
     7d2:	40 40       	sbci	r20, 0x00	; 0
     7d4:	40 00       	.word	0x0040	; ????
     7d6:	70 50       	subi	r23, 0x00	; 0
     7d8:	50 50       	subi	r21, 0x00	; 0
     7da:	50 00       	.word	0x0050	; ????
     7dc:	70 40       	sbci	r23, 0x00	; 0
     7de:	20 40       	sbci	r18, 0x00	; 0
     7e0:	70 00       	.word	0x0070	; ????
     7e2:	00 00       	nop
     7e4:	30 50       	subi	r19, 0x00	; 0
     7e6:	20 00       	.word	0x0020	; ????
     7e8:	00 00       	nop
     7ea:	50 50       	subi	r21, 0x00	; 0
     7ec:	70 40       	sbci	r23, 0x00	; 0
     7ee:	00 10       	cpse	r0, r0
     7f0:	60 20       	and	r6, r0
     7f2:	20 00       	.word	0x0020	; ????
     7f4:	70 20       	and	r7, r0
     7f6:	50 20       	and	r5, r0
     7f8:	70 00       	.word	0x0070	; ????
     7fa:	20 50       	subi	r18, 0x00	; 0
     7fc:	70 50       	subi	r23, 0x00	; 0
     7fe:	20 00       	.word	0x0020	; ????
     800:	00 20       	and	r0, r0
     802:	50 50       	subi	r21, 0x00	; 0
     804:	50 00       	.word	0x0050	; ????
     806:	30 40       	sbci	r19, 0x00	; 0
     808:	20 50       	subi	r18, 0x00	; 0
     80a:	20 00       	.word	0x0020	; ????
     80c:	00 00       	nop
     80e:	70 50       	subi	r23, 0x00	; 0
     810:	70 00       	.word	0x0070	; ????
     812:	20 70       	andi	r18, 0x00	; 0
     814:	50 70       	andi	r21, 0x00	; 0
     816:	20 00       	.word	0x0020	; ????
     818:	30 40       	sbci	r19, 0x00	; 0
     81a:	70 40       	sbci	r23, 0x00	; 0
     81c:	30 00       	.word	0x0030	; ????
     81e:	20 50       	subi	r18, 0x00	; 0
     820:	50 50       	subi	r21, 0x00	; 0
     822:	50 00       	.word	0x0050	; ????
     824:	70 00       	.word	0x0070	; ????
     826:	70 00       	.word	0x0070	; ????
     828:	70 00       	.word	0x0070	; ????
     82a:	20 70       	andi	r18, 0x00	; 0
     82c:	20 00       	.word	0x0020	; ????
     82e:	70 00       	.word	0x0070	; ????
     830:	60 10       	cpse	r6, r0
     832:	60 00       	.word	0x0060	; ????
     834:	70 00       	.word	0x0070	; ????
     836:	30 40       	sbci	r19, 0x00	; 0
     838:	30 00       	.word	0x0030	; ????
     83a:	70 00       	.word	0x0070	; ????
     83c:	00 10       	cpse	r0, r0
     83e:	20 20       	and	r2, r0
     840:	20 20       	and	r2, r0
     842:	20 20       	and	r2, r0
     844:	20 20       	and	r2, r0
     846:	40 00       	.word	0x0040	; ????
     848:	20 00       	.word	0x0020	; ????
     84a:	70 00       	.word	0x0070	; ????
     84c:	20 00       	.word	0x0020	; ????
     84e:	00 50       	subi	r16, 0x00	; 0
     850:	a0 50       	subi	r26, 0x00	; 0
     852:	a0 00       	.word	0x00a0	; ????
     854:	20 50       	subi	r18, 0x00	; 0
     856:	20 00       	.word	0x0020	; ????
     858:	00 00       	nop
     85a:	00 20       	and	r0, r0
     85c:	70 20       	and	r7, r0
     85e:	00 00       	nop
     860:	00 00       	nop
     862:	20 00       	.word	0x0020	; ????
     864:	00 00       	nop
     866:	30 20       	and	r3, r0
     868:	20 60       	ori	r18, 0x00	; 0
     86a:	20 00       	.word	0x0020	; ????
     86c:	70 50       	subi	r23, 0x00	; 0
     86e:	50 00       	.word	0x0050	; ????
     870:	00 00       	nop
     872:	60 20       	and	r6, r0
     874:	40 60       	ori	r20, 0x00	; 0
     876:	00 00       	nop
     878:	00 00       	nop
     87a:	60 60       	ori	r22, 0x00	; 0
	...

00000884 <font_5x7>:
     884:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     894:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     8a4:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     8b4:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     8c4:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     8d4:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     8e4:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     8f4:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     904:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     914:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     924:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     934:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     944:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     954:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     964:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     974:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     984:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     994:	49 49 31 01 01 71 09 07 36 49 49 49 36 46 49 49     II1..q..6III6FII
     9a4:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     9b4:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     9c4:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     9d4:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     9e4:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     9f4:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     a04:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     a14:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     a24:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     a34:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     a44:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     a54:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     a64:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     a74:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     a84:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     a94:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     aa4:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     ab4:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     ac4:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     ad4:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     ae4:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     af4:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     b04:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     b14:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
     b24:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     b34:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     b44:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
     b54:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     b64:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
     b74:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
     b84:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
     b94:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     ba4:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     bb4:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     bc4:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     bd4:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     be4:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     bf4:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
     c04:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
     c14:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
     c24:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
     c34:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
     c44:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
     c54:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
     c64:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
     c74:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
     c84:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
     c94:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
     ca4:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
     cb4:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
     cc4:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
     cd4:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
     ce4:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
     cf4:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
     d04:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
     d14:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
     d24:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
     d34:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
     d44:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
     d54:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
     d64:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
     d74:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

00000d7f <IMG_SPEAKER_A>:
     d7f:	18 18 3c 42 a5 18                                   ..<B..

00000d85 <__c.2161>:
     d85:	6e 61 6e 00                                         nan.

00000d89 <__c.2159>:
     d89:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     d99:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     da9:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     db9:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     dc9:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     dd9:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     de9:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     df9:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     e09:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     e19:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     e29:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     e39:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     e49:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     e59:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     e69:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     e79:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000e87 <__c.2299>:
     e87:	63 64 69 6e 6f 70 73 75 78 58 5b 00 00              cdinopsuxX[..

00000e94 <_StackPaint>:
 *  the maximum stack usage of the running application.
 */
void _StackPaint(void) __attribute__((naked)) __attribute__((optimize("O3"))) __attribute__((section (".init1")));
void _StackPaint(void)
{
	uint32_t* fill_start = (uint32_t*)__ALIGN32_UPWARDS(&_end);
     e94:	e7 e5       	ldi	r30, 0x57	; 87
     e96:	fd e3       	ldi	r31, 0x3D	; 61
     e98:	e3 70       	andi	r30, 0x03	; 3
     e9a:	ff 27       	eor	r31, r31
     e9c:	e9 5a       	subi	r30, 0xA9	; 169
     e9e:	f2 4c       	sbci	r31, 0xC2	; 194
	uint32_t* fill_end   = (uint32_t*)__ALIGN32_DOWNWARDS(&__stack);
     ea0:	2f ef       	ldi	r18, 0xFF	; 255
     ea2:	3f e3       	ldi	r19, 0x3F	; 63
     ea4:	2c 7f       	andi	r18, 0xFC	; 252
	
	for (uint32_t* fill_pos = fill_start; fill_pos < fill_end; fill_pos++)
     ea6:	e2 17       	cp	r30, r18
     ea8:	f3 07       	cpc	r31, r19
     eaa:	58 f4       	brcc	.+22     	; 0xec2 <_StackPaint+0x2e>
		*fill_pos = __SWAP_ENDIAN32(0xDEADBEEF);
     eac:	8e ed       	ldi	r24, 0xDE	; 222
     eae:	9d ea       	ldi	r25, 0xAD	; 173
     eb0:	ae eb       	ldi	r26, 0xBE	; 190
     eb2:	bf ee       	ldi	r27, 0xEF	; 239
     eb4:	81 93       	st	Z+, r24
     eb6:	91 93       	st	Z+, r25
     eb8:	a1 93       	st	Z+, r26
     eba:	b1 93       	st	Z+, r27
void _StackPaint(void)
{
	uint32_t* fill_start = (uint32_t*)__ALIGN32_UPWARDS(&_end);
	uint32_t* fill_end   = (uint32_t*)__ALIGN32_DOWNWARDS(&__stack);
	
	for (uint32_t* fill_pos = fill_start; fill_pos < fill_end; fill_pos++)
     ebc:	e2 17       	cp	r30, r18
     ebe:	f3 07       	cpc	r31, r19
     ec0:	c8 f3       	brcs	.-14     	; 0xeb4 <_StackPaint+0x20>
     ec2:	11 24       	eor	r1, r1
     ec4:	1f be       	out	0x3f, r1	; 63
     ec6:	cf ef       	ldi	r28, 0xFF	; 255
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	df e3       	ldi	r29, 0x3F	; 63
     ecc:	de bf       	out	0x3e, r29	; 62
     ece:	00 e0       	ldi	r16, 0x00	; 0
     ed0:	0c bf       	out	0x3c, r16	; 60
     ed2:	18 be       	out	0x38, r1	; 56
     ed4:	19 be       	out	0x39, r1	; 57
     ed6:	1a be       	out	0x3a, r1	; 58
     ed8:	1b be       	out	0x3b, r1	; 59

00000eda <__do_copy_data>:
     eda:	1e e2       	ldi	r17, 0x2E	; 46
     edc:	a0 e0       	ldi	r26, 0x00	; 0
     ede:	b0 e2       	ldi	r27, 0x20	; 32
     ee0:	e4 ef       	ldi	r30, 0xF4	; 244
     ee2:	f3 ed       	ldi	r31, 0xD3	; 211
     ee4:	00 e0       	ldi	r16, 0x00	; 0
     ee6:	0b bf       	out	0x3b, r16	; 59
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <__do_copy_data+0x14>
     eea:	07 90       	elpm	r0, Z+
     eec:	0d 92       	st	X+, r0
     eee:	ac 35       	cpi	r26, 0x5C	; 92
     ef0:	b1 07       	cpc	r27, r17
     ef2:	d9 f7       	brne	.-10     	; 0xeea <__do_copy_data+0x10>
     ef4:	1b be       	out	0x3b, r1	; 59

00000ef6 <__do_clear_bss>:
     ef6:	2d e3       	ldi	r18, 0x3D	; 61
     ef8:	ac e5       	ldi	r26, 0x5C	; 92
     efa:	be e2       	ldi	r27, 0x2E	; 46
     efc:	01 c0       	rjmp	.+2      	; 0xf00 <.do_clear_bss_start>

00000efe <.do_clear_bss_loop>:
     efe:	1d 92       	st	X+, r1

00000f00 <.do_clear_bss_start>:
     f00:	a7 35       	cpi	r26, 0x57	; 87
     f02:	b2 07       	cpc	r27, r18
     f04:	e1 f7       	brne	.-8      	; 0xefe <.do_clear_bss_loop>
     f06:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <main>
     f0a:	0c 94 f8 69 	jmp	0xd3f0	; 0xd3f0 <_exit>

00000f0e <__bad_interrupt>:
     f0e:	78 c8       	rjmp	.-3856   	; 0x0 <__vectors>

00000f10 <adc_setup>:
void adc_setup(void) 
{	
	unsigned char samples = 16;
	
	//Disable power reduction for ADCA 
	PR.PRPA &= ~0x02;
     f10:	80 91 71 00 	lds	r24, 0x0071
     f14:	8d 7f       	andi	r24, 0xFD	; 253
     f16:	80 93 71 00 	sts	0x0071, r24

	return (char*)(s - begin);
}

static uint8_t read_signature_byte(uint16_t Address) {
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	80 93 ca 01 	sts	0x01CA, r24
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
     f20:	e0 e2       	ldi	r30, 0x20	; 32
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	e4 91       	lpm	r30, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     f26:	10 92 ca 01 	sts	0x01CA, r1
	
	ADCA.CALL = read_signature_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
     f2a:	e0 93 0c 02 	sts	0x020C, r30

	return (char*)(s - begin);
}

static uint8_t read_signature_byte(uint16_t Address) {
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     f2e:	80 93 ca 01 	sts	0x01CA, r24
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
     f32:	e1 e2       	ldi	r30, 0x21	; 33
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	e4 91       	lpm	r30, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     f38:	10 92 ca 01 	sts	0x01CA, r1
	ADCA.CALH = read_signature_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1) );
     f3c:	e0 93 0d 02 	sts	0x020D, r30

	ADCA.CH0.CTRL	 = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	80 93 20 02 	sts	0x0220, r24
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;
     f46:	10 92 21 02 	sts	0x0221, r1
	ADCA.CTRLB		 = ADC_RESOLUTION_12BIT_gc;
     f4a:	10 92 01 02 	sts	0x0201, r1
	ADCA.PRESCALER	 = ADC_PRESCALER_DIV256_gc;
     f4e:	96 e0       	ldi	r25, 0x06	; 6
     f50:	90 93 04 02 	sts	0x0204, r25
	ADCA.REFCTRL	 = ADC_REFSEL_INTVCC_gc;
     f54:	90 e1       	ldi	r25, 0x10	; 16
     f56:	90 93 02 02 	sts	0x0202, r25
	ADCA.EVCTRL		 = ADC_EVACT_NONE_gc;
     f5a:	10 92 03 02 	sts	0x0203, r1
	ADCA.INTFLAGS	 = ADC_CH0IF_bm;
     f5e:	80 93 06 02 	sts	0x0206, r24
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     f62:	10 92 22 02 	sts	0x0222, r1
	ADCA.CTRLA		 = ADC_ENABLE_bm;
     f66:	80 93 00 02 	sts	0x0200, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f6a:	8f ef       	ldi	r24, 0xFF	; 255
     f6c:	9c e7       	ldi	r25, 0x7C	; 124
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	f1 f7       	brne	.-4      	; 0xf6e <adc_setup+0x5e>
     f72:	00 c0       	rjmp	.+0      	; 0xf74 <adc_setup+0x64>
     f74:	00 00       	nop
     f76:	20 91 5e 2e 	lds	r18, 0x2E5E
     f7a:	30 91 5f 2e 	lds	r19, 0x2E5F
     f7e:	40 e1       	ldi	r20, 0x10	; 16
	_delay_ms(4);
	
	while (samples > 0) {
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
     f80:	51 e0       	ldi	r21, 0x01	; 1
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
	ADCA.CTRLA		 = ADC_ENABLE_bm;
	_delay_ms(4);
	
	while (samples > 0) {
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
     f82:	80 91 20 02 	lds	r24, 0x0220
     f86:	80 68       	ori	r24, 0x80	; 128
     f88:	80 93 20 02 	sts	0x0220, r24
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
     f8c:	80 91 23 02 	lds	r24, 0x0223
     f90:	80 ff       	sbrs	r24, 0
     f92:	fc cf       	rjmp	.-8      	; 0xf8c <adc_setup+0x7c>
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
     f94:	50 93 23 02 	sts	0x0223, r21
		offset += ADCA.CH0.RES;
     f98:	80 91 24 02 	lds	r24, 0x0224
     f9c:	90 91 25 02 	lds	r25, 0x0225
     fa0:	82 0f       	add	r24, r18
     fa2:	93 1f       	adc	r25, r19
     fa4:	41 50       	subi	r20, 0x01	; 1
	ADCA.INTFLAGS	 = ADC_CH0IF_bm;
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
	ADCA.CTRLA		 = ADC_ENABLE_bm;
	_delay_ms(4);
	
	while (samples > 0) {
     fa6:	11 f0       	breq	.+4      	; 0xfac <adc_setup+0x9c>
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
		offset += ADCA.CH0.RES;
     fa8:	9c 01       	movw	r18, r24
     faa:	eb cf       	rjmp	.-42     	; 0xf82 <adc_setup+0x72>
		samples--;
	}
	
	ADCA.CTRLA &= ~(ADC_ENABLE_bm);
     fac:	20 91 00 02 	lds	r18, 0x0200
     fb0:	2e 7f       	andi	r18, 0xFE	; 254
     fb2:	20 93 00 02 	sts	0x0200, r18
	offset >>= 4;
     fb6:	24 e0       	ldi	r18, 0x04	; 4
     fb8:	95 95       	asr	r25
     fba:	87 95       	ror	r24
     fbc:	2a 95       	dec	r18
     fbe:	e1 f7       	brne	.-8      	; 0xfb8 <adc_setup+0xa8>
     fc0:	80 93 5e 2e 	sts	0x2E5E, r24
     fc4:	90 93 5f 2e 	sts	0x2E5F, r25
	ADCA.CMP = 0x0000;
     fc8:	10 92 18 02 	sts	0x0218, r1
     fcc:	10 92 19 02 	sts	0x0219, r1
	ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	80 93 20 02 	sts	0x0220, r24
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;
     fd6:	10 92 21 02 	sts	0x0221, r1
	ADCA.EVCTRL	= ADC_SWEEP_0_gc | ADC_EVACT_NONE_gc;
     fda:	10 92 03 02 	sts	0x0203, r1
	ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
     fde:	10 92 22 02 	sts	0x0222, r1
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     fe2:	10 92 2a 02 	sts	0x022A, r1
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     fe6:	10 92 32 02 	sts	0x0232, r1
	ADCA.CH3.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     fea:	10 92 3a 02 	sts	0x023A, r1
	
	ADCA.CTRLA |= ADC_ENABLE_bm;
     fee:	80 91 00 02 	lds	r24, 0x0200
     ff2:	81 60       	ori	r24, 0x01	; 1
     ff4:	80 93 00 02 	sts	0x0200, r24
     ff8:	9f ef       	ldi	r25, 0xFF	; 255
     ffa:	29 ef       	ldi	r18, 0xF9	; 249
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	91 50       	subi	r25, 0x01	; 1
    1000:	20 40       	sbci	r18, 0x00	; 0
    1002:	80 40       	sbci	r24, 0x00	; 0
    1004:	e1 f7       	brne	.-8      	; 0xffe <adc_setup+0xee>
    1006:	00 c0       	rjmp	.+0      	; 0x1008 <adc_setup+0xf8>
    1008:	00 00       	nop
    100a:	08 95       	ret

0000100c <adc_disable>:
	_delay_ms(10);
}

void adc_disable(void) 
{	
	ADCA.CTRLA &= ~(ADC_ENABLE_bm);
    100c:	e0 e0       	ldi	r30, 0x00	; 0
    100e:	f2 e0       	ldi	r31, 0x02	; 2
    1010:	80 81       	ld	r24, Z
    1012:	8e 7f       	andi	r24, 0xFE	; 254
    1014:	80 83       	st	Z, r24
	
	//Enable power reduction for ADCA
	PR.PRPA |= 0x02;
    1016:	e0 e7       	ldi	r30, 0x70	; 112
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	81 81       	ldd	r24, Z+1	; 0x01
    101c:	82 60       	ori	r24, 0x02	; 2
    101e:	81 83       	std	Z+1, r24	; 0x01
    1020:	08 95       	ret

00001022 <adc_enable_current_measurement>:
	return 0;
}

void adc_enable_current_measurement(void) 
{	
	PORTA.DIRSET = CURRENT_MEASUREMENT_ENABLE;
    1022:	e0 e0       	ldi	r30, 0x00	; 0
    1024:	f6 e0       	ldi	r31, 0x06	; 6
    1026:	82 e0       	ldi	r24, 0x02	; 2
    1028:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTCLR = CURRENT_MEASUREMENT_ENABLE;
    102a:	86 83       	std	Z+6, r24	; 0x06
    102c:	08 95       	ret

0000102e <adc_disable_current_measurement>:
	//PORTA.PIN1CTRL = PORT_OPC_PULLUP_gc
}

void adc_disable_current_measurement(void) 
{	
	PORTA.DIRSET = CURRENT_MEASUREMENT_ENABLE;
    102e:	e0 e0       	ldi	r30, 0x00	; 0
    1030:	f6 e0       	ldi	r31, 0x06	; 6
    1032:	82 e0       	ldi	r24, 0x02	; 2
    1034:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTSET = CURRENT_MEASUREMENT_ENABLE;
    1036:	85 83       	std	Z+5, r24	; 0x05
    1038:	08 95       	ret

0000103a <adc_read_voltage>:
	//Enable power reduction for ADCA
	PR.PRPA |= 0x02;
}

uint16_t adc_read_voltage(void) 
{	
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	00 d0       	rcall	.+0      	; 0x1040 <adc_read_voltage+0x6>
    1040:	1f 92       	push	r1
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
	adc_enable_current_measurement();
    1046:	ed df       	rcall	.-38     	; 0x1022 <adc_enable_current_measurement>
    1048:	49 e1       	ldi	r20, 0x19	; 25
	uint32_t val = 0;
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	cb 01       	movw	r24, r22
	for (uint8_t i = 0; i < 25; i++) {
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
    1050:	51 e0       	ldi	r21, 0x01	; 1
uint16_t adc_read_voltage(void) 
{	
	adc_enable_current_measurement();
	uint32_t val = 0;
	for (uint8_t i = 0; i < 25; i++) {
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
    1052:	20 91 20 02 	lds	r18, 0x0220
    1056:	20 68       	ori	r18, 0x80	; 128
    1058:	20 93 20 02 	sts	0x0220, r18
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
    105c:	20 91 23 02 	lds	r18, 0x0223
    1060:	20 ff       	sbrs	r18, 0
    1062:	fc cf       	rjmp	.-8      	; 0x105c <adc_read_voltage+0x22>
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
    1064:	50 93 23 02 	sts	0x0223, r21
		val += ADCA.CH0.RES;
    1068:	20 91 24 02 	lds	r18, 0x0224
    106c:	30 91 25 02 	lds	r19, 0x0225
    1070:	62 0f       	add	r22, r18
    1072:	73 1f       	adc	r23, r19
    1074:	81 1d       	adc	r24, r1
    1076:	91 1d       	adc	r25, r1
    1078:	41 50       	subi	r20, 0x01	; 1

uint16_t adc_read_voltage(void) 
{	
	adc_enable_current_measurement();
	uint32_t val = 0;
	for (uint8_t i = 0; i < 25; i++) {
    107a:	59 f7       	brne	.-42     	; 0x1052 <adc_read_voltage+0x18>
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
		val += ADCA.CH0.RES;
	}
	adc_disable_current_measurement();
    107c:	69 83       	std	Y+1, r22	; 0x01
    107e:	7a 83       	std	Y+2, r23	; 0x02
    1080:	8b 83       	std	Y+3, r24	; 0x03
    1082:	9c 83       	std	Y+4, r25	; 0x04
    1084:	d4 df       	rcall	.-88     	; 0x102e <adc_disable_current_measurement>

	return val/25;
    1086:	69 81       	ldd	r22, Y+1	; 0x01
    1088:	7a 81       	ldd	r23, Y+2	; 0x02
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	9c 81       	ldd	r25, Y+4	; 0x04
    108e:	29 e1       	ldi	r18, 0x19	; 25
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	40 e0       	ldi	r20, 0x00	; 0
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	0e 94 4c 62 	call	0xc498	; 0xc498 <__udivmodsi4>
}
    109a:	c9 01       	movw	r24, r18
    109c:	24 96       	adiw	r28, 0x04	; 4
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	de bf       	out	0x3e, r29	; 62
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	08 95       	ret

000010a8 <adc_get_battery_voltage>:

float adc_get_battery_voltage(void) 
{
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
	adc_setup();
    10ac:	31 df       	rcall	.-414    	; 0xf10 <adc_setup>
	
	float offset_error = 0.33;
	float measured_voltage;
	float battery_voltage;
	
	measured_voltage = (float)adc_read_voltage();
    10ae:	c5 df       	rcall	.-118    	; 0x103a <adc_read_voltage>
    10b0:	ec 01       	movw	r28, r24
	battery_voltage = ((measured_voltage * 2.05f)/(4095.0f)) * 32.0f/10.0f;
	
	adc_disable();
    10b2:	ac df       	rcall	.-168    	; 0x100c <adc_disable>
	
	float offset_error = 0.33;
	float measured_voltage;
	float battery_voltage;
	
	measured_voltage = (float)adc_read_voltage();
    10b4:	be 01       	movw	r22, r28
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 b3 5d 	call	0xbb66	; 0xbb66 <__floatunsisf>
	battery_voltage = ((measured_voltage * 2.05f)/(4095.0f)) * 32.0f/10.0f;
    10be:	23 e3       	ldi	r18, 0x33	; 51
    10c0:	33 e3       	ldi	r19, 0x33	; 51
    10c2:	43 e0       	ldi	r20, 0x03	; 3
    10c4:	50 e4       	ldi	r21, 0x40	; 64
    10c6:	0e 94 41 5e 	call	0xbc82	; 0xbc82 <__mulsf3>
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 ef       	ldi	r19, 0xF0	; 240
    10ce:	4f e7       	ldi	r20, 0x7F	; 127
    10d0:	55 e4       	ldi	r21, 0x45	; 69
    10d2:	0e 94 1f 5d 	call	0xba3e	; 0xba3e <__divsf3>
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	40 e0       	ldi	r20, 0x00	; 0
    10dc:	52 e4       	ldi	r21, 0x42	; 66
    10de:	0e 94 41 5e 	call	0xbc82	; 0xbc82 <__mulsf3>
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	40 e2       	ldi	r20, 0x20	; 32
    10e8:	51 e4       	ldi	r21, 0x41	; 65
    10ea:	0e 94 1f 5d 	call	0xba3e	; 0xba3e <__divsf3>
	
	adc_disable();
	
	return (battery_voltage - offset_error);
    10ee:	23 ec       	ldi	r18, 0xC3	; 195
    10f0:	35 ef       	ldi	r19, 0xF5	; 245
    10f2:	48 ea       	ldi	r20, 0xA8	; 168
    10f4:	5e e3       	ldi	r21, 0x3E	; 62
    10f6:	0e 94 ba 5c 	call	0xb974	; 0xb974 <__subsf3>
}
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	08 95       	ret

00001100 <adc_get_battery_percentage>:
uint8_t adc_get_battery_percentage(void) 
{	
	uint16_t voltage;
	float battery_voltage;
	
	battery_voltage = (adc_get_battery_voltage() * 100.0f);
    1100:	d3 df       	rcall	.-90     	; 0x10a8 <adc_get_battery_voltage>
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	48 ec       	ldi	r20, 0xC8	; 200
    1108:	52 e4       	ldi	r21, 0x42	; 66
    110a:	0e 94 41 5e 	call	0xbc82	; 0xbc82 <__mulsf3>
	voltage = (uint16_t)battery_voltage;
    110e:	0e 94 87 5d 	call	0xbb0e	; 0xbb0e <__fixunssfsi>
	
	if (voltage > 600) {
    1112:	69 35       	cpi	r22, 0x59	; 89
    1114:	82 e0       	ldi	r24, 0x02	; 2
    1116:	78 07       	cpc	r23, r24
    1118:	68 f5       	brcc	.+90     	; 0x1174 <adc_get_battery_percentage+0x74>
		return 99;
	} else if (voltage > 575) {
    111a:	60 34       	cpi	r22, 0x40	; 64
    111c:	82 e0       	ldi	r24, 0x02	; 2
    111e:	78 07       	cpc	r23, r24
    1120:	58 f5       	brcc	.+86     	; 0x1178 <adc_get_battery_percentage+0x78>
		return 95;
	} else if (voltage > 550) {
    1122:	67 32       	cpi	r22, 0x27	; 39
    1124:	82 e0       	ldi	r24, 0x02	; 2
    1126:	78 07       	cpc	r23, r24
    1128:	48 f5       	brcc	.+82     	; 0x117c <adc_get_battery_percentage+0x7c>
		return 90;
	} else if (voltage > 525) {
    112a:	6e 30       	cpi	r22, 0x0E	; 14
    112c:	82 e0       	ldi	r24, 0x02	; 2
    112e:	78 07       	cpc	r23, r24
    1130:	38 f5       	brcc	.+78     	; 0x1180 <adc_get_battery_percentage+0x80>
		return 80;
	} else if (voltage > 500) {
    1132:	65 3f       	cpi	r22, 0xF5	; 245
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	78 07       	cpc	r23, r24
    1138:	28 f5       	brcc	.+74     	; 0x1184 <adc_get_battery_percentage+0x84>
		return 70;
	} else if (voltage > 475) {
    113a:	6c 3d       	cpi	r22, 0xDC	; 220
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	78 07       	cpc	r23, r24
    1140:	18 f5       	brcc	.+70     	; 0x1188 <adc_get_battery_percentage+0x88>
		return 60;
	} else if (voltage > 450) {
    1142:	63 3c       	cpi	r22, 0xC3	; 195
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	78 07       	cpc	r23, r24
    1148:	08 f5       	brcc	.+66     	; 0x118c <adc_get_battery_percentage+0x8c>
		return 50;
	} else if (voltage > 425) {
    114a:	6a 3a       	cpi	r22, 0xAA	; 170
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	78 07       	cpc	r23, r24
    1150:	f8 f4       	brcc	.+62     	; 0x1190 <adc_get_battery_percentage+0x90>
		return 40;
	} else if (voltage > 415) {
    1152:	60 3a       	cpi	r22, 0xA0	; 160
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	78 07       	cpc	r23, r24
    1158:	e8 f4       	brcc	.+58     	; 0x1194 <adc_get_battery_percentage+0x94>
		return 30;
	} else if (voltage > 400) {
    115a:	61 39       	cpi	r22, 0x91	; 145
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	78 07       	cpc	r23, r24
    1160:	d8 f4       	brcc	.+54     	; 0x1198 <adc_get_battery_percentage+0x98>
		return 20;
	} else if (voltage > 375) {
    1162:	68 37       	cpi	r22, 0x78	; 120
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	78 07       	cpc	r23, r24
    1168:	c8 f4       	brcc	.+50     	; 0x119c <adc_get_battery_percentage+0x9c>
		return 10;
	} else if (voltage > 350) {
    116a:	6f 35       	cpi	r22, 0x5F	; 95
    116c:	71 40       	sbci	r23, 0x01	; 1
    116e:	c0 f0       	brcs	.+48     	; 0x11a0 <adc_get_battery_percentage+0xa0>
		return 5;
    1170:	85 e0       	ldi	r24, 0x05	; 5
    1172:	08 95       	ret
	
	battery_voltage = (adc_get_battery_voltage() * 100.0f);
	voltage = (uint16_t)battery_voltage;
	
	if (voltage > 600) {
		return 99;
    1174:	83 e6       	ldi	r24, 0x63	; 99
    1176:	08 95       	ret
	} else if (voltage > 575) {
		return 95;
    1178:	8f e5       	ldi	r24, 0x5F	; 95
    117a:	08 95       	ret
	} else if (voltage > 550) {
		return 90;
    117c:	8a e5       	ldi	r24, 0x5A	; 90
    117e:	08 95       	ret
	} else if (voltage > 525) {
		return 80;
    1180:	80 e5       	ldi	r24, 0x50	; 80
    1182:	08 95       	ret
	} else if (voltage > 500) {
		return 70;
    1184:	86 e4       	ldi	r24, 0x46	; 70
    1186:	08 95       	ret
	} else if (voltage > 475) {
		return 60;
    1188:	8c e3       	ldi	r24, 0x3C	; 60
    118a:	08 95       	ret
	} else if (voltage > 450) {
		return 50;
    118c:	82 e3       	ldi	r24, 0x32	; 50
    118e:	08 95       	ret
	} else if (voltage > 425) {
		return 40;
    1190:	88 e2       	ldi	r24, 0x28	; 40
    1192:	08 95       	ret
	} else if (voltage > 415) {
		return 30;
    1194:	8e e1       	ldi	r24, 0x1E	; 30
    1196:	08 95       	ret
	} else if (voltage > 400) {
		return 20;
    1198:	84 e1       	ldi	r24, 0x14	; 20
    119a:	08 95       	ret
	} else if (voltage > 375) {
		return 10;
    119c:	8a e0       	ldi	r24, 0x0A	; 10
    119e:	08 95       	ret
	} else if (voltage > 350) {
		return 5;
	}
	
	return 0;
    11a0:	80 e0       	ldi	r24, 0x00	; 0
}
    11a2:	08 95       	ret

000011a4 <clock_setup_32_mhz>:
	CLK.CTRL	= CLK_SCLKSEL_RC32M_gc;
}

void clock_setup_32_mhz(void) 
{	
	OSC.CTRL	|= OSC_RC32MEN_bm;
    11a4:	80 91 50 00 	lds	r24, 0x0050
    11a8:	82 60       	ori	r24, 0x02	; 2
    11aa:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
    11ae:	80 91 51 00 	lds	r24, 0x0051
    11b2:	81 ff       	sbrs	r24, 1
    11b4:	fc cf       	rjmp	.-8      	; 0x11ae <clock_setup_32_mhz+0xa>
	CCP			= CCP_IOREG_gc;
    11b6:	88 ed       	ldi	r24, 0xD8	; 216
    11b8:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL	= CLK_SCLKSEL_RC32M_gc;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	80 93 40 00 	sts	0x0040, r24
    11c0:	08 95       	ret

000011c2 <dac_speaker_on>:

#include "dac.h"

void dac_speaker_on(void) 
{
	PORTD.DIRSET = SPEAKER_EN;
    11c2:	e0 e6       	ldi	r30, 0x60	; 96
    11c4:	f6 e0       	ldi	r31, 0x06	; 6
    11c6:	82 e0       	ldi	r24, 0x02	; 2
    11c8:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET = SPEAKER_EN;
    11ca:	85 83       	std	Z+5, r24	; 0x05
    11cc:	08 95       	ret

000011ce <dac_speaker_off>:
}

void dac_speaker_off(void) 
{
	PORTD.DIRSET = SPEAKER_EN;
    11ce:	e0 e6       	ldi	r30, 0x60	; 96
    11d0:	f6 e0       	ldi	r31, 0x06	; 6
    11d2:	82 e0       	ldi	r24, 0x02	; 2
    11d4:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTCLR = SPEAKER_EN;
    11d6:	86 83       	std	Z+6, r24	; 0x06
    11d8:	08 95       	ret

000011da <dac_setup>:
}

void dac_setup(bool dual_channel) 
{
	//Disable power reduction for DACB
	PR.PRPB &= ~0x04;
    11da:	90 91 72 00 	lds	r25, 0x0072
    11de:	9b 7f       	andi	r25, 0xFB	; 251
    11e0:	90 93 72 00 	sts	0x0072, r25
			
	if (dual_channel)
    11e4:	88 23       	and	r24, r24
    11e6:	89 f0       	breq	.+34     	; 0x120a <dac_setup+0x30>
	{
		PORTB.DIRSET = DAC0 | DAC1;
    11e8:	8c e0       	ldi	r24, 0x0C	; 12
    11ea:	80 93 21 06 	sts	0x0621, r24
		
		DACB.CTRLA |= DAC_CH0EN_bm | DAC_CH1EN_bm;
    11ee:	80 91 20 03 	lds	r24, 0x0320
    11f2:	8c 60       	ori	r24, 0x0C	; 12
    11f4:	80 93 20 03 	sts	0x0320, r24
		DACB.CTRLC |= DAC_REFSEL_AVCC_gc;
    11f8:	80 91 22 03 	lds	r24, 0x0322
    11fc:	88 60       	ori	r24, 0x08	; 8
    11fe:	80 93 22 03 	sts	0x0322, r24
		DACB.CTRLB |= DAC_CHSEL_DUAL_gc;
    1202:	80 91 21 03 	lds	r24, 0x0321
    1206:	80 64       	ori	r24, 0x40	; 64
    1208:	0f c0       	rjmp	.+30     	; 0x1228 <dac_setup+0x4e>
	} else {
		PORTB.DIRSET = DAC0;
    120a:	84 e0       	ldi	r24, 0x04	; 4
    120c:	80 93 21 06 	sts	0x0621, r24
		
		DACB.CTRLA |= DAC_CH0EN_bm;
    1210:	80 91 20 03 	lds	r24, 0x0320
    1214:	84 60       	ori	r24, 0x04	; 4
    1216:	80 93 20 03 	sts	0x0320, r24
		DACB.CTRLC |= DAC_REFSEL_AVCC_gc;
    121a:	80 91 22 03 	lds	r24, 0x0322
    121e:	88 60       	ori	r24, 0x08	; 8
    1220:	80 93 22 03 	sts	0x0322, r24
		DACB.CTRLB |= DAC_CHSEL_SINGLE_gc;
    1224:	80 91 21 03 	lds	r24, 0x0321
    1228:	80 93 21 03 	sts	0x0321, r24

	return (char*)(s - begin);
}

static uint8_t read_signature_byte(uint16_t Address) {
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    122c:	82 e0       	ldi	r24, 0x02	; 2
    122e:	80 93 ca 01 	sts	0x01CA, r24
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
    1232:	e2 e3       	ldi	r30, 0x32	; 50
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	e4 91       	lpm	r30, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    1238:	10 92 ca 01 	sts	0x01CA, r1
	}
	
	DACB.CH0OFFSETCAL = read_signature_byte( offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL) );
    123c:	e0 93 29 03 	sts	0x0329, r30

	return (char*)(s - begin);
}

static uint8_t read_signature_byte(uint16_t Address) {
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    1240:	80 93 ca 01 	sts	0x01CA, r24
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
    1244:	e3 e3       	ldi	r30, 0x33	; 51
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	e4 91       	lpm	r30, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    124a:	10 92 ca 01 	sts	0x01CA, r1
	DACB.CH0GAINCAL = read_signature_byte( offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL) );
    124e:	e0 93 28 03 	sts	0x0328, r30

	return (char*)(s - begin);
}

static uint8_t read_signature_byte(uint16_t Address) {
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    1252:	80 93 ca 01 	sts	0x01CA, r24
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
    1256:	e6 e3       	ldi	r30, 0x36	; 54
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	e4 91       	lpm	r30, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    125c:	10 92 ca 01 	sts	0x01CA, r1
	
	DACB.CH1OFFSETCAL = read_signature_byte( offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL) );
    1260:	e0 93 2b 03 	sts	0x032B, r30

	return (char*)(s - begin);
}

static uint8_t read_signature_byte(uint16_t Address) {
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    1264:	80 93 ca 01 	sts	0x01CA, r24
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
    1268:	e7 e3       	ldi	r30, 0x37	; 55
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	e4 91       	lpm	r30, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    126e:	10 92 ca 01 	sts	0x01CA, r1
	DACB.CH1GAINCAL = read_signature_byte( offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL) );
    1272:	e0 93 2a 03 	sts	0x032A, r30
	
	DACB.CTRLA |= DAC_ENABLE_bm;
    1276:	80 91 20 03 	lds	r24, 0x0320
    127a:	81 60       	ori	r24, 0x01	; 1
    127c:	80 93 20 03 	sts	0x0320, r24
	
	dac_speaker_on();
    1280:	a0 cf       	rjmp	.-192    	; 0x11c2 <dac_speaker_on>

00001282 <dac_disable>:
}

void dac_disable(void) 
{
	PORTB.DIRCLR = DAC0 | DAC1;
    1282:	e0 e2       	ldi	r30, 0x20	; 32
    1284:	f6 e0       	ldi	r31, 0x06	; 6
    1286:	8c e0       	ldi	r24, 0x0C	; 12
    1288:	82 83       	std	Z+2, r24	; 0x02
	
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;
    128a:	88 e1       	ldi	r24, 0x18	; 24
    128c:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_PULLUP_gc;
    128e:	83 8b       	std	Z+19, r24	; 0x13
	
	DACB.CTRLA &= ~(DAC_ENABLE_bm);
    1290:	e0 e2       	ldi	r30, 0x20	; 32
    1292:	f3 e0       	ldi	r31, 0x03	; 3
    1294:	80 81       	ld	r24, Z
    1296:	8e 7f       	andi	r24, 0xFE	; 254
    1298:	80 83       	st	Z, r24
	dac_speaker_off();
    129a:	99 df       	rcall	.-206    	; 0x11ce <dac_speaker_off>
	
	//Enable power reduction for DACB
	PR.PRPB |= 0x04;
    129c:	e0 e7       	ldi	r30, 0x70	; 112
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	82 81       	ldd	r24, Z+2	; 0x02
    12a2:	84 60       	ori	r24, 0x04	; 4
    12a4:	82 83       	std	Z+2, r24	; 0x02
    12a6:	08 95       	ret

000012a8 <__vector_6>:
}
*/

//! DMA CH0 Interrupt service routine. Clear interrupt flags after check. 
ISR(DMA_CH0_vect)
{
    12a8:	1f 92       	push	r1
    12aa:	0f 92       	push	r0
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	0f 92       	push	r0
    12b0:	11 24       	eor	r1, r1
    12b2:	08 b6       	in	r0, 0x38	; 56
    12b4:	0f 92       	push	r0
    12b6:	18 be       	out	0x38, r1	; 56
    12b8:	8f 93       	push	r24
	if (DMA.CH0.CTRLB & DMA_CH_ERRIF_bm) {
    12ba:	80 91 11 01 	lds	r24, 0x0111
    12be:	85 ff       	sbrs	r24, 5
    12c0:	08 c0       	rjmp	.+16     	; 0x12d2 <__vector_6+0x2a>
		DMA.CH0.CTRLB |= DMA_CH_ERRIF_bm;
    12c2:	80 91 11 01 	lds	r24, 0x0111
    12c6:	80 62       	ori	r24, 0x20	; 32
    12c8:	80 93 11 01 	sts	0x0111, r24
		gStatus = false;
    12cc:	10 92 8b 3b 	sts	0x3B8B, r1
    12d0:	08 c0       	rjmp	.+16     	; 0x12e2 <__vector_6+0x3a>
	} else {
		DMA.CH0.CTRLB |= DMA_CH_TRNIF_bm;
    12d2:	80 91 11 01 	lds	r24, 0x0111
    12d6:	80 61       	ori	r24, 0x10	; 16
    12d8:	80 93 11 01 	sts	0x0111, r24
		gStatus = true;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	80 93 8b 3b 	sts	0x3B8B, r24
	}
	gInterruptDone = true;
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	80 93 8c 3b 	sts	0x3B8C, r24
}
    12e8:	8f 91       	pop	r24
    12ea:	0f 90       	pop	r0
    12ec:	08 be       	out	0x38, r0	; 56
    12ee:	0f 90       	pop	r0
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	0f 90       	pop	r0
    12f4:	1f 90       	pop	r1
    12f6:	18 95       	reti

000012f8 <EEPROM_WriteEnv>:
			}
		}
	}
	*/
	
	eeprom_update_block(&env,EEPROM_START,sizeof(env));
    12f8:	4b ea       	ldi	r20, 0xAB	; 171
    12fa:	50 e0       	ldi	r21, 0x00	; 0
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	8c e7       	ldi	r24, 0x7C	; 124
    1302:	9a e3       	ldi	r25, 0x3A	; 58
    1304:	0e 94 37 69 	call	0xd26e	; 0xd26e <__eeupd_block_x128a4u>
	
	return 1;
}
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	08 95       	ret

0000130c <EEPROM_ReadEnv>:

uint8_t EEPROM_ReadEnv(void) 
{
    130c:	0f 93       	push	r16
    130e:	1f 93       	push	r17
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	cb 5a       	subi	r28, 0xAB	; 171
    131a:	d1 09       	sbc	r29, r1
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	de bf       	out	0x3e, r29	; 62
	env_variables_t temp;
	memset(&temp,0,sizeof(temp));
    1320:	8e 01       	movw	r16, r28
    1322:	0f 5f       	subi	r16, 0xFF	; 255
    1324:	1f 4f       	sbci	r17, 0xFF	; 255
    1326:	8b ea       	ldi	r24, 0xAB	; 171
    1328:	f8 01       	movw	r30, r16
    132a:	11 92       	st	Z+, r1
    132c:	8a 95       	dec	r24
    132e:	e9 f7       	brne	.-6      	; 0x132a <EEPROM_ReadEnv+0x1e>
	eeprom_read_block(&temp,EEPROM_START,sizeof(temp));
    1330:	4b ea       	ldi	r20, 0xAB	; 171
    1332:	50 e0       	ldi	r21, 0x00	; 0
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	c8 01       	movw	r24, r16
    133a:	0e 94 2c 69 	call	0xd258	; 0xd258 <__eerd_block_x128a4u>
	}
	
	memcpy(&env, temp, sizeof(temp));
	*/
	
	if (temp.id != 0 && temp.id != 0xff) {
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	81 50       	subi	r24, 0x01	; 1
    1342:	8e 3f       	cpi	r24, 0xFE	; 254
    1344:	50 f4       	brcc	.+20     	; 0x135a <EEPROM_ReadEnv+0x4e>
		memcpy(&env,&temp,sizeof(temp));
    1346:	8b ea       	ldi	r24, 0xAB	; 171
    1348:	f8 01       	movw	r30, r16
    134a:	ac e7       	ldi	r26, 0x7C	; 124
    134c:	ba e3       	ldi	r27, 0x3A	; 58
    134e:	01 90       	ld	r0, Z+
    1350:	0d 92       	st	X+, r0
    1352:	8a 95       	dec	r24
    1354:	e1 f7       	brne	.-8      	; 0x134e <EEPROM_ReadEnv+0x42>
		return 1;
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	01 c0       	rjmp	.+2      	; 0x135c <EEPROM_ReadEnv+0x50>
	}
	
	return 0;
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	c5 55       	subi	r28, 0x55	; 85
    135e:	df 4f       	sbci	r29, 0xFF	; 255
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	df 91       	pop	r29
    1366:	cf 91       	pop	r28
    1368:	1f 91       	pop	r17
    136a:	0f 91       	pop	r16
    136c:	08 95       	ret

0000136e <ht1632c_set_pixel>:
void ht1632c_blink(bool blink_on) 
{	
	if (blink_on) {
		ht1632c_write_command(HT1632_BLINK_ON);	
	} else {
		ht1632c_write_command(HT1632_BLINK_OFF);	
    136e:	fc 01       	movw	r30, r24
    1370:	23 e0       	ldi	r18, 0x03	; 3
    1372:	f6 95       	lsr	r31
    1374:	e7 95       	ror	r30
    1376:	2a 95       	dec	r18
    1378:	e1 f7       	brne	.-8      	; 0x1372 <ht1632c_set_pixel+0x4>
    137a:	ee 50       	subi	r30, 0x0E	; 14
    137c:	f4 4c       	sbci	r31, 0xC4	; 196
    137e:	87 70       	andi	r24, 0x07	; 7
    1380:	99 27       	eor	r25, r25
    1382:	21 e0       	ldi	r18, 0x01	; 1
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	01 c0       	rjmp	.+2      	; 0x138a <ht1632c_set_pixel+0x1c>
    1388:	22 0f       	add	r18, r18
    138a:	8a 95       	dec	r24
    138c:	ea f7       	brpl	.-6      	; 0x1388 <ht1632c_set_pixel+0x1a>
    138e:	80 81       	ld	r24, Z
    1390:	82 2b       	or	r24, r18
    1392:	80 83       	st	Z, r24
    1394:	08 95       	ret

00001396 <ht1632c_clr_pixel>:
    1396:	fc 01       	movw	r30, r24
    1398:	33 e0       	ldi	r19, 0x03	; 3
    139a:	f6 95       	lsr	r31
    139c:	e7 95       	ror	r30
    139e:	3a 95       	dec	r19
    13a0:	e1 f7       	brne	.-8      	; 0x139a <ht1632c_clr_pixel+0x4>
    13a2:	ee 50       	subi	r30, 0x0E	; 14
    13a4:	f4 4c       	sbci	r31, 0xC4	; 196
    13a6:	87 70       	andi	r24, 0x07	; 7
    13a8:	99 27       	eor	r25, r25
    13aa:	21 e0       	ldi	r18, 0x01	; 1
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	01 c0       	rjmp	.+2      	; 0x13b2 <ht1632c_clr_pixel+0x1c>
    13b0:	22 0f       	add	r18, r18
    13b2:	8a 95       	dec	r24
    13b4:	ea f7       	brpl	.-6      	; 0x13b0 <ht1632c_clr_pixel+0x1a>
    13b6:	20 95       	com	r18
    13b8:	80 81       	ld	r24, Z
    13ba:	28 23       	and	r18, r24
    13bc:	20 83       	st	Z, r18
    13be:	08 95       	ret

000013c0 <ht1632c_fill_screen>:
    13c0:	e2 ef       	ldi	r30, 0xF2	; 242
    13c2:	fb e3       	ldi	r31, 0x3B	; 59
    13c4:	8f ef       	ldi	r24, 0xFF	; 255
    13c6:	81 93       	st	Z+, r24
    13c8:	9c e3       	ldi	r25, 0x3C	; 60
    13ca:	e2 31       	cpi	r30, 0x12	; 18
    13cc:	f9 07       	cpc	r31, r25
    13ce:	d9 f7       	brne	.-10     	; 0x13c6 <ht1632c_fill_screen+0x6>
    13d0:	0c 94 2e 1d 	jmp	0x3a5c	; 0x3a5c <display_refresh_screen>

000013d4 <ht1632c_clear_screen>:
    13d4:	e2 ef       	ldi	r30, 0xF2	; 242
    13d6:	fb e3       	ldi	r31, 0x3B	; 59
    13d8:	11 92       	st	Z+, r1
    13da:	8c e3       	ldi	r24, 0x3C	; 60
    13dc:	e2 31       	cpi	r30, 0x12	; 18
    13de:	f8 07       	cpc	r31, r24
    13e0:	d9 f7       	brne	.-10     	; 0x13d8 <ht1632c_clear_screen+0x4>
    13e2:	0c 94 2e 1d 	jmp	0x3a5c	; 0x3a5c <display_refresh_screen>

000013e6 <ht1632c_clear_buffer>:
    13e6:	e2 ef       	ldi	r30, 0xF2	; 242
    13e8:	fb e3       	ldi	r31, 0x3B	; 59
    13ea:	11 92       	st	Z+, r1
    13ec:	8c e3       	ldi	r24, 0x3C	; 60
    13ee:	e2 31       	cpi	r30, 0x12	; 18
    13f0:	f8 07       	cpc	r31, r24
    13f2:	d9 f7       	brne	.-10     	; 0x13ea <ht1632c_clear_buffer+0x4>
    13f4:	08 95       	ret

000013f6 <ht1632c_write_data>:
    13f6:	74 e0       	ldi	r23, 0x04	; 4
    13f8:	41 e0       	ldi	r20, 0x01	; 1
    13fa:	50 e0       	ldi	r21, 0x00	; 0
    13fc:	e8 e0       	ldi	r30, 0x08	; 8
    13fe:	66 23       	and	r22, r22
    1400:	c1 f0       	breq	.+48     	; 0x1432 <ht1632c_write_data+0x3c>
    1402:	70 93 86 06 	sts	0x0686, r23
    1406:	2f ef       	ldi	r18, 0xFF	; 255
    1408:	26 0f       	add	r18, r22
    140a:	da 01       	movw	r26, r20
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <ht1632c_write_data+0x1c>
    140e:	aa 0f       	add	r26, r26
    1410:	bb 1f       	adc	r27, r27
    1412:	2a 95       	dec	r18
    1414:	e2 f7       	brpl	.-8      	; 0x140e <ht1632c_write_data+0x18>
    1416:	9d 01       	movw	r18, r26
    1418:	28 23       	and	r18, r24
    141a:	39 23       	and	r19, r25
    141c:	23 2b       	or	r18, r19
    141e:	19 f0       	breq	.+6      	; 0x1426 <ht1632c_write_data+0x30>
    1420:	e0 93 85 06 	sts	0x0685, r30
    1424:	02 c0       	rjmp	.+4      	; 0x142a <ht1632c_write_data+0x34>
    1426:	e0 93 86 06 	sts	0x0686, r30
    142a:	70 93 85 06 	sts	0x0685, r23
    142e:	61 50       	subi	r22, 0x01	; 1
    1430:	e6 cf       	rjmp	.-52     	; 0x13fe <ht1632c_write_data+0x8>
    1432:	08 95       	ret

00001434 <ht1632c_refresh_screen>:
    1434:	cf 93       	push	r28
    1436:	df 93       	push	r29
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	80 93 86 06 	sts	0x0686, r24
    143e:	63 e0       	ldi	r22, 0x03	; 3
    1440:	85 e0       	ldi	r24, 0x05	; 5
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	d8 df       	rcall	.-80     	; 0x13f6 <ht1632c_write_data>
    1446:	67 e0       	ldi	r22, 0x07	; 7
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	d4 df       	rcall	.-88     	; 0x13f6 <ht1632c_write_data>
    144e:	c3 ef       	ldi	r28, 0xF3	; 243
    1450:	db e3       	ldi	r29, 0x3B	; 59
    1452:	fe 01       	movw	r30, r28
    1454:	31 97       	sbiw	r30, 0x01	; 1
    1456:	80 81       	ld	r24, Z
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	98 2f       	mov	r25, r24
    145c:	88 27       	eor	r24, r24
    145e:	28 81       	ld	r18, Y
    1460:	60 e1       	ldi	r22, 0x10	; 16
    1462:	82 2b       	or	r24, r18
    1464:	c8 df       	rcall	.-112    	; 0x13f6 <ht1632c_write_data>
    1466:	22 96       	adiw	r28, 0x02	; 2
    1468:	8c e3       	ldi	r24, 0x3C	; 60
    146a:	c3 31       	cpi	r28, 0x13	; 19
    146c:	d8 07       	cpc	r29, r24
    146e:	89 f7       	brne	.-30     	; 0x1452 <ht1632c_refresh_screen+0x1e>
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	80 93 85 06 	sts	0x0685, r24
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	08 95       	ret

0000147c <ht1632c_write_command>:
    147c:	1f 93       	push	r17
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	94 60       	ori	r25, 0x04	; 4
    1486:	c0 e8       	ldi	r28, 0x80	; 128
    1488:	d6 e0       	ldi	r29, 0x06	; 6
    148a:	11 e0       	ldi	r17, 0x01	; 1
    148c:	1e 83       	std	Y+6, r17	; 0x06
    148e:	6c e0       	ldi	r22, 0x0C	; 12
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	b0 df       	rcall	.-160    	; 0x13f6 <ht1632c_write_data>
    1496:	1d 83       	std	Y+5, r17	; 0x05
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	1f 91       	pop	r17
    149e:	08 95       	ret

000014a0 <ht1632c_setup>:
    14a0:	cf 93       	push	r28
    14a2:	c8 2f       	mov	r28, r24
    14a4:	e0 e8       	ldi	r30, 0x80	; 128
    14a6:	f6 e0       	ldi	r31, 0x06	; 6
    14a8:	8d e0       	ldi	r24, 0x0D	; 13
    14aa:	81 83       	std	Z+1, r24	; 0x01
    14ac:	85 e0       	ldi	r24, 0x05	; 5
    14ae:	85 83       	std	Z+5, r24	; 0x05
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	e4 df       	rcall	.-56     	; 0x147c <ht1632c_write_command>
    14b4:	83 e0       	ldi	r24, 0x03	; 3
    14b6:	e2 df       	rcall	.-60     	; 0x147c <ht1632c_write_command>
    14b8:	88 e0       	ldi	r24, 0x08	; 8
    14ba:	e0 df       	rcall	.-64     	; 0x147c <ht1632c_write_command>
    14bc:	84 e1       	ldi	r24, 0x14	; 20
    14be:	de df       	rcall	.-68     	; 0x147c <ht1632c_write_command>
    14c0:	88 e1       	ldi	r24, 0x18	; 24
    14c2:	dc df       	rcall	.-72     	; 0x147c <ht1632c_write_command>
    14c4:	8c 2f       	mov	r24, r28
    14c6:	da df       	rcall	.-76     	; 0x147c <ht1632c_write_command>
    14c8:	81 ea       	ldi	r24, 0xA1	; 161
    14ca:	cf 91       	pop	r28
    14cc:	d7 cf       	rjmp	.-82     	; 0x147c <ht1632c_write_command>

000014ce <ht1632c_power_down>:
    14ce:	82 e0       	ldi	r24, 0x02	; 2
    14d0:	d5 df       	rcall	.-86     	; 0x147c <ht1632c_write_command>
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	d3 df       	rcall	.-90     	; 0x147c <ht1632c_write_command>
    14d6:	e0 e8       	ldi	r30, 0x80	; 128
    14d8:	f6 e0       	ldi	r31, 0x06	; 6
    14da:	8f e0       	ldi	r24, 0x0F	; 15
    14dc:	82 83       	std	Z+2, r24	; 0x02
    14de:	88 e1       	ldi	r24, 0x18	; 24
    14e0:	80 8b       	std	Z+16, r24	; 0x10
    14e2:	81 8b       	std	Z+17, r24	; 0x11
    14e4:	82 8b       	std	Z+18, r24	; 0x12
    14e6:	83 8b       	std	Z+19, r24	; 0x13
    14e8:	08 95       	ret

000014ea <ht1632c_set_brightness>:
    14ea:	87 fd       	sbrc	r24, 7
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	80 31       	cpi	r24, 0x10	; 16
    14f0:	0c f0       	brlt	.+2      	; 0x14f4 <ht1632c_set_brightness+0xa>
    14f2:	8f e0       	ldi	r24, 0x0F	; 15
    14f4:	80 6a       	ori	r24, 0xA0	; 160
    14f6:	c2 cf       	rjmp	.-124    	; 0x147c <ht1632c_write_command>

000014f8 <ht1632c_shift_left>:

void ht1632c_shift_left(void) 
{
	int8_t i;
	
	display_refresh_screen();
    14f8:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <display_refresh_screen>
    14fc:	2f ef       	ldi	r18, 0xFF	; 255
    14fe:	89 ef       	ldi	r24, 0xF9	; 249
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	21 50       	subi	r18, 0x01	; 1
    1504:	80 40       	sbci	r24, 0x00	; 0
    1506:	90 40       	sbci	r25, 0x00	; 0
    1508:	e1 f7       	brne	.-8      	; 0x1502 <ht1632c_shift_left+0xa>
    150a:	00 c0       	rjmp	.+0      	; 0x150c <ht1632c_shift_left+0x14>
    150c:	00 00       	nop
    150e:	e4 ef       	ldi	r30, 0xF4	; 244
    1510:	fb e3       	ldi	r31, 0x3B	; 59
	_delay_ms(10);
	
	for (i = 0; i <= 30; i += 2) {
    1512:	80 e0       	ldi	r24, 0x00	; 0
		if (i == 14) {
    1514:	8e 30       	cpi	r24, 0x0E	; 14
    1516:	29 f4       	brne	.+10     	; 0x1522 <ht1632c_shift_left+0x2a>
			ledmatrix[14] = ledmatrix[1];
    1518:	90 91 f3 3b 	lds	r25, 0x3BF3
    151c:	90 93 00 3c 	sts	0x3C00, r25
    1520:	0b c0       	rjmp	.+22     	; 0x1538 <ht1632c_shift_left+0x40>
		} else if(i == 30) {
    1522:	8e 31       	cpi	r24, 0x1E	; 30
    1524:	29 f4       	brne	.+10     	; 0x1530 <ht1632c_shift_left+0x38>
			ledmatrix[30] = ledmatrix[17];
    1526:	90 91 03 3c 	lds	r25, 0x3C03
    152a:	90 93 10 3c 	sts	0x3C10, r25
    152e:	04 c0       	rjmp	.+8      	; 0x1538 <ht1632c_shift_left+0x40>
		} else {
			ledmatrix[i] = ledmatrix[i+2];
    1530:	90 81       	ld	r25, Z
    1532:	df 01       	movw	r26, r30
    1534:	12 97       	sbiw	r26, 0x02	; 2
    1536:	9c 93       	st	X, r25
    1538:	8e 5f       	subi	r24, 0xFE	; 254
    153a:	32 96       	adiw	r30, 0x02	; 2
	int8_t i;
	
	display_refresh_screen();
	_delay_ms(10);
	
	for (i = 0; i <= 30; i += 2) {
    153c:	80 32       	cpi	r24, 0x20	; 32
    153e:	51 f7       	brne	.-44     	; 0x1514 <ht1632c_shift_left+0x1c>
    1540:	e5 ef       	ldi	r30, 0xF5	; 245
    1542:	fb e3       	ldi	r31, 0x3B	; 59
    1544:	81 e0       	ldi	r24, 0x01	; 1
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
	
	for (i = 1; i <= 31; i += 2) {
		if (i == 15) {
    1546:	8f 30       	cpi	r24, 0x0F	; 15
    1548:	19 f4       	brne	.+6      	; 0x1550 <ht1632c_shift_left+0x58>
			ledmatrix[15] = 0;
    154a:	10 92 01 3c 	sts	0x3C01, r1
    154e:	09 c0       	rjmp	.+18     	; 0x1562 <ht1632c_shift_left+0x6a>
		} else if (i == 31) {
    1550:	8f 31       	cpi	r24, 0x1F	; 31
    1552:	19 f4       	brne	.+6      	; 0x155a <ht1632c_shift_left+0x62>
			ledmatrix[31] = 0;
    1554:	10 92 11 3c 	sts	0x3C11, r1
    1558:	04 c0       	rjmp	.+8      	; 0x1562 <ht1632c_shift_left+0x6a>
		} else {
			ledmatrix[i] = ledmatrix[i+2];
    155a:	90 81       	ld	r25, Z
    155c:	df 01       	movw	r26, r30
    155e:	12 97       	sbiw	r26, 0x02	; 2
    1560:	9c 93       	st	X, r25
    1562:	8e 5f       	subi	r24, 0xFE	; 254
    1564:	32 96       	adiw	r30, 0x02	; 2
		} else {
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
	
	for (i = 1; i <= 31; i += 2) {
    1566:	81 32       	cpi	r24, 0x21	; 33
    1568:	71 f7       	brne	.-36     	; 0x1546 <ht1632c_shift_left+0x4e>
		} else {
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
	*/
}
    156a:	08 95       	ret

0000156c <ht1632c_shift_right>:

void ht1632c_shift_right(void) 
{	
	int8_t i;
	
	display_refresh_screen();
    156c:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <display_refresh_screen>
    1570:	2f ef       	ldi	r18, 0xFF	; 255
    1572:	89 ef       	ldi	r24, 0xF9	; 249
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	21 50       	subi	r18, 0x01	; 1
    1578:	80 40       	sbci	r24, 0x00	; 0
    157a:	90 40       	sbci	r25, 0x00	; 0
    157c:	e1 f7       	brne	.-8      	; 0x1576 <ht1632c_shift_right+0xa>
    157e:	00 c0       	rjmp	.+0      	; 0x1580 <ht1632c_shift_right+0x14>
    1580:	00 00       	nop
    1582:	e1 e1       	ldi	r30, 0x11	; 17
    1584:	fc e3       	ldi	r31, 0x3C	; 60
	_delay_ms(10);
	
	for (i = 31; i > 0; i -= 2) {
    1586:	8f e1       	ldi	r24, 0x1F	; 31
    1588:	df 01       	movw	r26, r30
    158a:	12 97       	sbiw	r26, 0x02	; 2
		if (i == 1) {
    158c:	81 30       	cpi	r24, 0x01	; 1
    158e:	29 f4       	brne	.+10     	; 0x159a <ht1632c_shift_right+0x2e>
			ledmatrix[1] = ledmatrix[14];
    1590:	90 91 00 3c 	lds	r25, 0x3C00
    1594:	90 93 f3 3b 	sts	0x3BF3, r25
    1598:	09 c0       	rjmp	.+18     	; 0x15ac <ht1632c_shift_right+0x40>
		} else if(i == 17) {
    159a:	81 31       	cpi	r24, 0x11	; 17
    159c:	29 f4       	brne	.+10     	; 0x15a8 <ht1632c_shift_right+0x3c>
			ledmatrix[17] = ledmatrix[30];
    159e:	90 91 10 3c 	lds	r25, 0x3C10
    15a2:	90 93 03 3c 	sts	0x3C03, r25
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <ht1632c_shift_right+0x40>
		} else {
			ledmatrix[i] = ledmatrix[i-2];
    15a8:	9c 91       	ld	r25, X
    15aa:	90 83       	st	Z, r25
    15ac:	82 50       	subi	r24, 0x02	; 2
    15ae:	fd 01       	movw	r30, r26
	int8_t i;
	
	display_refresh_screen();
	_delay_ms(10);
	
	for (i = 31; i > 0; i -= 2) {
    15b0:	8f 3f       	cpi	r24, 0xFF	; 255
    15b2:	51 f7       	brne	.-44     	; 0x1588 <ht1632c_shift_right+0x1c>
    15b4:	e0 e1       	ldi	r30, 0x10	; 16
    15b6:	fc e3       	ldi	r31, 0x3C	; 60
    15b8:	8e e1       	ldi	r24, 0x1E	; 30
    15ba:	df 01       	movw	r26, r30
    15bc:	12 97       	sbiw	r26, 0x02	; 2
		} else {
			ledmatrix[i] = ledmatrix[i-2];
		}
	}
	for (i = 30; i >= 0; i -= 2) {
		if (i == 0) {
    15be:	81 11       	cpse	r24, r1
    15c0:	03 c0       	rjmp	.+6      	; 0x15c8 <ht1632c_shift_right+0x5c>
			ledmatrix[0] = 0;
    15c2:	10 92 f2 3b 	sts	0x3BF2, r1
    15c6:	07 c0       	rjmp	.+14     	; 0x15d6 <ht1632c_shift_right+0x6a>
		} else if(i == 16) {
    15c8:	80 31       	cpi	r24, 0x10	; 16
    15ca:	19 f4       	brne	.+6      	; 0x15d2 <ht1632c_shift_right+0x66>
			ledmatrix[16] = 0;
    15cc:	10 92 02 3c 	sts	0x3C02, r1
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <ht1632c_shift_right+0x6a>
		} else {
			ledmatrix[i] = ledmatrix[i-2];
    15d2:	9c 91       	ld	r25, X
    15d4:	90 83       	st	Z, r25
    15d6:	82 50       	subi	r24, 0x02	; 2
    15d8:	fd 01       	movw	r30, r26
			ledmatrix[17] = ledmatrix[30];
		} else {
			ledmatrix[i] = ledmatrix[i-2];
		}
	}
	for (i = 30; i >= 0; i -= 2) {
    15da:	8e 3f       	cpi	r24, 0xFE	; 254
    15dc:	71 f7       	brne	.-36     	; 0x15ba <ht1632c_shift_right+0x4e>
		} else {
			ledmatrix[i] = ledmatrix[i-2];
		}
	}
	*/
}
    15de:	08 95       	ret

000015e0 <ht1632c_shift_up>:

void ht1632c_shift_up(void) 
{
    15e0:	a2 ef       	ldi	r26, 0xF2	; 242
    15e2:	bb e3       	ldi	r27, 0x3B	; 59
    15e4:	e2 e0       	ldi	r30, 0x02	; 2
    15e6:	fc e3       	ldi	r31, 0x3C	; 60
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
		temp_top = ledmatrix[i];
		temp_bottom = ledmatrix[i+16];
		temp = (temp_top << 8) | (temp_bottom);
    15e8:	8c 91       	ld	r24, X
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	98 2f       	mov	r25, r24
    15ee:	88 27       	eor	r24, r24
    15f0:	20 81       	ld	r18, Z
    15f2:	82 2b       	or	r24, r18
		temp <<= 1;
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
		ledmatrix[i] = (temp >> 8);
    15f8:	9d 93       	st	X+, r25
		ledmatrix[i+16] = temp;
    15fa:	81 93       	st	Z+, r24
	uint8_t temp_bottom;
	uint16_t temp;
	
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
    15fc:	2c e3       	ldi	r18, 0x3C	; 60
    15fe:	e1 31       	cpi	r30, 0x11	; 17
    1600:	f2 07       	cpc	r31, r18
    1602:	91 f7       	brne	.-28     	; 0x15e8 <ht1632c_shift_up+0x8>
		temp <<= 1;
		ledmatrix[i] = (temp >> 8);
		ledmatrix[i+16] = temp;
	}
	
	display_refresh_screen();
    1604:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <display_refresh_screen>
    1608:	8f ef       	ldi	r24, 0xFF	; 255
    160a:	99 ef       	ldi	r25, 0xF9	; 249
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	81 50       	subi	r24, 0x01	; 1
    1610:	90 40       	sbci	r25, 0x00	; 0
    1612:	20 40       	sbci	r18, 0x00	; 0
    1614:	e1 f7       	brne	.-8      	; 0x160e <ht1632c_shift_up+0x2e>
    1616:	00 c0       	rjmp	.+0      	; 0x1618 <ht1632c_shift_up+0x38>
    1618:	00 00       	nop
    161a:	08 95       	ret

0000161c <ht1632c_shift_down>:
	_delay_ms(10);
}

void ht1632c_shift_down(void) 
{
    161c:	a2 ef       	ldi	r26, 0xF2	; 242
    161e:	bb e3       	ldi	r27, 0x3B	; 59
    1620:	e2 e0       	ldi	r30, 0x02	; 2
    1622:	fc e3       	ldi	r31, 0x3C	; 60
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
		temp_top = ledmatrix[i];
		temp_bottom = ledmatrix[i+16];
		temp = (temp_top << 8) | (temp_bottom);
    1624:	8c 91       	ld	r24, X
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	98 2f       	mov	r25, r24
    162a:	88 27       	eor	r24, r24
    162c:	20 81       	ld	r18, Z
    162e:	82 2b       	or	r24, r18
		temp >>= 1;
    1630:	96 95       	lsr	r25
    1632:	87 95       	ror	r24
		ledmatrix[i] = (temp >> 8);
    1634:	9d 93       	st	X+, r25
		ledmatrix[i+16] = temp;
    1636:	81 93       	st	Z+, r24
	uint8_t temp_bottom;
	uint16_t temp;
	
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
    1638:	2c e3       	ldi	r18, 0x3C	; 60
    163a:	e1 31       	cpi	r30, 0x11	; 17
    163c:	f2 07       	cpc	r31, r18
    163e:	91 f7       	brne	.-28     	; 0x1624 <ht1632c_shift_down+0x8>
		temp >>= 1;
		ledmatrix[i] = (temp >> 8);
		ledmatrix[i+16] = temp;
	}
	
	display_refresh_screen();
    1640:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <display_refresh_screen>
    1644:	8f ef       	ldi	r24, 0xFF	; 255
    1646:	99 ef       	ldi	r25, 0xF9	; 249
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	81 50       	subi	r24, 0x01	; 1
    164c:	90 40       	sbci	r25, 0x00	; 0
    164e:	20 40       	sbci	r18, 0x00	; 0
    1650:	e1 f7       	brne	.-8      	; 0x164a <ht1632c_shift_down+0x2e>
    1652:	00 c0       	rjmp	.+0      	; 0x1654 <ht1632c_shift_down+0x38>
    1654:	00 00       	nop
    1656:	08 95       	ret

00001658 <ht1632c_slide_in_from_left>:
}

/*------------------------------SLIDE FUNCTIONS------------------------------*/

void ht1632c_slide_in_from_left(void) 
{
    1658:	ef 92       	push	r14
    165a:	ff 92       	push	r15
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	a0 97       	sbiw	r28, 0x20	; 32
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	de bf       	out	0x3e, r29	; 62
	uint8_t temp[32];
	
	memset(temp,0,32);
    166e:	80 e2       	ldi	r24, 0x20	; 32
    1670:	de 01       	movw	r26, r28
    1672:	11 96       	adiw	r26, 0x01	; 1
    1674:	fd 01       	movw	r30, r26
    1676:	98 2f       	mov	r25, r24
    1678:	11 92       	st	Z+, r1
    167a:	9a 95       	dec	r25
    167c:	e9 f7       	brne	.-6      	; 0x1678 <ht1632c_slide_in_from_left+0x20>
	memcpy(temp,ledmatrix,32);
    167e:	e2 ef       	ldi	r30, 0xF2	; 242
    1680:	fb e3       	ldi	r31, 0x3B	; 59
    1682:	98 2f       	mov	r25, r24
    1684:	01 90       	ld	r0, Z+
    1686:	0d 92       	st	X+, r0
    1688:	9a 95       	dec	r25
    168a:	e1 f7       	brne	.-8      	; 0x1684 <ht1632c_slide_in_from_left+0x2c>
	memset(ledmatrix,0,32);
    168c:	e2 ef       	ldi	r30, 0xF2	; 242
    168e:	fb e3       	ldi	r31, 0x3B	; 59
    1690:	df 01       	movw	r26, r30
    1692:	1d 92       	st	X+, r1
    1694:	8a 95       	dec	r24
    1696:	e9 f7       	brne	.-6      	; 0x1692 <ht1632c_slide_in_from_left+0x3a>
    1698:	8e 01       	movw	r16, r28
    169a:	00 5e       	subi	r16, 0xE0	; 224
    169c:	1f 4f       	sbci	r17, 0xFF	; 255
    169e:	7e 01       	movw	r14, r28
    16a0:	b0 e1       	ldi	r27, 0x10	; 16
    16a2:	eb 0e       	add	r14, r27
    16a4:	f1 1c       	adc	r15, r1
    16a6:	f8 01       	movw	r30, r16
    16a8:	70 97       	sbiw	r30, 0x10	; 16
	
	int8_t i;
	
	for (i = 31; i >= 17; i -= 2) {
		ledmatrix[0] = temp[i-16];
    16aa:	80 81       	ld	r24, Z
    16ac:	80 93 f2 3b 	sts	0x3BF2, r24
		ledmatrix[16] = temp[i];
    16b0:	f8 01       	movw	r30, r16
    16b2:	80 81       	ld	r24, Z
    16b4:	80 93 02 3c 	sts	0x3C02, r24
		ht1632c_shift_right();
    16b8:	59 df       	rcall	.-334    	; 0x156c <ht1632c_shift_right>
    16ba:	02 50       	subi	r16, 0x02	; 2
    16bc:	11 09       	sbc	r17, r1
	memcpy(temp,ledmatrix,32);
	memset(ledmatrix,0,32);
	
	int8_t i;
	
	for (i = 31; i >= 17; i -= 2) {
    16be:	0e 15       	cp	r16, r14
    16c0:	1f 05       	cpc	r17, r15
    16c2:	89 f7       	brne	.-30     	; 0x16a6 <ht1632c_slide_in_from_left+0x4e>
    16c4:	8e 01       	movw	r16, r28
    16c6:	01 5e       	subi	r16, 0xE1	; 225
    16c8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ca:	6e e1       	ldi	r22, 0x1E	; 30
    16cc:	f6 2e       	mov	r15, r22
    16ce:	f8 01       	movw	r30, r16
    16d0:	70 97       	sbiw	r30, 0x10	; 16
		ledmatrix[16] = temp[i];
		ht1632c_shift_right();
	}
	
	for (i = 30; i >= 16; i -= 2) {
		ledmatrix[0] = temp[i-16];
    16d2:	80 81       	ld	r24, Z
    16d4:	80 93 f2 3b 	sts	0x3BF2, r24
		ledmatrix[16] = temp[i];
    16d8:	d8 01       	movw	r26, r16
    16da:	8c 91       	ld	r24, X
    16dc:	80 93 02 3c 	sts	0x3C02, r24
		if (i == 16) {
    16e0:	b0 e1       	ldi	r27, 0x10	; 16
    16e2:	fb 12       	cpse	r15, r27
    16e4:	03 c0       	rjmp	.+6      	; 0x16ec <ht1632c_slide_in_from_left+0x94>
			display_refresh_screen();
    16e6:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <display_refresh_screen>
    16ea:	01 c0       	rjmp	.+2      	; 0x16ee <ht1632c_slide_in_from_left+0x96>
		} else {
			ht1632c_shift_right();
    16ec:	3f df       	rcall	.-386    	; 0x156c <ht1632c_shift_right>
    16ee:	fa 94       	dec	r15
    16f0:	fa 94       	dec	r15
    16f2:	02 50       	subi	r16, 0x02	; 2
    16f4:	11 09       	sbc	r17, r1
		ledmatrix[0] = temp[i-16];
		ledmatrix[16] = temp[i];
		ht1632c_shift_right();
	}
	
	for (i = 30; i >= 16; i -= 2) {
    16f6:	ee e0       	ldi	r30, 0x0E	; 14
    16f8:	fe 12       	cpse	r15, r30
    16fa:	e9 cf       	rjmp	.-46     	; 0x16ce <ht1632c_slide_in_from_left+0x76>
			display_refresh_screen();
		} else {
			ht1632c_shift_right();
		}
	}
}
    16fc:	a0 96       	adiw	r28, 0x20	; 32
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	1f 91       	pop	r17
    1708:	0f 91       	pop	r16
    170a:	ff 90       	pop	r15
    170c:	ef 90       	pop	r14
    170e:	08 95       	ret

00001710 <ht1632c_slide_in_from_right>:

void ht1632c_slide_in_from_right(void) 
{
    1710:	ef 92       	push	r14
    1712:	ff 92       	push	r15
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	a0 97       	sbiw	r28, 0x20	; 32
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	de bf       	out	0x3e, r29	; 62
	uint8_t temp[32];
	
	memset(temp,0,32);
    1726:	80 e2       	ldi	r24, 0x20	; 32
    1728:	de 01       	movw	r26, r28
    172a:	11 96       	adiw	r26, 0x01	; 1
    172c:	fd 01       	movw	r30, r26
    172e:	98 2f       	mov	r25, r24
    1730:	11 92       	st	Z+, r1
    1732:	9a 95       	dec	r25
    1734:	e9 f7       	brne	.-6      	; 0x1730 <ht1632c_slide_in_from_right+0x20>
	memcpy(temp,ledmatrix,32);
    1736:	e2 ef       	ldi	r30, 0xF2	; 242
    1738:	fb e3       	ldi	r31, 0x3B	; 59
    173a:	98 2f       	mov	r25, r24
    173c:	01 90       	ld	r0, Z+
    173e:	0d 92       	st	X+, r0
    1740:	9a 95       	dec	r25
    1742:	e1 f7       	brne	.-8      	; 0x173c <ht1632c_slide_in_from_right+0x2c>
	memset(ledmatrix,0,32);
    1744:	e2 ef       	ldi	r30, 0xF2	; 242
    1746:	fb e3       	ldi	r31, 0x3B	; 59
    1748:	df 01       	movw	r26, r30
    174a:	1d 92       	st	X+, r1
    174c:	8a 95       	dec	r24
    174e:	e9 f7       	brne	.-6      	; 0x174a <ht1632c_slide_in_from_right+0x3a>
    1750:	8e 01       	movw	r16, r28
    1752:	0f 5e       	subi	r16, 0xEF	; 239
    1754:	1f 4f       	sbci	r17, 0xFF	; 255
    1756:	7e 01       	movw	r14, r28
    1758:	b1 e2       	ldi	r27, 0x21	; 33
    175a:	eb 0e       	add	r14, r27
    175c:	f1 1c       	adc	r15, r1
    175e:	f8 01       	movw	r30, r16
    1760:	70 97       	sbiw	r30, 0x10	; 16
	
	int8_t i;
	
	for (i = 0; i <= 14; i += 2)
	{
		ledmatrix[15] = temp[i];
    1762:	80 81       	ld	r24, Z
    1764:	80 93 01 3c 	sts	0x3C01, r24
		ledmatrix[31] = temp[i+16];
    1768:	f8 01       	movw	r30, r16
    176a:	80 81       	ld	r24, Z
    176c:	80 93 11 3c 	sts	0x3C11, r24
		ht1632c_shift_left();
    1770:	c3 de       	rcall	.-634    	; 0x14f8 <ht1632c_shift_left>
    1772:	0e 5f       	subi	r16, 0xFE	; 254
    1774:	1f 4f       	sbci	r17, 0xFF	; 255
	memcpy(temp,ledmatrix,32);
	memset(ledmatrix,0,32);
	
	int8_t i;
	
	for (i = 0; i <= 14; i += 2)
    1776:	0e 15       	cp	r16, r14
    1778:	1f 05       	cpc	r17, r15
    177a:	89 f7       	brne	.-30     	; 0x175e <ht1632c_slide_in_from_right+0x4e>
    177c:	8e 01       	movw	r16, r28
    177e:	0e 5e       	subi	r16, 0xEE	; 238
    1780:	1f 4f       	sbci	r17, 0xFF	; 255
    1782:	ff 24       	eor	r15, r15
    1784:	f3 94       	inc	r15
    1786:	f8 01       	movw	r30, r16
    1788:	70 97       	sbiw	r30, 0x10	; 16
		ht1632c_shift_left();
	}
	
	for (i = 1; i <= 15; i += 2)
	{
		ledmatrix[15] = temp[i];
    178a:	80 81       	ld	r24, Z
    178c:	80 93 01 3c 	sts	0x3C01, r24
		ledmatrix[31] = temp[i+16];
    1790:	d8 01       	movw	r26, r16
    1792:	8c 91       	ld	r24, X
    1794:	80 93 11 3c 	sts	0x3C11, r24
	
		if (i == 15) {
    1798:	bf e0       	ldi	r27, 0x0F	; 15
    179a:	fb 12       	cpse	r15, r27
    179c:	03 c0       	rjmp	.+6      	; 0x17a4 <ht1632c_slide_in_from_right+0x94>
			display_refresh_screen();
    179e:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <display_refresh_screen>
    17a2:	01 c0       	rjmp	.+2      	; 0x17a6 <ht1632c_slide_in_from_right+0x96>
		} else {
			ht1632c_shift_left();
    17a4:	a9 de       	rcall	.-686    	; 0x14f8 <ht1632c_shift_left>
    17a6:	f3 94       	inc	r15
    17a8:	f3 94       	inc	r15
    17aa:	0e 5f       	subi	r16, 0xFE	; 254
    17ac:	1f 4f       	sbci	r17, 0xFF	; 255
		ledmatrix[15] = temp[i];
		ledmatrix[31] = temp[i+16];
		ht1632c_shift_left();
	}
	
	for (i = 1; i <= 15; i += 2)
    17ae:	e1 e1       	ldi	r30, 0x11	; 17
    17b0:	fe 12       	cpse	r15, r30
    17b2:	e9 cf       	rjmp	.-46     	; 0x1786 <ht1632c_slide_in_from_right+0x76>
			display_refresh_screen();
		} else {
			ht1632c_shift_left();
		}
	}
}
    17b4:	a0 96       	adiw	r28, 0x20	; 32
    17b6:	cd bf       	out	0x3d, r28	; 61
    17b8:	de bf       	out	0x3e, r29	; 62
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	1f 91       	pop	r17
    17c0:	0f 91       	pop	r16
    17c2:	ff 90       	pop	r15
    17c4:	ef 90       	pop	r14
    17c6:	08 95       	ret

000017c8 <ht1632c_slide_in_from_bottom>:

void ht1632c_slide_in_from_bottom(void) 
{
    17c8:	4f 92       	push	r4
    17ca:	5f 92       	push	r5
    17cc:	7f 92       	push	r7
    17ce:	8f 92       	push	r8
    17d0:	9f 92       	push	r9
    17d2:	af 92       	push	r10
    17d4:	bf 92       	push	r11
    17d6:	cf 92       	push	r12
    17d8:	df 92       	push	r13
    17da:	ef 92       	push	r14
    17dc:	ff 92       	push	r15
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	a0 97       	sbiw	r28, 0x20	; 32
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	de bf       	out	0x3e, r29	; 62
	uint8_t temp[32];
	
	memset(temp,0,32);
    17f0:	80 e2       	ldi	r24, 0x20	; 32
    17f2:	de 01       	movw	r26, r28
    17f4:	11 96       	adiw	r26, 0x01	; 1
    17f6:	fd 01       	movw	r30, r26
    17f8:	98 2f       	mov	r25, r24
    17fa:	11 92       	st	Z+, r1
    17fc:	9a 95       	dec	r25
    17fe:	e9 f7       	brne	.-6      	; 0x17fa <ht1632c_slide_in_from_bottom+0x32>
	memcpy(temp,ledmatrix,32);
    1800:	e2 ef       	ldi	r30, 0xF2	; 242
    1802:	fb e3       	ldi	r31, 0x3B	; 59
    1804:	98 2f       	mov	r25, r24
    1806:	01 90       	ld	r0, Z+
    1808:	0d 92       	st	X+, r0
    180a:	9a 95       	dec	r25
    180c:	e1 f7       	brne	.-8      	; 0x1806 <ht1632c_slide_in_from_bottom+0x3e>
	memset(ledmatrix,0,32);
    180e:	e2 ef       	ldi	r30, 0xF2	; 242
    1810:	fb e3       	ldi	r31, 0x3B	; 59
    1812:	df 01       	movw	r26, r30
    1814:	1d 92       	st	X+, r1
    1816:	8a 95       	dec	r24
    1818:	e9 f7       	brne	.-6      	; 0x1814 <ht1632c_slide_in_from_bottom+0x4c>
    181a:	00 e0       	ldi	r16, 0x00	; 0
    181c:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
		for (col = 0; col < 15; col++) {
			if (row < 8) {
				ledmatrix[col+16] |= (temp[col] & (0x80 >> row)) >> (7-row);
    181e:	70 e8       	ldi	r23, 0x80	; 128
    1820:	e7 2e       	mov	r14, r23
    1822:	f1 2c       	mov	r15, r1
    1824:	ef e0       	ldi	r30, 0x0F	; 15
    1826:	ae 2e       	mov	r10, r30
    1828:	b1 2c       	mov	r11, r1
    182a:	f7 e0       	ldi	r31, 0x07	; 7
    182c:	cf 2e       	mov	r12, r31
    182e:	d1 2c       	mov	r13, r1
    1830:	a7 01       	movw	r20, r14
    1832:	00 2e       	mov	r0, r16
    1834:	02 c0       	rjmp	.+4      	; 0x183a <ht1632c_slide_in_from_bottom+0x72>
    1836:	55 95       	asr	r21
    1838:	47 95       	ror	r20
    183a:	0a 94       	dec	r0
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <ht1632c_slide_in_from_bottom+0x6e>
    183e:	98 01       	movw	r18, r16
    1840:	28 50       	subi	r18, 0x08	; 8
    1842:	31 09       	sbc	r19, r1
				} else {
				ledmatrix[col+16] |= (temp[col+16] & (0x80 >> (row-8))) >> (15-row);
    1844:	d7 01       	movw	r26, r14
    1846:	02 c0       	rjmp	.+4      	; 0x184c <ht1632c_slide_in_from_bottom+0x84>
    1848:	b5 95       	asr	r27
    184a:	a7 95       	ror	r26
    184c:	2a 95       	dec	r18
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <ht1632c_slide_in_from_bottom+0x80>
    1850:	9d 01       	movw	r18, r26
    1852:	e2 e0       	ldi	r30, 0x02	; 2
    1854:	fc e3       	ldi	r31, 0x3C	; 60
    1856:	ce 01       	movw	r24, r28
    1858:	41 96       	adiw	r24, 0x11	; 17
    185a:	2c 01       	movw	r4, r24
    185c:	70 2e       	mov	r7, r16
    185e:	b5 01       	movw	r22, r10
    1860:	60 1b       	sub	r22, r16
    1862:	71 0b       	sbc	r23, r17
    1864:	46 01       	movw	r8, r12
    1866:	80 1a       	sub	r8, r16
    1868:	91 0a       	sbc	r9, r17
	uint8_t col;
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
		for (col = 0; col < 15; col++) {
			if (row < 8) {
    186a:	b7 e0       	ldi	r27, 0x07	; 7
    186c:	b7 15       	cp	r27, r7
    186e:	70 f0       	brcs	.+28     	; 0x188c <ht1632c_slide_in_from_bottom+0xc4>
    1870:	c2 01       	movw	r24, r4
    1872:	40 97       	sbiw	r24, 0x10	; 16
				ledmatrix[col+16] |= (temp[col] & (0x80 >> row)) >> (7-row);
    1874:	dc 01       	movw	r26, r24
    1876:	8c 91       	ld	r24, X
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	84 23       	and	r24, r20
    187c:	95 23       	and	r25, r21
    187e:	08 2c       	mov	r0, r8
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <ht1632c_slide_in_from_bottom+0xbe>
    1882:	95 95       	asr	r25
    1884:	87 95       	ror	r24
    1886:	0a 94       	dec	r0
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <ht1632c_slide_in_from_bottom+0xba>
    188a:	0b c0       	rjmp	.+22     	; 0x18a2 <ht1632c_slide_in_from_bottom+0xda>
				} else {
				ledmatrix[col+16] |= (temp[col+16] & (0x80 >> (row-8))) >> (15-row);
    188c:	d2 01       	movw	r26, r4
    188e:	8c 91       	ld	r24, X
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	82 23       	and	r24, r18
    1894:	93 23       	and	r25, r19
    1896:	06 2e       	mov	r0, r22
    1898:	02 c0       	rjmp	.+4      	; 0x189e <ht1632c_slide_in_from_bottom+0xd6>
    189a:	95 95       	asr	r25
    189c:	87 95       	ror	r24
    189e:	0a 94       	dec	r0
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <ht1632c_slide_in_from_bottom+0xd2>
    18a2:	90 81       	ld	r25, Z
    18a4:	98 2b       	or	r25, r24
    18a6:	90 83       	st	Z, r25
    18a8:	31 96       	adiw	r30, 0x01	; 1
    18aa:	bf ef       	ldi	r27, 0xFF	; 255
    18ac:	4b 1a       	sub	r4, r27
    18ae:	5b 0a       	sbc	r5, r27
	
	uint8_t col;
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
		for (col = 0; col < 15; col++) {
    18b0:	8c e3       	ldi	r24, 0x3C	; 60
    18b2:	e1 31       	cpi	r30, 0x11	; 17
    18b4:	f8 07       	cpc	r31, r24
    18b6:	c9 f6       	brne	.-78     	; 0x186a <ht1632c_slide_in_from_bottom+0xa2>
				ledmatrix[col+16] |= (temp[col] & (0x80 >> row)) >> (7-row);
				} else {
				ledmatrix[col+16] |= (temp[col+16] & (0x80 >> (row-8))) >> (15-row);
			}
		}
		if (row < 15) {
    18b8:	9f e0       	ldi	r25, 0x0F	; 15
    18ba:	79 16       	cp	r7, r25
    18bc:	11 f0       	breq	.+4      	; 0x18c2 <ht1632c_slide_in_from_bottom+0xfa>
			ht1632c_shift_up();
    18be:	90 de       	rcall	.-736    	; 0x15e0 <ht1632c_shift_up>
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <ht1632c_slide_in_from_bottom+0xfe>
			} else {
			display_refresh_screen();
    18c2:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <display_refresh_screen>
    18c6:	0f 5f       	subi	r16, 0xFF	; 255
    18c8:	1f 4f       	sbci	r17, 0xFF	; 255
	memset(ledmatrix,0,32);
	
	uint8_t col;
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
    18ca:	00 31       	cpi	r16, 0x10	; 16
    18cc:	11 05       	cpc	r17, r1
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <ht1632c_slide_in_from_bottom+0x10a>
    18d0:	af cf       	rjmp	.-162    	; 0x1830 <ht1632c_slide_in_from_bottom+0x68>
			ht1632c_shift_up();
			} else {
			display_refresh_screen();
		}
	}
}
    18d2:	a0 96       	adiw	r28, 0x20	; 32
    18d4:	cd bf       	out	0x3d, r28	; 61
    18d6:	de bf       	out	0x3e, r29	; 62
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	1f 91       	pop	r17
    18de:	0f 91       	pop	r16
    18e0:	ff 90       	pop	r15
    18e2:	ef 90       	pop	r14
    18e4:	df 90       	pop	r13
    18e6:	cf 90       	pop	r12
    18e8:	bf 90       	pop	r11
    18ea:	af 90       	pop	r10
    18ec:	9f 90       	pop	r9
    18ee:	8f 90       	pop	r8
    18f0:	7f 90       	pop	r7
    18f2:	5f 90       	pop	r5
    18f4:	4f 90       	pop	r4
    18f6:	08 95       	ret

000018f8 <ht1632c_slide_in_from_top>:

void ht1632c_slide_in_from_top(void) 
{
    18f8:	6f 92       	push	r6
    18fa:	7f 92       	push	r7
    18fc:	8f 92       	push	r8
    18fe:	9f 92       	push	r9
    1900:	af 92       	push	r10
    1902:	bf 92       	push	r11
    1904:	cf 92       	push	r12
    1906:	df 92       	push	r13
    1908:	ef 92       	push	r14
    190a:	ff 92       	push	r15
    190c:	0f 93       	push	r16
    190e:	1f 93       	push	r17
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	a0 97       	sbiw	r28, 0x20	; 32
    191a:	cd bf       	out	0x3d, r28	; 61
    191c:	de bf       	out	0x3e, r29	; 62
	uint8_t temp[32];
	
	memset(temp,0,32);
    191e:	80 e2       	ldi	r24, 0x20	; 32
    1920:	de 01       	movw	r26, r28
    1922:	11 96       	adiw	r26, 0x01	; 1
    1924:	fd 01       	movw	r30, r26
    1926:	98 2f       	mov	r25, r24
    1928:	11 92       	st	Z+, r1
    192a:	9a 95       	dec	r25
    192c:	e9 f7       	brne	.-6      	; 0x1928 <ht1632c_slide_in_from_top+0x30>
	memcpy(temp,ledmatrix,32);
    192e:	e2 ef       	ldi	r30, 0xF2	; 242
    1930:	fb e3       	ldi	r31, 0x3B	; 59
    1932:	98 2f       	mov	r25, r24
    1934:	01 90       	ld	r0, Z+
    1936:	0d 92       	st	X+, r0
    1938:	9a 95       	dec	r25
    193a:	e1 f7       	brne	.-8      	; 0x1934 <ht1632c_slide_in_from_top+0x3c>
	memset(ledmatrix,0,32);
    193c:	e2 ef       	ldi	r30, 0xF2	; 242
    193e:	fb e3       	ldi	r31, 0x3B	; 59
    1940:	df 01       	movw	r26, r30
    1942:	1d 92       	st	X+, r1
    1944:	8a 95       	dec	r24
    1946:	e9 f7       	brne	.-6      	; 0x1942 <ht1632c_slide_in_from_top+0x4a>
    1948:	0f e0       	ldi	r16, 0x0F	; 15
    194a:	10 e0       	ldi	r17, 0x00	; 0
    194c:	af e0       	ldi	r26, 0x0F	; 15
    194e:	aa 2e       	mov	r10, r26
    1950:	b1 2c       	mov	r11, r1
	int8_t row;
	
	for (row = 15; row > -1; row--) {
		for (col = 0; col < 15; col++) {
			if (row > 7) {
				ledmatrix[col] |= (temp[col+16] & (0x01 << (15-row))) << (row-8);
    1952:	ee 24       	eor	r14, r14
    1954:	e3 94       	inc	r14
    1956:	f1 2c       	mov	r15, r1
    1958:	87 e0       	ldi	r24, 0x07	; 7
    195a:	c8 2e       	mov	r12, r24
    195c:	d1 2c       	mov	r13, r1
    195e:	a5 01       	movw	r20, r10
    1960:	40 1b       	sub	r20, r16
    1962:	51 0b       	sbc	r21, r17
    1964:	d7 01       	movw	r26, r14
    1966:	02 c0       	rjmp	.+4      	; 0x196c <ht1632c_slide_in_from_top+0x74>
    1968:	aa 0f       	add	r26, r26
    196a:	bb 1f       	adc	r27, r27
    196c:	4a 95       	dec	r20
    196e:	e2 f7       	brpl	.-8      	; 0x1968 <ht1632c_slide_in_from_top+0x70>
    1970:	ad 01       	movw	r20, r26
			} else {
				ledmatrix[col] |= (temp[col] & (0x01 << (7-row))) << (row);
    1972:	90 2e       	mov	r9, r16
    1974:	96 01       	movw	r18, r12
    1976:	20 1b       	sub	r18, r16
    1978:	31 0b       	sbc	r19, r17
    197a:	f7 01       	movw	r30, r14
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <ht1632c_slide_in_from_top+0x8a>
    197e:	ee 0f       	add	r30, r30
    1980:	ff 1f       	adc	r31, r31
    1982:	2a 95       	dec	r18
    1984:	e2 f7       	brpl	.-8      	; 0x197e <ht1632c_slide_in_from_top+0x86>
    1986:	9f 01       	movw	r18, r30
    1988:	e2 ef       	ldi	r30, 0xF2	; 242
    198a:	fb e3       	ldi	r31, 0x3B	; 59
    198c:	ce 01       	movw	r24, r28
    198e:	41 96       	adiw	r24, 0x11	; 17
    1990:	3c 01       	movw	r6, r24
    1992:	80 2e       	mov	r8, r16
    1994:	b8 01       	movw	r22, r16
    1996:	68 50       	subi	r22, 0x08	; 8
    1998:	71 09       	sbc	r23, r1
	int8_t col;
	int8_t row;
	
	for (row = 15; row > -1; row--) {
		for (col = 0; col < 15; col++) {
			if (row > 7) {
    199a:	b7 e0       	ldi	r27, 0x07	; 7
    199c:	b8 15       	cp	r27, r8
    199e:	5c f4       	brge	.+22     	; 0x19b6 <ht1632c_slide_in_from_top+0xbe>
				ledmatrix[col] |= (temp[col+16] & (0x01 << (15-row))) << (row-8);
    19a0:	d3 01       	movw	r26, r6
    19a2:	8c 91       	ld	r24, X
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	84 23       	and	r24, r20
    19a8:	95 23       	and	r25, r21
    19aa:	06 2e       	mov	r0, r22
    19ac:	01 c0       	rjmp	.+2      	; 0x19b0 <ht1632c_slide_in_from_top+0xb8>
    19ae:	88 0f       	add	r24, r24
    19b0:	0a 94       	dec	r0
    19b2:	ea f7       	brpl	.-6      	; 0x19ae <ht1632c_slide_in_from_top+0xb6>
    19b4:	0c c0       	rjmp	.+24     	; 0x19ce <ht1632c_slide_in_from_top+0xd6>
    19b6:	c3 01       	movw	r24, r6
    19b8:	40 97       	sbiw	r24, 0x10	; 16
			} else {
				ledmatrix[col] |= (temp[col] & (0x01 << (7-row))) << (row);
    19ba:	dc 01       	movw	r26, r24
    19bc:	8c 91       	ld	r24, X
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	82 23       	and	r24, r18
    19c2:	93 23       	and	r25, r19
    19c4:	09 2c       	mov	r0, r9
    19c6:	01 c0       	rjmp	.+2      	; 0x19ca <ht1632c_slide_in_from_top+0xd2>
    19c8:	88 0f       	add	r24, r24
    19ca:	0a 94       	dec	r0
    19cc:	ea f7       	brpl	.-6      	; 0x19c8 <ht1632c_slide_in_from_top+0xd0>
    19ce:	90 81       	ld	r25, Z
    19d0:	98 2b       	or	r25, r24
    19d2:	90 83       	st	Z, r25
    19d4:	31 96       	adiw	r30, 0x01	; 1
    19d6:	bf ef       	ldi	r27, 0xFF	; 255
    19d8:	6b 1a       	sub	r6, r27
    19da:	7b 0a       	sbc	r7, r27
	
	int8_t col;
	int8_t row;
	
	for (row = 15; row > -1; row--) {
		for (col = 0; col < 15; col++) {
    19dc:	8c e3       	ldi	r24, 0x3C	; 60
    19de:	e1 30       	cpi	r30, 0x01	; 1
    19e0:	f8 07       	cpc	r31, r24
    19e2:	d9 f6       	brne	.-74     	; 0x199a <ht1632c_slide_in_from_top+0xa2>
				ledmatrix[col] |= (temp[col+16] & (0x01 << (15-row))) << (row-8);
			} else {
				ledmatrix[col] |= (temp[col] & (0x01 << (7-row))) << (row);
			}
		}
		if (row > 0) {
    19e4:	88 20       	and	r8, r8
    19e6:	11 f0       	breq	.+4      	; 0x19ec <ht1632c_slide_in_from_top+0xf4>
			ht1632c_shift_down();
    19e8:	19 de       	rcall	.-974    	; 0x161c <ht1632c_shift_down>
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <ht1632c_slide_in_from_top+0xf8>
		} else {
			display_refresh_screen();
    19ec:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <display_refresh_screen>
    19f0:	01 50       	subi	r16, 0x01	; 1
    19f2:	11 09       	sbc	r17, r1
    19f4:	08 f0       	brcs	.+2      	; 0x19f8 <ht1632c_slide_in_from_top+0x100>
    19f6:	b3 cf       	rjmp	.-154    	; 0x195e <ht1632c_slide_in_from_top+0x66>
		}
	}
}
    19f8:	a0 96       	adiw	r28, 0x20	; 32
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	de bf       	out	0x3e, r29	; 62
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	1f 91       	pop	r17
    1a04:	0f 91       	pop	r16
    1a06:	ff 90       	pop	r15
    1a08:	ef 90       	pop	r14
    1a0a:	df 90       	pop	r13
    1a0c:	cf 90       	pop	r12
    1a0e:	bf 90       	pop	r11
    1a10:	af 90       	pop	r10
    1a12:	9f 90       	pop	r9
    1a14:	8f 90       	pop	r8
    1a16:	7f 90       	pop	r7
    1a18:	6f 90       	pop	r6
    1a1a:	08 95       	ret

00001a1c <ht1632c_print_buffer>:

/*------------------------------PRINT FUNCTIONS------------------------------*/

void ht1632c_print_buffer(char *buffer, uint16_t length) 
{
    1a1c:	ef 92       	push	r14
    1a1e:	ff 92       	push	r15
    1a20:	0f 93       	push	r16
    1a22:	1f 93       	push	r17
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	8b 01       	movw	r16, r22
    1a2a:	ec 01       	movw	r28, r24
    1a2c:	7c 01       	movw	r14, r24
    1a2e:	e6 0e       	add	r14, r22
    1a30:	f7 1e       	adc	r15, r23
	uint16_t i;
	
	//Shift buffer into visible area
	for (i = 0; i < (length); i++) {
    1a32:	ce 15       	cp	r28, r14
    1a34:	df 05       	cpc	r29, r15
    1a36:	c1 f0       	breq	.+48     	; 0x1a68 <ht1632c_print_buffer+0x4c>
		ht1632c_shift_left();
    1a38:	5f dd       	rcall	.-1346   	; 0x14f8 <ht1632c_shift_left>
    1a3a:	fe 01       	movw	r30, r28
		ledmatrix[15] = buffer[i] >> 3;
    1a3c:	89 91       	ld	r24, Y+
    1a3e:	86 95       	lsr	r24
    1a40:	86 95       	lsr	r24
    1a42:	86 95       	lsr	r24
    1a44:	80 93 01 3c 	sts	0x3C01, r24
		ledmatrix[31] = buffer[i] << 5;
    1a48:	80 81       	ld	r24, Z
    1a4a:	82 95       	swap	r24
    1a4c:	88 0f       	add	r24, r24
    1a4e:	80 7e       	andi	r24, 0xE0	; 224
    1a50:	80 93 11 3c 	sts	0x3C11, r24
    1a54:	2f ef       	ldi	r18, 0xFF	; 255
    1a56:	80 e7       	ldi	r24, 0x70	; 112
    1a58:	92 e0       	ldi	r25, 0x02	; 2
    1a5a:	21 50       	subi	r18, 0x01	; 1
    1a5c:	80 40       	sbci	r24, 0x00	; 0
    1a5e:	90 40       	sbci	r25, 0x00	; 0
    1a60:	e1 f7       	brne	.-8      	; 0x1a5a <ht1632c_print_buffer+0x3e>
    1a62:	00 c0       	rjmp	.+0      	; 0x1a64 <ht1632c_print_buffer+0x48>
    1a64:	00 00       	nop
    1a66:	e5 cf       	rjmp	.-54     	; 0x1a32 <ht1632c_print_buffer+0x16>
		_delay_ms(25);
	}
	
	//Shift buffer out of visible area
	if ((length/4) < 15) {
    1a68:	0c 33       	cpi	r16, 0x3C	; 60
    1a6a:	11 05       	cpc	r17, r1
    1a6c:	38 f0       	brcs	.+14     	; 0x1a7c <ht1632c_print_buffer+0x60>
		for (i = 0; i < 30; i++) {
			ht1632c_shift_left();
			_delay_ms(25);
		}
	} else {
		for (i = 0; i < (length/4); i++) {
    1a6e:	16 95       	lsr	r17
    1a70:	07 95       	ror	r16
    1a72:	16 95       	lsr	r17
    1a74:	07 95       	ror	r16
    1a76:	c0 e0       	ldi	r28, 0x00	; 0
    1a78:	d0 e0       	ldi	r29, 0x00	; 0
    1a7a:	10 c0       	rjmp	.+32     	; 0x1a9c <ht1632c_print_buffer+0x80>
		ledmatrix[31] = buffer[i] << 5;
		_delay_ms(25);
	}
	
	//Shift buffer out of visible area
	if ((length/4) < 15) {
    1a7c:	ce e1       	ldi	r28, 0x1E	; 30
    1a7e:	d0 e0       	ldi	r29, 0x00	; 0
		for (i = 0; i < 30; i++) {
			ht1632c_shift_left();
    1a80:	3b dd       	rcall	.-1418   	; 0x14f8 <ht1632c_shift_left>
    1a82:	2f ef       	ldi	r18, 0xFF	; 255
    1a84:	80 e7       	ldi	r24, 0x70	; 112
    1a86:	92 e0       	ldi	r25, 0x02	; 2
    1a88:	21 50       	subi	r18, 0x01	; 1
    1a8a:	80 40       	sbci	r24, 0x00	; 0
    1a8c:	90 40       	sbci	r25, 0x00	; 0
    1a8e:	e1 f7       	brne	.-8      	; 0x1a88 <ht1632c_print_buffer+0x6c>
    1a90:	00 c0       	rjmp	.+0      	; 0x1a92 <ht1632c_print_buffer+0x76>
    1a92:	00 00       	nop
    1a94:	21 97       	sbiw	r28, 0x01	; 1
		_delay_ms(25);
	}
	
	//Shift buffer out of visible area
	if ((length/4) < 15) {
		for (i = 0; i < 30; i++) {
    1a96:	20 97       	sbiw	r28, 0x00	; 0
    1a98:	99 f7       	brne	.-26     	; 0x1a80 <ht1632c_print_buffer+0x64>
    1a9a:	0e c0       	rjmp	.+28     	; 0x1ab8 <ht1632c_print_buffer+0x9c>
			ht1632c_shift_left();
			_delay_ms(25);
		}
	} else {
		for (i = 0; i < (length/4); i++) {
			ht1632c_shift_left();
    1a9c:	2d dd       	rcall	.-1446   	; 0x14f8 <ht1632c_shift_left>
    1a9e:	2f ef       	ldi	r18, 0xFF	; 255
    1aa0:	80 e7       	ldi	r24, 0x70	; 112
    1aa2:	92 e0       	ldi	r25, 0x02	; 2
    1aa4:	21 50       	subi	r18, 0x01	; 1
    1aa6:	80 40       	sbci	r24, 0x00	; 0
    1aa8:	90 40       	sbci	r25, 0x00	; 0
    1aaa:	e1 f7       	brne	.-8      	; 0x1aa4 <ht1632c_print_buffer+0x88>
    1aac:	00 c0       	rjmp	.+0      	; 0x1aae <ht1632c_print_buffer+0x92>
    1aae:	00 00       	nop
		for (i = 0; i < 30; i++) {
			ht1632c_shift_left();
			_delay_ms(25);
		}
	} else {
		for (i = 0; i < (length/4); i++) {
    1ab0:	21 96       	adiw	r28, 0x01	; 1
    1ab2:	c0 17       	cp	r28, r16
    1ab4:	d1 07       	cpc	r29, r17
    1ab6:	91 f7       	brne	.-28     	; 0x1a9c <ht1632c_print_buffer+0x80>
			ht1632c_shift_left();
			_delay_ms(25);
		}
	}
    1ab8:	df 91       	pop	r29
    1aba:	cf 91       	pop	r28
    1abc:	1f 91       	pop	r17
    1abe:	0f 91       	pop	r16
    1ac0:	ff 90       	pop	r15
    1ac2:	ef 90       	pop	r14
    1ac4:	08 95       	ret

00001ac6 <btn_setup>:
void btn_top_setup(void) 
{	
	PORTC.DIRCLR   = TOP_BUTTON;
	PORTC.PIN2CTRL |= PORT_OPC_PULLDOWN_gc | PORT_ISC_RISING_gc;
	PORTC.INT0MASK |= TOP_BUTTON;
	PORTC.INTCTRL  |= PORT_INT0LVL_HI_gc;
    1ac6:	90 ee       	ldi	r25, 0xE0	; 224
    1ac8:	90 93 02 06 	sts	0x0602, r25
    1acc:	91 e0       	ldi	r25, 0x01	; 1
    1ace:	90 93 22 06 	sts	0x0622, r25
    1ad2:	90 91 15 06 	lds	r25, 0x0615
    1ad6:	9a 61       	ori	r25, 0x1A	; 26
    1ad8:	90 93 15 06 	sts	0x0615, r25
    1adc:	90 91 16 06 	lds	r25, 0x0616
    1ae0:	9a 61       	ori	r25, 0x1A	; 26
    1ae2:	90 93 16 06 	sts	0x0616, r25
    1ae6:	90 91 17 06 	lds	r25, 0x0617
    1aea:	9a 61       	ori	r25, 0x1A	; 26
    1aec:	90 93 17 06 	sts	0x0617, r25
    1af0:	90 91 30 06 	lds	r25, 0x0630
    1af4:	9a 61       	ori	r25, 0x1A	; 26
    1af6:	90 93 30 06 	sts	0x0630, r25
    1afa:	88 23       	and	r24, r24
    1afc:	99 f0       	breq	.+38     	; 0x1b24 <btn_setup+0x5e>
    1afe:	80 91 0a 06 	lds	r24, 0x060A
    1b02:	80 6e       	ori	r24, 0xE0	; 224
    1b04:	80 93 0a 06 	sts	0x060A, r24
    1b08:	80 91 2a 06 	lds	r24, 0x062A
    1b0c:	81 60       	ori	r24, 0x01	; 1
    1b0e:	80 93 2a 06 	sts	0x062A, r24
    1b12:	80 91 09 06 	lds	r24, 0x0609
    1b16:	83 60       	ori	r24, 0x03	; 3
    1b18:	80 93 09 06 	sts	0x0609, r24
    1b1c:	80 91 29 06 	lds	r24, 0x0629
    1b20:	83 60       	ori	r24, 0x03	; 3
    1b22:	12 c0       	rjmp	.+36     	; 0x1b48 <btn_setup+0x82>
    1b24:	80 91 0a 06 	lds	r24, 0x060A
    1b28:	8f 71       	andi	r24, 0x1F	; 31
    1b2a:	80 93 0a 06 	sts	0x060A, r24
    1b2e:	80 91 2a 06 	lds	r24, 0x062A
    1b32:	8e 7f       	andi	r24, 0xFE	; 254
    1b34:	80 93 2a 06 	sts	0x062A, r24
    1b38:	80 91 09 06 	lds	r24, 0x0609
    1b3c:	8c 7f       	andi	r24, 0xFC	; 252
    1b3e:	80 93 09 06 	sts	0x0609, r24
    1b42:	80 91 29 06 	lds	r24, 0x0629
    1b46:	8c 7f       	andi	r24, 0xFC	; 252
    1b48:	80 93 29 06 	sts	0x0629, r24
    1b4c:	08 95       	ret

00001b4e <btn_turn_on_leds>:
    1b4e:	90 e1       	ldi	r25, 0x10	; 16
    1b50:	90 93 01 06 	sts	0x0601, r25
    1b54:	88 23       	and	r24, r24
    1b56:	19 f0       	breq	.+6      	; 0x1b5e <btn_turn_on_leds+0x10>
    1b58:	90 93 06 06 	sts	0x0606, r25
    1b5c:	08 95       	ret
    1b5e:	90 93 05 06 	sts	0x0605, r25
    1b62:	08 95       	ret

00001b64 <btn_si114x_enable_interrupt>:
    1b64:	e0 e0       	ldi	r30, 0x00	; 0
    1b66:	f6 e0       	ldi	r31, 0x06	; 6
    1b68:	84 e0       	ldi	r24, 0x04	; 4
    1b6a:	82 83       	std	Z+2, r24	; 0x02
    1b6c:	82 89       	ldd	r24, Z+18	; 0x12
    1b6e:	82 60       	ori	r24, 0x02	; 2
    1b70:	82 8b       	std	Z+18, r24	; 0x12
    1b72:	83 85       	ldd	r24, Z+11	; 0x0b
    1b74:	84 60       	ori	r24, 0x04	; 4
    1b76:	83 87       	std	Z+11, r24	; 0x0b
    1b78:	81 85       	ldd	r24, Z+9	; 0x09
    1b7a:	8c 60       	ori	r24, 0x0C	; 12
    1b7c:	81 87       	std	Z+9, r24	; 0x09
    1b7e:	08 95       	ret

00001b80 <btn_disable_si114x_interrupt>:
    1b80:	e0 e0       	ldi	r30, 0x00	; 0
    1b82:	f6 e0       	ldi	r31, 0x06	; 6
    1b84:	84 e0       	ldi	r24, 0x04	; 4
    1b86:	82 83       	std	Z+2, r24	; 0x02
    1b88:	82 89       	ldd	r24, Z+18	; 0x12
    1b8a:	8d 7f       	andi	r24, 0xFD	; 253
    1b8c:	82 8b       	std	Z+18, r24	; 0x12
    1b8e:	83 85       	ldd	r24, Z+11	; 0x0b
    1b90:	8b 7f       	andi	r24, 0xFB	; 251
    1b92:	83 87       	std	Z+11, r24	; 0x0b
    1b94:	81 85       	ldd	r24, Z+9	; 0x09
    1b96:	83 7f       	andi	r24, 0xF3	; 243
    1b98:	81 87       	std	Z+9, r24	; 0x09
    1b9a:	08 95       	ret

00001b9c <btn_check_press>:

button_t btn_check_press(void) 
{	
	button_t btn_mask = NO_BTN;
	
	if (!(PORTA.IN & BUTTON1)) {
    1b9c:	80 91 08 06 	lds	r24, 0x0608
    1ba0:	85 fb       	bst	r24, 5
    1ba2:	88 27       	eor	r24, r24
    1ba4:	80 f9       	bld	r24, 0
    1ba6:	91 e0       	ldi	r25, 0x01	; 1
    1ba8:	89 27       	eor	r24, r25
		btn_mask |= BTN1;
	}
	if (!(PORTA.IN & BUTTON2)) {
    1baa:	90 91 08 06 	lds	r25, 0x0608
    1bae:	96 ff       	sbrs	r25, 6
		btn_mask |= BTN2;
    1bb0:	82 60       	ori	r24, 0x02	; 2
	}
	if (!(PORTA.IN & BUTTON3)) {
    1bb2:	90 91 08 06 	lds	r25, 0x0608
    1bb6:	97 ff       	sbrs	r25, 7
		btn_mask |= BTN3;
    1bb8:	83 e0       	ldi	r24, 0x03	; 3
	} 
	if (!(PORTB.IN & BUTTON4)) {
    1bba:	90 91 28 06 	lds	r25, 0x0628
    1bbe:	90 ff       	sbrs	r25, 0
		btn_mask |= BTN4;
    1bc0:	84 60       	ori	r24, 0x04	; 4
	}
	return btn_mask;
}
    1bc2:	08 95       	ret

00001bc4 <__vector_66>:

ISR(PORTA_INT0_vect) 
{
    1bc4:	1f 92       	push	r1
    1bc6:	0f 92       	push	r0
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	0f 92       	push	r0
    1bcc:	11 24       	eor	r1, r1
    1bce:	08 b6       	in	r0, 0x38	; 56
    1bd0:	0f 92       	push	r0
    1bd2:	18 be       	out	0x38, r1	; 56
    1bd4:	09 b6       	in	r0, 0x39	; 57
    1bd6:	0f 92       	push	r0
    1bd8:	19 be       	out	0x39, r1	; 57
    1bda:	0b b6       	in	r0, 0x3b	; 59
    1bdc:	0f 92       	push	r0
    1bde:	1b be       	out	0x3b, r1	; 59
    1be0:	2f 93       	push	r18
    1be2:	3f 93       	push	r19
    1be4:	4f 93       	push	r20
    1be6:	5f 93       	push	r21
    1be8:	6f 93       	push	r22
    1bea:	7f 93       	push	r23
    1bec:	8f 93       	push	r24
    1bee:	9f 93       	push	r25
    1bf0:	af 93       	push	r26
    1bf2:	bf 93       	push	r27
    1bf4:	ef 93       	push	r30
    1bf6:	ff 93       	push	r31
	btn_status = btn_check_press();
    1bf8:	d1 df       	rcall	.-94     	; 0x1b9c <btn_check_press>
    1bfa:	80 93 12 3c 	sts	0x3C12, r24
#ifdef DEBUG_ON
	printf("DEBUG: BTN: %d \r\n",btn_status);
    1bfe:	80 91 12 3c 	lds	r24, 0x3C12
    1c02:	1f 92       	push	r1
    1c04:	8f 93       	push	r24
    1c06:	86 ed       	ldi	r24, 0xD6	; 214
    1c08:	90 e2       	ldi	r25, 0x20	; 32
    1c0a:	9f 93       	push	r25
    1c0c:	8f 93       	push	r24
    1c0e:	0e 94 9a 65 	call	0xcb34	; 0xcb34 <printf>
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
#endif
}
    1c1a:	ff 91       	pop	r31
    1c1c:	ef 91       	pop	r30
    1c1e:	bf 91       	pop	r27
    1c20:	af 91       	pop	r26
    1c22:	9f 91       	pop	r25
    1c24:	8f 91       	pop	r24
    1c26:	7f 91       	pop	r23
    1c28:	6f 91       	pop	r22
    1c2a:	5f 91       	pop	r21
    1c2c:	4f 91       	pop	r20
    1c2e:	3f 91       	pop	r19
    1c30:	2f 91       	pop	r18
    1c32:	0f 90       	pop	r0
    1c34:	0b be       	out	0x3b, r0	; 59
    1c36:	0f 90       	pop	r0
    1c38:	09 be       	out	0x39, r0	; 57
    1c3a:	0f 90       	pop	r0
    1c3c:	08 be       	out	0x38, r0	; 56
    1c3e:	0f 90       	pop	r0
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	0f 90       	pop	r0
    1c44:	1f 90       	pop	r1
    1c46:	18 95       	reti

00001c48 <__vector_34>:

ISR(PORTB_INT0_vect) 
{
    1c48:	1f 92       	push	r1
    1c4a:	0f 92       	push	r0
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	0f 92       	push	r0
    1c50:	11 24       	eor	r1, r1
    1c52:	08 b6       	in	r0, 0x38	; 56
    1c54:	0f 92       	push	r0
    1c56:	18 be       	out	0x38, r1	; 56
    1c58:	09 b6       	in	r0, 0x39	; 57
    1c5a:	0f 92       	push	r0
    1c5c:	19 be       	out	0x39, r1	; 57
    1c5e:	0b b6       	in	r0, 0x3b	; 59
    1c60:	0f 92       	push	r0
    1c62:	1b be       	out	0x3b, r1	; 59
    1c64:	2f 93       	push	r18
    1c66:	3f 93       	push	r19
    1c68:	4f 93       	push	r20
    1c6a:	5f 93       	push	r21
    1c6c:	6f 93       	push	r22
    1c6e:	7f 93       	push	r23
    1c70:	8f 93       	push	r24
    1c72:	9f 93       	push	r25
    1c74:	af 93       	push	r26
    1c76:	bf 93       	push	r27
    1c78:	ef 93       	push	r30
    1c7a:	ff 93       	push	r31
	btn_status = btn_check_press();
    1c7c:	8f df       	rcall	.-226    	; 0x1b9c <btn_check_press>
    1c7e:	80 93 12 3c 	sts	0x3C12, r24
#ifdef DEBUG_ON
	printf("DEBUG: BTN: %d \r\n",btn_status);
    1c82:	80 91 12 3c 	lds	r24, 0x3C12
    1c86:	1f 92       	push	r1
    1c88:	8f 93       	push	r24
    1c8a:	86 ed       	ldi	r24, 0xD6	; 214
    1c8c:	90 e2       	ldi	r25, 0x20	; 32
    1c8e:	9f 93       	push	r25
    1c90:	8f 93       	push	r24
    1c92:	0e 94 9a 65 	call	0xcb34	; 0xcb34 <printf>
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
#endif
}
    1c9e:	ff 91       	pop	r31
    1ca0:	ef 91       	pop	r30
    1ca2:	bf 91       	pop	r27
    1ca4:	af 91       	pop	r26
    1ca6:	9f 91       	pop	r25
    1ca8:	8f 91       	pop	r24
    1caa:	7f 91       	pop	r23
    1cac:	6f 91       	pop	r22
    1cae:	5f 91       	pop	r21
    1cb0:	4f 91       	pop	r20
    1cb2:	3f 91       	pop	r19
    1cb4:	2f 91       	pop	r18
    1cb6:	0f 90       	pop	r0
    1cb8:	0b be       	out	0x3b, r0	; 59
    1cba:	0f 90       	pop	r0
    1cbc:	09 be       	out	0x39, r0	; 57
    1cbe:	0f 90       	pop	r0
    1cc0:	08 be       	out	0x38, r0	; 56
    1cc2:	0f 90       	pop	r0
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	0f 90       	pop	r0
    1cc8:	1f 90       	pop	r1
    1cca:	18 95       	reti

00001ccc <__vector_67>:

ISR(PORTA_INT1_vect) 
{	
    1ccc:	1f 92       	push	r1
    1cce:	0f 92       	push	r0
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	0f 92       	push	r0
    1cd4:	11 24       	eor	r1, r1
    1cd6:	08 b6       	in	r0, 0x38	; 56
    1cd8:	0f 92       	push	r0
    1cda:	18 be       	out	0x38, r1	; 56
    1cdc:	09 b6       	in	r0, 0x39	; 57
    1cde:	0f 92       	push	r0
    1ce0:	19 be       	out	0x39, r1	; 57
    1ce2:	0a b6       	in	r0, 0x3a	; 58
    1ce4:	0f 92       	push	r0
    1ce6:	1a be       	out	0x3a, r1	; 58
    1ce8:	0b b6       	in	r0, 0x3b	; 59
    1cea:	0f 92       	push	r0
    1cec:	1b be       	out	0x3b, r1	; 59
    1cee:	ef 92       	push	r14
    1cf0:	0f 93       	push	r16
    1cf2:	1f 93       	push	r17
    1cf4:	2f 93       	push	r18
    1cf6:	3f 93       	push	r19
    1cf8:	4f 93       	push	r20
    1cfa:	5f 93       	push	r21
    1cfc:	6f 93       	push	r22
    1cfe:	7f 93       	push	r23
    1d00:	8f 93       	push	r24
    1d02:	9f 93       	push	r25
    1d04:	af 93       	push	r26
    1d06:	bf 93       	push	r27
    1d08:	ef 93       	push	r30
    1d0a:	ff 93       	push	r31
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
    1d10:	1f 92       	push	r1
    1d12:	1f 92       	push	r1
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
	//twi_on();
	uint8_t data[2];
	twi_read_packet(&TWIC,SI114X_ADDR,50,REG_IRQ_STATUS,data,1);
    1d18:	ee 24       	eor	r14, r14
    1d1a:	e3 94       	inc	r14
    1d1c:	8e 01       	movw	r16, r28
    1d1e:	0f 5f       	subi	r16, 0xFF	; 255
    1d20:	1f 4f       	sbci	r17, 0xFF	; 255
    1d22:	21 e2       	ldi	r18, 0x21	; 33
    1d24:	42 e3       	ldi	r20, 0x32	; 50
    1d26:	50 e0       	ldi	r21, 0x00	; 0
    1d28:	6a e5       	ldi	r22, 0x5A	; 90
    1d2a:	80 e8       	ldi	r24, 0x80	; 128
    1d2c:	94 e0       	ldi	r25, 0x04	; 4
    1d2e:	0e 94 cb 1a 	call	0x3596	; 0x3596 <twi_read_packet>
	si114x_status = data[0];
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	80 93 13 3c 	sts	0x3C13, r24
#ifdef DEBUG_ON
	printf("DEBUG: Interrupt from Si114x! Code: %d \r\n", si114x_status);
    1d38:	80 91 13 3c 	lds	r24, 0x3C13
    1d3c:	1f 92       	push	r1
    1d3e:	8f 93       	push	r24
    1d40:	88 ee       	ldi	r24, 0xE8	; 232
    1d42:	90 e2       	ldi	r25, 0x20	; 32
    1d44:	9f 93       	push	r25
    1d46:	8f 93       	push	r24
    1d48:	0e 94 9a 65 	call	0xcb34	; 0xcb34 <printf>
#endif
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	df 91       	pop	r29
    1d5a:	cf 91       	pop	r28
    1d5c:	ff 91       	pop	r31
    1d5e:	ef 91       	pop	r30
    1d60:	bf 91       	pop	r27
    1d62:	af 91       	pop	r26
    1d64:	9f 91       	pop	r25
    1d66:	8f 91       	pop	r24
    1d68:	7f 91       	pop	r23
    1d6a:	6f 91       	pop	r22
    1d6c:	5f 91       	pop	r21
    1d6e:	4f 91       	pop	r20
    1d70:	3f 91       	pop	r19
    1d72:	2f 91       	pop	r18
    1d74:	1f 91       	pop	r17
    1d76:	0f 91       	pop	r16
    1d78:	ef 90       	pop	r14
    1d7a:	0f 90       	pop	r0
    1d7c:	0b be       	out	0x3b, r0	; 59
    1d7e:	0f 90       	pop	r0
    1d80:	0a be       	out	0x3a, r0	; 58
    1d82:	0f 90       	pop	r0
    1d84:	09 be       	out	0x39, r0	; 57
    1d86:	0f 90       	pop	r0
    1d88:	08 be       	out	0x38, r0	; 56
    1d8a:	0f 90       	pop	r0
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	0f 90       	pop	r0
    1d90:	1f 90       	pop	r1
    1d92:	18 95       	reti

00001d94 <lowpower_setup>:

#include "power.h"

void lowpower_setup(void) 
{
	DISABLE_GEN();
    1d94:	e0 e7       	ldi	r30, 0x70	; 112
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	8b 61       	ori	r24, 0x1B	; 27
    1d9c:	80 83       	st	Z, r24
	DISABLE_TC();
    1d9e:	83 81       	ldd	r24, Z+3	; 0x03
    1da0:	87 60       	ori	r24, 0x07	; 7
    1da2:	83 83       	std	Z+3, r24	; 0x03
    1da4:	84 81       	ldd	r24, Z+4	; 0x04
    1da6:	87 60       	ori	r24, 0x07	; 7
    1da8:	84 83       	std	Z+4, r24	; 0x04
    1daa:	85 81       	ldd	r24, Z+5	; 0x05
    1dac:	85 60       	ori	r24, 0x05	; 5
    1dae:	85 83       	std	Z+5, r24	; 0x05
	DISABLE_COM();
    1db0:	83 81       	ldd	r24, Z+3	; 0x03
    1db2:	88 67       	ori	r24, 0x78	; 120
    1db4:	83 83       	std	Z+3, r24	; 0x03
    1db6:	84 81       	ldd	r24, Z+4	; 0x04
    1db8:	88 63       	ori	r24, 0x38	; 56
    1dba:	84 83       	std	Z+4, r24	; 0x04
    1dbc:	85 81       	ldd	r24, Z+5	; 0x05
    1dbe:	80 65       	ori	r24, 0x50	; 80
    1dc0:	85 83       	std	Z+5, r24	; 0x05
	DISABLE_ANLG();
    1dc2:	81 81       	ldd	r24, Z+1	; 0x01
    1dc4:	83 60       	ori	r24, 0x03	; 3
    1dc6:	81 83       	std	Z+1, r24	; 0x01
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	84 60       	ori	r24, 0x04	; 4
    1dcc:	82 83       	std	Z+2, r24	; 0x02
    1dce:	08 95       	ret

00001dd0 <rtc_setup>:
}

void rtc_show_minutes(void) 
{
	rtc_update_display(BOTTOM_HALF,env.time.minutes);
	disp_time = false;
    1dd0:	80 91 70 00 	lds	r24, 0x0070
    1dd4:	8f 7b       	andi	r24, 0xBF	; 191
    1dd6:	80 93 70 00 	sts	0x0070, r24
    1dda:	82 e0       	ldi	r24, 0x02	; 2
    1ddc:	80 93 f1 3b 	sts	0x3BF1, r24
    1de0:	88 ed       	ldi	r24, 0xD8	; 216
    1de2:	84 bf       	out	0x34, r24	; 52
    1de4:	8b e0       	ldi	r24, 0x0B	; 11
    1de6:	80 93 43 00 	sts	0x0043, r24
    1dea:	80 91 01 04 	lds	r24, 0x0401
    1dee:	80 fd       	sbrc	r24, 0
    1df0:	fc cf       	rjmp	.-8      	; 0x1dea <rtc_setup+0x1a>
    1df2:	80 e8       	ldi	r24, 0x80	; 128
    1df4:	97 e0       	ldi	r25, 0x07	; 7
    1df6:	80 93 0a 04 	sts	0x040A, r24
    1dfa:	90 93 0b 04 	sts	0x040B, r25
    1dfe:	82 e0       	ldi	r24, 0x02	; 2
    1e00:	80 93 02 04 	sts	0x0402, r24
    1e04:	10 92 08 04 	sts	0x0408, r1
    1e08:	10 92 09 04 	sts	0x0409, r1
    1e0c:	10 92 0c 04 	sts	0x040C, r1
    1e10:	10 92 0d 04 	sts	0x040D, r1
    1e14:	87 e0       	ldi	r24, 0x07	; 7
    1e16:	80 93 00 04 	sts	0x0400, r24
    1e1a:	08 95       	ret

00001e1c <rtc_update_seconds>:
    1e1c:	8c 33       	cpi	r24, 0x3C	; 60
    1e1e:	91 05       	cpc	r25, r1
    1e20:	30 f4       	brcc	.+12     	; 0x1e2e <rtc_update_seconds+0x12>
    1e22:	25 e0       	ldi	r18, 0x05	; 5
    1e24:	88 0f       	add	r24, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	2a 95       	dec	r18
    1e2a:	e1 f7       	brne	.-8      	; 0x1e24 <rtc_update_seconds+0x8>
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <rtc_update_seconds+0x16>
    1e2e:	80 e8       	ldi	r24, 0x80	; 128
    1e30:	97 e0       	ldi	r25, 0x07	; 7
    1e32:	80 93 08 04 	sts	0x0408, r24
    1e36:	90 93 09 04 	sts	0x0409, r25
    1e3a:	08 95       	ret

00001e3c <rtc_disable_time_render>:
    1e3c:	10 92 06 20 	sts	0x2006, r1
    1e40:	08 95       	ret

00001e42 <rtc_update_display>:
    1e42:	6f 92       	push	r6
    1e44:	7f 92       	push	r7
    1e46:	8f 92       	push	r8
    1e48:	9f 92       	push	r9
    1e4a:	af 92       	push	r10
    1e4c:	bf 92       	push	r11
    1e4e:	cf 92       	push	r12
    1e50:	df 92       	push	r13
    1e52:	ef 92       	push	r14
    1e54:	ff 92       	push	r15
    1e56:	0f 93       	push	r16
    1e58:	1f 93       	push	r17
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	1f 92       	push	r1
    1e60:	1f 92       	push	r1
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	78 2e       	mov	r7, r24
    1e68:	66 2e       	mov	r6, r22
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	8e 01       	movw	r16, r28
    1e72:	0f 5f       	subi	r16, 0xFF	; 255
    1e74:	1f 4f       	sbci	r17, 0xFF	; 255
    1e76:	78 01       	movw	r14, r16
    1e78:	3a e0       	ldi	r19, 0x0A	; 10
    1e7a:	83 2e       	mov	r8, r19
    1e7c:	91 2c       	mov	r9, r1
    1e7e:	a1 2c       	mov	r10, r1
    1e80:	b1 2c       	mov	r11, r1
    1e82:	67 01       	movw	r12, r14
    1e84:	2f ef       	ldi	r18, 0xFF	; 255
    1e86:	c2 1a       	sub	r12, r18
    1e88:	d2 0a       	sbc	r13, r18
    1e8a:	a5 01       	movw	r20, r10
    1e8c:	94 01       	movw	r18, r8
    1e8e:	0e 94 4c 62 	call	0xc498	; 0xc498 <__udivmodsi4>
    1e92:	60 5d       	subi	r22, 0xD0	; 208
    1e94:	f7 01       	movw	r30, r14
    1e96:	60 83       	st	Z, r22
    1e98:	b9 01       	movw	r22, r18
    1e9a:	ca 01       	movw	r24, r20
    1e9c:	61 15       	cp	r22, r1
    1e9e:	71 05       	cpc	r23, r1
    1ea0:	81 05       	cpc	r24, r1
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	11 f0       	breq	.+4      	; 0x1eaa <rtc_update_display+0x68>
    1ea6:	76 01       	movw	r14, r12
    1ea8:	ec cf       	rjmp	.-40     	; 0x1e82 <rtc_update_display+0x40>
    1eaa:	c0 1a       	sub	r12, r16
    1eac:	d1 0a       	sbc	r13, r17
    1eae:	c6 01       	movw	r24, r12
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	d8 01       	movw	r26, r16
    1eb4:	ac 0d       	add	r26, r12
    1eb6:	bd 1d       	adc	r27, r13
    1eb8:	f8 01       	movw	r30, r16
    1eba:	9f 01       	movw	r18, r30
    1ebc:	20 1b       	sub	r18, r16
    1ebe:	31 0b       	sbc	r19, r17
    1ec0:	28 17       	cp	r18, r24
    1ec2:	39 07       	cpc	r19, r25
    1ec4:	34 f4       	brge	.+12     	; 0x1ed2 <rtc_update_display+0x90>
    1ec6:	20 81       	ld	r18, Z
    1ec8:	3e 91       	ld	r19, -X
    1eca:	31 93       	st	Z+, r19
    1ecc:	2c 93       	st	X, r18
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	f4 cf       	rjmp	.-24     	; 0x1eba <rtc_update_display+0x78>
    1ed2:	f9 e0       	ldi	r31, 0x09	; 9
    1ed4:	f6 15       	cp	r31, r6
    1ed6:	20 f0       	brcs	.+8      	; 0x1ee0 <rtc_update_display+0x9e>
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	90 e3       	ldi	r25, 0x30	; 48
    1edc:	99 83       	std	Y+1, r25	; 0x01
    1ede:	8a 83       	std	Y+2, r24	; 0x02
    1ee0:	00 e0       	ldi	r16, 0x00	; 0
    1ee2:	71 10       	cpse	r7, r1
    1ee4:	04 c0       	rjmp	.+8      	; 0x1eee <rtc_update_display+0xac>
    1ee6:	28 e0       	ldi	r18, 0x08	; 8
    1ee8:	40 e1       	ldi	r20, 0x10	; 16
    1eea:	60 e0       	ldi	r22, 0x00	; 0
    1eec:	03 c0       	rjmp	.+6      	; 0x1ef4 <rtc_update_display+0xb2>
    1eee:	29 e0       	ldi	r18, 0x09	; 9
    1ef0:	40 e1       	ldi	r20, 0x10	; 16
    1ef2:	67 e0       	ldi	r22, 0x07	; 7
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <display_draw_filled_rect>
    1efa:	e7 2c       	mov	r14, r7
    1efc:	f1 2c       	mov	r15, r1
    1efe:	01 e0       	ldi	r16, 0x01	; 1
    1f00:	21 e0       	ldi	r18, 0x01	; 1
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	49 81       	ldd	r20, Y+1	; 0x01
    1f06:	b7 01       	movw	r22, r14
    1f08:	82 e0       	ldi	r24, 0x02	; 2
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <display_draw_char>
    1f10:	21 e0       	ldi	r18, 0x01	; 1
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	4a 81       	ldd	r20, Y+2	; 0x02
    1f16:	b7 01       	movw	r22, r14
    1f18:	89 e0       	ldi	r24, 0x09	; 9
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <display_draw_char>
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	df 91       	pop	r29
    1f26:	cf 91       	pop	r28
    1f28:	1f 91       	pop	r17
    1f2a:	0f 91       	pop	r16
    1f2c:	ff 90       	pop	r15
    1f2e:	ef 90       	pop	r14
    1f30:	df 90       	pop	r13
    1f32:	cf 90       	pop	r12
    1f34:	bf 90       	pop	r11
    1f36:	af 90       	pop	r10
    1f38:	9f 90       	pop	r9
    1f3a:	8f 90       	pop	r8
    1f3c:	7f 90       	pop	r7
    1f3e:	6f 90       	pop	r6
    1f40:	08 95       	ret

00001f42 <rtc_enable_time_render>:
}

void rtc_enable_time_render(void) 
{
	env.menu_id = 0;
    1f42:	10 92 7d 3a 	sts	0x3A7D, r1
	rtc_update_display(BOTTOM_HALF,env.time.minutes);
    1f46:	60 91 1f 3b 	lds	r22, 0x3B1F
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	7a df       	rcall	.-268    	; 0x1e42 <rtc_update_display>
	rtc_update_display(TOP_HALF,env.time.hours);
    1f4e:	60 91 20 3b 	lds	r22, 0x3B20
    1f52:	89 e0       	ldi	r24, 0x09	; 9
    1f54:	76 df       	rcall	.-276    	; 0x1e42 <rtc_update_display>
	disp_time = true;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	80 93 06 20 	sts	0x2006, r24
    1f5c:	08 95       	ret

00001f5e <__vector_10>:
	display_draw_char(2,pos,buffer[0],1,1);
	display_draw_char(9,pos,buffer[1],1,1);
}

ISR(RTC_OVF_vect) 
{
    1f5e:	1f 92       	push	r1
    1f60:	0f 92       	push	r0
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	0f 92       	push	r0
    1f66:	11 24       	eor	r1, r1
    1f68:	08 b6       	in	r0, 0x38	; 56
    1f6a:	0f 92       	push	r0
    1f6c:	18 be       	out	0x38, r1	; 56
    1f6e:	09 b6       	in	r0, 0x39	; 57
    1f70:	0f 92       	push	r0
    1f72:	19 be       	out	0x39, r1	; 57
    1f74:	0b b6       	in	r0, 0x3b	; 59
    1f76:	0f 92       	push	r0
    1f78:	1b be       	out	0x3b, r1	; 59
    1f7a:	2f 93       	push	r18
    1f7c:	3f 93       	push	r19
    1f7e:	4f 93       	push	r20
    1f80:	5f 93       	push	r21
    1f82:	6f 93       	push	r22
    1f84:	7f 93       	push	r23
    1f86:	8f 93       	push	r24
    1f88:	9f 93       	push	r25
    1f8a:	af 93       	push	r26
    1f8c:	bf 93       	push	r27
    1f8e:	cf 93       	push	r28
    1f90:	ef 93       	push	r30
    1f92:	ff 93       	push	r31
	//Variable to check system-runtime
	env.runtime++;
    1f94:	80 91 88 3a 	lds	r24, 0x3A88
    1f98:	90 91 89 3a 	lds	r25, 0x3A89
    1f9c:	a0 91 8a 3a 	lds	r26, 0x3A8A
    1fa0:	b0 91 8b 3a 	lds	r27, 0x3A8B
    1fa4:	01 96       	adiw	r24, 0x01	; 1
    1fa6:	a1 1d       	adc	r26, r1
    1fa8:	b1 1d       	adc	r27, r1
    1faa:	80 93 88 3a 	sts	0x3A88, r24
    1fae:	90 93 89 3a 	sts	0x3A89, r25
    1fb2:	a0 93 8a 3a 	sts	0x3A8A, r26
    1fb6:	b0 93 8b 3a 	sts	0x3A8B, r27
	
	if (++env.time.minutes >= 60) {
    1fba:	60 91 1f 3b 	lds	r22, 0x3B1F
    1fbe:	6f 5f       	subi	r22, 0xFF	; 255
    1fc0:	60 93 1f 3b 	sts	0x3B1F, r22
    1fc4:	6c 33       	cpi	r22, 0x3C	; 60
    1fc6:	08 f4       	brcc	.+2      	; 0x1fca <__vector_10+0x6c>
    1fc8:	67 c0       	rjmp	.+206    	; 0x2098 <__vector_10+0x13a>
		
		env.time.minutes = 0;
    1fca:	10 92 1f 3b 	sts	0x3B1F, r1
		if (disp_time) {
    1fce:	80 91 06 20 	lds	r24, 0x2006
    1fd2:	88 23       	and	r24, r24
    1fd4:	29 f0       	breq	.+10     	; 0x1fe0 <__vector_10+0x82>
			rtc_update_display(BOTTOM_HALF,env.time.minutes);
    1fd6:	60 e0       	ldi	r22, 0x00	; 0
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	33 df       	rcall	.-410    	; 0x1e42 <rtc_update_display>
			display_refresh_screen();
    1fdc:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <display_refresh_screen>
		}
		if (++env.time.hours >= 24) {
    1fe0:	60 91 20 3b 	lds	r22, 0x3B20
    1fe4:	6f 5f       	subi	r22, 0xFF	; 255
    1fe6:	60 93 20 3b 	sts	0x3B20, r22
    1fea:	68 31       	cpi	r22, 0x18	; 24
    1fec:	08 f4       	brcc	.+2      	; 0x1ff0 <__vector_10+0x92>
    1fee:	49 c0       	rjmp	.+146    	; 0x2082 <__vector_10+0x124>
			if (env.time.weekday++ >= Sunday) {
    1ff0:	80 91 22 3b 	lds	r24, 0x3B22
    1ff4:	91 e0       	ldi	r25, 0x01	; 1
    1ff6:	98 0f       	add	r25, r24
    1ff8:	90 93 22 3b 	sts	0x3B22, r25
    1ffc:	87 30       	cpi	r24, 0x07	; 7
    1ffe:	68 f0       	brcs	.+26     	; 0x201a <__vector_10+0xbc>
				env.time.weekday = Monday;
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	80 93 22 3b 	sts	0x3B22, r24
				if (env.time.week++ >= 53) {
    2006:	90 91 23 3b 	lds	r25, 0x3B23
    200a:	21 e0       	ldi	r18, 0x01	; 1
    200c:	29 0f       	add	r18, r25
    200e:	20 93 23 3b 	sts	0x3B23, r18
    2012:	95 33       	cpi	r25, 0x35	; 53
    2014:	10 f0       	brcs	.+4      	; 0x201a <__vector_10+0xbc>
					env.time.week = 1;
    2016:	80 93 23 3b 	sts	0x3B23, r24
				}
			}
			if (env.time.day++ >= time_get_days_in_month(env.time.month,env.time.year)) {
    201a:	c0 91 21 3b 	lds	r28, 0x3B21
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	8c 0f       	add	r24, r28
    2022:	80 93 21 3b 	sts	0x3B21, r24
    2026:	60 91 25 3b 	lds	r22, 0x3B25
    202a:	70 91 26 3b 	lds	r23, 0x3B26
    202e:	80 91 24 3b 	lds	r24, 0x3B24
    2032:	0e 94 fc 5b 	call	0xb7f8	; 0xb7f8 <time_get_days_in_month>
    2036:	c8 17       	cp	r28, r24
    2038:	e0 f0       	brcs	.+56     	; 0x2072 <__vector_10+0x114>
				env.time.day = 1;
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	80 93 21 3b 	sts	0x3B21, r24
				if (env.time.month++ >= December) {
    2040:	90 91 24 3b 	lds	r25, 0x3B24
    2044:	21 e0       	ldi	r18, 0x01	; 1
    2046:	29 0f       	add	r18, r25
    2048:	20 93 24 3b 	sts	0x3B24, r18
    204c:	9c 30       	cpi	r25, 0x0C	; 12
    204e:	88 f0       	brcs	.+34     	; 0x2072 <__vector_10+0x114>
					env.time.month = January;
    2050:	80 93 24 3b 	sts	0x3B24, r24
					env.time.year++;
    2054:	40 91 25 3b 	lds	r20, 0x3B25
    2058:	50 91 26 3b 	lds	r21, 0x3B26
    205c:	4f 5f       	subi	r20, 0xFF	; 255
    205e:	5f 4f       	sbci	r21, 0xFF	; 255
    2060:	40 93 25 3b 	sts	0x3B25, r20
    2064:	50 93 26 3b 	sts	0x3B26, r21
					env.time.week = time_get_weeknumber(env.time.day,env.time.month,env.time.year);
    2068:	61 e0       	ldi	r22, 0x01	; 1
    206a:	0e 94 14 5c 	call	0xb828	; 0xb828 <time_get_weeknumber>
    206e:	80 93 23 3b 	sts	0x3B23, r24
				}
			}
			env.time.hours = 0;
    2072:	10 92 20 3b 	sts	0x3B20, r1
			if (disp_time) {
    2076:	80 91 06 20 	lds	r24, 0x2006
    207a:	88 23       	and	r24, r24
    207c:	51 f0       	breq	.+20     	; 0x2092 <__vector_10+0x134>
				rtc_update_display(TOP_HALF,env.time.hours);
    207e:	60 e0       	ldi	r22, 0x00	; 0
    2080:	04 c0       	rjmp	.+8      	; 0x208a <__vector_10+0x12c>
				display_refresh_screen();
			}
		} else {
			if (disp_time) {
    2082:	80 91 06 20 	lds	r24, 0x2006
    2086:	88 23       	and	r24, r24
    2088:	21 f0       	breq	.+8      	; 0x2092 <__vector_10+0x134>
				rtc_update_display(TOP_HALF,env.time.hours);
    208a:	89 e0       	ldi	r24, 0x09	; 9
    208c:	da de       	rcall	.-588    	; 0x1e42 <rtc_update_display>
				display_refresh_screen();
    208e:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <display_refresh_screen>
			}
		}
		env.time.minutes = 0;
    2092:	10 92 1f 3b 	sts	0x3B1F, r1
    2096:	08 c0       	rjmp	.+16     	; 0x20a8 <__vector_10+0x14a>
	} else {
		if (disp_time) {
    2098:	80 91 06 20 	lds	r24, 0x2006
    209c:	88 23       	and	r24, r24
    209e:	21 f0       	breq	.+8      	; 0x20a8 <__vector_10+0x14a>
			rtc_update_display(BOTTOM_HALF,env.time.minutes);
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	cf de       	rcall	.-610    	; 0x1e42 <rtc_update_display>
			display_refresh_screen();
    20a4:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <display_refresh_screen>
		}
	}
	if (alarm_status == ALARM_ON) {
    20a8:	80 91 f1 3b 	lds	r24, 0x3BF1
    20ac:	81 30       	cpi	r24, 0x01	; 1
    20ae:	71 f4       	brne	.+28     	; 0x20cc <__vector_10+0x16e>
		if (env.time.hours == env.alarm.hours) {
    20b0:	90 91 20 3b 	lds	r25, 0x3B20
    20b4:	80 91 1c 3b 	lds	r24, 0x3B1C
    20b8:	98 13       	cpse	r25, r24
    20ba:	08 c0       	rjmp	.+16     	; 0x20cc <__vector_10+0x16e>
			if (env.time.minutes == env.alarm.minutes)
    20bc:	90 91 1f 3b 	lds	r25, 0x3B1F
    20c0:	80 91 1b 3b 	lds	r24, 0x3B1B
    20c4:	98 13       	cpse	r25, r24
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <__vector_10+0x16e>
			{
				alarm_status = ALARM_TRIGGERED;
    20c8:	10 92 f1 3b 	sts	0x3BF1, r1
			}
		}
	}
    20cc:	ff 91       	pop	r31
    20ce:	ef 91       	pop	r30
    20d0:	cf 91       	pop	r28
    20d2:	bf 91       	pop	r27
    20d4:	af 91       	pop	r26
    20d6:	9f 91       	pop	r25
    20d8:	8f 91       	pop	r24
    20da:	7f 91       	pop	r23
    20dc:	6f 91       	pop	r22
    20de:	5f 91       	pop	r21
    20e0:	4f 91       	pop	r20
    20e2:	3f 91       	pop	r19
    20e4:	2f 91       	pop	r18
    20e6:	0f 90       	pop	r0
    20e8:	0b be       	out	0x3b, r0	; 59
    20ea:	0f 90       	pop	r0
    20ec:	09 be       	out	0x39, r0	; 57
    20ee:	0f 90       	pop	r0
    20f0:	08 be       	out	0x38, r0	; 56
    20f2:	0f 90       	pop	r0
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	0f 90       	pop	r0
    20f8:	1f 90       	pop	r1
    20fa:	18 95       	reti

000020fc <_sendCmd>:
	u8 code ucoef[4] = { 0x7B, 0x6B, 0x01, 0x00 } ;
	
	// This will write 4 bytes starting with I2C address 0x13
	response = Si114xBlockWrite( si114x_handle, REG_UCOEF0, 4, &ucoef[0] );
	return response;
}
    20fc:	ff 92       	push	r15
    20fe:	0f 93       	push	r16
    2100:	1f 93       	push	r17
    2102:	cf 93       	push	r28
    2104:	df 93       	push	r29
    2106:	8c 01       	movw	r16, r24
    2108:	f6 2e       	mov	r15, r22
    210a:	60 e2       	ldi	r22, 0x20	; 32
    210c:	54 d6       	rcall	.+3240   	; 0x2db6 <Si114xReadFromRegister>
    210e:	ec 01       	movw	r28, r24
    2110:	97 fd       	sbrc	r25, 7
    2112:	21 c0       	rjmp	.+66     	; 0x2156 <_sendCmd+0x5a>
    2114:	60 e3       	ldi	r22, 0x30	; 48
    2116:	c8 01       	movw	r24, r16
    2118:	4e d6       	rcall	.+3228   	; 0x2db6 <Si114xReadFromRegister>
    211a:	81 30       	cpi	r24, 0x01	; 1
    211c:	91 05       	cpc	r25, r1
    211e:	19 f0       	breq	.+6      	; 0x2126 <_sendCmd+0x2a>
    2120:	97 ff       	sbrs	r25, 7
    2122:	f8 cf       	rjmp	.-16     	; 0x2114 <_sendCmd+0x18>
    2124:	20 c0       	rjmp	.+64     	; 0x2166 <_sendCmd+0x6a>
    2126:	ff 20       	and	r15, r15
    2128:	31 f0       	breq	.+12     	; 0x2136 <_sendCmd+0x3a>
    212a:	60 e2       	ldi	r22, 0x20	; 32
    212c:	c8 01       	movw	r24, r16
    212e:	43 d6       	rcall	.+3206   	; 0x2db6 <Si114xReadFromRegister>
    2130:	8c 17       	cp	r24, r28
    2132:	9d 07       	cpc	r25, r29
    2134:	91 f4       	brne	.+36     	; 0x215a <_sendCmd+0x5e>
    2136:	4f 2d       	mov	r20, r15
    2138:	68 e1       	ldi	r22, 0x18	; 24
    213a:	c8 01       	movw	r24, r16
    213c:	1e d6       	rcall	.+3132   	; 0x2d7a <Si114xWriteToRegister>
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	91 f4       	brne	.+36     	; 0x2166 <_sendCmd+0x6a>
    2142:	ff 20       	and	r15, r15
    2144:	71 f0       	breq	.+28     	; 0x2162 <_sendCmd+0x66>
    2146:	60 e2       	ldi	r22, 0x20	; 32
    2148:	c8 01       	movw	r24, r16
    214a:	35 d6       	rcall	.+3178   	; 0x2db6 <Si114xReadFromRegister>
    214c:	8c 17       	cp	r24, r28
    214e:	9d 07       	cpc	r25, r29
    2150:	41 f4       	brne	.+16     	; 0x2162 <_sendCmd+0x66>
    2152:	d7 ff       	sbrs	r29, 7
    2154:	f8 cf       	rjmp	.-16     	; 0x2146 <_sendCmd+0x4a>
    2156:	ce 01       	movw	r24, r28
    2158:	06 c0       	rjmp	.+12     	; 0x2166 <_sendCmd+0x6a>
    215a:	97 fd       	sbrc	r25, 7
    215c:	04 c0       	rjmp	.+8      	; 0x2166 <_sendCmd+0x6a>
    215e:	ec 01       	movw	r28, r24
    2160:	d9 cf       	rjmp	.-78     	; 0x2114 <_sendCmd+0x18>
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	1f 91       	pop	r17
    216c:	0f 91       	pop	r16
    216e:	ff 90       	pop	r15
    2170:	08 95       	ret

00002172 <si114x_get_data>:
    2172:	cf 92       	push	r12
    2174:	df 92       	push	r13
    2176:	ef 92       	push	r14
    2178:	0f 93       	push	r16
    217a:	1f 93       	push	r17
    217c:	cf 93       	push	r28
    217e:	df 93       	push	r29
    2180:	1f 92       	push	r1
    2182:	1f 92       	push	r1
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
    2188:	6c 01       	movw	r12, r24
    218a:	80 91 60 2e 	lds	r24, 0x2E60
    218e:	90 91 61 2e 	lds	r25, 0x2E61
    2192:	f6 01       	movw	r30, r12
    2194:	82 83       	std	Z+2, r24	; 0x02
    2196:	93 83       	std	Z+3, r25	; 0x03
    2198:	82 e0       	ldi	r24, 0x02	; 2
    219a:	e8 2e       	mov	r14, r24
    219c:	8e 01       	movw	r16, r28
    219e:	0f 5f       	subi	r16, 0xFF	; 255
    21a0:	1f 4f       	sbci	r17, 0xFF	; 255
    21a2:	26 e2       	ldi	r18, 0x26	; 38
    21a4:	42 e3       	ldi	r20, 0x32	; 50
    21a6:	50 e0       	ldi	r21, 0x00	; 0
    21a8:	6a e5       	ldi	r22, 0x5A	; 90
    21aa:	80 e8       	ldi	r24, 0x80	; 128
    21ac:	94 e0       	ldi	r25, 0x04	; 4
    21ae:	0e 94 cb 1a 	call	0x3596	; 0x3596 <twi_read_packet>
    21b2:	8a 81       	ldd	r24, Y+2	; 0x02
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	98 2f       	mov	r25, r24
    21b8:	88 27       	eor	r24, r24
    21ba:	29 81       	ldd	r18, Y+1	; 0x01
    21bc:	82 2b       	or	r24, r18
    21be:	f6 01       	movw	r30, r12
    21c0:	82 87       	std	Z+10, r24	; 0x0a
    21c2:	93 87       	std	Z+11, r25	; 0x0b
    21c4:	28 e2       	ldi	r18, 0x28	; 40
    21c6:	42 e3       	ldi	r20, 0x32	; 50
    21c8:	50 e0       	ldi	r21, 0x00	; 0
    21ca:	6a e5       	ldi	r22, 0x5A	; 90
    21cc:	80 e8       	ldi	r24, 0x80	; 128
    21ce:	94 e0       	ldi	r25, 0x04	; 4
    21d0:	0e 94 cb 1a 	call	0x3596	; 0x3596 <twi_read_packet>
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	98 2f       	mov	r25, r24
    21da:	88 27       	eor	r24, r24
    21dc:	29 81       	ldd	r18, Y+1	; 0x01
    21de:	82 2b       	or	r24, r18
    21e0:	f6 01       	movw	r30, r12
    21e2:	84 87       	std	Z+12, r24	; 0x0c
    21e4:	95 87       	std	Z+13, r25	; 0x0d
    21e6:	2a e2       	ldi	r18, 0x2A	; 42
    21e8:	42 e3       	ldi	r20, 0x32	; 50
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	6a e5       	ldi	r22, 0x5A	; 90
    21ee:	80 e8       	ldi	r24, 0x80	; 128
    21f0:	94 e0       	ldi	r25, 0x04	; 4
    21f2:	0e 94 cb 1a 	call	0x3596	; 0x3596 <twi_read_packet>
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	98 2f       	mov	r25, r24
    21fc:	88 27       	eor	r24, r24
    21fe:	29 81       	ldd	r18, Y+1	; 0x01
    2200:	82 2b       	or	r24, r18
    2202:	f6 01       	movw	r30, r12
    2204:	86 87       	std	Z+14, r24	; 0x0e
    2206:	97 87       	std	Z+15, r25	; 0x0f
    2208:	24 e2       	ldi	r18, 0x24	; 36
    220a:	42 e3       	ldi	r20, 0x32	; 50
    220c:	50 e0       	ldi	r21, 0x00	; 0
    220e:	6a e5       	ldi	r22, 0x5A	; 90
    2210:	80 e8       	ldi	r24, 0x80	; 128
    2212:	94 e0       	ldi	r25, 0x04	; 4
    2214:	0e 94 cb 1a 	call	0x3596	; 0x3596 <twi_read_packet>
    2218:	8a 81       	ldd	r24, Y+2	; 0x02
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	98 2f       	mov	r25, r24
    221e:	88 27       	eor	r24, r24
    2220:	29 81       	ldd	r18, Y+1	; 0x01
    2222:	82 2b       	or	r24, r18
    2224:	f6 01       	movw	r30, r12
    2226:	80 87       	std	Z+8, r24	; 0x08
    2228:	91 87       	std	Z+9, r25	; 0x09
    222a:	22 e2       	ldi	r18, 0x22	; 34
    222c:	42 e3       	ldi	r20, 0x32	; 50
    222e:	50 e0       	ldi	r21, 0x00	; 0
    2230:	6a e5       	ldi	r22, 0x5A	; 90
    2232:	80 e8       	ldi	r24, 0x80	; 128
    2234:	94 e0       	ldi	r25, 0x04	; 4
    2236:	0e 94 cb 1a 	call	0x3596	; 0x3596 <twi_read_packet>
    223a:	8a 81       	ldd	r24, Y+2	; 0x02
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	98 2f       	mov	r25, r24
    2240:	88 27       	eor	r24, r24
    2242:	29 81       	ldd	r18, Y+1	; 0x01
    2244:	82 2b       	or	r24, r18
    2246:	f6 01       	movw	r30, r12
    2248:	86 83       	std	Z+6, r24	; 0x06
    224a:	97 83       	std	Z+7, r25	; 0x07
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	df 91       	pop	r29
    2254:	cf 91       	pop	r28
    2256:	1f 91       	pop	r17
    2258:	0f 91       	pop	r16
    225a:	ef 90       	pop	r14
    225c:	df 90       	pop	r13
    225e:	cf 90       	pop	r12
    2260:	08 95       	ret

00002262 <Si114xNop>:
    2262:	60 e0       	ldi	r22, 0x00	; 0
    2264:	4b cf       	rjmp	.-362    	; 0x20fc <_sendCmd>

00002266 <Si114xPsAlsAuto>:
    2266:	6f e0       	ldi	r22, 0x0F	; 15
    2268:	49 cf       	rjmp	.-366    	; 0x20fc <_sendCmd>

0000226a <Si114xParamSet>:
    226a:	cf 92       	push	r12
    226c:	df 92       	push	r13
    226e:	ef 92       	push	r14
    2270:	ff 92       	push	r15
    2272:	0f 93       	push	r16
    2274:	1f 93       	push	r17
    2276:	cf 93       	push	r28
    2278:	df 93       	push	r29
    227a:	1f 92       	push	r1
    227c:	1f 92       	push	r1
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	8c 01       	movw	r16, r24
    2284:	d6 2e       	mov	r13, r22
    2286:	c4 2e       	mov	r12, r20
    2288:	60 e3       	ldi	r22, 0x30	; 48
    228a:	c8 01       	movw	r24, r16
    228c:	94 d5       	rcall	.+2856   	; 0x2db6 <Si114xReadFromRegister>
    228e:	81 30       	cpi	r24, 0x01	; 1
    2290:	91 05       	cpc	r25, r1
    2292:	19 f0       	breq	.+6      	; 0x229a <Si114xParamSet+0x30>
    2294:	97 ff       	sbrs	r25, 7
    2296:	f8 cf       	rjmp	.-16     	; 0x2288 <Si114xParamSet+0x1e>
    2298:	1d c0       	rjmp	.+58     	; 0x22d4 <Si114xParamSet+0x6a>
    229a:	60 e2       	ldi	r22, 0x20	; 32
    229c:	c8 01       	movw	r24, r16
    229e:	8b d5       	rcall	.+2838   	; 0x2db6 <Si114xReadFromRegister>
    22a0:	7c 01       	movw	r14, r24
    22a2:	c9 82       	std	Y+1, r12	; 0x01
    22a4:	6d 2d       	mov	r22, r13
    22a6:	6f 71       	andi	r22, 0x1F	; 31
    22a8:	60 56       	subi	r22, 0x60	; 96
    22aa:	6a 83       	std	Y+2, r22	; 0x02
    22ac:	9e 01       	movw	r18, r28
    22ae:	2f 5f       	subi	r18, 0xFF	; 255
    22b0:	3f 4f       	sbci	r19, 0xFF	; 255
    22b2:	42 e0       	ldi	r20, 0x02	; 2
    22b4:	67 e1       	ldi	r22, 0x17	; 23
    22b6:	c8 01       	movw	r24, r16
    22b8:	9b d5       	rcall	.+2870   	; 0x2df0 <Si114xBlockWrite>
    22ba:	00 97       	sbiw	r24, 0x00	; 0
    22bc:	59 f4       	brne	.+22     	; 0x22d4 <Si114xParamSet+0x6a>
    22be:	60 e2       	ldi	r22, 0x20	; 32
    22c0:	c8 01       	movw	r24, r16
    22c2:	79 d5       	rcall	.+2802   	; 0x2db6 <Si114xReadFromRegister>
    22c4:	8e 15       	cp	r24, r14
    22c6:	9f 05       	cpc	r25, r15
    22c8:	d1 f3       	breq	.-12     	; 0x22be <Si114xParamSet+0x54>
    22ca:	18 16       	cp	r1, r24
    22cc:	19 06       	cpc	r1, r25
    22ce:	14 f4       	brge	.+4      	; 0x22d4 <Si114xParamSet+0x6a>
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	1f 91       	pop	r17
    22de:	0f 91       	pop	r16
    22e0:	ff 90       	pop	r15
    22e2:	ef 90       	pop	r14
    22e4:	df 90       	pop	r13
    22e6:	cf 90       	pop	r12
    22e8:	08 95       	ret

000022ea <Si114xPauseAll>:
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	ec 01       	movw	r28, r24
    22f0:	60 e2       	ldi	r22, 0x20	; 32
    22f2:	ce 01       	movw	r24, r28
    22f4:	60 d5       	rcall	.+2752   	; 0x2db6 <Si114xReadFromRegister>
    22f6:	89 2b       	or	r24, r25
    22f8:	19 f0       	breq	.+6      	; 0x2300 <Si114xPauseAll+0x16>
    22fa:	ce 01       	movw	r24, r28
    22fc:	b2 df       	rcall	.-156    	; 0x2262 <Si114xNop>
    22fe:	f8 cf       	rjmp	.-16     	; 0x22f0 <Si114xPauseAll+0x6>
    2300:	6b e0       	ldi	r22, 0x0B	; 11
    2302:	ce 01       	movw	r24, r28
    2304:	fb de       	rcall	.-522    	; 0x20fc <_sendCmd>
    2306:	60 e2       	ldi	r22, 0x20	; 32
    2308:	ce 01       	movw	r24, r28
    230a:	55 d5       	rcall	.+2730   	; 0x2db6 <Si114xReadFromRegister>
    230c:	89 2b       	or	r24, r25
    230e:	d9 f3       	breq	.-10     	; 0x2306 <Si114xPauseAll+0x1c>
    2310:	60 e2       	ldi	r22, 0x20	; 32
    2312:	ce 01       	movw	r24, r28
    2314:	50 d5       	rcall	.+2720   	; 0x2db6 <Si114xReadFromRegister>
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	59 f7       	brne	.-42     	; 0x22f0 <Si114xPauseAll+0x6>
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	df 91       	pop	r29
    2320:	cf 91       	pop	r28
    2322:	08 95       	ret

00002324 <si114x_reset>:
    2324:	0f 93       	push	r16
    2326:	1f 93       	push	r17
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	8c 01       	movw	r16, r24
    232e:	40 e0       	ldi	r20, 0x00	; 0
    2330:	68 e0       	ldi	r22, 0x08	; 8
    2332:	23 d5       	rcall	.+2630   	; 0x2d7a <Si114xWriteToRegister>
    2334:	ec 01       	movw	r28, r24
    2336:	c8 01       	movw	r24, r16
    2338:	d8 df       	rcall	.-80     	; 0x22ea <Si114xPauseAll>
    233a:	c8 0f       	add	r28, r24
    233c:	d9 1f       	adc	r29, r25
    233e:	40 e0       	ldi	r20, 0x00	; 0
    2340:	68 e0       	ldi	r22, 0x08	; 8
    2342:	c8 01       	movw	r24, r16
    2344:	1a d5       	rcall	.+2612   	; 0x2d7a <Si114xWriteToRegister>
    2346:	c8 0f       	add	r28, r24
    2348:	d9 1f       	adc	r29, r25
    234a:	40 e0       	ldi	r20, 0x00	; 0
    234c:	64 e0       	ldi	r22, 0x04	; 4
    234e:	c8 01       	movw	r24, r16
    2350:	14 d5       	rcall	.+2600   	; 0x2d7a <Si114xWriteToRegister>
    2352:	c8 0f       	add	r28, r24
    2354:	d9 1f       	adc	r29, r25
    2356:	40 e0       	ldi	r20, 0x00	; 0
    2358:	65 e0       	ldi	r22, 0x05	; 5
    235a:	c8 01       	movw	r24, r16
    235c:	0e d5       	rcall	.+2588   	; 0x2d7a <Si114xWriteToRegister>
    235e:	c8 0f       	add	r28, r24
    2360:	d9 1f       	adc	r29, r25
    2362:	40 e0       	ldi	r20, 0x00	; 0
    2364:	66 e0       	ldi	r22, 0x06	; 6
    2366:	c8 01       	movw	r24, r16
    2368:	08 d5       	rcall	.+2576   	; 0x2d7a <Si114xWriteToRegister>
    236a:	c8 0f       	add	r28, r24
    236c:	d9 1f       	adc	r29, r25
    236e:	40 e0       	ldi	r20, 0x00	; 0
    2370:	63 e0       	ldi	r22, 0x03	; 3
    2372:	c8 01       	movw	r24, r16
    2374:	02 d5       	rcall	.+2564   	; 0x2d7a <Si114xWriteToRegister>
    2376:	c8 0f       	add	r28, r24
    2378:	d9 1f       	adc	r29, r25
    237a:	4f ef       	ldi	r20, 0xFF	; 255
    237c:	61 e2       	ldi	r22, 0x21	; 33
    237e:	c8 01       	movw	r24, r16
    2380:	fc d4       	rcall	.+2552   	; 0x2d7a <Si114xWriteToRegister>
    2382:	c8 0f       	add	r28, r24
    2384:	d9 1f       	adc	r29, r25
    2386:	41 e0       	ldi	r20, 0x01	; 1
    2388:	68 e1       	ldi	r22, 0x18	; 24
    238a:	c8 01       	movw	r24, r16
    238c:	f6 d4       	rcall	.+2540   	; 0x2d7a <Si114xWriteToRegister>
    238e:	c8 0f       	add	r28, r24
    2390:	d9 1f       	adc	r29, r25
    2392:	3f d5       	rcall	.+2686   	; 0x2e12 <delay_10ms>
    2394:	47 e1       	ldi	r20, 0x17	; 23
    2396:	67 e0       	ldi	r22, 0x07	; 7
    2398:	c8 01       	movw	r24, r16
    239a:	ef d4       	rcall	.+2526   	; 0x2d7a <Si114xWriteToRegister>
    239c:	8c 0f       	add	r24, r28
    239e:	9d 1f       	adc	r25, r29
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	1f 91       	pop	r17
    23a6:	0f 91       	pop	r16
    23a8:	08 95       	ret

000023aa <si114x_init_ps1_als>:
    23aa:	0f 93       	push	r16
    23ac:	1f 93       	push	r17
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
    23b2:	8c 01       	movw	r16, r24
    23b4:	40 e0       	ldi	r20, 0x00	; 0
    23b6:	68 e0       	ldi	r22, 0x08	; 8
    23b8:	e0 d4       	rcall	.+2496   	; 0x2d7a <Si114xWriteToRegister>
    23ba:	ec 01       	movw	r28, r24
    23bc:	40 e0       	ldi	r20, 0x00	; 0
    23be:	6a e0       	ldi	r22, 0x0A	; 10
    23c0:	c8 01       	movw	r24, r16
    23c2:	db d4       	rcall	.+2486   	; 0x2d7a <Si114xWriteToRegister>
    23c4:	c8 0f       	add	r28, r24
    23c6:	d9 1f       	adc	r29, r25
    23c8:	40 e0       	ldi	r20, 0x00	; 0
    23ca:	69 e0       	ldi	r22, 0x09	; 9
    23cc:	c8 01       	movw	r24, r16
    23ce:	d5 d4       	rcall	.+2474   	; 0x2d7a <Si114xWriteToRegister>
    23d0:	c8 0f       	add	r28, r24
    23d2:	d9 1f       	adc	r29, r25
    23d4:	c8 01       	movw	r24, r16
    23d6:	a6 df       	rcall	.-180    	; 0x2324 <si114x_reset>
    23d8:	c8 0f       	add	r28, r24
    23da:	d9 1f       	adc	r29, r25
    23dc:	43 e0       	ldi	r20, 0x03	; 3
    23de:	6f e0       	ldi	r22, 0x0F	; 15
    23e0:	c8 01       	movw	r24, r16
    23e2:	cb d4       	rcall	.+2454   	; 0x2d7a <Si114xWriteToRegister>
    23e4:	c8 0f       	add	r28, r24
    23e6:	d9 1f       	adc	r29, r25
    23e8:	41 e3       	ldi	r20, 0x31	; 49
    23ea:	61 e0       	ldi	r22, 0x01	; 1
    23ec:	c8 01       	movw	r24, r16
    23ee:	3d df       	rcall	.-390    	; 0x226a <Si114xParamSet>
    23f0:	c8 0f       	add	r28, r24
    23f2:	d9 1f       	adc	r29, r25
    23f4:	43 e0       	ldi	r20, 0x03	; 3
    23f6:	63 e0       	ldi	r22, 0x03	; 3
    23f8:	c8 01       	movw	r24, r16
    23fa:	bf d4       	rcall	.+2430   	; 0x2d7a <Si114xWriteToRegister>
    23fc:	c8 0f       	add	r28, r24
    23fe:	d9 1f       	adc	r29, r25
    2400:	45 e0       	ldi	r20, 0x05	; 5
    2402:	64 e0       	ldi	r22, 0x04	; 4
    2404:	c8 01       	movw	r24, r16
    2406:	b9 d4       	rcall	.+2418   	; 0x2d7a <Si114xWriteToRegister>
    2408:	c8 0f       	add	r28, r24
    240a:	d9 1f       	adc	r29, r25
    240c:	43 e3       	ldi	r20, 0x33	; 51
    240e:	65 e0       	ldi	r22, 0x05	; 5
    2410:	c8 01       	movw	r24, r16
    2412:	b3 d4       	rcall	.+2406   	; 0x2d7a <Si114xWriteToRegister>
    2414:	c8 0f       	add	r28, r24
    2416:	d9 1f       	adc	r29, r25
    2418:	43 e0       	ldi	r20, 0x03	; 3
    241a:	67 e0       	ldi	r22, 0x07	; 7
    241c:	c8 01       	movw	r24, r16
    241e:	25 df       	rcall	.-438    	; 0x226a <Si114xParamSet>
    2420:	c8 0f       	add	r28, r24
    2422:	d9 1f       	adc	r29, r25
    2424:	43 e0       	ldi	r20, 0x03	; 3
    2426:	6e e0       	ldi	r22, 0x0E	; 14
    2428:	c8 01       	movw	r24, r16
    242a:	1f df       	rcall	.-450    	; 0x226a <Si114xParamSet>
    242c:	c8 0f       	add	r28, r24
    242e:	d9 1f       	adc	r29, r25
    2430:	40 e0       	ldi	r20, 0x00	; 0
    2432:	6b e0       	ldi	r22, 0x0B	; 11
    2434:	c8 01       	movw	r24, r16
    2436:	19 df       	rcall	.-462    	; 0x226a <Si114xParamSet>
    2438:	c8 0f       	add	r28, r24
    243a:	d9 1f       	adc	r29, r25
    243c:	41 e0       	ldi	r20, 0x01	; 1
    243e:	62 e0       	ldi	r22, 0x02	; 2
    2440:	c8 01       	movw	r24, r16
    2442:	13 df       	rcall	.-474    	; 0x226a <Si114xParamSet>
    2444:	c8 0f       	add	r28, r24
    2446:	d9 1f       	adc	r29, r25
    2448:	40 e7       	ldi	r20, 0x70	; 112
    244a:	6a e0       	ldi	r22, 0x0A	; 10
    244c:	c8 01       	movw	r24, r16
    244e:	0d df       	rcall	.-486    	; 0x226a <Si114xParamSet>
    2450:	c8 0f       	add	r28, r24
    2452:	d9 1f       	adc	r29, r25
    2454:	44 e0       	ldi	r20, 0x04	; 4
    2456:	6c e0       	ldi	r22, 0x0C	; 12
    2458:	c8 01       	movw	r24, r16
    245a:	07 df       	rcall	.-498    	; 0x226a <Si114xParamSet>
    245c:	c8 0f       	add	r28, r24
    245e:	d9 1f       	adc	r29, r25
    2460:	40 e0       	ldi	r20, 0x00	; 0
    2462:	6e e1       	ldi	r22, 0x1E	; 30
    2464:	c8 01       	movw	r24, r16
    2466:	01 df       	rcall	.-510    	; 0x226a <Si114xParamSet>
    2468:	c8 0f       	add	r28, r24
    246a:	d9 1f       	adc	r29, r25
    246c:	40 e0       	ldi	r20, 0x00	; 0
    246e:	61 e1       	ldi	r22, 0x11	; 17
    2470:	c8 01       	movw	r24, r16
    2472:	fb de       	rcall	.-522    	; 0x226a <Si114xParamSet>
    2474:	c8 0f       	add	r28, r24
    2476:	d9 1f       	adc	r29, r25
    2478:	40 e7       	ldi	r20, 0x70	; 112
    247a:	6d e1       	ldi	r22, 0x1D	; 29
    247c:	c8 01       	movw	r24, r16
    247e:	f5 de       	rcall	.-534    	; 0x226a <Si114xParamSet>
    2480:	c8 0f       	add	r28, r24
    2482:	d9 1f       	adc	r29, r25
    2484:	40 e7       	ldi	r20, 0x70	; 112
    2486:	60 e1       	ldi	r22, 0x10	; 16
    2488:	c8 01       	movw	r24, r16
    248a:	ef de       	rcall	.-546    	; 0x226a <Si114xParamSet>
    248c:	c8 0f       	add	r28, r24
    248e:	d9 1f       	adc	r29, r25
    2490:	40 e2       	ldi	r20, 0x20	; 32
    2492:	6f e1       	ldi	r22, 0x1F	; 31
    2494:	c8 01       	movw	r24, r16
    2496:	e9 de       	rcall	.-558    	; 0x226a <Si114xParamSet>
    2498:	c8 0f       	add	r28, r24
    249a:	d9 1f       	adc	r29, r25
    249c:	40 e2       	ldi	r20, 0x20	; 32
    249e:	62 e1       	ldi	r22, 0x12	; 18
    24a0:	c8 01       	movw	r24, r16
    24a2:	e3 de       	rcall	.-570    	; 0x226a <Si114xParamSet>
    24a4:	c8 0f       	add	r28, r24
    24a6:	d9 1f       	adc	r29, r25
    24a8:	48 e6       	ldi	r20, 0x68	; 104
    24aa:	61 e1       	ldi	r22, 0x11	; 17
    24ac:	c8 01       	movw	r24, r16
    24ae:	65 d4       	rcall	.+2250   	; 0x2d7a <Si114xWriteToRegister>
    24b0:	c8 0f       	add	r28, r24
    24b2:	d9 1f       	adc	r29, r25
    24b4:	41 e0       	ldi	r20, 0x01	; 1
    24b6:	62 e1       	ldi	r22, 0x12	; 18
    24b8:	c8 01       	movw	r24, r16
    24ba:	5f d4       	rcall	.+2238   	; 0x2d7a <Si114xWriteToRegister>
    24bc:	c8 0f       	add	r28, r24
    24be:	d9 1f       	adc	r29, r25
    24c0:	4e e5       	ldi	r20, 0x5E	; 94
    24c2:	6b e0       	ldi	r22, 0x0B	; 11
    24c4:	c8 01       	movw	r24, r16
    24c6:	59 d4       	rcall	.+2226   	; 0x2d7a <Si114xWriteToRegister>
    24c8:	c8 0f       	add	r28, r24
    24ca:	d9 1f       	adc	r29, r25
    24cc:	41 e0       	ldi	r20, 0x01	; 1
    24ce:	6c e0       	ldi	r22, 0x0C	; 12
    24d0:	c8 01       	movw	r24, r16
    24d2:	53 d4       	rcall	.+2214   	; 0x2d7a <Si114xWriteToRegister>
    24d4:	c8 0f       	add	r28, r24
    24d6:	d9 1f       	adc	r29, r25
    24d8:	40 ed       	ldi	r20, 0xD0	; 208
    24da:	6d e0       	ldi	r22, 0x0D	; 13
    24dc:	c8 01       	movw	r24, r16
    24de:	4d d4       	rcall	.+2202   	; 0x2d7a <Si114xWriteToRegister>
    24e0:	c8 0f       	add	r28, r24
    24e2:	d9 1f       	adc	r29, r25
    24e4:	47 e0       	ldi	r20, 0x07	; 7
    24e6:	6e e0       	ldi	r22, 0x0E	; 14
    24e8:	c8 01       	movw	r24, r16
    24ea:	47 d4       	rcall	.+2190   	; 0x2d7a <Si114xWriteToRegister>
    24ec:	c8 0f       	add	r28, r24
    24ee:	d9 1f       	adc	r29, r25
    24f0:	40 ea       	ldi	r20, 0xA0	; 160
    24f2:	68 e0       	ldi	r22, 0x08	; 8
    24f4:	c8 01       	movw	r24, r16
    24f6:	41 d4       	rcall	.+2178   	; 0x2d7a <Si114xWriteToRegister>
    24f8:	c8 0f       	add	r28, r24
    24fa:	d9 1f       	adc	r29, r25
    24fc:	48 e0       	ldi	r20, 0x08	; 8
    24fe:	6a e0       	ldi	r22, 0x0A	; 10
    2500:	c8 01       	movw	r24, r16
    2502:	3b d4       	rcall	.+2166   	; 0x2d7a <Si114xWriteToRegister>
    2504:	c8 0f       	add	r28, r24
    2506:	d9 1f       	adc	r29, r25
    2508:	48 e0       	ldi	r20, 0x08	; 8
    250a:	69 e0       	ldi	r22, 0x09	; 9
    250c:	c8 01       	movw	r24, r16
    250e:	35 d4       	rcall	.+2154   	; 0x2d7a <Si114xWriteToRegister>
    2510:	c8 0f       	add	r28, r24
    2512:	d9 1f       	adc	r29, r25
    2514:	c8 01       	movw	r24, r16
    2516:	a7 de       	rcall	.-690    	; 0x2266 <Si114xPsAlsAuto>
    2518:	8c 0f       	add	r24, r28
    251a:	9d 1f       	adc	r25, r29
    251c:	df 91       	pop	r29
    251e:	cf 91       	pop	r28
    2520:	1f 91       	pop	r17
    2522:	0f 91       	pop	r16
    2524:	08 95       	ret

00002526 <si114x_setup_ps1>:
    2526:	8a e5       	ldi	r24, 0x5A	; 90
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	fc de       	rcall	.-520    	; 0x2324 <si114x_reset>
    252c:	2f ef       	ldi	r18, 0xFF	; 255
    252e:	81 ee       	ldi	r24, 0xE1	; 225
    2530:	94 e0       	ldi	r25, 0x04	; 4
    2532:	21 50       	subi	r18, 0x01	; 1
    2534:	80 40       	sbci	r24, 0x00	; 0
    2536:	90 40       	sbci	r25, 0x00	; 0
    2538:	e1 f7       	brne	.-8      	; 0x2532 <si114x_setup_ps1+0xc>
    253a:	00 c0       	rjmp	.+0      	; 0x253c <si114x_setup_ps1+0x16>
    253c:	00 00       	nop
    253e:	8a e5       	ldi	r24, 0x5A	; 90
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	33 df       	rcall	.-410    	; 0x23aa <si114x_init_ps1_als>
    2544:	0f cb       	rjmp	.-2530   	; 0x1b64 <btn_si114x_enable_interrupt>

00002546 <si114x_init>:
    2546:	0f 93       	push	r16
    2548:	1f 93       	push	r17
    254a:	cf 93       	push	r28
    254c:	df 93       	push	r29
    254e:	8c 01       	movw	r16, r24
    2550:	40 e0       	ldi	r20, 0x00	; 0
    2552:	68 e0       	ldi	r22, 0x08	; 8
    2554:	12 d4       	rcall	.+2084   	; 0x2d7a <Si114xWriteToRegister>
    2556:	ec 01       	movw	r28, r24
    2558:	40 e0       	ldi	r20, 0x00	; 0
    255a:	6a e0       	ldi	r22, 0x0A	; 10
    255c:	c8 01       	movw	r24, r16
    255e:	0d d4       	rcall	.+2074   	; 0x2d7a <Si114xWriteToRegister>
    2560:	c8 0f       	add	r28, r24
    2562:	d9 1f       	adc	r29, r25
    2564:	40 e0       	ldi	r20, 0x00	; 0
    2566:	69 e0       	ldi	r22, 0x09	; 9
    2568:	c8 01       	movw	r24, r16
    256a:	07 d4       	rcall	.+2062   	; 0x2d7a <Si114xWriteToRegister>
    256c:	c8 0f       	add	r28, r24
    256e:	d9 1f       	adc	r29, r25
    2570:	c8 01       	movw	r24, r16
    2572:	d8 de       	rcall	.-592    	; 0x2324 <si114x_reset>
    2574:	c8 0f       	add	r28, r24
    2576:	d9 1f       	adc	r29, r25
    2578:	4f ef       	ldi	r20, 0xFF	; 255
    257a:	6f e0       	ldi	r22, 0x0F	; 15
    257c:	c8 01       	movw	r24, r16
    257e:	fd d3       	rcall	.+2042   	; 0x2d7a <Si114xWriteToRegister>
    2580:	c8 0f       	add	r28, r24
    2582:	d9 1f       	adc	r29, r25
    2584:	40 e0       	ldi	r20, 0x00	; 0
    2586:	60 e1       	ldi	r22, 0x10	; 16
    2588:	c8 01       	movw	r24, r16
    258a:	f7 d3       	rcall	.+2030   	; 0x2d7a <Si114xWriteToRegister>
    258c:	c8 0f       	add	r28, r24
    258e:	d9 1f       	adc	r29, r25
    2590:	47 e7       	ldi	r20, 0x77	; 119
    2592:	61 e0       	ldi	r22, 0x01	; 1
    2594:	c8 01       	movw	r24, r16
    2596:	69 de       	rcall	.-814    	; 0x226a <Si114xParamSet>
    2598:	c8 0f       	add	r28, r24
    259a:	d9 1f       	adc	r29, r25
    259c:	41 e0       	ldi	r20, 0x01	; 1
    259e:	63 e0       	ldi	r22, 0x03	; 3
    25a0:	c8 01       	movw	r24, r16
    25a2:	eb d3       	rcall	.+2006   	; 0x2d7a <Si114xWriteToRegister>
    25a4:	c8 0f       	add	r28, r24
    25a6:	d9 1f       	adc	r29, r25
    25a8:	4d e1       	ldi	r20, 0x1D	; 29
    25aa:	64 e0       	ldi	r22, 0x04	; 4
    25ac:	c8 01       	movw	r24, r16
    25ae:	e5 d3       	rcall	.+1994   	; 0x2d7a <Si114xWriteToRegister>
    25b0:	c8 0f       	add	r28, r24
    25b2:	d9 1f       	adc	r29, r25
    25b4:	40 e0       	ldi	r20, 0x00	; 0
    25b6:	65 e0       	ldi	r22, 0x05	; 5
    25b8:	c8 01       	movw	r24, r16
    25ba:	df d3       	rcall	.+1982   	; 0x2d7a <Si114xWriteToRegister>
    25bc:	c8 0f       	add	r28, r24
    25be:	d9 1f       	adc	r29, r25
    25c0:	40 e0       	ldi	r20, 0x00	; 0
    25c2:	66 e0       	ldi	r22, 0x06	; 6
    25c4:	c8 01       	movw	r24, r16
    25c6:	d9 d3       	rcall	.+1970   	; 0x2d7a <Si114xWriteToRegister>
    25c8:	c8 0f       	add	r28, r24
    25ca:	d9 1f       	adc	r29, r25
    25cc:	43 e0       	ldi	r20, 0x03	; 3
    25ce:	67 e0       	ldi	r22, 0x07	; 7
    25d0:	c8 01       	movw	r24, r16
    25d2:	4b de       	rcall	.-874    	; 0x226a <Si114xParamSet>
    25d4:	c8 0f       	add	r28, r24
    25d6:	d9 1f       	adc	r29, r25
    25d8:	43 e0       	ldi	r20, 0x03	; 3
    25da:	68 e0       	ldi	r22, 0x08	; 8
    25dc:	c8 01       	movw	r24, r16
    25de:	45 de       	rcall	.-886    	; 0x226a <Si114xParamSet>
    25e0:	c8 0f       	add	r28, r24
    25e2:	d9 1f       	adc	r29, r25
    25e4:	43 e0       	ldi	r20, 0x03	; 3
    25e6:	69 e0       	ldi	r22, 0x09	; 9
    25e8:	c8 01       	movw	r24, r16
    25ea:	3f de       	rcall	.-898    	; 0x226a <Si114xParamSet>
    25ec:	c8 0f       	add	r28, r24
    25ee:	d9 1f       	adc	r29, r25
    25f0:	43 e0       	ldi	r20, 0x03	; 3
    25f2:	6e e0       	ldi	r22, 0x0E	; 14
    25f4:	c8 01       	movw	r24, r16
    25f6:	39 de       	rcall	.-910    	; 0x226a <Si114xParamSet>
    25f8:	c8 0f       	add	r28, r24
    25fa:	d9 1f       	adc	r29, r25
    25fc:	40 e0       	ldi	r20, 0x00	; 0
    25fe:	6b e0       	ldi	r22, 0x0B	; 11
    2600:	c8 01       	movw	r24, r16
    2602:	33 de       	rcall	.-922    	; 0x226a <Si114xParamSet>
    2604:	c8 0f       	add	r28, r24
    2606:	d9 1f       	adc	r29, r25
    2608:	40 e0       	ldi	r20, 0x00	; 0
    260a:	6e e1       	ldi	r22, 0x1E	; 30
    260c:	c8 01       	movw	r24, r16
    260e:	2d de       	rcall	.-934    	; 0x226a <Si114xParamSet>
    2610:	c8 0f       	add	r28, r24
    2612:	d9 1f       	adc	r29, r25
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	61 e1       	ldi	r22, 0x11	; 17
    2618:	c8 01       	movw	r24, r16
    261a:	27 de       	rcall	.-946    	; 0x226a <Si114xParamSet>
    261c:	c8 0f       	add	r28, r24
    261e:	d9 1f       	adc	r29, r25
    2620:	41 e2       	ldi	r20, 0x21	; 33
    2622:	62 e0       	ldi	r22, 0x02	; 2
    2624:	c8 01       	movw	r24, r16
    2626:	21 de       	rcall	.-958    	; 0x226a <Si114xParamSet>
    2628:	c8 0f       	add	r28, r24
    262a:	d9 1f       	adc	r29, r25
    262c:	44 e0       	ldi	r20, 0x04	; 4
    262e:	63 e0       	ldi	r22, 0x03	; 3
    2630:	c8 01       	movw	r24, r16
    2632:	1b de       	rcall	.-970    	; 0x226a <Si114xParamSet>
    2634:	c8 0f       	add	r28, r24
    2636:	d9 1f       	adc	r29, r25
    2638:	40 e7       	ldi	r20, 0x70	; 112
    263a:	6a e0       	ldi	r22, 0x0A	; 10
    263c:	c8 01       	movw	r24, r16
    263e:	15 de       	rcall	.-982    	; 0x226a <Si114xParamSet>
    2640:	c8 0f       	add	r28, r24
    2642:	d9 1f       	adc	r29, r25
    2644:	40 e7       	ldi	r20, 0x70	; 112
    2646:	6d e1       	ldi	r22, 0x1D	; 29
    2648:	c8 01       	movw	r24, r16
    264a:	0f de       	rcall	.-994    	; 0x226a <Si114xParamSet>
    264c:	c8 0f       	add	r28, r24
    264e:	d9 1f       	adc	r29, r25
    2650:	40 e7       	ldi	r20, 0x70	; 112
    2652:	60 e1       	ldi	r22, 0x10	; 16
    2654:	c8 01       	movw	r24, r16
    2656:	09 de       	rcall	.-1006   	; 0x226a <Si114xParamSet>
    2658:	c8 0f       	add	r28, r24
    265a:	d9 1f       	adc	r29, r25
    265c:	44 e0       	ldi	r20, 0x04	; 4
    265e:	6c e0       	ldi	r22, 0x0C	; 12
    2660:	c8 01       	movw	r24, r16
    2662:	03 de       	rcall	.-1018   	; 0x226a <Si114xParamSet>
    2664:	c8 0f       	add	r28, r24
    2666:	d9 1f       	adc	r29, r25
    2668:	40 e2       	ldi	r20, 0x20	; 32
    266a:	6f e1       	ldi	r22, 0x1F	; 31
    266c:	c8 01       	movw	r24, r16
    266e:	fd dd       	rcall	.-1030   	; 0x226a <Si114xParamSet>
    2670:	c8 0f       	add	r28, r24
    2672:	d9 1f       	adc	r29, r25
    2674:	40 e2       	ldi	r20, 0x20	; 32
    2676:	62 e1       	ldi	r22, 0x12	; 18
    2678:	c8 01       	movw	r24, r16
    267a:	f7 dd       	rcall	.-1042   	; 0x226a <Si114xParamSet>
    267c:	c8 0f       	add	r28, r24
    267e:	d9 1f       	adc	r29, r25
    2680:	44 e9       	ldi	r20, 0x94	; 148
    2682:	68 e0       	ldi	r22, 0x08	; 8
    2684:	c8 01       	movw	r24, r16
    2686:	79 d3       	rcall	.+1778   	; 0x2d7a <Si114xWriteToRegister>
    2688:	c8 0f       	add	r28, r24
    268a:	d9 1f       	adc	r29, r25
    268c:	48 e0       	ldi	r20, 0x08	; 8
    268e:	6a e0       	ldi	r22, 0x0A	; 10
    2690:	c8 01       	movw	r24, r16
    2692:	73 d3       	rcall	.+1766   	; 0x2d7a <Si114xWriteToRegister>
    2694:	c8 0f       	add	r28, r24
    2696:	d9 1f       	adc	r29, r25
    2698:	48 e0       	ldi	r20, 0x08	; 8
    269a:	69 e0       	ldi	r22, 0x09	; 9
    269c:	c8 01       	movw	r24, r16
    269e:	6d d3       	rcall	.+1754   	; 0x2d7a <Si114xWriteToRegister>
    26a0:	c8 0f       	add	r28, r24
    26a2:	d9 1f       	adc	r29, r25
    26a4:	c8 01       	movw	r24, r16
    26a6:	df dd       	rcall	.-1090   	; 0x2266 <Si114xPsAlsAuto>
    26a8:	8c 0f       	add	r24, r28
    26aa:	9d 1f       	adc	r25, r29
    26ac:	df 91       	pop	r29
    26ae:	cf 91       	pop	r28
    26b0:	1f 91       	pop	r17
    26b2:	0f 91       	pop	r16
    26b4:	08 95       	ret

000026b6 <si114x_setup>:
    26b6:	e0 e7       	ldi	r30, 0x70	; 112
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	83 81       	ldd	r24, Z+3	; 0x03
    26bc:	8d 7f       	andi	r24, 0xFD	; 253
    26be:	83 83       	std	Z+3, r24	; 0x03
    26c0:	e0 e4       	ldi	r30, 0x40	; 64
    26c2:	f8 e0       	ldi	r31, 0x08	; 8
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	80 83       	st	Z, r24
    26c8:	90 e8       	ldi	r25, 0x80	; 128
    26ca:	96 a3       	std	Z+38, r25	; 0x26
    26cc:	9c e0       	ldi	r25, 0x0C	; 12
    26ce:	97 a3       	std	Z+39, r25	; 0x27
    26d0:	86 83       	std	Z+6, r24	; 0x06
    26d2:	8a e5       	ldi	r24, 0x5A	; 90
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	26 de       	rcall	.-948    	; 0x2324 <si114x_reset>
    26d8:	2f ef       	ldi	r18, 0xFF	; 255
    26da:	81 ee       	ldi	r24, 0xE1	; 225
    26dc:	94 e0       	ldi	r25, 0x04	; 4
    26de:	21 50       	subi	r18, 0x01	; 1
    26e0:	80 40       	sbci	r24, 0x00	; 0
    26e2:	90 40       	sbci	r25, 0x00	; 0
    26e4:	e1 f7       	brne	.-8      	; 0x26de <si114x_setup+0x28>
    26e6:	00 c0       	rjmp	.+0      	; 0x26e8 <si114x_setup+0x32>
    26e8:	00 00       	nop
    26ea:	8a e5       	ldi	r24, 0x5A	; 90
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	2b cf       	rjmp	.-426    	; 0x2546 <si114x_init>

000026f0 <si114x_baseline_calibration>:
    26f0:	ef 92       	push	r14
    26f2:	ff 92       	push	r15
    26f4:	0f 93       	push	r16
    26f6:	1f 93       	push	r17
    26f8:	cf 93       	push	r28
    26fa:	df 93       	push	r29
    26fc:	ec 01       	movw	r28, r24
    26fe:	db df       	rcall	.-74     	; 0x26b6 <si114x_setup>
    2700:	80 e8       	ldi	r24, 0x80	; 128
    2702:	80 93 07 20 	sts	0x2007, r24
    2706:	60 e0       	ldi	r22, 0x00	; 0
    2708:	8a e3       	ldi	r24, 0x3A	; 58
    270a:	91 e2       	ldi	r25, 0x21	; 33
    270c:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <display_print_scrolling_text>
    2710:	af e5       	ldi	r26, 0x5F	; 95
    2712:	ea 2e       	mov	r14, r26
    2714:	a1 e2       	ldi	r26, 0x21	; 33
    2716:	fa 2e       	mov	r15, r26
    2718:	01 e0       	ldi	r16, 0x01	; 1
    271a:	24 e0       	ldi	r18, 0x04	; 4
    271c:	44 e0       	ldi	r20, 0x04	; 4
    271e:	66 e0       	ldi	r22, 0x06	; 6
    2720:	86 e0       	ldi	r24, 0x06	; 6
    2722:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <display_draw_filled_rect>
    2726:	00 e0       	ldi	r16, 0x00	; 0
    2728:	22 e0       	ldi	r18, 0x02	; 2
    272a:	42 e0       	ldi	r20, 0x02	; 2
    272c:	67 e0       	ldi	r22, 0x07	; 7
    272e:	87 e0       	ldi	r24, 0x07	; 7
    2730:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <display_draw_filled_rect>
    2734:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <display_refresh_screen>
    2738:	ce 01       	movw	r24, r28
    273a:	1b dd       	rcall	.-1482   	; 0x2172 <si114x_get_data>
    273c:	8b 85       	ldd	r24, Y+11	; 0x0b
    273e:	8f 93       	push	r24
    2740:	8a 85       	ldd	r24, Y+10	; 0x0a
    2742:	8f 93       	push	r24
    2744:	ff 92       	push	r15
    2746:	ef 92       	push	r14
    2748:	0e 94 9a 65 	call	0xcb34	; 0xcb34 <printf>
    274c:	8a 85       	ldd	r24, Y+10	; 0x0a
    274e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2750:	0f 90       	pop	r0
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	89 3e       	cpi	r24, 0xE9	; 233
    275a:	23 e0       	ldi	r18, 0x03	; 3
    275c:	92 07       	cpc	r25, r18
    275e:	e0 f6       	brcc	.-72     	; 0x2718 <si114x_baseline_calibration+0x28>
    2760:	80 93 80 3a 	sts	0x3A80, r24
    2764:	90 93 81 3a 	sts	0x3A81, r25
    2768:	8f ef       	ldi	r24, 0xFF	; 255
    276a:	97 ea       	ldi	r25, 0xA7	; 167
    276c:	21 e6       	ldi	r18, 0x61	; 97
    276e:	81 50       	subi	r24, 0x01	; 1
    2770:	90 40       	sbci	r25, 0x00	; 0
    2772:	20 40       	sbci	r18, 0x00	; 0
    2774:	e1 f7       	brne	.-8      	; 0x276e <si114x_baseline_calibration+0x7e>
    2776:	00 c0       	rjmp	.+0      	; 0x2778 <si114x_baseline_calibration+0x88>
    2778:	00 00       	nop
    277a:	01 e8       	ldi	r16, 0x81	; 129
    277c:	10 e0       	ldi	r17, 0x00	; 0
    277e:	01 50       	subi	r16, 0x01	; 1
    2780:	11 09       	sbc	r17, r1
    2782:	01 15       	cp	r16, r1
    2784:	11 05       	cpc	r17, r1
    2786:	69 f0       	breq	.+26     	; 0x27a2 <si114x_baseline_calibration+0xb2>
    2788:	80 91 60 2e 	lds	r24, 0x2E60
    278c:	90 91 61 2e 	lds	r25, 0x2E61
    2790:	8a 83       	std	Y+2, r24	; 0x02
    2792:	9b 83       	std	Y+3, r25	; 0x03
    2794:	ce 01       	movw	r24, r28
    2796:	ed dc       	rcall	.-1574   	; 0x2172 <si114x_get_data>
    2798:	be 01       	movw	r22, r28
    279a:	8a e5       	ldi	r24, 0x5A	; 90
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	cd d1       	rcall	.+922    	; 0x2b3a <si114x_process_samples>
    27a0:	ee cf       	rjmp	.-36     	; 0x277e <si114x_baseline_calibration+0x8e>
    27a2:	df 91       	pop	r29
    27a4:	cf 91       	pop	r28
    27a6:	1f 91       	pop	r17
    27a8:	0f 91       	pop	r16
    27aa:	ff 90       	pop	r15
    27ac:	ef 90       	pop	r14
    27ae:	08 95       	ret

000027b0 <__vector_20>:

ISR(TCC1_OVF_vect) {
    27b0:	1f 92       	push	r1
    27b2:	0f 92       	push	r0
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	0f 92       	push	r0
    27b8:	11 24       	eor	r1, r1
    27ba:	08 b6       	in	r0, 0x38	; 56
    27bc:	0f 92       	push	r0
    27be:	18 be       	out	0x38, r1	; 56
    27c0:	8f 93       	push	r24
    27c2:	9f 93       	push	r25
	counter++;
    27c4:	80 91 60 2e 	lds	r24, 0x2E60
    27c8:	90 91 61 2e 	lds	r25, 0x2E61
    27cc:	01 96       	adiw	r24, 0x01	; 1
    27ce:	80 93 60 2e 	sts	0x2E60, r24
    27d2:	90 93 61 2e 	sts	0x2E61, r25
}
    27d6:	9f 91       	pop	r25
    27d8:	8f 91       	pop	r24
    27da:	0f 90       	pop	r0
    27dc:	08 be       	out	0x38, r0	; 56
    27de:	0f 90       	pop	r0
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	0f 90       	pop	r0
    27e4:	1f 90       	pop	r1
    27e6:	18 95       	reti

000027e8 <isIRStable>:
        }
    }
}

char isIRStable( SI114X_IRQ_SAMPLE *samples)
{
    27e8:	8f 92       	push	r8
    27ea:	9f 92       	push	r9
    27ec:	af 92       	push	r10
    27ee:	bf 92       	push	r11
    27f0:	cf 92       	push	r12
    27f2:	df 92       	push	r13
    27f4:	ef 92       	push	r14
    27f6:	ff 92       	push	r15
                                        //
    u32 xdata IR = (u32) samples->ir; // Make a copy of ALS IR Reading
    
    // Initialize IRlast to the ALS IR reading if it does not contain 
    // information from a previous measurement cycle
    if( IRlast == 0) IRlast = samples->ir; 
    27f8:	40 91 71 2e 	lds	r20, 0x2E71
    27fc:	50 91 72 2e 	lds	r21, 0x2E72
    2800:	60 91 73 2e 	lds	r22, 0x2E73
    2804:	70 91 74 2e 	lds	r23, 0x2E74
    2808:	fc 01       	movw	r30, r24
    280a:	c0 84       	ldd	r12, Z+8	; 0x08
    280c:	d1 84       	ldd	r13, Z+9	; 0x09
    280e:	45 2b       	or	r20, r21
    2810:	46 2b       	or	r20, r22
    2812:	47 2b       	or	r20, r23
    2814:	61 f4       	brne	.+24     	; 0x282e <isIRStable+0x46>
    2816:	c6 01       	movw	r24, r12
    2818:	a0 e0       	ldi	r26, 0x00	; 0
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	80 93 71 2e 	sts	0x2E71, r24
    2820:	90 93 72 2e 	sts	0x2E72, r25
    2824:	a0 93 73 2e 	sts	0x2E73, r26
    2828:	b0 93 74 2e 	sts	0x2E74, r27
    282c:	06 c0       	rjmp	.+12     	; 0x283a <isIRStable+0x52>

    // If ALS IR is saturated, return false immediately
    else if( samples->ir > 48000 ) return 0; 
    282e:	f1 e8       	ldi	r31, 0x81	; 129
    2830:	cf 16       	cp	r12, r31
    2832:	fb eb       	ldi	r31, 0xBB	; 187
    2834:	df 06       	cpc	r13, r31
    2836:	08 f0       	brcs	.+2      	; 0x283a <isIRStable+0x52>
    2838:	47 c0       	rjmp	.+142    	; 0x28c8 <isIRStable+0xe0>

    if( samples->ir < (IRlast + IRlast/2) && samples->ir > (IRlast - IRlast/2))
    283a:	e1 2c       	mov	r14, r1
    283c:	f1 2c       	mov	r15, r1
    283e:	20 91 71 2e 	lds	r18, 0x2E71
    2842:	30 91 72 2e 	lds	r19, 0x2E72
    2846:	40 91 73 2e 	lds	r20, 0x2E73
    284a:	50 91 74 2e 	lds	r21, 0x2E74
    284e:	da 01       	movw	r26, r20
    2850:	c9 01       	movw	r24, r18
    2852:	b6 95       	lsr	r27
    2854:	a7 95       	ror	r26
    2856:	97 95       	ror	r25
    2858:	87 95       	ror	r24
    285a:	4c 01       	movw	r8, r24
    285c:	5d 01       	movw	r10, r26
    285e:	82 0e       	add	r8, r18
    2860:	93 1e       	adc	r9, r19
    2862:	a4 1e       	adc	r10, r20
    2864:	b5 1e       	adc	r11, r21
    2866:	c8 14       	cp	r12, r8
    2868:	d9 04       	cpc	r13, r9
    286a:	ea 04       	cpc	r14, r10
    286c:	fb 04       	cpc	r15, r11
    286e:	20 f5       	brcc	.+72     	; 0x28b8 <isIRStable+0xd0>
    2870:	49 01       	movw	r8, r18
    2872:	5a 01       	movw	r10, r20
    2874:	88 1a       	sub	r8, r24
    2876:	99 0a       	sbc	r9, r25
    2878:	aa 0a       	sbc	r10, r26
    287a:	bb 0a       	sbc	r11, r27
    287c:	8c 14       	cp	r8, r12
    287e:	9d 04       	cpc	r9, r13
    2880:	ae 04       	cpc	r10, r14
    2882:	bf 04       	cpc	r11, r15
    2884:	c8 f4       	brcc	.+50     	; 0x28b8 <isIRStable+0xd0>
    {
        // If IR is within 3 dB, declare it stable
        // and perform some averaging
        IRlast = (samples->ir + (IRlast*3)) / 4;
    2886:	a3 e0       	ldi	r26, 0x03	; 3
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	0e 94 83 62 	call	0xc506	; 0xc506 <__muluhisi3>
    288e:	6c 0d       	add	r22, r12
    2890:	7d 1d       	adc	r23, r13
    2892:	8e 1d       	adc	r24, r14
    2894:	9f 1d       	adc	r25, r15
    2896:	22 e0       	ldi	r18, 0x02	; 2
    2898:	96 95       	lsr	r25
    289a:	87 95       	ror	r24
    289c:	77 95       	ror	r23
    289e:	67 95       	ror	r22
    28a0:	2a 95       	dec	r18
    28a2:	d1 f7       	brne	.-12     	; 0x2898 <isIRStable+0xb0>
    28a4:	60 93 71 2e 	sts	0x2E71, r22
    28a8:	70 93 72 2e 	sts	0x2E72, r23
    28ac:	80 93 73 2e 	sts	0x2E73, r24
    28b0:	90 93 74 2e 	sts	0x2E74, r25
        return 1;
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	09 c0       	rjmp	.+18     	; 0x28ca <isIRStable+0xe2>
    }
    else
    {
        // Otherwise, return false and update
        // new IRlast value for next time
        IRlast = samples->ir;
    28b8:	c0 92 71 2e 	sts	0x2E71, r12
    28bc:	d0 92 72 2e 	sts	0x2E72, r13
    28c0:	e0 92 73 2e 	sts	0x2E73, r14
    28c4:	f0 92 74 2e 	sts	0x2E74, r15
    // Initialize IRlast to the ALS IR reading if it does not contain 
    // information from a previous measurement cycle
    if( IRlast == 0) IRlast = samples->ir; 

    // If ALS IR is saturated, return false immediately
    else if( samples->ir > 48000 ) return 0; 
    28c8:	80 e0       	ldi	r24, 0x00	; 0
        // new IRlast value for next time
        IRlast = samples->ir;
        return 0;
    }
    return 0;
}
    28ca:	ff 90       	pop	r15
    28cc:	ef 90       	pop	r14
    28ce:	df 90       	pop	r13
    28d0:	cf 90       	pop	r12
    28d2:	bf 90       	pop	r11
    28d4:	af 90       	pop	r10
    28d6:	9f 90       	pop	r9
    28d8:	8f 90       	pop	r8
    28da:	08 95       	ret

000028dc <IRCompensation>:
//             use { 11, 33, 33 }
//          Sm PD, PSRANGE = 1 
//             use { 23, 64, 56 }
////////////////////////////////////////////////////////////////////////////////
void IRCompensation(u8 proxChannel, SI114X_IRQ_SAMPLE *samples, u8 ircorrection[])
{
    28dc:	0f 93       	push	r16
    28de:	1f 93       	push	r17
    28e0:	cf 93       	push	r28
    28e2:	df 93       	push	r29
    28e4:	eb 01       	movw	r28, r22
    28e6:	fa 01       	movw	r30, r20
    // Calculate correction factor based on the ALS IR + PS reading 
    // subtracting out the 256 count offset contained in both measurements
    // Full equation comes out to:
    // Correction = ( (ALS_IR - 256) + (PS - 256) ) * IRcorrectionfactor
    //  where IRcorrectionfactor = IRCORRECTION / 10000    
    switch(proxChannel)
    28e8:	81 30       	cpi	r24, 0x01	; 1
    28ea:	f1 f1       	breq	.+124    	; 0x2968 <IRCompensation+0x8c>
    28ec:	00 f1       	brcs	.+64     	; 0x292e <IRCompensation+0x52>
    28ee:	82 30       	cpi	r24, 0x02	; 2
    28f0:	09 f0       	breq	.+2      	; 0x28f4 <IRCompensation+0x18>
    28f2:	56 c0       	rjmp	.+172    	; 0x29a0 <IRCompensation+0xc4>
            Correction = ((u32)samples->ir + (u32)(samples->ps2) - 512) * (u32) ircorrection[proxChannel];
            Correction = Correction/10000;
            samples->ps2 = samples->ps2 + Correction;            
            break;
		case 2:
			Correction = ((u32)samples->ir + (u32)(samples->ps3) - 512) * (u32) ircorrection[proxChannel];
    28f4:	0e 85       	ldd	r16, Y+14	; 0x0e
    28f6:	1f 85       	ldd	r17, Y+15	; 0x0f
    28f8:	a2 81       	ldd	r26, Z+2	; 0x02
    28fa:	88 85       	ldd	r24, Y+8	; 0x08
    28fc:	99 85       	ldd	r25, Y+9	; 0x09
    28fe:	98 01       	movw	r18, r16
    2900:	40 e0       	ldi	r20, 0x00	; 0
    2902:	50 e0       	ldi	r21, 0x00	; 0
    2904:	28 0f       	add	r18, r24
    2906:	39 1f       	adc	r19, r25
    2908:	41 1d       	adc	r20, r1
    290a:	51 1d       	adc	r21, r1
    290c:	32 50       	subi	r19, 0x02	; 2
    290e:	41 09       	sbc	r20, r1
    2910:	51 09       	sbc	r21, r1
    2912:	b0 e0       	ldi	r27, 0x00	; 0
    2914:	0e 94 83 62 	call	0xc506	; 0xc506 <__muluhisi3>
			Correction = Correction/10000;
    2918:	20 e1       	ldi	r18, 0x10	; 16
    291a:	37 e2       	ldi	r19, 0x27	; 39
    291c:	40 e0       	ldi	r20, 0x00	; 0
    291e:	50 e0       	ldi	r21, 0x00	; 0
    2920:	0e 94 4c 62 	call	0xc498	; 0xc498 <__udivmodsi4>
			samples->ps3 = samples->ps3 + Correction;
    2924:	20 0f       	add	r18, r16
    2926:	31 1f       	adc	r19, r17
    2928:	2e 87       	std	Y+14, r18	; 0x0e
    292a:	3f 87       	std	Y+15, r19	; 0x0f
			break;
    292c:	39 c0       	rjmp	.+114    	; 0x29a0 <IRCompensation+0xc4>
    // Correction = ( (ALS_IR - 256) + (PS - 256) ) * IRcorrectionfactor
    //  where IRcorrectionfactor = IRCORRECTION / 10000    
    switch(proxChannel)
    {
        case 0:
            Correction = ((u32)samples->ir + (u32)(samples->ps1) - 512) * (u32) ircorrection[proxChannel];
    292e:	0a 85       	ldd	r16, Y+10	; 0x0a
    2930:	1b 85       	ldd	r17, Y+11	; 0x0b
    2932:	a0 81       	ld	r26, Z
    2934:	88 85       	ldd	r24, Y+8	; 0x08
    2936:	99 85       	ldd	r25, Y+9	; 0x09
    2938:	98 01       	movw	r18, r16
    293a:	40 e0       	ldi	r20, 0x00	; 0
    293c:	50 e0       	ldi	r21, 0x00	; 0
    293e:	28 0f       	add	r18, r24
    2940:	39 1f       	adc	r19, r25
    2942:	41 1d       	adc	r20, r1
    2944:	51 1d       	adc	r21, r1
    2946:	32 50       	subi	r19, 0x02	; 2
    2948:	41 09       	sbc	r20, r1
    294a:	51 09       	sbc	r21, r1
    294c:	b0 e0       	ldi	r27, 0x00	; 0
    294e:	0e 94 83 62 	call	0xc506	; 0xc506 <__muluhisi3>
            Correction = Correction/10000;
    2952:	20 e1       	ldi	r18, 0x10	; 16
    2954:	37 e2       	ldi	r19, 0x27	; 39
    2956:	40 e0       	ldi	r20, 0x00	; 0
    2958:	50 e0       	ldi	r21, 0x00	; 0
    295a:	0e 94 4c 62 	call	0xc498	; 0xc498 <__udivmodsi4>
            samples->ps1 = samples->ps1 + Correction;    
    295e:	20 0f       	add	r18, r16
    2960:	31 1f       	adc	r19, r17
    2962:	2a 87       	std	Y+10, r18	; 0x0a
    2964:	3b 87       	std	Y+11, r19	; 0x0b
    2966:	1c c0       	rjmp	.+56     	; 0x29a0 <IRCompensation+0xc4>
            break;
        case 1:
            Correction = ((u32)samples->ir + (u32)(samples->ps2) - 512) * (u32) ircorrection[proxChannel];
    2968:	0c 85       	ldd	r16, Y+12	; 0x0c
    296a:	1d 85       	ldd	r17, Y+13	; 0x0d
    296c:	a1 81       	ldd	r26, Z+1	; 0x01
    296e:	88 85       	ldd	r24, Y+8	; 0x08
    2970:	99 85       	ldd	r25, Y+9	; 0x09
    2972:	98 01       	movw	r18, r16
    2974:	40 e0       	ldi	r20, 0x00	; 0
    2976:	50 e0       	ldi	r21, 0x00	; 0
    2978:	28 0f       	add	r18, r24
    297a:	39 1f       	adc	r19, r25
    297c:	41 1d       	adc	r20, r1
    297e:	51 1d       	adc	r21, r1
    2980:	32 50       	subi	r19, 0x02	; 2
    2982:	41 09       	sbc	r20, r1
    2984:	51 09       	sbc	r21, r1
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	0e 94 83 62 	call	0xc506	; 0xc506 <__muluhisi3>
            Correction = Correction/10000;
    298c:	20 e1       	ldi	r18, 0x10	; 16
    298e:	37 e2       	ldi	r19, 0x27	; 39
    2990:	40 e0       	ldi	r20, 0x00	; 0
    2992:	50 e0       	ldi	r21, 0x00	; 0
    2994:	0e 94 4c 62 	call	0xc498	; 0xc498 <__udivmodsi4>
            samples->ps2 = samples->ps2 + Correction;            
    2998:	20 0f       	add	r18, r16
    299a:	31 1f       	adc	r19, r17
    299c:	2c 87       	std	Y+12, r18	; 0x0c
    299e:	3d 87       	std	Y+13, r19	; 0x0d
			samples->ps3 = samples->ps3 + Correction;
			break;
        default:
            break;
    }
}
    29a0:	df 91       	pop	r29
    29a2:	cf 91       	pop	r28
    29a4:	1f 91       	pop	r17
    29a6:	0f 91       	pop	r16
    29a8:	08 95       	ret

000029aa <calcBaseline>:
//          50  = Lg PD, PSRANGE=0, 180 mA 
//          10  = Lg PD, PSRANGE=1, 360 mA 
//          4  = Sm PD, PSRANGE=1, 360 mA 
////////////////////////////////////////////////////////////////////////////////
void calcBaseline(u8 proxChannel, SI114X_IRQ_SAMPLE *samples, u16 noise_margin)
{
    29aa:	cf 92       	push	r12
    29ac:	df 92       	push	r13
    29ae:	ef 92       	push	r14
    29b0:	ff 92       	push	r15
    29b2:	0f 93       	push	r16
    29b4:	1f 93       	push	r17
    29b6:	cf 93       	push	r28
    29b8:	df 93       	push	r29

    static u16 xdata dynamic_baseline[3] = {0,0,0};

    u16 xdata *pPS;

    switch(proxChannel)
    29ba:	81 30       	cpi	r24, 0x01	; 1
    29bc:	49 f0       	breq	.+18     	; 0x29d0 <calcBaseline+0x26>
    29be:	28 f0       	brcs	.+10     	; 0x29ca <calcBaseline+0x20>
    29c0:	82 30       	cpi	r24, 0x02	; 2
    29c2:	49 f4       	brne	.+18     	; 0x29d6 <calcBaseline+0x2c>
            break;
        case 1:
            pPS = &samples->ps2;
            break;
        case 2:
            pPS = &samples->ps3;
    29c4:	62 5f       	subi	r22, 0xF2	; 242
    29c6:	7f 4f       	sbci	r23, 0xFF	; 255
            break;
    29c8:	25 c0       	rjmp	.+74     	; 0x2a14 <calcBaseline+0x6a>
    u16 xdata *pPS;

    switch(proxChannel)
    {
        case 0:
            pPS = &samples->ps1;
    29ca:	66 5f       	subi	r22, 0xF6	; 246
    29cc:	7f 4f       	sbci	r23, 0xFF	; 255
            break;
    29ce:	22 c0       	rjmp	.+68     	; 0x2a14 <calcBaseline+0x6a>
        case 1:
            pPS = &samples->ps2;
    29d0:	64 5f       	subi	r22, 0xF4	; 244
    29d2:	7f 4f       	sbci	r23, 0xFF	; 255
            break;
    29d4:	1f c0       	rjmp	.+62     	; 0x2a14 <calcBaseline+0x6a>
            break;
        default:
            // Invalid Prox Channel. Reset all static variables 
            // to initial values
            average    = 0;
            dynamic_baseline[0] = 0;
    29d6:	10 92 6b 2e 	sts	0x2E6B, r1
    29da:	10 92 6c 2e 	sts	0x2E6C, r1
            dynamic_baseline[1] = 0;
    29de:	10 92 6d 2e 	sts	0x2E6D, r1
    29e2:	10 92 6e 2e 	sts	0x2E6E, r1
			dynamic_baseline[2] = 0;
    29e6:	10 92 6f 2e 	sts	0x2E6F, r1
    29ea:	10 92 70 2e 	sts	0x2E70, r1
            rollingMax[0] = 0;
    29ee:	10 92 65 2e 	sts	0x2E65, r1
    29f2:	10 92 66 2e 	sts	0x2E66, r1
            rollingMax[1] = 0;
    29f6:	10 92 67 2e 	sts	0x2E67, r1
    29fa:	10 92 68 2e 	sts	0x2E68, r1
			rollingMax[2] = 0;
    29fe:	10 92 69 2e 	sts	0x2E69, r1
    2a02:	10 92 6a 2e 	sts	0x2E6A, r1
            Maxcount[0]   = 0;
    2a06:	10 92 62 2e 	sts	0x2E62, r1
            Maxcount[1]   = 0;
    2a0a:	10 92 63 2e 	sts	0x2E63, r1
			Maxcount[2]   = 0;
    2a0e:	10 92 64 2e 	sts	0x2E64, r1
            return;
    2a12:	8a c0       	rjmp	.+276    	; 0x2b28 <calcBaseline+0x17e>
            break;
    }

    // If the stored baseline in dynaBaseline is still set to its initialized 
    // value of maxLeakage, then set dynaBaseline equal to the newest sample
    if ( dynamic_baseline[proxChannel] == 0 && *pPS < maxLeakage[proxChannel] )
    2a14:	c8 2e       	mov	r12, r24
    2a16:	d1 2c       	mov	r13, r1
    2a18:	f6 01       	movw	r30, r12
    2a1a:	ee 0f       	add	r30, r30
    2a1c:	ff 1f       	adc	r31, r31
    2a1e:	ef 01       	movw	r28, r30
    2a20:	c5 59       	subi	r28, 0x95	; 149
    2a22:	d1 4d       	sbci	r29, 0xD1	; 209
    2a24:	88 81       	ld	r24, Y
    2a26:	99 81       	ldd	r25, Y+1	; 0x01
    2a28:	db 01       	movw	r26, r22
    2a2a:	6d 91       	ld	r22, X+
    2a2c:	7c 91       	ld	r23, X
    2a2e:	89 2b       	or	r24, r25
    2a30:	71 f4       	brne	.+28     	; 0x2a4e <calcBaseline+0xa4>
    2a32:	cf 01       	movw	r24, r30
    2a34:	8b 58       	subi	r24, 0x8B	; 139
    2a36:	91 4d       	sbci	r25, 0xD1	; 209
    2a38:	dc 01       	movw	r26, r24
    2a3a:	8d 91       	ld	r24, X+
    2a3c:	9c 91       	ld	r25, X
    2a3e:	68 17       	cp	r22, r24
    2a40:	79 07       	cpc	r23, r25
    2a42:	18 f4       	brcc	.+6      	; 0x2a4a <calcBaseline+0xa0>
    {
       dynamic_baseline[proxChannel] = *pPS;
    2a44:	68 83       	st	Y, r22
    2a46:	79 83       	std	Y+1, r23	; 0x01
    2a48:	02 c0       	rjmp	.+4      	; 0x2a4e <calcBaseline+0xa4>
    } else if ( dynamic_baseline[proxChannel] == 0)
    {
       dynamic_baseline[proxChannel] = maxLeakage[proxChannel];
    2a4a:	88 83       	st	Y, r24
    2a4c:	99 83       	std	Y+1, r25	; 0x01
    } 

    // Only process samples which are below the maxLeakage values, anything 
    // higher is a signal created by an object in front of the system which 
    // should not be baselined
    if ( *pPS < maxLeakage[proxChannel] )
    2a4e:	ef 01       	movw	r28, r30
    2a50:	cb 58       	subi	r28, 0x8B	; 139
    2a52:	d1 4d       	sbci	r29, 0xD1	; 209
    2a54:	88 81       	ld	r24, Y
    2a56:	99 81       	ldd	r25, Y+1	; 0x01
    2a58:	68 17       	cp	r22, r24
    2a5a:	79 07       	cpc	r23, r25
    2a5c:	08 f0       	brcs	.+2      	; 0x2a60 <calcBaseline+0xb6>
    2a5e:	4d c0       	rjmp	.+154    	; 0x2afa <calcBaseline+0x150>
    {
        average = dynamic_baseline[proxChannel]*7;
    2a60:	ef 01       	movw	r28, r30
    2a62:	c5 59       	subi	r28, 0x95	; 149
    2a64:	d1 4d       	sbci	r29, 0xD1	; 209
    2a66:	09 90       	ld	r0, Y+
    2a68:	d8 81       	ld	r29, Y
    2a6a:	c0 2d       	mov	r28, r0
    2a6c:	27 e0       	ldi	r18, 0x07	; 7
    2a6e:	2c 9f       	mul	r18, r28
    2a70:	c0 01       	movw	r24, r0
    2a72:	2d 9f       	mul	r18, r29
    2a74:	90 0d       	add	r25, r0
    2a76:	11 24       	eor	r1, r1
        average = average + (u32)(*pPS);
    2a78:	8b 01       	movw	r16, r22
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	08 0f       	add	r16, r24
    2a80:	19 1f       	adc	r17, r25
    2a82:	21 1d       	adc	r18, r1
    2a84:	31 1d       	adc	r19, r1
        average = average/8;
    2a86:	a3 e0       	ldi	r26, 0x03	; 3
    2a88:	36 95       	lsr	r19
    2a8a:	27 95       	ror	r18
    2a8c:	17 95       	ror	r17
    2a8e:	07 95       	ror	r16
    2a90:	aa 95       	dec	r26
    2a92:	d1 f7       	brne	.-12     	; 0x2a88 <calcBaseline+0xde>
        // If the new sample has not changed the baseline average by a large 
        // amount, then allow the rollingMax variable to update. If the new 
        // sample did move the baseline average by a lot, then it's possible 
        // it was created by a proximity event. So, do not consider this part 
        // of the rollingMax
        if ( dynamic_baseline[proxChannel] <= (u16)average + (u16)average/64
    2a94:	c8 01       	movw	r24, r16
    2a96:	b6 e0       	ldi	r27, 0x06	; 6
    2a98:	96 95       	lsr	r25
    2a9a:	87 95       	ror	r24
    2a9c:	ba 95       	dec	r27
    2a9e:	e1 f7       	brne	.-8      	; 0x2a98 <calcBaseline+0xee>
    2aa0:	7c 01       	movw	r14, r24
    2aa2:	e0 0e       	add	r14, r16
    2aa4:	f1 1e       	adc	r15, r17
    2aa6:	ec 16       	cp	r14, r28
    2aa8:	fd 06       	cpc	r15, r29
    2aaa:	10 f1       	brcs	.+68     	; 0x2af0 <calcBaseline+0x146>
            && dynamic_baseline[proxChannel] >= (u16)average - (u16)average/64)
    2aac:	d8 01       	movw	r26, r16
    2aae:	a8 1b       	sub	r26, r24
    2ab0:	b9 0b       	sbc	r27, r25
    2ab2:	ca 17       	cp	r28, r26
    2ab4:	db 07       	cpc	r29, r27
    2ab6:	e0 f0       	brcs	.+56     	; 0x2af0 <calcBaseline+0x146>
        {
            if ( rollingMax[proxChannel] == 0 )
    2ab8:	ef 01       	movw	r28, r30
    2aba:	cb 59       	subi	r28, 0x9B	; 155
    2abc:	d1 4d       	sbci	r29, 0xD1	; 209
    2abe:	e8 80       	ld	r14, Y
    2ac0:	f9 80       	ldd	r15, Y+1	; 0x01
    2ac2:	d6 01       	movw	r26, r12
    2ac4:	ae 59       	subi	r26, 0x9E	; 158
    2ac6:	b1 4d       	sbci	r27, 0xD1	; 209
    2ac8:	e1 14       	cp	r14, r1
    2aca:	f1 04       	cpc	r15, r1
    2acc:	71 f0       	breq	.+28     	; 0x2aea <calcBaseline+0x140>
            {
                rollingMax[proxChannel] = *pPS;
                Maxcount[proxChannel] = 0;
            } 
            else if ( rollingMax[proxChannel] >= *pPS )
    2ace:	e6 16       	cp	r14, r22
    2ad0:	f7 06       	cpc	r15, r23
    2ad2:	58 f0       	brcs	.+22     	; 0x2aea <calcBaseline+0x140>
            {
                (Maxcount[proxChannel]) += 1;
    2ad4:	8c 91       	ld	r24, X
    2ad6:	8f 5f       	subi	r24, 0xFF	; 255
    2ad8:	8c 93       	st	X, r24
                if ( Maxcount[proxChannel] > 64 )
    2ada:	81 34       	cpi	r24, 0x41	; 65
    2adc:	48 f0       	brcs	.+18     	; 0x2af0 <calcBaseline+0x146>
                {
                    (rollingMax[proxChannel]) -= 1;
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	e8 1a       	sub	r14, r24
    2ae2:	f1 08       	sbc	r15, r1
    2ae4:	e8 82       	st	Y, r14
    2ae6:	f9 82       	std	Y+1, r15	; 0x01
    2ae8:	02 c0       	rjmp	.+4      	; 0x2aee <calcBaseline+0x144>
                    Maxcount[proxChannel] = 0;
                }
            } 
            else
            {
                rollingMax[proxChannel] = *pPS;
    2aea:	68 83       	st	Y, r22
    2aec:	79 83       	std	Y+1, r23	; 0x01
                Maxcount[proxChannel] = 0;
    2aee:	1c 92       	st	X, r1
            }
        }

        // Update the stored baseline average with the new value
        dynamic_baseline[proxChannel] = (u16)average;
    2af0:	df 01       	movw	r26, r30
    2af2:	a5 59       	subi	r26, 0x95	; 149
    2af4:	b1 4d       	sbci	r27, 0xD1	; 209
    2af6:	0d 93       	st	X+, r16
    2af8:	1c 93       	st	X, r17
    }

    // Use the rollingMax value to determine the baseline level
    if ( rollingMax[proxChannel] != 0 )
    2afa:	df 01       	movw	r26, r30
    2afc:	ab 59       	subi	r26, 0x9B	; 155
    2afe:	b1 4d       	sbci	r27, 0xD1	; 209
    2b00:	8d 91       	ld	r24, X+
    2b02:	9c 91       	ld	r25, X
    2b04:	df 01       	movw	r26, r30
    2b06:	ac 5e       	subi	r26, 0xEC	; 236
    2b08:	b3 4c       	sbci	r27, 0xC3	; 195
    2b0a:	00 97       	sbiw	r24, 0x00	; 0
    2b0c:	29 f0       	breq	.+10     	; 0x2b18 <calcBaseline+0x16e>
    {
        baseline[proxChannel] = rollingMax[proxChannel] + noise_margin;
    2b0e:	48 0f       	add	r20, r24
    2b10:	59 1f       	adc	r21, r25
    2b12:	4d 93       	st	X+, r20
    2b14:	5c 93       	st	X, r21
    2b16:	08 c0       	rjmp	.+16     	; 0x2b28 <calcBaseline+0x17e>
    } 
    else
    {  // If the rollingMax has not been determined yet, use the average
        baseline[proxChannel] = (u16) dynamic_baseline[proxChannel] + noise_margin;
    2b18:	e5 59       	subi	r30, 0x95	; 149
    2b1a:	f1 4d       	sbci	r31, 0xD1	; 209
    2b1c:	80 81       	ld	r24, Z
    2b1e:	91 81       	ldd	r25, Z+1	; 0x01
    2b20:	84 0f       	add	r24, r20
    2b22:	95 1f       	adc	r25, r21
    2b24:	8d 93       	st	X+, r24
    2b26:	9c 93       	st	X, r25
    }
}
    2b28:	df 91       	pop	r29
    2b2a:	cf 91       	pop	r28
    2b2c:	1f 91       	pop	r17
    2b2e:	0f 91       	pop	r16
    2b30:	ff 90       	pop	r15
    2b32:	ef 90       	pop	r14
    2b34:	df 90       	pop	r13
    2b36:	cf 90       	pop	r12
    2b38:	08 95       	ret

00002b3a <si114x_process_samples>:
u16 code scale           =  3;
u8  code ircorrection[3] =  { 17, 35, 29 };
#endif

void si114x_process_samples(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples)
{
    2b3a:	ef 92       	push	r14
    2b3c:	ff 92       	push	r15
    2b3e:	0f 93       	push	r16
    2b40:	1f 93       	push	r17
    2b42:	cf 93       	push	r28
    2b44:	df 93       	push	r29
    2b46:	7c 01       	movw	r14, r24
    2b48:	eb 01       	movw	r28, r22
    if ((maxLeakage[0]==0)&&(maxLeakage[1]==0)&&(maxLeakage[2]==0)&&(initial_baseline_counter==128))
    2b4a:	80 91 75 2e 	lds	r24, 0x2E75
    2b4e:	90 91 76 2e 	lds	r25, 0x2E76
    2b52:	89 2b       	or	r24, r25
    2b54:	a1 f4       	brne	.+40     	; 0x2b7e <si114x_process_samples+0x44>
    2b56:	80 91 77 2e 	lds	r24, 0x2E77
    2b5a:	90 91 78 2e 	lds	r25, 0x2E78
    2b5e:	89 2b       	or	r24, r25
    2b60:	71 f4       	brne	.+28     	; 0x2b7e <si114x_process_samples+0x44>
    2b62:	80 91 79 2e 	lds	r24, 0x2E79
    2b66:	90 91 7a 2e 	lds	r25, 0x2E7A
    2b6a:	89 2b       	or	r24, r25
    2b6c:	41 f4       	brne	.+16     	; 0x2b7e <si114x_process_samples+0x44>
    2b6e:	80 91 0f 20 	lds	r24, 0x200F
    2b72:	80 38       	cpi	r24, 0x80	; 128
    2b74:	21 f4       	brne	.+8      	; 0x2b7e <si114x_process_samples+0x44>
    {
#ifdef DEBUG_ON
        puts("DEBUG: Computing Baseline. Make sure nothing is in the vicinity of the EVB");
    2b76:	86 e7       	ldi	r24, 0x76	; 118
    2b78:	91 e2       	ldi	r25, 0x21	; 33
    2b7a:	0e 94 ab 65 	call	0xcb56	; 0xcb56 <puts>
#endif
    }

    if (initial_baseline_counter != 0)
    2b7e:	80 91 0f 20 	lds	r24, 0x200F
    2b82:	88 23       	and	r24, r24
    2b84:	09 f4       	brne	.+2      	; 0x2b88 <si114x_process_samples+0x4e>
    2b86:	8a c0       	rjmp	.+276    	; 0x2c9c <si114x_process_samples+0x162>
    {
        // The first 128 samples are used to establish the initial 
        // baseline
        if ( initial_baseline_counter > 1 )
    2b88:	82 30       	cpi	r24, 0x02	; 2
    2b8a:	48 f1       	brcs	.+82     	; 0x2bde <si114x_process_samples+0xa4>
        {
            // Look for maximum
            if( maxLeakage[0] < samples->ps1) maxLeakage[0] = samples->ps1;
    2b8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b90:	20 91 75 2e 	lds	r18, 0x2E75
    2b94:	30 91 76 2e 	lds	r19, 0x2E76
    2b98:	28 17       	cp	r18, r24
    2b9a:	39 07       	cpc	r19, r25
    2b9c:	20 f4       	brcc	.+8      	; 0x2ba6 <si114x_process_samples+0x6c>
    2b9e:	80 93 75 2e 	sts	0x2E75, r24
    2ba2:	90 93 76 2e 	sts	0x2E76, r25
            if( maxLeakage[1] < samples->ps2) maxLeakage[1] = samples->ps2;
    2ba6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ba8:	9d 85       	ldd	r25, Y+13	; 0x0d
    2baa:	20 91 77 2e 	lds	r18, 0x2E77
    2bae:	30 91 78 2e 	lds	r19, 0x2E78
    2bb2:	28 17       	cp	r18, r24
    2bb4:	39 07       	cpc	r19, r25
    2bb6:	20 f4       	brcc	.+8      	; 0x2bc0 <si114x_process_samples+0x86>
    2bb8:	80 93 77 2e 	sts	0x2E77, r24
    2bbc:	90 93 78 2e 	sts	0x2E78, r25
			if( maxLeakage[2] < samples->ps3) maxLeakage[2] = samples->ps3;
    2bc0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bc2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bc4:	20 91 79 2e 	lds	r18, 0x2E79
    2bc8:	30 91 7a 2e 	lds	r19, 0x2E7A
    2bcc:	28 17       	cp	r18, r24
    2bce:	39 07       	cpc	r19, r25
    2bd0:	08 f0       	brcs	.+2      	; 0x2bd4 <si114x_process_samples+0x9a>
    2bd2:	5e c0       	rjmp	.+188    	; 0x2c90 <si114x_process_samples+0x156>
    2bd4:	80 93 79 2e 	sts	0x2E79, r24
    2bd8:	90 93 7a 2e 	sts	0x2E7A, r25
    2bdc:	59 c0       	rjmp	.+178    	; 0x2c90 <si114x_process_samples+0x156>
        }
        else
        {
#ifdef DEBUG_ON
            printf("DEBUG: Initial Baseline Calculated, PS1 = %d, PS2 = %d, PS3 = %d \n", maxLeakage[0], maxLeakage[1],maxLeakage[2]);
    2bde:	80 91 7a 2e 	lds	r24, 0x2E7A
    2be2:	8f 93       	push	r24
    2be4:	80 91 79 2e 	lds	r24, 0x2E79
    2be8:	8f 93       	push	r24
    2bea:	80 91 78 2e 	lds	r24, 0x2E78
    2bee:	8f 93       	push	r24
    2bf0:	80 91 77 2e 	lds	r24, 0x2E77
    2bf4:	8f 93       	push	r24
    2bf6:	80 91 76 2e 	lds	r24, 0x2E76
    2bfa:	8f 93       	push	r24
    2bfc:	80 91 75 2e 	lds	r24, 0x2E75
    2c00:	8f 93       	push	r24
    2c02:	81 ec       	ldi	r24, 0xC1	; 193
    2c04:	91 e2       	ldi	r25, 0x21	; 33
    2c06:	9f 93       	push	r25
    2c08:	8f 93       	push	r24
    2c0a:	0e 94 9a 65 	call	0xcb34	; 0xcb34 <printf>
#endif
			
            // Set Max Leakage 
            maxLeakage[0] = maxLeakage[0] + noise_margin*2;
    2c0e:	60 91 0d 20 	lds	r22, 0x200D
    2c12:	70 91 0e 20 	lds	r23, 0x200E
    2c16:	66 0f       	add	r22, r22
    2c18:	77 1f       	adc	r23, r23
    2c1a:	40 91 75 2e 	lds	r20, 0x2E75
    2c1e:	50 91 76 2e 	lds	r21, 0x2E76
    2c22:	46 0f       	add	r20, r22
    2c24:	57 1f       	adc	r21, r23
    2c26:	40 93 75 2e 	sts	0x2E75, r20
    2c2a:	50 93 76 2e 	sts	0x2E76, r21
            maxLeakage[1] = maxLeakage[1] + noise_margin*2;
    2c2e:	20 91 77 2e 	lds	r18, 0x2E77
    2c32:	30 91 78 2e 	lds	r19, 0x2E78
    2c36:	26 0f       	add	r18, r22
    2c38:	37 1f       	adc	r19, r23
    2c3a:	20 93 77 2e 	sts	0x2E77, r18
    2c3e:	30 93 78 2e 	sts	0x2E78, r19
			maxLeakage[2] = maxLeakage[2] + noise_margin*2;
    2c42:	80 91 79 2e 	lds	r24, 0x2E79
    2c46:	90 91 7a 2e 	lds	r25, 0x2E7A
    2c4a:	86 0f       	add	r24, r22
    2c4c:	97 1f       	adc	r25, r23
    2c4e:	80 93 79 2e 	sts	0x2E79, r24
    2c52:	90 93 7a 2e 	sts	0x2E7A, r25

            baseline[0] = maxLeakage[0];
    2c56:	40 93 14 3c 	sts	0x3C14, r20
    2c5a:	50 93 15 3c 	sts	0x3C15, r21
            baseline[1] = maxLeakage[1];
    2c5e:	20 93 16 3c 	sts	0x3C16, r18
    2c62:	30 93 17 3c 	sts	0x3C17, r19
			baseline[2] = maxLeakage[2];
    2c66:	80 93 18 3c 	sts	0x3C18, r24
    2c6a:	90 93 19 3c 	sts	0x3C19, r25
			
			env.baseline[0] = baseline[0];
    2c6e:	40 93 82 3a 	sts	0x3A82, r20
    2c72:	50 93 83 3a 	sts	0x3A83, r21
			env.baseline[1] = baseline[1];
    2c76:	20 93 84 3a 	sts	0x3A84, r18
    2c7a:	30 93 85 3a 	sts	0x3A85, r19
			env.baseline[2] = baseline[2];
    2c7e:	80 93 86 3a 	sts	0x3A86, r24
    2c82:	90 93 87 3a 	sts	0x3A87, r25
    2c86:	8d b7       	in	r24, 0x3d	; 61
    2c88:	9e b7       	in	r25, 0x3e	; 62
    2c8a:	08 96       	adiw	r24, 0x08	; 8
    2c8c:	8d bf       	out	0x3d, r24	; 61
    2c8e:	9e bf       	out	0x3e, r25	; 62
        }
        
        // Decrement counter
        initial_baseline_counter--;
    2c90:	80 91 0f 20 	lds	r24, 0x200F
    2c94:	81 50       	subi	r24, 0x01	; 1
    2c96:	80 93 0f 20 	sts	0x200F, r24
    2c9a:	67 c0       	rjmp	.+206    	; 0x2d6a <si114x_process_samples+0x230>
    else
    {
        //
        // Once the baseline has been set, do the actual loop
        // The first thing that happens is to check for saturation events
        if(samples->ps1 > 48000 || samples->ps2 > 48000 || samples->ps3 > 48000)
    2c9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ca0:	81 38       	cpi	r24, 0x81	; 129
    2ca2:	9b 4b       	sbci	r25, 0xBB	; 187
    2ca4:	50 f4       	brcc	.+20     	; 0x2cba <si114x_process_samples+0x180>
    2ca6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ca8:	9d 85       	ldd	r25, Y+13	; 0x0d
    2caa:	81 38       	cpi	r24, 0x81	; 129
    2cac:	9b 4b       	sbci	r25, 0xBB	; 187
    2cae:	28 f4       	brcc	.+10     	; 0x2cba <si114x_process_samples+0x180>
    2cb0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cb2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cb4:	81 38       	cpi	r24, 0x81	; 129
    2cb6:	9b 4b       	sbci	r25, 0xBB	; 187
    2cb8:	50 f0       	brcs	.+20     	; 0x2cce <si114x_process_samples+0x194>
            //
            // For readability of this code, no changes to 
            // the settings are done.
            //
#ifdef DEBUG_ON
            puts("DEBUG: Samples are Saturated");
    2cba:	84 e0       	ldi	r24, 0x04	; 4
    2cbc:	92 e2       	ldi	r25, 0x22	; 34

                SliderAlgorithm(si114x_handle, samples, scale);
            }
        }
    }
}
    2cbe:	df 91       	pop	r29
    2cc0:	cf 91       	pop	r28
    2cc2:	1f 91       	pop	r17
    2cc4:	0f 91       	pop	r16
    2cc6:	ff 90       	pop	r15
    2cc8:	ef 90       	pop	r14
            //
            // For readability of this code, no changes to 
            // the settings are done.
            //
#ifdef DEBUG_ON
            puts("DEBUG: Samples are Saturated");
    2cca:	0c 94 ab 65 	jmp	0xcb56	; 0xcb56 <puts>
#endif
		}
        else
        { 
            if( isIRStable( samples ) )
    2cce:	ce 01       	movw	r24, r28
    2cd0:	8b dd       	rcall	.-1258   	; 0x27e8 <isIRStable>
    2cd2:	88 23       	and	r24, r24
    2cd4:	09 f4       	brne	.+2      	; 0x2cd8 <si114x_process_samples+0x19e>
    2cd6:	49 c0       	rjmp	.+146    	; 0x2d6a <si114x_process_samples+0x230>
    // Correction = ( (ALS_IR - 256) + (PS - 256) ) * IRcorrectionfactor
    //  where IRcorrectionfactor = IRCORRECTION / 10000    
    switch(proxChannel)
    {
        case 0:
            Correction = ((u32)samples->ir + (u32)(samples->ps1) - 512) * (u32) ircorrection[proxChannel];
    2cd8:	0a 85       	ldd	r16, Y+10	; 0x0a
    2cda:	1b 85       	ldd	r17, Y+11	; 0x0b
    2cdc:	88 85       	ldd	r24, Y+8	; 0x08
    2cde:	99 85       	ldd	r25, Y+9	; 0x09
    2ce0:	98 01       	movw	r18, r16
    2ce2:	40 e0       	ldi	r20, 0x00	; 0
    2ce4:	50 e0       	ldi	r21, 0x00	; 0
    2ce6:	28 0f       	add	r18, r24
    2ce8:	39 1f       	adc	r19, r25
    2cea:	41 1d       	adc	r20, r1
    2cec:	51 1d       	adc	r21, r1
    2cee:	32 50       	subi	r19, 0x02	; 2
    2cf0:	41 09       	sbc	r20, r1
    2cf2:	51 09       	sbc	r21, r1
    2cf4:	a0 91 08 20 	lds	r26, 0x2008
    2cf8:	b0 e0       	ldi	r27, 0x00	; 0
    2cfa:	0e 94 83 62 	call	0xc506	; 0xc506 <__muluhisi3>
            Correction = Correction/10000;
    2cfe:	20 e1       	ldi	r18, 0x10	; 16
    2d00:	37 e2       	ldi	r19, 0x27	; 39
    2d02:	40 e0       	ldi	r20, 0x00	; 0
    2d04:	50 e0       	ldi	r21, 0x00	; 0
    2d06:	0e 94 4c 62 	call	0xc498	; 0xc498 <__udivmodsi4>
            samples->ps1 = samples->ps1 + Correction;    
    2d0a:	20 0f       	add	r18, r16
    2d0c:	31 1f       	adc	r19, r17
    2d0e:	2a 87       	std	Y+10, r18	; 0x0a
    2d10:	3b 87       	std	Y+11, r19	; 0x0b
        else
        { 
            if( isIRStable( samples ) )
            {
                IRCompensation( 0, samples, ircorrection );  // IR Ambient Compensation for PS1 Channel
                IRCompensation( 1, samples, ircorrection );  // IR Ambient Compensation for PS2 Channel
    2d12:	48 e0       	ldi	r20, 0x08	; 8
    2d14:	50 e2       	ldi	r21, 0x20	; 32
    2d16:	be 01       	movw	r22, r28
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	e0 dd       	rcall	.-1088   	; 0x28dc <IRCompensation>
				IRCompensation( 2, samples, ircorrection );  // IR Ambient Compensation for PS3 Channel
    2d1c:	48 e0       	ldi	r20, 0x08	; 8
    2d1e:	50 e2       	ldi	r21, 0x20	; 32
    2d20:	be 01       	movw	r22, r28
    2d22:	82 e0       	ldi	r24, 0x02	; 2
    2d24:	db dd       	rcall	.-1098   	; 0x28dc <IRCompensation>

                calcBaseline( 0 , samples, noise_margin); // Calculate PS1 Baseline
    2d26:	40 91 0d 20 	lds	r20, 0x200D
    2d2a:	50 91 0e 20 	lds	r21, 0x200E
    2d2e:	be 01       	movw	r22, r28
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	3b de       	rcall	.-906    	; 0x29aa <calcBaseline>
                calcBaseline( 1 , samples, noise_margin); // Calculate PS2 Baseline
    2d34:	40 91 0d 20 	lds	r20, 0x200D
    2d38:	50 91 0e 20 	lds	r21, 0x200E
    2d3c:	be 01       	movw	r22, r28
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	34 de       	rcall	.-920    	; 0x29aa <calcBaseline>
				calcBaseline( 2 , samples, noise_margin); // Calculate PS3 Baseline
    2d42:	40 91 0d 20 	lds	r20, 0x200D
    2d46:	50 91 0e 20 	lds	r21, 0x200E
    2d4a:	be 01       	movw	r22, r28
    2d4c:	82 e0       	ldi	r24, 0x02	; 2
    2d4e:	2d de       	rcall	.-934    	; 0x29aa <calcBaseline>

                SliderAlgorithm(si114x_handle, samples, scale);
    2d50:	40 91 0b 20 	lds	r20, 0x200B
    2d54:	50 91 0c 20 	lds	r21, 0x200C
    2d58:	be 01       	movw	r22, r28
    2d5a:	c7 01       	movw	r24, r14
            }
        }
    }
}
    2d5c:	df 91       	pop	r29
    2d5e:	cf 91       	pop	r28
    2d60:	1f 91       	pop	r17
    2d62:	0f 91       	pop	r16
    2d64:	ff 90       	pop	r15
    2d66:	ef 90       	pop	r14

                calcBaseline( 0 , samples, noise_margin); // Calculate PS1 Baseline
                calcBaseline( 1 , samples, noise_margin); // Calculate PS2 Baseline
				calcBaseline( 2 , samples, noise_margin); // Calculate PS3 Baseline

                SliderAlgorithm(si114x_handle, samples, scale);
    2d68:	4d c1       	rjmp	.+666    	; 0x3004 <SliderAlgorithm>
            }
        }
    }
}
    2d6a:	df 91       	pop	r29
    2d6c:	cf 91       	pop	r28
    2d6e:	1f 91       	pop	r17
    2d70:	0f 91       	pop	r16
    2d72:	ff 90       	pop	r15
    2d74:	ef 90       	pop	r14
    2d76:	08 95       	ret

00002d78 <PortSet>:

s16 Si114xBlockRead(HANDLE si114x_handle,
u8 address, u8 length, u8 *values)
{
	return twi_read_packet(&TWIC,SI114X_ADDR,1000,address,values,length);
}
    2d78:	08 95       	ret

00002d7a <Si114xWriteToRegister>:
    2d7a:	ef 92       	push	r14
    2d7c:	0f 93       	push	r16
    2d7e:	1f 93       	push	r17
    2d80:	cf 93       	push	r28
    2d82:	df 93       	push	r29
    2d84:	1f 92       	push	r1
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
    2d8a:	26 2f       	mov	r18, r22
    2d8c:	49 83       	std	Y+1, r20	; 0x01
    2d8e:	ee 24       	eor	r14, r14
    2d90:	e3 94       	inc	r14
    2d92:	8e 01       	movw	r16, r28
    2d94:	0f 5f       	subi	r16, 0xFF	; 255
    2d96:	1f 4f       	sbci	r17, 0xFF	; 255
    2d98:	48 ee       	ldi	r20, 0xE8	; 232
    2d9a:	53 e0       	ldi	r21, 0x03	; 3
    2d9c:	6a e5       	ldi	r22, 0x5A	; 90
    2d9e:	80 e8       	ldi	r24, 0x80	; 128
    2da0:	94 e0       	ldi	r25, 0x04	; 4
    2da2:	4a d4       	rcall	.+2196   	; 0x3638 <twi_write_packet>
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	0f 90       	pop	r0
    2daa:	df 91       	pop	r29
    2dac:	cf 91       	pop	r28
    2dae:	1f 91       	pop	r17
    2db0:	0f 91       	pop	r16
    2db2:	ef 90       	pop	r14
    2db4:	08 95       	ret

00002db6 <Si114xReadFromRegister>:
    2db6:	ef 92       	push	r14
    2db8:	0f 93       	push	r16
    2dba:	1f 93       	push	r17
    2dbc:	cf 93       	push	r28
    2dbe:	df 93       	push	r29
    2dc0:	1f 92       	push	r1
    2dc2:	cd b7       	in	r28, 0x3d	; 61
    2dc4:	de b7       	in	r29, 0x3e	; 62
    2dc6:	26 2f       	mov	r18, r22
    2dc8:	ee 24       	eor	r14, r14
    2dca:	e3 94       	inc	r14
    2dcc:	8e 01       	movw	r16, r28
    2dce:	0f 5f       	subi	r16, 0xFF	; 255
    2dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd2:	48 ee       	ldi	r20, 0xE8	; 232
    2dd4:	53 e0       	ldi	r21, 0x03	; 3
    2dd6:	6a e5       	ldi	r22, 0x5A	; 90
    2dd8:	80 e8       	ldi	r24, 0x80	; 128
    2dda:	94 e0       	ldi	r25, 0x04	; 4
    2ddc:	dc d3       	rcall	.+1976   	; 0x3596 <twi_read_packet>
    2dde:	89 81       	ldd	r24, Y+1	; 0x01
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	0f 90       	pop	r0
    2de4:	df 91       	pop	r29
    2de6:	cf 91       	pop	r28
    2de8:	1f 91       	pop	r17
    2dea:	0f 91       	pop	r16
    2dec:	ef 90       	pop	r14
    2dee:	08 95       	ret

00002df0 <Si114xBlockWrite>:
    2df0:	ef 92       	push	r14
    2df2:	0f 93       	push	r16
    2df4:	1f 93       	push	r17
    2df6:	89 01       	movw	r16, r18
    2df8:	e4 2e       	mov	r14, r20
    2dfa:	26 2f       	mov	r18, r22
    2dfc:	48 ee       	ldi	r20, 0xE8	; 232
    2dfe:	53 e0       	ldi	r21, 0x03	; 3
    2e00:	6a e5       	ldi	r22, 0x5A	; 90
    2e02:	80 e8       	ldi	r24, 0x80	; 128
    2e04:	94 e0       	ldi	r25, 0x04	; 4
    2e06:	18 d4       	rcall	.+2096   	; 0x3638 <twi_write_packet>
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	1f 91       	pop	r17
    2e0c:	0f 91       	pop	r16
    2e0e:	ef 90       	pop	r14
    2e10:	08 95       	ret

00002e12 <delay_10ms>:
    2e12:	2f ef       	ldi	r18, 0xFF	; 255
    2e14:	89 ef       	ldi	r24, 0xF9	; 249
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	21 50       	subi	r18, 0x01	; 1
    2e1a:	80 40       	sbci	r24, 0x00	; 0
    2e1c:	90 40       	sbci	r25, 0x00	; 0
    2e1e:	e1 f7       	brne	.-8      	; 0x2e18 <delay_10ms+0x6>
    2e20:	00 c0       	rjmp	.+0      	; 0x2e22 <delay_10ms+0x10>
    2e22:	00 00       	nop
    2e24:	08 95       	ret

00002e26 <QS_Counts_to_Distance>:
		//Out of range
		left_entry = false;
		right_entry = false;
		center_entry = false;
	}
}
    2e26:	ff 92       	push	r15
    2e28:	0f 93       	push	r16
    2e2a:	1f 93       	push	r17
    2e2c:	cf 93       	push	r28
    2e2e:	df 93       	push	r29
    2e30:	cd b7       	in	r28, 0x3d	; 61
    2e32:	de b7       	in	r29, 0x3e	; 62
    2e34:	c2 5a       	subi	r28, 0xA2	; 162
    2e36:	d1 09       	sbc	r29, r1
    2e38:	cd bf       	out	0x3d, r28	; 61
    2e3a:	de bf       	out	0x3e, r29	; 62
    2e3c:	42 e1       	ldi	r20, 0x12	; 18
    2e3e:	e4 e2       	ldi	r30, 0x24	; 36
    2e40:	f0 e2       	ldi	r31, 0x20	; 32
    2e42:	de 01       	movw	r26, r28
    2e44:	af 56       	subi	r26, 0x6F	; 111
    2e46:	bf 4f       	sbci	r27, 0xFF	; 255
    2e48:	01 90       	ld	r0, Z+
    2e4a:	0d 92       	st	X+, r0
    2e4c:	4a 95       	dec	r20
    2e4e:	e1 f7       	brne	.-8      	; 0x2e48 <QS_Counts_to_Distance+0x22>
    2e50:	42 e1       	ldi	r20, 0x12	; 18
    2e52:	e6 e3       	ldi	r30, 0x36	; 54
    2e54:	f0 e2       	ldi	r31, 0x20	; 32
    2e56:	de 01       	movw	r26, r28
    2e58:	a1 58       	subi	r26, 0x81	; 129
    2e5a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e5c:	01 90       	ld	r0, Z+
    2e5e:	0d 92       	st	X+, r0
    2e60:	4a 95       	dec	r20
    2e62:	e1 f7       	brne	.-8      	; 0x2e5c <QS_Counts_to_Distance+0x36>
    2e64:	42 e1       	ldi	r20, 0x12	; 18
    2e66:	e8 e4       	ldi	r30, 0x48	; 72
    2e68:	f0 e2       	ldi	r31, 0x20	; 32
    2e6a:	de 01       	movw	r26, r28
    2e6c:	a3 59       	subi	r26, 0x93	; 147
    2e6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e70:	01 90       	ld	r0, Z+
    2e72:	0d 92       	st	X+, r0
    2e74:	4a 95       	dec	r20
    2e76:	e1 f7       	brne	.-8      	; 0x2e70 <QS_Counts_to_Distance+0x4a>
    2e78:	42 e1       	ldi	r20, 0x12	; 18
    2e7a:	ea e5       	ldi	r30, 0x5A	; 90
    2e7c:	f0 e2       	ldi	r31, 0x20	; 32
    2e7e:	de 01       	movw	r26, r28
    2e80:	a5 5a       	subi	r26, 0xA5	; 165
    2e82:	bf 4f       	sbci	r27, 0xFF	; 255
    2e84:	01 90       	ld	r0, Z+
    2e86:	0d 92       	st	X+, r0
    2e88:	4a 95       	dec	r20
    2e8a:	e1 f7       	brne	.-8      	; 0x2e84 <QS_Counts_to_Distance+0x5e>
    2e8c:	42 e1       	ldi	r20, 0x12	; 18
    2e8e:	ec e6       	ldi	r30, 0x6C	; 108
    2e90:	f0 e2       	ldi	r31, 0x20	; 32
    2e92:	de 01       	movw	r26, r28
    2e94:	a7 5b       	subi	r26, 0xB7	; 183
    2e96:	bf 4f       	sbci	r27, 0xFF	; 255
    2e98:	01 90       	ld	r0, Z+
    2e9a:	0d 92       	st	X+, r0
    2e9c:	4a 95       	dec	r20
    2e9e:	e1 f7       	brne	.-8      	; 0x2e98 <QS_Counts_to_Distance+0x72>
    2ea0:	42 e1       	ldi	r20, 0x12	; 18
    2ea2:	ee e7       	ldi	r30, 0x7E	; 126
    2ea4:	f0 e2       	ldi	r31, 0x20	; 32
    2ea6:	de 01       	movw	r26, r28
    2ea8:	d7 96       	adiw	r26, 0x37	; 55
    2eaa:	01 90       	ld	r0, Z+
    2eac:	0d 92       	st	X+, r0
    2eae:	4a 95       	dec	r20
    2eb0:	e1 f7       	brne	.-8      	; 0x2eaa <QS_Counts_to_Distance+0x84>
    2eb2:	42 e1       	ldi	r20, 0x12	; 18
    2eb4:	ea e5       	ldi	r30, 0x5A	; 90
    2eb6:	f0 e2       	ldi	r31, 0x20	; 32
    2eb8:	de 01       	movw	r26, r28
    2eba:	95 96       	adiw	r26, 0x25	; 37
    2ebc:	01 90       	ld	r0, Z+
    2ebe:	0d 92       	st	X+, r0
    2ec0:	4a 95       	dec	r20
    2ec2:	e1 f7       	brne	.-8      	; 0x2ebc <QS_Counts_to_Distance+0x96>
    2ec4:	42 e1       	ldi	r20, 0x12	; 18
    2ec6:	ec e6       	ldi	r30, 0x6C	; 108
    2ec8:	f0 e2       	ldi	r31, 0x20	; 32
    2eca:	de 01       	movw	r26, r28
    2ecc:	53 96       	adiw	r26, 0x13	; 19
    2ece:	01 90       	ld	r0, Z+
    2ed0:	0d 92       	st	X+, r0
    2ed2:	4a 95       	dec	r20
    2ed4:	e1 f7       	brne	.-8      	; 0x2ece <QS_Counts_to_Distance+0xa8>
    2ed6:	42 e1       	ldi	r20, 0x12	; 18
    2ed8:	ee e7       	ldi	r30, 0x7E	; 126
    2eda:	f0 e2       	ldi	r31, 0x20	; 32
    2edc:	de 01       	movw	r26, r28
    2ede:	11 96       	adiw	r26, 0x01	; 1
    2ee0:	01 90       	ld	r0, Z+
    2ee2:	0d 92       	st	X+, r0
    2ee4:	4a 95       	dec	r20
    2ee6:	e1 f7       	brne	.-8      	; 0x2ee0 <QS_Counts_to_Distance+0xba>
    2ee8:	61 30       	cpi	r22, 0x01	; 1
    2eea:	19 f5       	brne	.+70     	; 0x2f32 <QS_Counts_to_Distance+0x10c>
    2eec:	fe 01       	movw	r30, r28
    2eee:	e3 59       	subi	r30, 0x93	; 147
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	40 e0       	ldi	r20, 0x00	; 0
    2ef4:	50 e0       	ldi	r21, 0x00	; 0
    2ef6:	f4 2e       	mov	r15, r20
    2ef8:	61 91       	ld	r22, Z+
    2efa:	71 91       	ld	r23, Z+
    2efc:	68 17       	cp	r22, r24
    2efe:	79 07       	cpc	r23, r25
    2f00:	90 f4       	brcc	.+36     	; 0x2f26 <QS_Counts_to_Distance+0x100>
    2f02:	44 0f       	add	r20, r20
    2f04:	55 1f       	adc	r21, r21
    2f06:	ef e7       	ldi	r30, 0x7F	; 127
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	ec 0f       	add	r30, r28
    2f0c:	fd 1f       	adc	r31, r29
    2f0e:	e4 0f       	add	r30, r20
    2f10:	f5 1f       	adc	r31, r21
    2f12:	20 81       	ld	r18, Z
    2f14:	31 81       	ldd	r19, Z+1	; 0x01
    2f16:	dc 01       	movw	r26, r24
    2f18:	0e 94 74 62 	call	0xc4e8	; 0xc4e8 <__umulhisi3>
    2f1c:	8b 01       	movw	r16, r22
    2f1e:	9c 01       	movw	r18, r24
    2f20:	e1 e9       	ldi	r30, 0x91	; 145
    2f22:	f0 e0       	ldi	r31, 0x00	; 0
    2f24:	23 c0       	rjmp	.+70     	; 0x2f6c <QS_Counts_to_Distance+0x146>
    2f26:	4f 5f       	subi	r20, 0xFF	; 255
    2f28:	5f 4f       	sbci	r21, 0xFF	; 255
    2f2a:	49 30       	cpi	r20, 0x09	; 9
    2f2c:	51 05       	cpc	r21, r1
    2f2e:	19 f7       	brne	.-58     	; 0x2ef6 <QS_Counts_to_Distance+0xd0>
    2f30:	51 c0       	rjmp	.+162    	; 0x2fd4 <QS_Counts_to_Distance+0x1ae>
    2f32:	62 30       	cpi	r22, 0x02	; 2
    2f34:	41 f5       	brne	.+80     	; 0x2f86 <QS_Counts_to_Distance+0x160>
    2f36:	fe 01       	movw	r30, r28
    2f38:	f7 96       	adiw	r30, 0x37	; 55
    2f3a:	40 e0       	ldi	r20, 0x00	; 0
    2f3c:	50 e0       	ldi	r21, 0x00	; 0
    2f3e:	f4 2e       	mov	r15, r20
    2f40:	61 91       	ld	r22, Z+
    2f42:	71 91       	ld	r23, Z+
    2f44:	68 17       	cp	r22, r24
    2f46:	79 07       	cpc	r23, r25
    2f48:	c0 f4       	brcc	.+48     	; 0x2f7a <QS_Counts_to_Distance+0x154>
    2f4a:	44 0f       	add	r20, r20
    2f4c:	55 1f       	adc	r21, r21
    2f4e:	e9 e4       	ldi	r30, 0x49	; 73
    2f50:	f0 e0       	ldi	r31, 0x00	; 0
    2f52:	ec 0f       	add	r30, r28
    2f54:	fd 1f       	adc	r31, r29
    2f56:	e4 0f       	add	r30, r20
    2f58:	f5 1f       	adc	r31, r21
    2f5a:	20 81       	ld	r18, Z
    2f5c:	31 81       	ldd	r19, Z+1	; 0x01
    2f5e:	dc 01       	movw	r26, r24
    2f60:	0e 94 74 62 	call	0xc4e8	; 0xc4e8 <__umulhisi3>
    2f64:	8b 01       	movw	r16, r22
    2f66:	9c 01       	movw	r18, r24
    2f68:	eb e5       	ldi	r30, 0x5B	; 91
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	ec 0f       	add	r30, r28
    2f6e:	fd 1f       	adc	r31, r29
    2f70:	e4 0f       	add	r30, r20
    2f72:	f5 1f       	adc	r31, r21
    2f74:	80 81       	ld	r24, Z
    2f76:	91 81       	ldd	r25, Z+1	; 0x01
    2f78:	24 c0       	rjmp	.+72     	; 0x2fc2 <QS_Counts_to_Distance+0x19c>
    2f7a:	4f 5f       	subi	r20, 0xFF	; 255
    2f7c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f7e:	49 30       	cpi	r20, 0x09	; 9
    2f80:	51 05       	cpc	r21, r1
    2f82:	e9 f6       	brne	.-70     	; 0x2f3e <QS_Counts_to_Distance+0x118>
    2f84:	27 c0       	rjmp	.+78     	; 0x2fd4 <QS_Counts_to_Distance+0x1ae>
    2f86:	63 30       	cpi	r22, 0x03	; 3
    2f88:	89 f5       	brne	.+98     	; 0x2fec <QS_Counts_to_Distance+0x1c6>
    2f8a:	fe 01       	movw	r30, r28
    2f8c:	31 96       	adiw	r30, 0x01	; 1
    2f8e:	40 e0       	ldi	r20, 0x00	; 0
    2f90:	50 e0       	ldi	r21, 0x00	; 0
    2f92:	f4 2e       	mov	r15, r20
    2f94:	61 91       	ld	r22, Z+
    2f96:	71 91       	ld	r23, Z+
    2f98:	68 17       	cp	r22, r24
    2f9a:	79 07       	cpc	r23, r25
    2f9c:	b0 f4       	brcc	.+44     	; 0x2fca <QS_Counts_to_Distance+0x1a4>
    2f9e:	fa 01       	movw	r30, r20
    2fa0:	ee 0f       	add	r30, r30
    2fa2:	ff 1f       	adc	r31, r31
    2fa4:	21 e0       	ldi	r18, 0x01	; 1
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	2c 0f       	add	r18, r28
    2faa:	3d 1f       	adc	r19, r29
    2fac:	e2 0f       	add	r30, r18
    2fae:	f3 1f       	adc	r31, r19
    2fb0:	22 89       	ldd	r18, Z+18	; 0x12
    2fb2:	33 89       	ldd	r19, Z+19	; 0x13
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	0e 94 74 62 	call	0xc4e8	; 0xc4e8 <__umulhisi3>
    2fba:	8b 01       	movw	r16, r22
    2fbc:	9c 01       	movw	r18, r24
    2fbe:	84 a1       	ldd	r24, Z+36	; 0x24
    2fc0:	95 a1       	ldd	r25, Z+37	; 0x25
    2fc2:	8c 01       	movw	r16, r24
    2fc4:	02 1b       	sub	r16, r18
    2fc6:	13 0b       	sbc	r17, r19
    2fc8:	07 c0       	rjmp	.+14     	; 0x2fd8 <QS_Counts_to_Distance+0x1b2>
    2fca:	4f 5f       	subi	r20, 0xFF	; 255
    2fcc:	5f 4f       	sbci	r21, 0xFF	; 255
    2fce:	49 30       	cpi	r20, 0x09	; 9
    2fd0:	51 05       	cpc	r21, r1
    2fd2:	f9 f6       	brne	.-66     	; 0x2f92 <QS_Counts_to_Distance+0x16c>
    2fd4:	89 e0       	ldi	r24, 0x09	; 9
    2fd6:	f8 2e       	mov	r15, r24
    2fd8:	0b 3f       	cpi	r16, 0xFB	; 251
    2fda:	11 05       	cpc	r17, r1
    2fdc:	18 f4       	brcc	.+6      	; 0x2fe4 <QS_Counts_to_Distance+0x1be>
    2fde:	89 e0       	ldi	r24, 0x09	; 9
    2fe0:	f8 12       	cpse	r15, r24
    2fe2:	02 c0       	rjmp	.+4      	; 0x2fe8 <QS_Counts_to_Distance+0x1c2>
    2fe4:	0a ef       	ldi	r16, 0xFA	; 250
    2fe6:	10 e0       	ldi	r17, 0x00	; 0
    2fe8:	c8 01       	movw	r24, r16
    2fea:	02 c0       	rjmp	.+4      	; 0x2ff0 <QS_Counts_to_Distance+0x1ca>
    2fec:	8f ef       	ldi	r24, 0xFF	; 255
    2fee:	9f ef       	ldi	r25, 0xFF	; 255
    2ff0:	ce 55       	subi	r28, 0x5E	; 94
    2ff2:	df 4f       	sbci	r29, 0xFF	; 255
    2ff4:	cd bf       	out	0x3d, r28	; 61
    2ff6:	de bf       	out	0x3e, r29	; 62
    2ff8:	df 91       	pop	r29
    2ffa:	cf 91       	pop	r28
    2ffc:	1f 91       	pop	r17
    2ffe:	0f 91       	pop	r16
    3000:	ff 90       	pop	r15
    3002:	08 95       	ret

00003004 <SliderAlgorithm>:

void SliderAlgorithm(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples, u16 scale)
{
    3004:	2f 92       	push	r2
    3006:	3f 92       	push	r3
    3008:	4f 92       	push	r4
    300a:	5f 92       	push	r5
    300c:	7f 92       	push	r7
    300e:	8f 92       	push	r8
    3010:	9f 92       	push	r9
    3012:	af 92       	push	r10
    3014:	bf 92       	push	r11
    3016:	cf 92       	push	r12
    3018:	df 92       	push	r13
    301a:	ef 92       	push	r14
    301c:	ff 92       	push	r15
    301e:	0f 93       	push	r16
    3020:	1f 93       	push	r17
    3022:	cf 93       	push	r28
    3024:	df 93       	push	r29
    3026:	cd b7       	in	r28, 0x3d	; 61
    3028:	de b7       	in	r29, 0x3e	; 62
    302a:	ae 97       	sbiw	r28, 0x2e	; 46
    302c:	cd bf       	out	0x3d, r28	; 61
    302e:	de bf       	out	0x3e, r29	; 62
    3030:	7b 01       	movw	r14, r22
    3032:	5a 01       	movw	r10, r20
	//My implementation
	static u16 previous_led_x = 0;
	static u16 previous_led_y = 0;

    // QS_GlobalCounterOverflow assumes milliseconds. Samples->timestamp is in 100 us.
    u16 xdata QS_GlobalCounterOverflow = samples->timestamp / 10;
    3034:	db 01       	movw	r26, r22
    3036:	12 96       	adiw	r26, 0x02	; 2
    3038:	8d 91       	ld	r24, X+
    303a:	9c 91       	ld	r25, X
    303c:	13 97       	sbiw	r26, 0x03	; 3
    303e:	6a e0       	ldi	r22, 0x0A	; 10
    3040:	70 e0       	ldi	r23, 0x00	; 0
    3042:	0e 94 25 62 	call	0xc44a	; 0xc44a <__udivmodhi4>
    3046:	8b 01       	movw	r16, r22

    // x position "bucket" endpoints to determine LED states and recognize Pause gesture.
    u16 code xbucket_Array[10] = {1, 159, 272, 385, 498, 611, 724, 837, 1100, 1102};
    3048:	84 e1       	ldi	r24, 0x14	; 20
    304a:	e0 e9       	ldi	r30, 0x90	; 144
    304c:	f0 e2       	ldi	r31, 0x20	; 32
    304e:	de 01       	movw	r26, r28
    3050:	11 96       	adiw	r26, 0x01	; 1
    3052:	01 90       	ld	r0, Z+
    3054:	0d 92       	st	X+, r0
    3056:	8a 95       	dec	r24
    3058:	e1 f7       	brne	.-8      	; 0x3052 <SliderAlgorithm+0x4e>

    // P1 LED values corresponding to the position buckets
    u8 code LED_P1_Vals[10] = {0xFF, 0xFE, 0xFD, 0xFB, 0xF7, 0xEF, 0xDF, 0xBF, 0x7F, 0xFF};   
    305a:	8a e0       	ldi	r24, 0x0A	; 10
    305c:	e4 ea       	ldi	r30, 0xA4	; 164
    305e:	f0 e2       	ldi	r31, 0x20	; 32
    3060:	de 01       	movw	r26, r28
    3062:	55 96       	adiw	r26, 0x15	; 21
    3064:	01 90       	ld	r0, Z+
    3066:	0d 92       	st	X+, r0
    3068:	8a 95       	dec	r24
    306a:	e1 f7       	brne	.-8      	; 0x3064 <SliderAlgorithm+0x60>

    // P1 patterns for LED state machine.  Sent in reverse order, '0' bits are ON
    u8 code LED_swipe_left_pattern[8]  = 
    306c:	88 e0       	ldi	r24, 0x08	; 8
    306e:	ee ea       	ldi	r30, 0xAE	; 174
    3070:	f0 e2       	ldi	r31, 0x20	; 32
    3072:	de 01       	movw	r26, r28
    3074:	97 96       	adiw	r26, 0x27	; 39
    3076:	01 90       	ld	r0, Z+
    3078:	0d 92       	st	X+, r0
    307a:	8a 95       	dec	r24
    307c:	e1 f7       	brne	.-8      	; 0x3076 <SliderAlgorithm+0x72>
      {0xFF, 0xFE, 0xF8, 0xE1, 0x87, 0x1F, 0x7F, 0xFF};

    u8 code LED_swipe_right_pattern[8] = 
    307e:	88 e0       	ldi	r24, 0x08	; 8
    3080:	e6 eb       	ldi	r30, 0xB6	; 182
    3082:	f0 e2       	ldi	r31, 0x20	; 32
    3084:	de 01       	movw	r26, r28
    3086:	5f 96       	adiw	r26, 0x1f	; 31
    3088:	01 90       	ld	r0, Z+
    308a:	0d 92       	st	X+, r0
    308c:	8a 95       	dec	r24
    308e:	e1 f7       	brne	.-8      	; 0x3088 <SliderAlgorithm+0x84>
    s16 xdata xdiff;
    u8 xdata swipe_speed;

    int xdata ps;

    ps = (u32) samples->ps1 - (u32)baseline[0];
    3090:	f7 01       	movw	r30, r14
    3092:	82 85       	ldd	r24, Z+10	; 0x0a
    3094:	93 85       	ldd	r25, Z+11	; 0x0b
    3096:	20 91 14 3c 	lds	r18, 0x3C14
    309a:	30 91 15 3c 	lds	r19, 0x3C15
    309e:	82 1b       	sub	r24, r18
    30a0:	93 0b       	sbc	r25, r19
    30a2:	97 ff       	sbrs	r25, 7
    30a4:	02 c0       	rjmp	.+4      	; 0x30aa <SliderAlgorithm+0xa6>
    30a6:	80 e0       	ldi	r24, 0x00	; 0
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    ps *= scale;

    // Raw IR sensor 0 and 1 are stored in channels 4 and 5
    // ALS is stored in channel 6
    // Calculate r1 and r2 distances; store in channels 0 and 1
    r1 = QS_Counts_to_Distance ((u16)ps, 1);
    30aa:	61 e0       	ldi	r22, 0x01	; 1
    30ac:	9c 01       	movw	r18, r24
    30ae:	a2 9e       	mul	r10, r18
    30b0:	c0 01       	movw	r24, r0
    30b2:	a3 9e       	mul	r10, r19
    30b4:	90 0d       	add	r25, r0
    30b6:	b2 9e       	mul	r11, r18
    30b8:	90 0d       	add	r25, r0
    30ba:	11 24       	eor	r1, r1
    30bc:	b4 de       	rcall	.-664    	; 0x2e26 <QS_Counts_to_Distance>
    30be:	4c 01       	movw	r8, r24
	
	//printf("r1 = %d , counts = %d \r\n",r1,(u16)ps);

    ps = (u32) samples->ps2 - (u32)baseline[1];
    30c0:	d7 01       	movw	r26, r14
    30c2:	1c 96       	adiw	r26, 0x0c	; 12
    30c4:	8d 91       	ld	r24, X+
    30c6:	9c 91       	ld	r25, X
    30c8:	1d 97       	sbiw	r26, 0x0d	; 13
    30ca:	20 91 16 3c 	lds	r18, 0x3C16
    30ce:	30 91 17 3c 	lds	r19, 0x3C17
    30d2:	82 1b       	sub	r24, r18
    30d4:	93 0b       	sbc	r25, r19
    30d6:	97 ff       	sbrs	r25, 7
    30d8:	02 c0       	rjmp	.+4      	; 0x30de <SliderAlgorithm+0xda>
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    if (ps < 0) ps = 0;

    // Scale it
    ps *= (u32)scale;

    r2 = QS_Counts_to_Distance ((u16)ps, 1);
    30de:	61 e0       	ldi	r22, 0x01	; 1
    30e0:	fc 01       	movw	r30, r24
    30e2:	ea 9d       	mul	r30, r10
    30e4:	c0 01       	movw	r24, r0
    30e6:	eb 9d       	mul	r30, r11
    30e8:	90 0d       	add	r25, r0
    30ea:	fa 9d       	mul	r31, r10
    30ec:	90 0d       	add	r25, r0
    30ee:	11 24       	eor	r1, r1
    30f0:	9a de       	rcall	.-716    	; 0x2e26 <QS_Counts_to_Distance>
    30f2:	5c 01       	movw	r10, r24
   ////////////////////////////////////////////////////////////////////////////
   // Position calculation and swipe gesture detection

   // Calculate x
   //x = (r1^2 - r2^2 + d^2) / (2 * d) + offset
   x.u32 = (u32)r1 * (u32)r1;
    30f4:	94 01       	movw	r18, r8
    30f6:	d4 01       	movw	r26, r8
    30f8:	0e 94 74 62 	call	0xc4e8	; 0xc4e8 <__umulhisi3>
    30fc:	1b 01       	movw	r2, r22
    30fe:	2c 01       	movw	r4, r24
   x.u32 = x.u32 + 33000;
    3100:	f8 ee       	ldi	r31, 0xE8	; 232
    3102:	2f 0e       	add	r2, r31
    3104:	f0 e8       	ldi	r31, 0x80	; 128
    3106:	3f 1e       	adc	r3, r31
    3108:	41 1c       	adc	r4, r1
    310a:	51 1c       	adc	r5, r1
   x.s32 = x.u32 - ((u32)r2 * (u32)r2);
    310c:	95 01       	movw	r18, r10
    310e:	d5 01       	movw	r26, r10
    3110:	0e 94 74 62 	call	0xc4e8	; 0xc4e8 <__umulhisi3>
    3114:	26 1a       	sub	r2, r22
    3116:	37 0a       	sbc	r3, r23
    3118:	48 0a       	sbc	r4, r24
    311a:	59 0a       	sbc	r5, r25
   if (x.s32 < 0)
    311c:	57 fc       	sbrc	r5, 7
    311e:	03 c0       	rjmp	.+6      	; 0x3126 <SliderAlgorithm+0x122>

   // Calculate x
   //x = (r1^2 - r2^2 + d^2) / (2 * d) + offset
   x.u32 = (u32)r1 * (u32)r1;
   x.u32 = x.u32 + 33000;
   x.s32 = x.u32 - ((u32)r2 * (u32)r2);
    3120:	a2 01       	movw	r20, r4
    3122:	91 01       	movw	r18, r2
    3124:	03 c0       	rjmp	.+6      	; 0x312c <SliderAlgorithm+0x128>
   if (x.s32 < 0)
   {
     x.s32 = 0;
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	a9 01       	movw	r20, r18
   }
   x.u32 = x.u32 / 60;
    312c:	ca 01       	movw	r24, r20
    312e:	b9 01       	movw	r22, r18
    3130:	2c e3       	ldi	r18, 0x3C	; 60
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	40 e0       	ldi	r20, 0x00	; 0
    3136:	50 e0       	ldi	r21, 0x00	; 0
    3138:	0e 94 4c 62 	call	0xc498	; 0xc498 <__udivmodsi4>

   // limit x to maximum for pad
   if (x.u16[LSB] > 1101)
    313c:	2e 34       	cpi	r18, 0x4E	; 78
    313e:	64 e0       	ldi	r22, 0x04	; 4
    3140:	36 07       	cpc	r19, r22
    3142:	10 f0       	brcs	.+4      	; 0x3148 <SliderAlgorithm+0x144>
   {
     x.u16[LSB] = 1101;
    3144:	2d e4       	ldi	r18, 0x4D	; 77
    3146:	34 e0       	ldi	r19, 0x04	; 4
    3148:	80 91 10 20 	lds	r24, 0x2010
	   y.u16[LSB] = 1101;
   }

   
   // Determine "z" and recognize whether "swipe" type gesture has occured
   if ((r1 > MAX_RADIUS) || (r2 > MAX_RADIUS))
    314c:	91 ef       	ldi	r25, 0xF1	; 241
    314e:	89 16       	cp	r8, r25
    3150:	91 04       	cpc	r9, r1
    3152:	20 f4       	brcc	.+8      	; 0x315c <SliderAlgorithm+0x158>
    3154:	a1 ef       	ldi	r26, 0xF1	; 241
    3156:	aa 16       	cp	r10, r26
    3158:	b1 04       	cpc	r11, r1
    315a:	b0 f1       	brcs	.+108    	; 0x31c8 <SliderAlgorithm+0x1c4>
   {
      // check for end of swipe
      if (out_of_range == 0)
    315c:	88 23       	and	r24, r24
    315e:	11 f0       	breq	.+4      	; 0x3164 <SliderAlgorithm+0x160>
    u8 xdata xbucket;
    static u8 xdata last_xbucket;

    // Swipe gesture recognition variables
    static BIT out_of_range = 1;
    BIT swipe_detect = 0;
    3160:	e0 e0       	ldi	r30, 0x00	; 0
    3162:	1e c0       	rjmp	.+60     	; 0x31a0 <SliderAlgorithm+0x19c>
   if ((r1 > MAX_RADIUS) || (r2 > MAX_RADIUS))
   {
      // check for end of swipe
      if (out_of_range == 0)
      {
        xexit = xlast;
    3164:	60 91 8f 2e 	lds	r22, 0x2E8F
    3168:	70 91 90 2e 	lds	r23, 0x2E90
    316c:	60 93 8d 2e 	sts	0x2E8D, r22
    3170:	70 93 8e 2e 	sts	0x2E8E, r23

        // swipe must be completed in a desginated amount of time
        if (QS_GlobalCounterOverflow-SwipeStartTime < SWIPE_TIMEOUT && QS_GlobalCounterOverflow-SwipeStartTime >50)
    3174:	e0 91 8b 2e 	lds	r30, 0x2E8B
    3178:	f0 91 8c 2e 	lds	r31, 0x2E8C
    317c:	c8 01       	movw	r24, r16
    317e:	8e 1b       	sub	r24, r30
    3180:	9f 0b       	sbc	r25, r31
    3182:	c3 97       	sbiw	r24, 0x33	; 51
    3184:	82 31       	cpi	r24, 0x12	; 18
    3186:	91 40       	sbci	r25, 0x01	; 1
    3188:	58 f7       	brcc	.-42     	; 0x3160 <SliderAlgorithm+0x15c>
        {
            swipe_detect = 1;   // indicate that a swipe was detected
            swipe_speed = SWIPE_TIMEOUT-(QS_GlobalCounterOverflow-SwipeStartTime);
    318a:	f5 e4       	ldi	r31, 0x45	; 69
    318c:	7f 2e       	mov	r7, r31
    318e:	7e 0e       	add	r7, r30
    3190:	70 1a       	sub	r7, r16
            xdiff = (s16)xenter-(s16)xexit;
    3192:	c0 90 89 2e 	lds	r12, 0x2E89
    3196:	d0 90 8a 2e 	lds	r13, 0x2E8A
    319a:	c6 1a       	sub	r12, r22
    319c:	d7 0a       	sbc	r13, r23
        xexit = xlast;

        // swipe must be completed in a desginated amount of time
        if (QS_GlobalCounterOverflow-SwipeStartTime < SWIPE_TIMEOUT && QS_GlobalCounterOverflow-SwipeStartTime >50)
        {
            swipe_detect = 1;   // indicate that a swipe was detected
    319e:	e1 e0       	ldi	r30, 0x01	; 1
            swipe_speed = SWIPE_TIMEOUT-(QS_GlobalCounterOverflow-SwipeStartTime);
            xdiff = (s16)xenter-(s16)xexit;
        }
      }
      out_of_range = 1;
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	80 93 10 20 	sts	0x2010, r24
      if (xexit > 550)
    31a6:	80 91 8d 2e 	lds	r24, 0x2E8D
    31aa:	90 91 8e 2e 	lds	r25, 0x2E8E
    31ae:	87 32       	cpi	r24, 0x27	; 39
    31b0:	92 40       	sbci	r25, 0x02	; 2
    31b2:	18 f0       	brcs	.+6      	; 0x31ba <SliderAlgorithm+0x1b6>
      {
        x.u16[LSB] = 1101;
    31b4:	2d e4       	ldi	r18, 0x4D	; 77
    31b6:	34 e0       	ldi	r19, 0x04	; 4
    31b8:	02 c0       	rjmp	.+4      	; 0x31be <SliderAlgorithm+0x1ba>
      }
      else
      {
        x.u16[LSB] = 0;
    31ba:	20 e0       	ldi	r18, 0x00	; 0
    31bc:	30 e0       	ldi	r19, 0x00	; 0
      }
      z = MAX_RADIUS;
      Pause_gesture_timeout = QS_GlobalCounterOverflow;
    31be:	00 93 87 2e 	sts	0x2E87, r16
    31c2:	10 93 88 2e 	sts	0x2E88, r17
    31c6:	11 c0       	rjmp	.+34     	; 0x31ea <SliderAlgorithm+0x1e6>
   }
   else
   {
      // check for start of swipe
      if (out_of_range == 1)
    31c8:	81 30       	cpi	r24, 0x01	; 1
    31ca:	41 f4       	brne	.+16     	; 0x31dc <SliderAlgorithm+0x1d8>
      {
        xenter = x.u16[LSB];
    31cc:	20 93 89 2e 	sts	0x2E89, r18
    31d0:	30 93 8a 2e 	sts	0x2E8A, r19
        SwipeStartTime = QS_GlobalCounterOverflow;
    31d4:	00 93 8b 2e 	sts	0x2E8B, r16
    31d8:	10 93 8c 2e 	sts	0x2E8C, r17
      }
      out_of_range = 0;
    31dc:	10 92 10 20 	sts	0x2010, r1

      xlast = x.u16[LSB];
    31e0:	20 93 8f 2e 	sts	0x2E8F, r18
    31e4:	30 93 90 2e 	sts	0x2E90, r19
    u8 xdata xbucket;
    static u8 xdata last_xbucket;

    // Swipe gesture recognition variables
    static BIT out_of_range = 1;
    BIT swipe_detect = 0;
    31e8:	e0 e0       	ldi	r30, 0x00	; 0
      {
         z = r1;
      }
   }
   
   int16_t tmp_x = 15-((x.u16[LSB])/73);
    31ea:	59 01       	movw	r10, r18
    31ec:	c9 01       	movw	r24, r18
    31ee:	69 e4       	ldi	r22, 0x49	; 73
    31f0:	70 e0       	ldi	r23, 0x00	; 0
    31f2:	0e 94 25 62 	call	0xc44a	; 0xc44a <__udivmodhi4>
    31f6:	4f e0       	ldi	r20, 0x0F	; 15
    31f8:	50 e0       	ldi	r21, 0x00	; 0
    31fa:	46 1b       	sub	r20, r22
    31fc:	57 0b       	sbc	r21, r23
   
   if (tmp_x < 0) {
	   samples->x_axis = 0;
    31fe:	d7 01       	movw	r26, r14
      }
   }
   
   int16_t tmp_x = 15-((x.u16[LSB])/73);
   
   if (tmp_x < 0) {
    3200:	57 ff       	sbrs	r21, 7
    3202:	03 c0       	rjmp	.+6      	; 0x320a <SliderAlgorithm+0x206>
	   samples->x_axis = 0;
    3204:	53 96       	adiw	r26, 0x13	; 19
    3206:	1c 92       	st	X, r1
    3208:	02 c0       	rjmp	.+4      	; 0x320e <SliderAlgorithm+0x20a>
   } else if (tmp_x > 15) {
	   samples->x_axis = 15;
   } else {
	   samples->x_axis = tmp_x;   
    320a:	53 96       	adiw	r26, 0x13	; 19
    320c:	4c 93       	st	X, r20
   // REPLACE_0_PS3( x.u16[LSB] );
   // REPLACE_0_AUX( z );

   // If a swipe was detected, determine the direction (L/R), set up LED state machine
   // to indicate swipe gesture, and post the swipe event.
   if (swipe_detect == 1)
    320e:	e1 30       	cpi	r30, 0x01	; 1
    3210:	09 f0       	breq	.+2      	; 0x3214 <SliderAlgorithm+0x210>
    3212:	63 c0       	rjmp	.+198    	; 0x32da <SliderAlgorithm+0x2d6>
   {
       if (xdiff > 150)             // Left Swipe
    3214:	b7 e9       	ldi	r27, 0x97	; 151
    3216:	cb 16       	cp	r12, r27
    3218:	d1 04       	cpc	r13, r1
    321a:	54 f1       	brlt	.+84     	; 0x3270 <SliderAlgorithm+0x26c>
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    321c:	10 92 86 2e 	sts	0x2E86, r1
    3220:	20 e0       	ldi	r18, 0x00	; 0
            {
                LED_flash_pattern[LED_State] = LED_swipe_left_pattern[LED_State];
    3222:	82 2f       	mov	r24, r18
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	fc 01       	movw	r30, r24
    3228:	e2 58       	subi	r30, 0x82	; 130
    322a:	f1 4d       	sbci	r31, 0xD1	; 209
    322c:	a7 e2       	ldi	r26, 0x27	; 39
    322e:	b0 e0       	ldi	r27, 0x00	; 0
    3230:	ac 0f       	add	r26, r28
    3232:	bd 1f       	adc	r27, r29
    3234:	a8 0f       	add	r26, r24
    3236:	b9 1f       	adc	r27, r25
    3238:	8c 91       	ld	r24, X
    323a:	80 83       	st	Z, r24
   // to indicate swipe gesture, and post the swipe event.
   if (swipe_detect == 1)
   {
       if (xdiff > 150)             // Left Swipe
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    323c:	81 e0       	ldi	r24, 0x01	; 1
    323e:	82 0f       	add	r24, r18
    3240:	88 30       	cpi	r24, 0x08	; 8
    3242:	10 f4       	brcc	.+4      	; 0x3248 <SliderAlgorithm+0x244>
    3244:	28 2f       	mov	r18, r24
    3246:	ed cf       	rjmp	.-38     	; 0x3222 <SliderAlgorithm+0x21e>
    3248:	80 93 86 2e 	sts	0x2E86, r24
            {
                LED_flash_pattern[LED_State] = LED_swipe_left_pattern[LED_State];
            } // LED_State should be 8 when this loop is finished

            // send LEFT_SWIPE gesture
            printf("                            %s: %d, %d\n", "LEFT_SWIPE", swipe_speed, xdiff) ;
    324c:	df 92       	push	r13
    324e:	cf 92       	push	r12
    3250:	1f 92       	push	r1
    3252:	7f 92       	push	r7
    3254:	8d e7       	ldi	r24, 0x7D	; 125
    3256:	92 e2       	ldi	r25, 0x22	; 34
    3258:	9f 93       	push	r25
    325a:	8f 93       	push	r24
    325c:	88 e8       	ldi	r24, 0x88	; 136
    325e:	92 e2       	ldi	r25, 0x22	; 34
    3260:	9f 93       	push	r25
    3262:	8f 93       	push	r24
    3264:	0e 94 9a 65 	call	0xcb34	; 0xcb34 <printf>
			samples->gesture = LEFT_SWIPE;
    3268:	82 e0       	ldi	r24, 0x02	; 2
    326a:	f7 01       	movw	r30, r14
    326c:	82 8b       	std	Z+18, r24	; 0x12
    326e:	32 c0       	rjmp	.+100    	; 0x32d4 <SliderAlgorithm+0x2d0>
       }
       else if (xdiff < -150)       // Right Swipe
    3270:	3a e6       	ldi	r19, 0x6A	; 106
    3272:	c3 16       	cp	r12, r19
    3274:	3f ef       	ldi	r19, 0xFF	; 255
    3276:	d3 06       	cpc	r13, r19
    3278:	9c f5       	brge	.+102    	; 0x32e0 <SliderAlgorithm+0x2dc>
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    327a:	10 92 86 2e 	sts	0x2E86, r1
    327e:	20 e0       	ldi	r18, 0x00	; 0
            {
                LED_flash_pattern[LED_State] = LED_swipe_right_pattern[LED_State];
    3280:	82 2f       	mov	r24, r18
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	fc 01       	movw	r30, r24
    3286:	e2 58       	subi	r30, 0x82	; 130
    3288:	f1 4d       	sbci	r31, 0xD1	; 209
    328a:	af e1       	ldi	r26, 0x1F	; 31
    328c:	b0 e0       	ldi	r27, 0x00	; 0
    328e:	ac 0f       	add	r26, r28
    3290:	bd 1f       	adc	r27, r29
    3292:	a8 0f       	add	r26, r24
    3294:	b9 1f       	adc	r27, r25
    3296:	8c 91       	ld	r24, X
    3298:	80 83       	st	Z, r24
            printf("                            %s: %d, %d\n", "LEFT_SWIPE", swipe_speed, xdiff) ;
			samples->gesture = LEFT_SWIPE;
       }
       else if (xdiff < -150)       // Right Swipe
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    329a:	81 e0       	ldi	r24, 0x01	; 1
    329c:	82 0f       	add	r24, r18
    329e:	88 30       	cpi	r24, 0x08	; 8
    32a0:	10 f4       	brcc	.+4      	; 0x32a6 <SliderAlgorithm+0x2a2>
    32a2:	28 2f       	mov	r18, r24
    32a4:	ed cf       	rjmp	.-38     	; 0x3280 <SliderAlgorithm+0x27c>
    32a6:	80 93 86 2e 	sts	0x2E86, r24
            {
                LED_flash_pattern[LED_State] = LED_swipe_right_pattern[LED_State];
            } // LED_State should be 8 when this loop is finished

            // send RIGHT_SWIPE gesture
            printf("                            %s: %d, %d\n", "RIGHT_SWIPE", swipe_speed, -xdiff) ;     
    32aa:	d1 94       	neg	r13
    32ac:	c1 94       	neg	r12
    32ae:	d1 08       	sbc	r13, r1
    32b0:	df 92       	push	r13
    32b2:	cf 92       	push	r12
    32b4:	1f 92       	push	r1
    32b6:	7f 92       	push	r7
    32b8:	80 eb       	ldi	r24, 0xB0	; 176
    32ba:	92 e2       	ldi	r25, 0x22	; 34
    32bc:	9f 93       	push	r25
    32be:	8f 93       	push	r24
    32c0:	88 e8       	ldi	r24, 0x88	; 136
    32c2:	92 e2       	ldi	r25, 0x22	; 34
    32c4:	9f 93       	push	r25
    32c6:	8f 93       	push	r24
    32c8:	0e 94 9a 65 	call	0xcb34	; 0xcb34 <printf>
			samples->gesture = RIGHT_SWIPE;       
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	d7 01       	movw	r26, r14
    32d0:	52 96       	adiw	r26, 0x12	; 18
    32d2:	8c 93       	st	X, r24
    32d4:	cd bf       	out	0x3d, r28	; 61
    32d6:	de bf       	out	0x3e, r29	; 62
    32d8:	03 c0       	rjmp	.+6      	; 0x32e0 <SliderAlgorithm+0x2dc>
       }
   } else {
	   samples->gesture = 0;
    32da:	d7 01       	movw	r26, r14
    32dc:	52 96       	adiw	r26, 0x12	; 18
    32de:	1c 92       	st	X, r1
    32e0:	fe 01       	movw	r30, r28
    32e2:	31 96       	adiw	r30, 0x01	; 1

   ////////////////////////////////////////////////////////////////////////////
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
    32e4:	20 e0       	ldi	r18, 0x00	; 0
   {
        if (x.u16[LSB] < xbucket_Array[xbucket])
    32e6:	81 91       	ld	r24, Z+
    32e8:	91 91       	ld	r25, Z+
    32ea:	a8 16       	cp	r10, r24
    32ec:	b9 06       	cpc	r11, r25
    32ee:	18 f0       	brcs	.+6      	; 0x32f6 <SliderAlgorithm+0x2f2>

   ////////////////////////////////////////////////////////////////////////////
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
    32f0:	2f 5f       	subi	r18, 0xFF	; 255
    32f2:	2a 30       	cpi	r18, 0x0A	; 10
    32f4:	c1 f7       	brne	.-16     	; 0x32e6 <SliderAlgorithm+0x2e2>
            break;
        }
   }

   // Reset pause gesture timer if movement detected
   if ((xbucket != last_xbucket)||(xbucket == 9)||(xbucket == 0))
    32f6:	80 91 7d 2e 	lds	r24, 0x2E7D
    32fa:	28 13       	cpse	r18, r24
    32fc:	04 c0       	rjmp	.+8      	; 0x3306 <SliderAlgorithm+0x302>
    32fe:	29 30       	cpi	r18, 0x09	; 9
    3300:	11 f0       	breq	.+4      	; 0x3306 <SliderAlgorithm+0x302>
    3302:	21 11       	cpse	r18, r1
    3304:	04 c0       	rjmp	.+8      	; 0x330e <SliderAlgorithm+0x30a>
   {
      Pause_gesture_timeout = QS_GlobalCounterOverflow;
    3306:	00 93 87 2e 	sts	0x2E87, r16
    330a:	10 93 88 2e 	sts	0x2E88, r17
   }
   last_xbucket = xbucket;  // store latest information for next comparison
    330e:	20 93 7d 2e 	sts	0x2E7D, r18

   // LED State machine - Pause gesture recognition is also integrated here 
   if (LED_State != 0)  // indicate gesture pattern
    3312:	e0 91 86 2e 	lds	r30, 0x2E86
    3316:	ee 23       	and	r30, r30
    3318:	e1 f0       	breq	.+56     	; 0x3352 <SliderAlgorithm+0x34e>
   {
      if ((u8)(QS_GlobalCounterOverflow - LED_flash_timeout) >= LED_STATE_TIME)
    331a:	80 91 7b 2e 	lds	r24, 0x2E7B
    331e:	b0 2f       	mov	r27, r16
    3320:	b8 1b       	sub	r27, r24
    3322:	b7 32       	cpi	r27, 0x27	; 39
    3324:	08 f4       	brcc	.+2      	; 0x3328 <SliderAlgorithm+0x324>
    3326:	64 c0       	rjmp	.+200    	; 0x33f0 <SliderAlgorithm+0x3ec>
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
    3328:	00 93 7b 2e 	sts	0x2E7B, r16
    332c:	10 93 7c 2e 	sts	0x2E7C, r17

         // Write to Port 1 of the MCU
         PortSet( 1, LED_flash_pattern[(--LED_State)%8]); 
    3330:	e1 50       	subi	r30, 0x01	; 1
    3332:	e0 93 86 2e 	sts	0x2E86, r30
    3336:	e7 70       	andi	r30, 0x07	; 7
    3338:	f0 e0       	ldi	r31, 0x00	; 0
    333a:	e2 58       	subi	r30, 0x82	; 130
    333c:	f1 4d       	sbci	r31, 0xD1	; 209
    333e:	60 81       	ld	r22, Z
    3340:	70 e0       	ldi	r23, 0x00	; 0
    3342:	81 e0       	ldi	r24, 0x01	; 1
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	18 dd       	rcall	.-1488   	; 0x2d78 <PortSet>

         Pause_gesture_timeout = QS_GlobalCounterOverflow;
    3348:	00 93 87 2e 	sts	0x2E87, r16
    334c:	10 93 88 2e 	sts	0x2E88, r17
    3350:	4f c0       	rjmp	.+158    	; 0x33f0 <SliderAlgorithm+0x3ec>
      //PortSet( 1, LED_P1_Vals[xbucket]);
	  //printf("x: %d \r\n",x.u16[LSB]);


      // check time stamp for pause
      if ((QS_GlobalCounterOverflow - Pause_gesture_timeout) >= PAUSE_TIMEOUT) 
    3352:	80 91 87 2e 	lds	r24, 0x2E87
    3356:	90 91 88 2e 	lds	r25, 0x2E88
    335a:	f8 01       	movw	r30, r16
    335c:	e8 1b       	sub	r30, r24
    335e:	f9 0b       	sbc	r31, r25
    3360:	cf 01       	movw	r24, r30
    3362:	8a 38       	cpi	r24, 0x8A	; 138
    3364:	92 40       	sbci	r25, 0x02	; 2
    3366:	08 f4       	brcc	.+2      	; 0x336a <SliderAlgorithm+0x366>
    3368:	43 c0       	rjmp	.+134    	; 0x33f0 <SliderAlgorithm+0x3ec>
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
    336a:	00 93 7b 2e 	sts	0x2E7B, r16
    336e:	10 93 7c 2e 	sts	0x2E7C, r17
         
         for (LED_State = 0; LED_State < 8; )
    3372:	10 92 86 2e 	sts	0x2E86, r1
    3376:	e0 e0       	ldi	r30, 0x00	; 0
         {
            LED_flash_pattern[LED_State++] = 0xFF;
    3378:	6f ef       	ldi	r22, 0xFF	; 255
            LED_flash_pattern[LED_State++] = 0xFF;
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	ce 01       	movw	r24, r28
    337e:	45 96       	adiw	r24, 0x15	; 21
    3380:	82 0f       	add	r24, r18
    3382:	93 1f       	adc	r25, r19
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
         
         for (LED_State = 0; LED_State < 8; )
         {
            LED_flash_pattern[LED_State++] = 0xFF;
    3384:	ae 2f       	mov	r26, r30
    3386:	b0 e0       	ldi	r27, 0x00	; 0
    3388:	a2 58       	subi	r26, 0x82	; 130
    338a:	b1 4d       	sbci	r27, 0xD1	; 209
    338c:	6c 93       	st	X, r22
    338e:	a1 e0       	ldi	r26, 0x01	; 1
    3390:	ae 0f       	add	r26, r30
            LED_flash_pattern[LED_State++] = 0xFF;
    3392:	b0 e0       	ldi	r27, 0x00	; 0
    3394:	a2 58       	subi	r26, 0x82	; 130
    3396:	b1 4d       	sbci	r27, 0xD1	; 209
    3398:	6c 93       	st	X, r22
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    339a:	dc 01       	movw	r26, r24
    339c:	5c 91       	ld	r21, X
    339e:	a2 e0       	ldi	r26, 0x02	; 2
    33a0:	ae 0f       	add	r26, r30
    33a2:	b0 e0       	ldi	r27, 0x00	; 0
    33a4:	a2 58       	subi	r26, 0x82	; 130
    33a6:	b1 4d       	sbci	r27, 0xD1	; 209
    33a8:	5c 93       	st	X, r21
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    33aa:	44 e0       	ldi	r20, 0x04	; 4
    33ac:	4e 0f       	add	r20, r30
    33ae:	ed 5f       	subi	r30, 0xFD	; 253
    33b0:	f0 e0       	ldi	r31, 0x00	; 0
    33b2:	e2 58       	subi	r30, 0x82	; 130
    33b4:	f1 4d       	sbci	r31, 0xD1	; 209
    33b6:	50 83       	st	Z, r21
      // check time stamp for pause
      if ((QS_GlobalCounterOverflow - Pause_gesture_timeout) >= PAUSE_TIMEOUT) 
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
         
         for (LED_State = 0; LED_State < 8; )
    33b8:	48 30       	cpi	r20, 0x08	; 8
    33ba:	10 f4       	brcc	.+4      	; 0x33c0 <SliderAlgorithm+0x3bc>
         {
            LED_flash_pattern[LED_State++] = 0xFF;
            LED_flash_pattern[LED_State++] = 0xFF;
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    33bc:	e4 2f       	mov	r30, r20
    33be:	e2 cf       	rjmp	.-60     	; 0x3384 <SliderAlgorithm+0x380>
         } // LED_State should be 8 when this loop is finished.

         LED_State = 16; // Set LED_State to 16 to repeat the pattern twice
    33c0:	80 e1       	ldi	r24, 0x10	; 16
    33c2:	80 93 86 2e 	sts	0x2E86, r24

         // Send off a PAUSE gesture to host.
         printf("                            %s: %d\n", "PAUSE", xbucket<<8) ;   
    33c6:	2f 93       	push	r18
    33c8:	1f 92       	push	r1
    33ca:	8c eb       	ldi	r24, 0xBC	; 188
    33cc:	92 e2       	ldi	r25, 0x22	; 34
    33ce:	9f 93       	push	r25
    33d0:	8f 93       	push	r24
    33d2:	82 ec       	ldi	r24, 0xC2	; 194
    33d4:	92 e2       	ldi	r25, 0x22	; 34
    33d6:	9f 93       	push	r25
    33d8:	8f 93       	push	r24
    33da:	0e 94 9a 65 	call	0xcb34	; 0xcb34 <printf>
		 samples->gesture = PAUSE;         
    33de:	83 e0       	ldi	r24, 0x03	; 3
    33e0:	f7 01       	movw	r30, r14
    33e2:	82 8b       	std	Z+18, r24	; 0x12
    33e4:	0f 90       	pop	r0
    33e6:	0f 90       	pop	r0
    33e8:	0f 90       	pop	r0
    33ea:	0f 90       	pop	r0
    33ec:	0f 90       	pop	r0
    33ee:	0f 90       	pop	r0
       // It is best to display this than printf. Use AUX and PS3 channels
       //REPLACE_0_PS3( 0 );
       //REPLACE_0_AUX( 0 ); 
	    //printf("no touch \r\n");
   }
}
    33f0:	ae 96       	adiw	r28, 0x2e	; 46
    33f2:	cd bf       	out	0x3d, r28	; 61
    33f4:	de bf       	out	0x3e, r29	; 62
    33f6:	df 91       	pop	r29
    33f8:	cf 91       	pop	r28
    33fa:	1f 91       	pop	r17
    33fc:	0f 91       	pop	r16
    33fe:	ff 90       	pop	r15
    3400:	ef 90       	pop	r14
    3402:	df 90       	pop	r13
    3404:	cf 90       	pop	r12
    3406:	bf 90       	pop	r11
    3408:	af 90       	pop	r10
    340a:	9f 90       	pop	r9
    340c:	8f 90       	pop	r8
    340e:	7f 90       	pop	r7
    3410:	5f 90       	pop	r5
    3412:	4f 90       	pop	r4
    3414:	3f 90       	pop	r3
    3416:	2f 90       	pop	r2
    3418:	08 95       	ret

0000341a <spi_setup>:
#include "spi.h"

void spi_setup(void) 
{
	//Disable power reduction for SPIC 
	PR.PRPC &= ~0x08;	
    341a:	e0 e7       	ldi	r30, 0x70	; 112
    341c:	f0 e0       	ldi	r31, 0x00	; 0
    341e:	83 81       	ldd	r24, Z+3	; 0x03
    3420:	87 7f       	andi	r24, 0xF7	; 247
    3422:	83 83       	std	Z+3, r24	; 0x03
	
	PORTC.DIRSET = SD_CS | SD_MOSI | SD_SCK; //Outputs
    3424:	e0 e4       	ldi	r30, 0x40	; 64
    3426:	f6 e0       	ldi	r31, 0x06	; 6
    3428:	80 eb       	ldi	r24, 0xB0	; 176
    342a:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = SD_MISO | SD_CD; //Inputs
    342c:	88 e4       	ldi	r24, 0x48	; 72
    342e:	82 83       	std	Z+2, r24	; 0x02
	PORTC.OUTSET = SD_CS;
    3430:	80 e1       	ldi	r24, 0x10	; 16
    3432:	85 83       	std	Z+5, r24	; 0x05
	
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;
    3434:	88 e1       	ldi	r24, 0x18	; 24
    3436:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;
    3438:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;
    343a:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;
    343c:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;
    343e:	87 8b       	std	Z+23, r24	; 0x17
	
	//Enable power to SD card
	PORTB.DIRSET = SD_POWER;
    3440:	e0 e2       	ldi	r30, 0x20	; 32
    3442:	f6 e0       	ldi	r31, 0x06	; 6
    3444:	82 e0       	ldi	r24, 0x02	; 2
    3446:	81 83       	std	Z+1, r24	; 0x01
	PORTB.OUTCLR = SD_POWER;
    3448:	86 83       	std	Z+6, r24	; 0x06
	
	SPIC.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    344a:	80 ed       	ldi	r24, 0xD0	; 208
    344c:	80 93 c0 08 	sts	0x08C0, r24
    3450:	08 95       	ret

00003452 <spi_disable>:
}

void spi_disable(void) 
{	
	SPIC.CTRL = 0;
    3452:	10 92 c0 08 	sts	0x08C0, r1
	
	PORTC.DIRCLR   = SD_CS | SD_MOSI | SD_MISO | SD_SCK | SD_CD;
    3456:	e0 e4       	ldi	r30, 0x40	; 64
    3458:	f6 e0       	ldi	r31, 0x06	; 6
    345a:	88 ef       	ldi	r24, 0xF8	; 248
    345c:	82 83       	std	Z+2, r24	; 0x02
	PORTC.PIN3CTRL = PORT_OPC_PULLDOWN_gc;
    345e:	80 e1       	ldi	r24, 0x10	; 16
    3460:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLDOWN_gc;
    3462:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLDOWN_gc;
    3464:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLDOWN_gc;
    3466:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLDOWN_gc;
    3468:	87 8b       	std	Z+23, r24	; 0x17
	
	//Cut power to SD card
	PORTB.DIRSET = SD_POWER; 
    346a:	e0 e2       	ldi	r30, 0x20	; 32
    346c:	f6 e0       	ldi	r31, 0x06	; 6
    346e:	82 e0       	ldi	r24, 0x02	; 2
    3470:	81 83       	std	Z+1, r24	; 0x01
	PORTB.OUTSET = SD_POWER;
    3472:	85 83       	std	Z+5, r24	; 0x05
	
	//Enable power reduction for SPIC 
	PR.PRPC |= 0x08;
    3474:	e0 e7       	ldi	r30, 0x70	; 112
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	83 81       	ldd	r24, Z+3	; 0x03
    347a:	88 60       	ori	r24, 0x08	; 8
    347c:	83 83       	std	Z+3, r24	; 0x03
    347e:	08 95       	ret

00003480 <spi_wr_rd>:

uint8_t spi_wr_rd(uint8_t data) 
{	
	uint16_t timeout = 0;
	
	SPIC.DATA = data;
    3480:	80 93 c3 08 	sts	0x08C3, r24
	while(!(SPIC.STATUS & SPI_IF_bm)) {
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	20 91 c2 08 	lds	r18, 0x08C2
    348c:	27 fd       	sbrc	r18, 7
    348e:	05 c0       	rjmp	.+10     	; 0x349a <spi_wr_rd+0x1a>
    3490:	01 97       	sbiw	r24, 0x01	; 1
		if (timeout++ == 0xffff) {
    3492:	00 97       	sbiw	r24, 0x00	; 0
    3494:	c9 f7       	brne	.-14     	; 0x3488 <spi_wr_rd+0x8>
			return 0;
    3496:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return SPIC.DATA;
}
    3498:	08 95       	ret
	while(!(SPIC.STATUS & SPI_IF_bm)) {
		if (timeout++ == 0xffff) {
			return 0;
		}
	}
	return SPIC.DATA;
    349a:	80 91 c3 08 	lds	r24, 0x08C3
    349e:	08 95       	ret

000034a0 <twi_setup>:
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    34a0:	e0 e7       	ldi	r30, 0x70	; 112
    34a2:	f0 e0       	ldi	r31, 0x00	; 0
    34a4:	83 81       	ldd	r24, Z+3	; 0x03
    34a6:	8f 7b       	andi	r24, 0xBF	; 191
    34a8:	83 83       	std	Z+3, r24	; 0x03
    34aa:	e0 e8       	ldi	r30, 0x80	; 128
    34ac:	f4 e0       	ldi	r31, 0x04	; 4
    34ae:	12 82       	std	Z+2, r1	; 0x02
    34b0:	89 e0       	ldi	r24, 0x09	; 9
    34b2:	85 83       	std	Z+5, r24	; 0x05
    34b4:	88 e0       	ldi	r24, 0x08	; 8
    34b6:	81 83       	std	Z+1, r24	; 0x01
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	84 83       	std	Z+4, r24	; 0x04
    34bc:	08 95       	ret

000034be <twi_start_transmission>:
}

uint8_t twi_start_transmission(TWI_t* const TWI,
const uint8_t slave_address,
const uint16_t timeout_ms)
{
    34be:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    34c0:	66 83       	std	Z+6, r22	; 0x06

	timeout_remaining = (timeout_ms * 100);
    34c2:	24 e6       	ldi	r18, 0x64	; 100
    34c4:	24 9f       	mul	r18, r20
    34c6:	c0 01       	movw	r24, r0
    34c8:	25 9f       	mul	r18, r21
    34ca:	90 0d       	add	r25, r0
    34cc:	11 24       	eor	r1, r1
	while (timeout_remaining)
    34ce:	00 97       	sbiw	r24, 0x00	; 0
    34d0:	b9 f0       	breq	.+46     	; 0x3500 <twi_start_transmission+0x42>
	{
		uint8_t status = TWI->MASTER.STATUS;
    34d2:	24 81       	ldd	r18, Z+4	; 0x04

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    34d4:	32 2f       	mov	r19, r18
    34d6:	38 74       	andi	r19, 0x48	; 72
    34d8:	38 34       	cpi	r19, 0x48	; 72
    34da:	11 f4       	brne	.+4      	; 0x34e0 <twi_start_transmission+0x22>
		{
			TWI->MASTER.ADDR = slave_address;
    34dc:	66 83       	std	Z+6, r22	; 0x06
    34de:	0a c0       	rjmp	.+20     	; 0x34f4 <twi_start_transmission+0x36>
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    34e0:	32 2f       	mov	r19, r18
    34e2:	30 75       	andi	r19, 0x50	; 80
    34e4:	30 35       	cpi	r19, 0x50	; 80
    34e6:	21 f4       	brne	.+8      	; 0x34f0 <twi_start_transmission+0x32>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    34e8:	87 e0       	ldi	r24, 0x07	; 7
    34ea:	83 83       	std	Z+3, r24	; 0x03
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
    34ec:	84 e0       	ldi	r24, 0x04	; 4
    34ee:	08 95       	ret
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    34f0:	20 7c       	andi	r18, 0xC0	; 192
    34f2:	61 f4       	brne	.+24     	; 0x350c <twi_start_transmission+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    34f4:	2a e6       	ldi	r18, 0x6A	; 106
    34f6:	2a 95       	dec	r18
    34f8:	f1 f7       	brne	.-4      	; 0x34f6 <twi_start_transmission+0x38>
    34fa:	00 c0       	rjmp	.+0      	; 0x34fc <twi_start_transmission+0x3e>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    34fc:	01 97       	sbiw	r24, 0x01	; 1
    34fe:	e7 cf       	rjmp	.-50     	; 0x34ce <twi_start_transmission+0x10>
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    3500:	84 81       	ldd	r24, Z+4	; 0x04
    3502:	85 ff       	sbrs	r24, 5
    3504:	05 c0       	rjmp	.+10     	; 0x3510 <twi_start_transmission+0x52>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3506:	87 e0       	ldi	r24, 0x07	; 7
    3508:	83 83       	std	Z+3, r24	; 0x03
    350a:	02 c0       	rjmp	.+4      	; 0x3510 <twi_start_transmission+0x52>
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
		{
			return TWI_ERROR_NO_ERROR;
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	08 95       	ret
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    3510:	83 e0       	ldi	r24, 0x03	; 3
			twi_stop_transmission(TWI);
		}
	}

	return TWI_ERROR_BUS_CAP_TIMEOUT;
}
    3512:	08 95       	ret

00003514 <twi_send_byte>:

uint8_t twi_send_byte(TWI_t* const TWI,
const uint16_t timeout_ms,
const uint8_t data)
{
    3514:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;
	
	TWI->MASTER.DATA = data;
    3516:	47 83       	std	Z+7, r20	; 0x07
	
	timeout_remaining = (timeout_ms * 100);
    3518:	24 e6       	ldi	r18, 0x64	; 100
    351a:	26 9f       	mul	r18, r22
    351c:	c0 01       	movw	r24, r0
    351e:	27 9f       	mul	r18, r23
    3520:	90 0d       	add	r25, r0
    3522:	11 24       	eor	r1, r1
	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm)&& timeout_remaining) {
    3524:	24 81       	ldd	r18, Z+4	; 0x04
    3526:	26 fd       	sbrc	r18, 6
    3528:	08 c0       	rjmp	.+16     	; 0x353a <twi_send_byte+0x26>
    352a:	00 97       	sbiw	r24, 0x00	; 0
    352c:	31 f0       	breq	.+12     	; 0x353a <twi_send_byte+0x26>
    352e:	2a e6       	ldi	r18, 0x6A	; 106
    3530:	2a 95       	dec	r18
    3532:	f1 f7       	brne	.-4      	; 0x3530 <twi_send_byte+0x1c>
    3534:	00 c0       	rjmp	.+0      	; 0x3536 <twi_send_byte+0x22>
		_delay_us(10);
		timeout_remaining--;
    3536:	01 97       	sbiw	r24, 0x01	; 1
    3538:	f5 cf       	rjmp	.-22     	; 0x3524 <twi_send_byte+0x10>
	}

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    353a:	84 81       	ldd	r24, Z+4	; 0x04
    353c:	86 ff       	sbrs	r24, 6
    353e:	06 c0       	rjmp	.+12     	; 0x354c <twi_send_byte+0x38>
    3540:	84 81       	ldd	r24, Z+4	; 0x04
    3542:	82 95       	swap	r24
    3544:	81 70       	andi	r24, 0x01	; 1
    3546:	91 e0       	ldi	r25, 0x01	; 1
    3548:	89 27       	eor	r24, r25
    354a:	08 95       	ret
    354c:	80 e0       	ldi	r24, 0x00	; 0
}
    354e:	08 95       	ret

00003550 <twi_receive_byte>:

uint8_t twi_receive_byte(TWI_t* const TWI,
const uint16_t timeout_ms,
uint8_t* const data,
const uint8_t end_of_data)
{
    3550:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;
	
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
    3552:	84 81       	ldd	r24, Z+4	; 0x04
    3554:	8c 70       	andi	r24, 0x0C	; 12
    3556:	8c 30       	cpi	r24, 0x0C	; 12
    3558:	e1 f0       	breq	.+56     	; 0x3592 <twi_receive_byte+0x42>
		return false;
	}
	timeout_remaining = (timeout_ms * 100);
    355a:	34 e6       	ldi	r19, 0x64	; 100
    355c:	36 9f       	mul	r19, r22
    355e:	c0 01       	movw	r24, r0
    3560:	37 9f       	mul	r19, r23
    3562:	90 0d       	add	r25, r0
    3564:	11 24       	eor	r1, r1
	while (!(TWI->MASTER.STATUS & TWI_MASTER_RIF_bm) && timeout_remaining) {
    3566:	34 81       	ldd	r19, Z+4	; 0x04
    3568:	37 fd       	sbrc	r19, 7
    356a:	08 c0       	rjmp	.+16     	; 0x357c <twi_receive_byte+0x2c>
    356c:	00 97       	sbiw	r24, 0x00	; 0
    356e:	31 f0       	breq	.+12     	; 0x357c <twi_receive_byte+0x2c>
    3570:	3a e6       	ldi	r19, 0x6A	; 106
    3572:	3a 95       	dec	r19
    3574:	f1 f7       	brne	.-4      	; 0x3572 <twi_receive_byte+0x22>
    3576:	00 c0       	rjmp	.+0      	; 0x3578 <twi_receive_byte+0x28>
		_delay_us(10);
		timeout_remaining--;
    3578:	01 97       	sbiw	r24, 0x01	; 1
    357a:	f5 cf       	rjmp	.-22     	; 0x3566 <twi_receive_byte+0x16>
	}

	*data = TWI->MASTER.DATA;
    357c:	87 81       	ldd	r24, Z+7	; 0x07
    357e:	da 01       	movw	r26, r20
    3580:	8c 93       	st	X, r24

	if (end_of_data)
    3582:	22 23       	and	r18, r18
    3584:	11 f0       	breq	.+4      	; 0x358a <twi_receive_byte+0x3a>
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3586:	87 e0       	ldi	r24, 0x07	; 7
    3588:	01 c0       	rjmp	.+2      	; 0x358c <twi_receive_byte+0x3c>
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    358a:	82 e0       	ldi	r24, 0x02	; 2
    358c:	83 83       	std	Z+3, r24	; 0x03

	return true;
    358e:	81 e0       	ldi	r24, 0x01	; 1
    3590:	08 95       	ret
const uint8_t end_of_data)
{
	uint16_t timeout_remaining;
	
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
		return false;
    3592:	80 e0       	ldi	r24, 0x00	; 0
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

	return true;
}
    3594:	08 95       	ret

00003596 <twi_read_packet>:
const uint8_t slave_address,
const uint16_t timeout_ms,
const uint8_t reg,
uint8_t* data,
uint8_t length)
{
    3596:	8f 92       	push	r8
    3598:	9f 92       	push	r9
    359a:	af 92       	push	r10
    359c:	bf 92       	push	r11
    359e:	cf 92       	push	r12
    35a0:	df 92       	push	r13
    35a2:	ef 92       	push	r14
    35a4:	ff 92       	push	r15
    35a6:	0f 93       	push	r16
    35a8:	1f 93       	push	r17
    35aa:	cf 93       	push	r28
    35ac:	df 93       	push	r29
    35ae:	1f 92       	push	r1
    35b0:	cd b7       	in	r28, 0x3d	; 61
    35b2:	de b7       	in	r29, 0x3e	; 62
    35b4:	4c 01       	movw	r8, r24
    35b6:	f6 2e       	mov	r15, r22
    35b8:	6a 01       	movw	r12, r20
	uint8_t error_code;
	uint8_t len = length;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    35ba:	66 0f       	add	r22, r22
    35bc:	29 83       	std	Y+1, r18	; 0x01
    35be:	7f df       	rcall	.-258    	; 0x34be <twi_start_transmission>
    35c0:	29 81       	ldd	r18, Y+1	; 0x01
    35c2:	81 30       	cpi	r24, 0x01	; 1
    35c4:	41 f5       	brne	.+80     	; 0x3616 <twi_read_packet+0x80>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
    35c6:	42 2f       	mov	r20, r18
    35c8:	b6 01       	movw	r22, r12
    35ca:	c4 01       	movw	r24, r8
    35cc:	a3 df       	rcall	.-186    	; 0x3514 <twi_send_byte>
    35ce:	88 23       	and	r24, r24
    35d0:	21 f1       	breq	.+72     	; 0x361a <twi_read_packet+0x84>
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
    35d2:	6f 2d       	mov	r22, r15
    35d4:	66 0f       	add	r22, r22
    35d6:	61 60       	ori	r22, 0x01	; 1
    35d8:	a6 01       	movw	r20, r12
    35da:	c4 01       	movw	r24, r8
    35dc:	70 df       	rcall	.-288    	; 0x34be <twi_start_transmission>
    35de:	81 30       	cpi	r24, 0x01	; 1
    35e0:	21 f0       	breq	.+8      	; 0x35ea <twi_read_packet+0x54>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    35e2:	87 e0       	ldi	r24, 0x07	; 7
    35e4:	f4 01       	movw	r30, r8
    35e6:	83 83       	std	Z+3, r24	; 0x03
    35e8:	16 c0       	rjmp	.+44     	; 0x3616 <twi_read_packet+0x80>
    35ea:	ff 24       	eor	r15, r15
    35ec:	fa 94       	dec	r15
    35ee:	fe 0c       	add	r15, r14
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
		timeout_ms)) == TWI_ERROR_NO_ERROR)
		{
			while (length--)
    35f0:	8f ef       	ldi	r24, 0xFF	; 255
    35f2:	f8 16       	cp	r15, r24
    35f4:	b1 f3       	breq	.-20     	; 0x35e2 <twi_read_packet+0x4c>
			{
				if (!(twi_receive_byte(TWI, timeout_ms, data++, (length == 0))))
    35f6:	58 01       	movw	r10, r16
    35f8:	ff ef       	ldi	r31, 0xFF	; 255
    35fa:	af 1a       	sub	r10, r31
    35fc:	bf 0a       	sbc	r11, r31
    35fe:	21 e0       	ldi	r18, 0x01	; 1
    3600:	f1 10       	cpse	r15, r1
    3602:	20 e0       	ldi	r18, 0x00	; 0
    3604:	a8 01       	movw	r20, r16
    3606:	b6 01       	movw	r22, r12
    3608:	c4 01       	movw	r24, r8
    360a:	a2 df       	rcall	.-188    	; 0x3550 <twi_receive_byte>
    360c:	fa 94       	dec	r15
    360e:	88 23       	and	r24, r24
    3610:	41 f3       	breq	.-48     	; 0x35e2 <twi_read_packet+0x4c>
    3612:	85 01       	movw	r16, r10
    3614:	ed cf       	rjmp	.-38     	; 0x35f0 <twi_read_packet+0x5a>
		}

		twi_stop_transmission(TWI);
	}

	return len;
    3616:	8e 2d       	mov	r24, r14
    3618:	01 c0       	rjmp	.+2      	; 0x361c <twi_read_packet+0x86>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    361a:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return len;
}
    361c:	0f 90       	pop	r0
    361e:	df 91       	pop	r29
    3620:	cf 91       	pop	r28
    3622:	1f 91       	pop	r17
    3624:	0f 91       	pop	r16
    3626:	ff 90       	pop	r15
    3628:	ef 90       	pop	r14
    362a:	df 90       	pop	r13
    362c:	cf 90       	pop	r12
    362e:	bf 90       	pop	r11
    3630:	af 90       	pop	r10
    3632:	9f 90       	pop	r9
    3634:	8f 90       	pop	r8
    3636:	08 95       	ret

00003638 <twi_write_packet>:
const uint8_t slave_address,
const uint16_t timeout_ms,
const uint8_t reg,
const uint8_t* data,
uint8_t length)
{
    3638:	8f 92       	push	r8
    363a:	9f 92       	push	r9
    363c:	af 92       	push	r10
    363e:	bf 92       	push	r11
    3640:	cf 92       	push	r12
    3642:	df 92       	push	r13
    3644:	ef 92       	push	r14
    3646:	0f 93       	push	r16
    3648:	1f 93       	push	r17
    364a:	cf 93       	push	r28
    364c:	df 93       	push	r29
    364e:	1f 92       	push	r1
    3650:	cd b7       	in	r28, 0x3d	; 61
    3652:	de b7       	in	r29, 0x3e	; 62
    3654:	4c 01       	movw	r8, r24
    3656:	5a 01       	movw	r10, r20
	uint8_t error_code;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    3658:	66 0f       	add	r22, r22
    365a:	29 83       	std	Y+1, r18	; 0x01
    365c:	30 df       	rcall	.-416    	; 0x34be <twi_start_transmission>
    365e:	29 81       	ldd	r18, Y+1	; 0x01
    3660:	81 30       	cpi	r24, 0x01	; 1
    3662:	e1 f4       	brne	.+56     	; 0x369c <twi_write_packet+0x64>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
    3664:	42 2f       	mov	r20, r18
    3666:	b5 01       	movw	r22, r10
    3668:	c4 01       	movw	r24, r8
    366a:	54 df       	rcall	.-344    	; 0x3514 <twi_send_byte>
    366c:	88 23       	and	r24, r24
    366e:	c1 f0       	breq	.+48     	; 0x36a0 <twi_write_packet+0x68>
    3670:	68 01       	movw	r12, r16
    3672:	1f ef       	ldi	r17, 0xFF	; 255
    3674:	1e 0d       	add	r17, r14
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		while (length--)
    3676:	1f 3f       	cpi	r17, 0xFF	; 255
    3678:	61 f0       	breq	.+24     	; 0x3692 <twi_write_packet+0x5a>
		{
			if (!(twi_send_byte(TWI, timeout_ms, *(data++))))
    367a:	f6 01       	movw	r30, r12
    367c:	41 91       	ld	r20, Z+
    367e:	6f 01       	movw	r12, r30
    3680:	b5 01       	movw	r22, r10
    3682:	c4 01       	movw	r24, r8
    3684:	47 df       	rcall	.-370    	; 0x3514 <twi_send_byte>
    3686:	9f ef       	ldi	r25, 0xFF	; 255
    3688:	91 0f       	add	r25, r17
    368a:	88 23       	and	r24, r24
    368c:	11 f0       	breq	.+4      	; 0x3692 <twi_write_packet+0x5a>
    368e:	19 2f       	mov	r17, r25
    3690:	f2 cf       	rjmp	.-28     	; 0x3676 <twi_write_packet+0x3e>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3692:	87 e0       	ldi	r24, 0x07	; 7
    3694:	f4 01       	movw	r30, r8
    3696:	83 83       	std	Z+3, r24	; 0x03
    3698:	81 2f       	mov	r24, r17
    369a:	03 c0       	rjmp	.+6      	; 0x36a2 <twi_write_packet+0x6a>
    369c:	8e 2d       	mov	r24, r14
    369e:	01 c0       	rjmp	.+2      	; 0x36a2 <twi_write_packet+0x6a>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    36a0:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return length;
    36a2:	0f 90       	pop	r0
    36a4:	df 91       	pop	r29
    36a6:	cf 91       	pop	r28
    36a8:	1f 91       	pop	r17
    36aa:	0f 91       	pop	r16
    36ac:	ef 90       	pop	r14
    36ae:	df 90       	pop	r13
    36b0:	cf 90       	pop	r12
    36b2:	bf 90       	pop	r11
    36b4:	af 90       	pop	r10
    36b6:	9f 90       	pop	r9
    36b8:	8f 90       	pop	r8
    36ba:	08 95       	ret

000036bc <uart_setup>:

char uart_get_char(void) 
{
	while (!(USARTD0.STATUS & USART_RXCIF_bm));
	return USARTD0.DATA;
}
    36bc:	e0 e7       	ldi	r30, 0x70	; 112
    36be:	f0 e0       	ldi	r31, 0x00	; 0
    36c0:	84 81       	ldd	r24, Z+4	; 0x04
    36c2:	8f 7e       	andi	r24, 0xEF	; 239
    36c4:	84 83       	std	Z+4, r24	; 0x04
    36c6:	e0 e6       	ldi	r30, 0x60	; 96
    36c8:	f6 e0       	ldi	r31, 0x06	; 6
    36ca:	84 e0       	ldi	r24, 0x04	; 4
    36cc:	82 83       	std	Z+2, r24	; 0x02
    36ce:	88 e0       	ldi	r24, 0x08	; 8
    36d0:	81 83       	std	Z+1, r24	; 0x01
    36d2:	88 e1       	ldi	r24, 0x18	; 24
    36d4:	82 8b       	std	Z+18, r24	; 0x12
    36d6:	83 8b       	std	Z+19, r24	; 0x13
    36d8:	e0 ea       	ldi	r30, 0xA0	; 160
    36da:	f9 e0       	ldi	r31, 0x09	; 9
    36dc:	90 e2       	ldi	r25, 0x20	; 32
    36de:	93 83       	std	Z+3, r25	; 0x03
    36e0:	9e e2       	ldi	r25, 0x2E	; 46
    36e2:	96 83       	std	Z+6, r25	; 0x06
    36e4:	98 e9       	ldi	r25, 0x98	; 152
    36e6:	97 83       	std	Z+7, r25	; 0x07
    36e8:	93 e0       	ldi	r25, 0x03	; 3
    36ea:	95 83       	std	Z+5, r25	; 0x05
    36ec:	84 83       	std	Z+4, r24	; 0x04
    36ee:	08 95       	ret

000036f0 <uart_setup_debug>:
    36f0:	e0 e7       	ldi	r30, 0x70	; 112
    36f2:	f0 e0       	ldi	r31, 0x00	; 0
    36f4:	84 81       	ldd	r24, Z+4	; 0x04
    36f6:	8f 7d       	andi	r24, 0xDF	; 223
    36f8:	84 83       	std	Z+4, r24	; 0x04
    36fa:	e0 e6       	ldi	r30, 0x60	; 96
    36fc:	f6 e0       	ldi	r31, 0x06	; 6
    36fe:	80 e4       	ldi	r24, 0x40	; 64
    3700:	82 83       	std	Z+2, r24	; 0x02
    3702:	80 e8       	ldi	r24, 0x80	; 128
    3704:	81 83       	std	Z+1, r24	; 0x01
    3706:	88 e1       	ldi	r24, 0x18	; 24
    3708:	86 8b       	std	Z+22, r24	; 0x16
    370a:	87 8b       	std	Z+23, r24	; 0x17
    370c:	e0 eb       	ldi	r30, 0xB0	; 176
    370e:	f9 e0       	ldi	r31, 0x09	; 9
    3710:	13 82       	std	Z+3, r1	; 0x03
    3712:	9e e2       	ldi	r25, 0x2E	; 46
    3714:	96 83       	std	Z+6, r25	; 0x06
    3716:	98 e9       	ldi	r25, 0x98	; 152
    3718:	97 83       	std	Z+7, r25	; 0x07
    371a:	93 e0       	ldi	r25, 0x03	; 3
    371c:	95 83       	std	Z+5, r25	; 0x05
    371e:	84 83       	std	Z+4, r24	; 0x04
    3720:	08 95       	ret

00003722 <uart_disable>:
    3722:	e0 ea       	ldi	r30, 0xA0	; 160
    3724:	f9 e0       	ldi	r31, 0x09	; 9
    3726:	14 82       	std	Z+4, r1	; 0x04
    3728:	e0 e6       	ldi	r30, 0x60	; 96
    372a:	f6 e0       	ldi	r31, 0x06	; 6
    372c:	8c e0       	ldi	r24, 0x0C	; 12
    372e:	82 83       	std	Z+2, r24	; 0x02
    3730:	80 e1       	ldi	r24, 0x10	; 16
    3732:	82 8b       	std	Z+18, r24	; 0x12
    3734:	83 8b       	std	Z+19, r24	; 0x13
    3736:	e0 e7       	ldi	r30, 0x70	; 112
    3738:	f0 e0       	ldi	r31, 0x00	; 0
    373a:	84 81       	ldd	r24, Z+4	; 0x04
    373c:	80 61       	ori	r24, 0x10	; 16
    373e:	84 83       	std	Z+4, r24	; 0x04
    3740:	08 95       	ret

00003742 <uart_put_char>:
    3742:	90 91 a1 09 	lds	r25, 0x09A1
    3746:	95 ff       	sbrs	r25, 5
    3748:	fc cf       	rjmp	.-8      	; 0x3742 <uart_put_char>
    374a:	80 93 a0 09 	sts	0x09A0, r24
    374e:	08 95       	ret

00003750 <uart_put_char_debug>:

void uart_put_char_debug(char c)
{
	while (!(USARTD1.STATUS & USART_DREIF_bm));
    3750:	90 91 b1 09 	lds	r25, 0x09B1
    3754:	95 ff       	sbrs	r25, 5
    3756:	fc cf       	rjmp	.-8      	; 0x3750 <uart_put_char_debug>
	USARTD1.DATA = c;
    3758:	80 93 b0 09 	sts	0x09B0, r24
    375c:	08 95       	ret

0000375e <uart_get_char_debug>:
}

char uart_get_char_debug(void)
{
	while (!(USARTD1.STATUS & USART_RXCIF_bm));
    375e:	80 91 b1 09 	lds	r24, 0x09B1
    3762:	87 ff       	sbrs	r24, 7
    3764:	fc cf       	rjmp	.-8      	; 0x375e <uart_get_char_debug>
	return USARTD1.DATA;
    3766:	80 91 b0 09 	lds	r24, 0x09B0
}
    376a:	08 95       	ret

0000376c <__vector_18>:
	dac_setup(false);
	timer_setup();
}

ISR(TCC0_CCC_vect) 
{
    376c:	1f 92       	push	r1
    376e:	0f 92       	push	r0
    3770:	0f b6       	in	r0, 0x3f	; 63
    3772:	0f 92       	push	r0
    3774:	11 24       	eor	r1, r1
    3776:	08 b6       	in	r0, 0x38	; 56
    3778:	0f 92       	push	r0
    377a:	18 be       	out	0x38, r1	; 56
    377c:	8f 93       	push	r24
    377e:	9f 93       	push	r25
	if (test_val == 1)
    3780:	80 91 91 2e 	lds	r24, 0x2E91
    3784:	90 91 92 2e 	lds	r25, 0x2E92
    3788:	01 97       	sbiw	r24, 0x01	; 1
    378a:	59 f4       	brne	.+22     	; 0x37a2 <__vector_18+0x36>
	{
		DACB.CH0DATA = 0xfff;
    378c:	8f ef       	ldi	r24, 0xFF	; 255
    378e:	9f e0       	ldi	r25, 0x0F	; 15
    3790:	80 93 38 03 	sts	0x0338, r24
    3794:	90 93 39 03 	sts	0x0339, r25
		test_val = 0;
    3798:	10 92 91 2e 	sts	0x2E91, r1
    379c:	10 92 92 2e 	sts	0x2E92, r1
    37a0:	0a c0       	rjmp	.+20     	; 0x37b6 <__vector_18+0x4a>
	} else {
		DACB.CH0DATA = 0x000;
    37a2:	10 92 38 03 	sts	0x0338, r1
    37a6:	10 92 39 03 	sts	0x0339, r1
		test_val = 1;
    37aa:	81 e0       	ldi	r24, 0x01	; 1
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	80 93 91 2e 	sts	0x2E91, r24
    37b2:	90 93 92 2e 	sts	0x2E92, r25
	}
	
}
    37b6:	9f 91       	pop	r25
    37b8:	8f 91       	pop	r24
    37ba:	0f 90       	pop	r0
    37bc:	08 be       	out	0x38, r0	; 56
    37be:	0f 90       	pop	r0
    37c0:	0f be       	out	0x3f, r0	; 63
    37c2:	0f 90       	pop	r0
    37c4:	1f 90       	pop	r1
    37c6:	18 95       	reti

000037c8 <main>:
	asm("sleep");
	while(1);
}

int main(void) 
{	
    37c8:	cf 93       	push	r28
    37ca:	df 93       	push	r29
    37cc:	cd b7       	in	r28, 0x3d	; 61
    37ce:	de b7       	in	r29, 0x3e	; 62
    37d0:	64 97       	sbiw	r28, 0x14	; 20
    37d2:	cd bf       	out	0x3d, r28	; 61
    37d4:	de bf       	out	0x3e, r29	; 62
	//Structures
	SI114X_IRQ_SAMPLE sensor_data;
	
	//System
	clock_setup_32_mhz();
    37d6:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <clock_setup_32_mhz>
	
	lowpower_setup();
    37da:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <lowpower_setup>
	display_setup();	
    37de:	26 d1       	rcall	.+588    	; 0x3a2c <display_setup>
	spi_disable();
    37e0:	38 de       	rcall	.-912    	; 0x3452 <spi_disable>
	uart_disable();
    37e2:	9f df       	rcall	.-194    	; 0x3722 <uart_disable>
	btn_setup(POLL_MODE);
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <btn_setup>
	
	SLEEP.CTRL |= SLEEP_MODE_PWR_SAVE;
    37ea:	80 91 48 00 	lds	r24, 0x0048
    37ee:	86 60       	ori	r24, 0x06	; 6
    37f0:	80 93 48 00 	sts	0x0048, r24
	
	//Init env variables
	btn_status = btn_check_press();
    37f4:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <btn_check_press>
    37f8:	80 93 12 3c 	sts	0x3C12, r24
	
	if (!EEPROM_ReadEnv() || (btn_status == BTN1)) {
    37fc:	0e 94 86 09 	call	0x130c	; 0x130c <EEPROM_ReadEnv>
    3800:	88 23       	and	r24, r24
    3802:	21 f0       	breq	.+8      	; 0x380c <main+0x44>
    3804:	80 91 12 3c 	lds	r24, 0x3C12
    3808:	81 30       	cpi	r24, 0x01	; 1
    380a:	11 f4       	brne	.+4      	; 0x3810 <main+0x48>
		menu_set_env_variables();
    380c:	0e 94 6a 54 	call	0xa8d4	; 0xa8d4 <menu_set_env_variables>
	} 
	
	//Debug interface
#ifdef DEBUG_ON
	uart_setup_debug();
    3810:	6f df       	rcall	.-290    	; 0x36f0 <uart_setup_debug>
	stdout = stdin = &mystdout;
    3812:	81 e1       	ldi	r24, 0x11	; 17
    3814:	90 e2       	ldi	r25, 0x20	; 32
    3816:	80 93 51 3d 	sts	0x3D51, r24
    381a:	90 93 52 3d 	sts	0x3D52, r25
    381e:	80 93 53 3d 	sts	0x3D53, r24
    3822:	90 93 54 3d 	sts	0x3D54, r25
	puts("- SQUARECLOCK - By: Erlend Hestnes (2016)\r\n");
    3826:	86 ee       	ldi	r24, 0xE6	; 230
    3828:	92 e2       	ldi	r25, 0x22	; 34
    382a:	0e 94 ab 65 	call	0xcb56	; 0xcb56 <puts>
#endif
	puts("Configure UART driver...\r\n");
    382e:	82 e1       	ldi	r24, 0x12	; 18
    3830:	93 e2       	ldi	r25, 0x23	; 35
    3832:	0e 94 ab 65 	call	0xcb56	; 0xcb56 <puts>
	uart_setup();
    3836:	42 df       	rcall	.-380    	; 0x36bc <uart_setup>
	puts("Success!");
    3838:	8d e2       	ldi	r24, 0x2D	; 45
    383a:	93 e2       	ldi	r25, 0x23	; 35
    383c:	0e 94 ab 65 	call	0xcb56	; 0xcb56 <puts>

	//Enable interrupts
	puts("Enable interrupts...\r\n");
    3840:	86 e3       	ldi	r24, 0x36	; 54
    3842:	93 e2       	ldi	r25, 0x23	; 35
    3844:	0e 94 ab 65 	call	0xcb56	; 0xcb56 <puts>

static FILE mystdout = FDEV_SETUP_STREAM(uart_put_char_debug,uart_get_char_debug,_FDEV_SETUP_WRITE);

void pmic_setup(void) 
{
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    3848:	87 e0       	ldi	r24, 0x07	; 7
    384a:	80 93 a2 00 	sts	0x00A2, r24
	puts("Success!");

	//Enable interrupts
	puts("Enable interrupts...\r\n");
	pmic_setup();
	sei();
    384e:	78 94       	sei
	puts("Success!");
    3850:	8d e2       	ldi	r24, 0x2D	; 45
    3852:	93 e2       	ldi	r25, 0x23	; 35
    3854:	0e 94 ab 65 	call	0xcb56	; 0xcb56 <puts>

	//Configure WIFI buffers
	puts("Configure ESP8266 driver...\r\n");
    3858:	8d e4       	ldi	r24, 0x4D	; 77
    385a:	93 e2       	ldi	r25, 0x23	; 35
    385c:	0e 94 ab 65 	call	0xcb56	; 0xcb56 <puts>
	menu_esp8266_setup();
    3860:	0e 94 52 52 	call	0xa4a4	; 0xa4a4 <menu_esp8266_setup>
	puts("Success!");
    3864:	8d e2       	ldi	r24, 0x2D	; 45
    3866:	93 e2       	ldi	r25, 0x23	; 35
    3868:	0e 94 ab 65 	call	0xcb56	; 0xcb56 <puts>
	
	//Turn on proximity channel 1 with ISR and threshold
	twi_setup(&TWIC);
    386c:	80 e8       	ldi	r24, 0x80	; 128
    386e:	94 e0       	ldi	r25, 0x04	; 4
    3870:	17 de       	rcall	.-978    	; 0x34a0 <twi_setup>

#ifdef IR_SLIDER_ALGORITHM
	si114x_baseline_calibration(&sensor_data);
    3872:	ce 01       	movw	r24, r28
    3874:	01 96       	adiw	r24, 0x01	; 1
    3876:	0e 94 78 13 	call	0x26f0	; 0x26f0 <si114x_baseline_calibration>
#endif
	
	si114x_setup_ps1();
    387a:	0e 94 93 12 	call	0x2526	; 0x2526 <si114x_setup_ps1>
	//	printf("ALS: %d, IR: %d, PS1: %d \r\n",sensor_data.vis, sensor_data.ir, sensor_data.ps1);
	//	_delay_ms(200);
	//}
	
	//Turn on RTC
	display_fade(0);
    387e:	80 e0       	ldi	r24, 0x00	; 0
    3880:	ef d0       	rcall	.+478    	; 0x3a60 <display_fade>
	rtc_enable_time_render();
    3882:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <rtc_enable_time_render>
	display_refresh_screen();
    3886:	ea d0       	rcall	.+468    	; 0x3a5c <display_refresh_screen>
	rtc_setup();
    3888:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <rtc_setup>
	
	EEPROM_WriteEnv();
    388c:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <EEPROM_WriteEnv>
	
	//This should flip MOSI and SCK, if DMA should be used at some point...
	//PORTC.REMAP |= PORT_SPI_bm;
	
	bool led_on = true;
    3890:	ff 24       	eor	r15, r15
    3892:	f3 94       	inc	r15
				_delay_ms(1000);
			}
			btn_status = NO_BTN;
			led_on ^= true;
		} else if (alarm_status == ALARM_TRIGGERED) {
			alarm_status = ALARM_OFF;
    3894:	82 e0       	ldi	r24, 0x02	; 2
    3896:	e8 2e       	mov	r14, r24
			} else {
				display_on();
				_delay_ms(1000);
			}
			btn_status = NO_BTN;
			led_on ^= true;
    3898:	dd 24       	eor	r13, r13
    389a:	d3 94       	inc	r13
	//PORTC.REMAP |= PORT_SPI_bm;
	
	bool led_on = true;
	
	while (1) { 	
		if (si114x_status == PS1_INT) {
    389c:	80 91 13 3c 	lds	r24, 0x3C13
    38a0:	84 30       	cpi	r24, 0x04	; 4
    38a2:	09 f0       	breq	.+2      	; 0x38a6 <main+0xde>
    38a4:	40 c0       	rjmp	.+128    	; 0x3926 <main+0x15e>
			uint16_t cnt = 0;
			bool timeout = false;
			env.menu_id = 0;
    38a6:	10 92 7d 3a 	sts	0x3A7D, r1
			
			btn_disable_si114x_interrupt();
    38aa:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <btn_disable_si114x_interrupt>
			
			display_fade(MAX_BRIGHTNESS);
    38ae:	88 e0       	ldi	r24, 0x08	; 8
    38b0:	d7 d0       	rcall	.+430    	; 0x3a60 <display_fade>
#ifdef DEBUG_ON
			puts("DEBUG: Entered gesture mode.");
    38b2:	8b e6       	ldi	r24, 0x6B	; 107
    38b4:	93 e2       	ldi	r25, 0x23	; 35
    38b6:	0e 94 ab 65 	call	0xcb56	; 0xcb56 <puts>
#endif
			si114x_setup();
    38ba:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <si114x_setup>
	
	bool led_on = true;
	
	while (1) { 	
		if (si114x_status == PS1_INT) {
			uint16_t cnt = 0;
    38be:	00 e0       	ldi	r16, 0x00	; 0
    38c0:	10 e0       	ldi	r17, 0x00	; 0
#endif
			si114x_setup();
			//_delay_ms(250);
			
			while(!timeout) {
				si114x_get_data(&sensor_data);
    38c2:	ce 01       	movw	r24, r28
    38c4:	01 96       	adiw	r24, 0x01	; 1
    38c6:	0e 94 b9 10 	call	0x2172	; 0x2172 <si114x_get_data>
#ifdef IR_SLIDER_ALGORITHM
				si114x_process_samples((HANDLE)SI114X_ADDR,&sensor_data);
    38ca:	be 01       	movw	r22, r28
    38cc:	6f 5f       	subi	r22, 0xFF	; 255
    38ce:	7f 4f       	sbci	r23, 0xFF	; 255
    38d0:	8a e5       	ldi	r24, 0x5A	; 90
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	32 d9       	rcall	.-3484   	; 0x2b3a <si114x_process_samples>
#else
				slider_algorithm_v2((HANDLE)SI114X_ADDR,&sensor_data,1);
#endif
				menu_state_machine(&sensor_data);
    38d6:	ce 01       	movw	r24, r28
    38d8:	01 96       	adiw	r24, 0x01	; 1
    38da:	0e 94 75 58 	call	0xb0ea	; 0xb0ea <menu_state_machine>
				
				if (sensor_data.ps1 < PROXIMITY_THRESHOLD2) {
    38de:	8b 85       	ldd	r24, Y+11	; 0x0b
    38e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    38e2:	88 3e       	cpi	r24, 0xE8	; 232
    38e4:	93 40       	sbci	r25, 0x03	; 3
    38e6:	20 f0       	brcs	.+8      	; 0x38f0 <main+0x128>
					if (cnt++ > MENU_TIMEOUT) {
						timeout = true;
					}
				} else {
					cnt = 0;
    38e8:	80 e0       	ldi	r24, 0x00	; 0
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	8c 01       	movw	r16, r24
    38ee:	e9 cf       	rjmp	.-46     	; 0x38c2 <main+0xfa>
				slider_algorithm_v2((HANDLE)SI114X_ADDR,&sensor_data,1);
#endif
				menu_state_machine(&sensor_data);
				
				if (sensor_data.ps1 < PROXIMITY_THRESHOLD2) {
					if (cnt++ > MENU_TIMEOUT) {
    38f0:	c8 01       	movw	r24, r16
    38f2:	01 96       	adiw	r24, 0x01	; 1
			puts("DEBUG: Entered gesture mode.");
#endif
			si114x_setup();
			//_delay_ms(250);
			
			while(!timeout) {
    38f4:	01 3e       	cpi	r16, 0xE1	; 225
    38f6:	1e 42       	sbci	r17, 0x2E	; 46
    38f8:	c8 f3       	brcs	.-14     	; 0x38ec <main+0x124>
					cnt = 0;
				}
				
			}
			//WARNING: Should not write too often to EEPROM
		    EEPROM_WriteEnv();
    38fa:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <EEPROM_WriteEnv>
#ifdef DEBUG_ON
			puts("DEBUG: Timeout! Leaving gesture mode.");
    38fe:	88 e8       	ldi	r24, 0x88	; 136
    3900:	93 e2       	ldi	r25, 0x23	; 35
    3902:	0e 94 ab 65 	call	0xcb56	; 0xcb56 <puts>
#endif
			if (env.menu_id != 0) {
    3906:	80 91 7d 3a 	lds	r24, 0x3A7D
    390a:	88 23       	and	r24, r24
    390c:	21 f0       	breq	.+8      	; 0x3916 <main+0x14e>
				display_slide_out_to_bottom();
    390e:	c0 d4       	rcall	.+2432   	; 0x4290 <display_slide_out_to_bottom>
				rtc_enable_time_render();
    3910:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <rtc_enable_time_render>
				display_slide_in_from_top();
    3914:	9d d4       	rcall	.+2362   	; 0x4250 <display_slide_in_from_top>
			}
			display_fade(env.brightness);
    3916:	80 91 7f 3a 	lds	r24, 0x3A7F
    391a:	a2 d0       	rcall	.+324    	; 0x3a60 <display_fade>
			btn_si114x_enable_interrupt();
    391c:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <btn_si114x_enable_interrupt>
			si114x_setup_ps1();
    3920:	0e 94 93 12 	call	0x2526	; 0x2526 <si114x_setup_ps1>
    3924:	27 c0       	rjmp	.+78     	; 0x3974 <main+0x1ac>
		} else if (si114x_status == ALS_INT_1) {
    3926:	80 91 13 3c 	lds	r24, 0x3C13
    392a:	81 30       	cpi	r24, 0x01	; 1
    392c:	29 f4       	brne	.+10     	; 0x3938 <main+0x170>
			//Dim light by using the light sensor
#ifdef DEBUG_ON
			puts("DEBUG: Somebody turned off the lights!");
    392e:	8e ea       	ldi	r24, 0xAE	; 174
    3930:	93 e2       	ldi	r25, 0x23	; 35
    3932:	0e 94 ab 65 	call	0xcb56	; 0xcb56 <puts>
    3936:	1e c0       	rjmp	.+60     	; 0x3974 <main+0x1ac>
#endif
		} else if (btn_status == BTN4) {
    3938:	80 91 12 3c 	lds	r24, 0x3C12
    393c:	84 30       	cpi	r24, 0x04	; 4
    393e:	91 f4       	brne	.+36     	; 0x3964 <main+0x19c>
			if (led_on) {
    3940:	ff 20       	and	r15, r15
    3942:	11 f0       	breq	.+4      	; 0x3948 <main+0x180>
				display_off();
    3944:	9f d4       	rcall	.+2366   	; 0x4284 <display_off>
    3946:	01 c0       	rjmp	.+2      	; 0x394a <main+0x182>
				_delay_ms(1000);
			} else {
				display_on();
    3948:	7c d0       	rcall	.+248    	; 0x3a42 <display_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    394a:	8f ef       	ldi	r24, 0xFF	; 255
    394c:	97 ea       	ldi	r25, 0xA7	; 167
    394e:	21 e6       	ldi	r18, 0x61	; 97
    3950:	81 50       	subi	r24, 0x01	; 1
    3952:	90 40       	sbci	r25, 0x00	; 0
    3954:	20 40       	sbci	r18, 0x00	; 0
    3956:	e1 f7       	brne	.-8      	; 0x3950 <main+0x188>
    3958:	00 c0       	rjmp	.+0      	; 0x395a <main+0x192>
    395a:	00 00       	nop
				_delay_ms(1000);
			}
			btn_status = NO_BTN;
    395c:	10 92 12 3c 	sts	0x3C12, r1
			led_on ^= true;
    3960:	fd 24       	eor	r15, r13
    3962:	08 c0       	rjmp	.+16     	; 0x3974 <main+0x1ac>
		} else if (alarm_status == ALARM_TRIGGERED) {
    3964:	80 91 f1 3b 	lds	r24, 0x3BF1
    3968:	81 11       	cpse	r24, r1
    396a:	04 c0       	rjmp	.+8      	; 0x3974 <main+0x1ac>
			alarm_status = ALARM_OFF;
    396c:	e0 92 f1 3b 	sts	0x3BF1, r14
			menu_alarm();
    3970:	0e 94 d8 54 	call	0xa9b0	; 0xa9b0 <menu_alarm>
		}
		
		si114x_status = 0;
    3974:	10 92 13 3c 	sts	0x3C13, r1
		
		SLEEP.CTRL |= SLEEP_SEN_bm;
    3978:	80 91 48 00 	lds	r24, 0x0048
    397c:	81 60       	ori	r24, 0x01	; 1
    397e:	80 93 48 00 	sts	0x0048, r24
		asm("sleep");
    3982:	88 95       	sleep
	}
    3984:	8b cf       	rjmp	.-234    	; 0x389c <main+0xd4>

00003986 <itoa_simple.constprop.1>:
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    3986:	8f 92       	push	r8
    3988:	9f 92       	push	r9
    398a:	af 92       	push	r10
    398c:	bf 92       	push	r11
    398e:	ef 92       	push	r14
    3990:	ff 92       	push	r15
    3992:	0f 93       	push	r16
    3994:	1f 93       	push	r17
    3996:	cf 93       	push	r28
    3998:	df 93       	push	r29
    399a:	97 fd       	sbrc	r25, 7
    399c:	03 c0       	rjmp	.+6      	; 0x39a4 <itoa_simple.constprop.1+0x1e>
    399e:	c0 e0       	ldi	r28, 0x00	; 0
    39a0:	d0 e0       	ldi	r29, 0x00	; 0
    39a2:	0b c0       	rjmp	.+22     	; 0x39ba <itoa_simple.constprop.1+0x34>
    39a4:	90 95       	com	r25
    39a6:	80 95       	com	r24
    39a8:	70 95       	com	r23
    39aa:	61 95       	neg	r22
    39ac:	7f 4f       	sbci	r23, 0xFF	; 255
    39ae:	8f 4f       	sbci	r24, 0xFF	; 255
    39b0:	9f 4f       	sbci	r25, 0xFF	; 255
    39b2:	2d e2       	ldi	r18, 0x2D	; 45
    39b4:	20 b9       	out	0x00, r18	; 0
    39b6:	c1 e0       	ldi	r28, 0x01	; 1
    39b8:	d0 e0       	ldi	r29, 0x00	; 0
    39ba:	7e 01       	movw	r14, r28
    39bc:	2a e0       	ldi	r18, 0x0A	; 10
    39be:	82 2e       	mov	r8, r18
    39c0:	91 2c       	mov	r9, r1
    39c2:	a1 2c       	mov	r10, r1
    39c4:	b1 2c       	mov	r11, r1
    39c6:	87 01       	movw	r16, r14
    39c8:	0f 5f       	subi	r16, 0xFF	; 255
    39ca:	1f 4f       	sbci	r17, 0xFF	; 255
    39cc:	a5 01       	movw	r20, r10
    39ce:	94 01       	movw	r18, r8
    39d0:	0e 94 4c 62 	call	0xc498	; 0xc498 <__udivmodsi4>
    39d4:	60 5d       	subi	r22, 0xD0	; 208
    39d6:	f7 01       	movw	r30, r14
    39d8:	60 83       	st	Z, r22
    39da:	b9 01       	movw	r22, r18
    39dc:	ca 01       	movw	r24, r20
    39de:	61 15       	cp	r22, r1
    39e0:	71 05       	cpc	r23, r1
    39e2:	81 05       	cpc	r24, r1
    39e4:	91 05       	cpc	r25, r1
    39e6:	11 f0       	breq	.+4      	; 0x39ec <itoa_simple.constprop.1+0x66>
    39e8:	78 01       	movw	r14, r16
    39ea:	ed cf       	rjmp	.-38     	; 0x39c6 <itoa_simple.constprop.1+0x40>
    39ec:	d8 01       	movw	r26, r16
    39ee:	ac 1b       	sub	r26, r28
    39f0:	bd 0b       	sbc	r27, r29
    39f2:	cd 01       	movw	r24, r26
    39f4:	01 97       	sbiw	r24, 0x01	; 1
    39f6:	ac 0f       	add	r26, r28
    39f8:	bd 1f       	adc	r27, r29
    39fa:	fe 01       	movw	r30, r28
    39fc:	9f 01       	movw	r18, r30
    39fe:	2c 1b       	sub	r18, r28
    3a00:	3d 0b       	sbc	r19, r29
    3a02:	28 17       	cp	r18, r24
    3a04:	39 07       	cpc	r19, r25
    3a06:	34 f4       	brge	.+12     	; 0x3a14 <itoa_simple.constprop.1+0x8e>
    3a08:	20 81       	ld	r18, Z
    3a0a:	3e 91       	ld	r19, -X
    3a0c:	31 93       	st	Z+, r19
    3a0e:	2c 93       	st	X, r18
    3a10:	01 97       	sbiw	r24, 0x01	; 1
    3a12:	f4 cf       	rjmp	.-24     	; 0x39fc <itoa_simple.constprop.1+0x76>
    3a14:	c8 01       	movw	r24, r16
    3a16:	df 91       	pop	r29
    3a18:	cf 91       	pop	r28
    3a1a:	1f 91       	pop	r17
    3a1c:	0f 91       	pop	r16
    3a1e:	ff 90       	pop	r15
    3a20:	ef 90       	pop	r14
    3a22:	bf 90       	pop	r11
    3a24:	af 90       	pop	r10
    3a26:	9f 90       	pop	r9
    3a28:	8f 90       	pop	r8
    3a2a:	08 95       	ret

00003a2c <display_setup>:
    3a2c:	84 e2       	ldi	r24, 0x24	; 36
    3a2e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <ht1632c_setup>
    3a32:	8f e0       	ldi	r24, 0x0F	; 15
    3a34:	0e 94 75 0a 	call	0x14ea	; 0x14ea <ht1632c_set_brightness>
    3a38:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <ht1632c_clear_screen>
    3a3c:	83 e0       	ldi	r24, 0x03	; 3
    3a3e:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <ht1632c_write_command>

00003a42 <display_on>:
    3a42:	83 e0       	ldi	r24, 0x03	; 3
    3a44:	0e 94 3e 0a 	call	0x147c	; 0x147c <ht1632c_write_command>
    3a48:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <rtc_enable_time_render>
    3a4c:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <ht1632c_slide_in_from_top>

00003a50 <display_fill_screen>:
    3a50:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <ht1632c_fill_screen>

00003a54 <display_clear_screen>:
    3a54:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <ht1632c_clear_screen>

00003a58 <display_clear_buffer>:
    3a58:	0c 94 f3 09 	jmp	0x13e6	; 0x13e6 <ht1632c_clear_buffer>

00003a5c <display_refresh_screen>:
    3a5c:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <ht1632c_refresh_screen>

00003a60 <display_fade>:
    3a60:	1f 93       	push	r17
    3a62:	cf 93       	push	r28
    3a64:	df 93       	push	r29
    3a66:	c8 2f       	mov	r28, r24
    3a68:	d0 91 22 20 	lds	r29, 0x2022
    3a6c:	d8 17       	cp	r29, r24
    3a6e:	c8 f4       	brcc	.+50     	; 0x3aa2 <display_fade+0x42>
    3a70:	df 5f       	subi	r29, 0xFF	; 255
    3a72:	11 e0       	ldi	r17, 0x01	; 1
    3a74:	18 0f       	add	r17, r24
    3a76:	d1 17       	cp	r29, r17
    3a78:	71 f0       	breq	.+28     	; 0x3a96 <display_fade+0x36>
    3a7a:	8d 2f       	mov	r24, r29
    3a7c:	0e 94 75 0a 	call	0x14ea	; 0x14ea <ht1632c_set_brightness>
    3a80:	2f ef       	ldi	r18, 0xFF	; 255
    3a82:	86 e7       	ldi	r24, 0x76	; 118
    3a84:	91 e0       	ldi	r25, 0x01	; 1
    3a86:	21 50       	subi	r18, 0x01	; 1
    3a88:	80 40       	sbci	r24, 0x00	; 0
    3a8a:	90 40       	sbci	r25, 0x00	; 0
    3a8c:	e1 f7       	brne	.-8      	; 0x3a86 <display_fade+0x26>
    3a8e:	00 c0       	rjmp	.+0      	; 0x3a90 <display_fade+0x30>
    3a90:	00 00       	nop
    3a92:	df 5f       	subi	r29, 0xFF	; 255
    3a94:	f0 cf       	rjmp	.-32     	; 0x3a76 <display_fade+0x16>
    3a96:	c0 93 22 20 	sts	0x2022, r28
    3a9a:	df 91       	pop	r29
    3a9c:	cf 91       	pop	r28
    3a9e:	1f 91       	pop	r17
    3aa0:	08 95       	ret
    3aa2:	8d 17       	cp	r24, r29
    3aa4:	c0 f7       	brcc	.-16     	; 0x3a96 <display_fade+0x36>
    3aa6:	d1 50       	subi	r29, 0x01	; 1
    3aa8:	1f ef       	ldi	r17, 0xFF	; 255
    3aaa:	18 0f       	add	r17, r24
    3aac:	d1 17       	cp	r29, r17
    3aae:	99 f3       	breq	.-26     	; 0x3a96 <display_fade+0x36>
    3ab0:	8d 2f       	mov	r24, r29
    3ab2:	0e 94 75 0a 	call	0x14ea	; 0x14ea <ht1632c_set_brightness>
    3ab6:	2f ef       	ldi	r18, 0xFF	; 255
    3ab8:	86 e7       	ldi	r24, 0x76	; 118
    3aba:	91 e0       	ldi	r25, 0x01	; 1
    3abc:	21 50       	subi	r18, 0x01	; 1
    3abe:	80 40       	sbci	r24, 0x00	; 0
    3ac0:	90 40       	sbci	r25, 0x00	; 0
    3ac2:	e1 f7       	brne	.-8      	; 0x3abc <display_fade+0x5c>
    3ac4:	00 c0       	rjmp	.+0      	; 0x3ac6 <display_fade+0x66>
    3ac6:	00 00       	nop
    3ac8:	d1 50       	subi	r29, 0x01	; 1
    3aca:	f0 cf       	rjmp	.-32     	; 0x3aac <display_fade+0x4c>

00003acc <display_fade_blink>:
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	c8 df       	rcall	.-112    	; 0x3a60 <display_fade>
    3ad0:	8f e0       	ldi	r24, 0x0F	; 15
    3ad2:	c6 df       	rcall	.-116    	; 0x3a60 <display_fade>
    3ad4:	81 e0       	ldi	r24, 0x01	; 1
    3ad6:	c4 df       	rcall	.-120    	; 0x3a60 <display_fade>
    3ad8:	8f e0       	ldi	r24, 0x0F	; 15
    3ada:	c2 cf       	rjmp	.-124    	; 0x3a60 <display_fade>

00003adc <display_draw_pixel>:
    3adc:	9c 01       	movw	r18, r24
    3ade:	80 31       	cpi	r24, 0x10	; 16
    3ae0:	91 05       	cpc	r25, r1
    3ae2:	a4 f5       	brge	.+104    	; 0x3b4c <display_draw_pixel+0x70>
    3ae4:	60 31       	cpi	r22, 0x10	; 16
    3ae6:	71 05       	cpc	r23, r1
    3ae8:	8c f5       	brge	.+98     	; 0x3b4c <display_draw_pixel+0x70>
    3aea:	8f e0       	ldi	r24, 0x0F	; 15
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	86 1b       	sub	r24, r22
    3af0:	97 0b       	sbc	r25, r23
    3af2:	68 e1       	ldi	r22, 0x18	; 24
    3af4:	70 e0       	ldi	r23, 0x00	; 0
    3af6:	0e 94 39 62 	call	0xc472	; 0xc472 <__divmodhi4>
    3afa:	88 30       	cpi	r24, 0x08	; 8
    3afc:	91 05       	cpc	r25, r1
    3afe:	34 f0       	brlt	.+12     	; 0x3b0c <display_draw_pixel+0x30>
    3b00:	80 31       	cpi	r24, 0x10	; 16
    3b02:	91 05       	cpc	r25, r1
    3b04:	34 f4       	brge	.+12     	; 0x3b12 <display_draw_pixel+0x36>
    3b06:	67 e8       	ldi	r22, 0x87	; 135
    3b08:	70 e0       	ldi	r23, 0x00	; 0
    3b0a:	05 c0       	rjmp	.+10     	; 0x3b16 <display_draw_pixel+0x3a>
    3b0c:	67 e0       	ldi	r22, 0x07	; 7
    3b0e:	70 e0       	ldi	r23, 0x00	; 0
    3b10:	02 c0       	rjmp	.+4      	; 0x3b16 <display_draw_pixel+0x3a>
    3b12:	67 e0       	ldi	r22, 0x07	; 7
    3b14:	71 e0       	ldi	r23, 0x01	; 1
    3b16:	87 70       	andi	r24, 0x07	; 7
    3b18:	99 27       	eor	r25, r25
    3b1a:	68 1b       	sub	r22, r24
    3b1c:	79 0b       	sbc	r23, r25
    3b1e:	28 30       	cpi	r18, 0x08	; 8
    3b20:	31 05       	cpc	r19, r1
    3b22:	1c f4       	brge	.+6      	; 0x3b2a <display_draw_pixel+0x4e>
    3b24:	22 0f       	add	r18, r18
    3b26:	33 1f       	adc	r19, r19
    3b28:	04 c0       	rjmp	.+8      	; 0x3b32 <display_draw_pixel+0x56>
    3b2a:	22 0f       	add	r18, r18
    3b2c:	33 1f       	adc	r19, r19
    3b2e:	2f 50       	subi	r18, 0x0F	; 15
    3b30:	31 09       	sbc	r19, r1
    3b32:	c9 01       	movw	r24, r18
    3b34:	33 e0       	ldi	r19, 0x03	; 3
    3b36:	88 0f       	add	r24, r24
    3b38:	99 1f       	adc	r25, r25
    3b3a:	3a 95       	dec	r19
    3b3c:	e1 f7       	brne	.-8      	; 0x3b36 <display_draw_pixel+0x5a>
    3b3e:	86 0f       	add	r24, r22
    3b40:	97 1f       	adc	r25, r23
    3b42:	41 11       	cpse	r20, r1
    3b44:	0c 94 b7 09 	jmp	0x136e	; 0x136e <ht1632c_set_pixel>
    3b48:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <ht1632c_clr_pixel>
    3b4c:	08 95       	ret

00003b4e <display_draw_filled_rect>:
    3b4e:	af 92       	push	r10
    3b50:	bf 92       	push	r11
    3b52:	cf 92       	push	r12
    3b54:	df 92       	push	r13
    3b56:	ef 92       	push	r14
    3b58:	ff 92       	push	r15
    3b5a:	0f 93       	push	r16
    3b5c:	1f 93       	push	r17
    3b5e:	cf 93       	push	r28
    3b60:	df 93       	push	r29
    3b62:	a6 2e       	mov	r10, r22
    3b64:	18 2f       	mov	r17, r24
    3b66:	c4 2f       	mov	r28, r20
    3b68:	d0 e0       	ldi	r29, 0x00	; 0
    3b6a:	c8 0f       	add	r28, r24
    3b6c:	d1 1d       	adc	r29, r1
    3b6e:	e2 2e       	mov	r14, r18
    3b70:	f1 2c       	mov	r15, r1
    3b72:	e6 0e       	add	r14, r22
    3b74:	f1 1c       	adc	r15, r1
    3b76:	c1 2e       	mov	r12, r17
    3b78:	d1 2c       	mov	r13, r1
    3b7a:	cc 16       	cp	r12, r28
    3b7c:	dd 06       	cpc	r13, r29
    3b7e:	6c f4       	brge	.+26     	; 0x3b9a <display_draw_filled_rect+0x4c>
    3b80:	ba 2c       	mov	r11, r10
    3b82:	6b 2d       	mov	r22, r11
    3b84:	70 e0       	ldi	r23, 0x00	; 0
    3b86:	6e 15       	cp	r22, r14
    3b88:	7f 05       	cpc	r23, r15
    3b8a:	2c f4       	brge	.+10     	; 0x3b96 <display_draw_filled_rect+0x48>
    3b8c:	40 2f       	mov	r20, r16
    3b8e:	c6 01       	movw	r24, r12
    3b90:	a5 df       	rcall	.-182    	; 0x3adc <display_draw_pixel>
    3b92:	b3 94       	inc	r11
    3b94:	f6 cf       	rjmp	.-20     	; 0x3b82 <display_draw_filled_rect+0x34>
    3b96:	1f 5f       	subi	r17, 0xFF	; 255
    3b98:	ee cf       	rjmp	.-36     	; 0x3b76 <display_draw_filled_rect+0x28>
    3b9a:	df 91       	pop	r29
    3b9c:	cf 91       	pop	r28
    3b9e:	1f 91       	pop	r17
    3ba0:	0f 91       	pop	r16
    3ba2:	ff 90       	pop	r15
    3ba4:	ef 90       	pop	r14
    3ba6:	df 90       	pop	r13
    3ba8:	cf 90       	pop	r12
    3baa:	bf 90       	pop	r11
    3bac:	af 90       	pop	r10
    3bae:	08 95       	ret

00003bb0 <display_show_loading_square>:
    3bb0:	0f 93       	push	r16
    3bb2:	01 e0       	ldi	r16, 0x01	; 1
    3bb4:	21 e0       	ldi	r18, 0x01	; 1
    3bb6:	41 e0       	ldi	r20, 0x01	; 1
    3bb8:	60 91 21 20 	lds	r22, 0x2021
    3bbc:	80 91 20 20 	lds	r24, 0x2020
    3bc0:	c6 df       	rcall	.-116    	; 0x3b4e <display_draw_filled_rect>
    3bc2:	90 91 21 20 	lds	r25, 0x2021
    3bc6:	80 91 20 20 	lds	r24, 0x2020
    3bca:	97 30       	cpi	r25, 0x07	; 7
    3bcc:	20 f0       	brcs	.+8      	; 0x3bd6 <display_show_loading_square+0x26>
    3bce:	89 30       	cpi	r24, 0x09	; 9
    3bd0:	51 f4       	brne	.+20     	; 0x3be6 <display_show_loading_square+0x36>
    3bd2:	91 50       	subi	r25, 0x01	; 1
    3bd4:	0d c0       	rjmp	.+26     	; 0x3bf0 <display_show_loading_square+0x40>
    3bd6:	96 30       	cpi	r25, 0x06	; 6
    3bd8:	41 f4       	brne	.+16     	; 0x3bea <display_show_loading_square+0x3a>
    3bda:	87 30       	cpi	r24, 0x07	; 7
    3bdc:	30 f0       	brcs	.+12     	; 0x3bea <display_show_loading_square+0x3a>
    3bde:	81 50       	subi	r24, 0x01	; 1
    3be0:	80 93 20 20 	sts	0x2020, r24
    3be4:	17 c0       	rjmp	.+46     	; 0x3c14 <display_show_loading_square+0x64>
    3be6:	99 30       	cpi	r25, 0x09	; 9
    3be8:	30 f4       	brcc	.+12     	; 0x3bf6 <display_show_loading_square+0x46>
    3bea:	86 30       	cpi	r24, 0x06	; 6
    3bec:	99 f4       	brne	.+38     	; 0x3c14 <display_show_loading_square+0x64>
    3bee:	9f 5f       	subi	r25, 0xFF	; 255
    3bf0:	90 93 21 20 	sts	0x2021, r25
    3bf4:	0f c0       	rjmp	.+30     	; 0x3c14 <display_show_loading_square+0x64>
    3bf6:	99 30       	cpi	r25, 0x09	; 9
    3bf8:	69 f4       	brne	.+26     	; 0x3c14 <display_show_loading_square+0x64>
    3bfa:	89 30       	cpi	r24, 0x09	; 9
    3bfc:	58 f4       	brcc	.+22     	; 0x3c14 <display_show_loading_square+0x64>
    3bfe:	8f 5f       	subi	r24, 0xFF	; 255
    3c00:	80 93 20 20 	sts	0x2020, r24
    3c04:	89 30       	cpi	r24, 0x09	; 9
    3c06:	31 f4       	brne	.+12     	; 0x3c14 <display_show_loading_square+0x64>
    3c08:	80 91 1f 20 	lds	r24, 0x201F
    3c0c:	91 e0       	ldi	r25, 0x01	; 1
    3c0e:	89 27       	eor	r24, r25
    3c10:	80 93 1f 20 	sts	0x201F, r24
    3c14:	00 e0       	ldi	r16, 0x00	; 0
    3c16:	21 e0       	ldi	r18, 0x01	; 1
    3c18:	41 e0       	ldi	r20, 0x01	; 1
    3c1a:	60 91 21 20 	lds	r22, 0x2021
    3c1e:	80 91 20 20 	lds	r24, 0x2020
    3c22:	95 df       	rcall	.-214    	; 0x3b4e <display_draw_filled_rect>
    3c24:	0f 91       	pop	r16
    3c26:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <ht1632c_refresh_screen>

00003c2a <display_draw_bitmap>:
    3c2a:	2f 92       	push	r2
    3c2c:	3f 92       	push	r3
    3c2e:	4f 92       	push	r4
    3c30:	5f 92       	push	r5
    3c32:	6f 92       	push	r6
    3c34:	7f 92       	push	r7
    3c36:	8f 92       	push	r8
    3c38:	9f 92       	push	r9
    3c3a:	af 92       	push	r10
    3c3c:	bf 92       	push	r11
    3c3e:	cf 92       	push	r12
    3c40:	df 92       	push	r13
    3c42:	ef 92       	push	r14
    3c44:	ff 92       	push	r15
    3c46:	0f 93       	push	r16
    3c48:	1f 93       	push	r17
    3c4a:	cf 93       	push	r28
    3c4c:	df 93       	push	r29
    3c4e:	00 d0       	rcall	.+0      	; 0x3c50 <display_draw_bitmap+0x26>
    3c50:	1f 92       	push	r1
    3c52:	cd b7       	in	r28, 0x3d	; 61
    3c54:	de b7       	in	r29, 0x3e	; 62
    3c56:	6a 01       	movw	r12, r20
    3c58:	30 2f       	mov	r19, r16
    3c5a:	f1 2c       	mov	r15, r1
    3c5c:	44 24       	eor	r4, r4
    3c5e:	43 94       	inc	r4
    3c60:	51 2c       	mov	r5, r1
    3c62:	a6 2e       	mov	r10, r22
    3c64:	b1 2c       	mov	r11, r1
    3c66:	28 2e       	mov	r2, r24
    3c68:	31 2c       	mov	r3, r1
    3c6a:	f3 16       	cp	r15, r19
    3c6c:	b1 f1       	breq	.+108    	; 0x3cda <display_draw_bitmap+0xb0>
    3c6e:	8f 2d       	mov	r24, r15
    3c70:	87 70       	andi	r24, 0x07	; 7
    3c72:	32 01       	movw	r6, r4
    3c74:	02 c0       	rjmp	.+4      	; 0x3c7a <display_draw_bitmap+0x50>
    3c76:	66 0c       	add	r6, r6
    3c78:	77 1c       	adc	r7, r7
    3c7a:	8a 95       	dec	r24
    3c7c:	e2 f7       	brpl	.-8      	; 0x3c76 <display_draw_bitmap+0x4c>
    3c7e:	1b 82       	std	Y+3, r1	; 0x03
    3c80:	1c 82       	std	Y+4, r1	; 0x04
    3c82:	8f 2d       	mov	r24, r15
    3c84:	86 95       	lsr	r24
    3c86:	86 95       	lsr	r24
    3c88:	86 95       	lsr	r24
    3c8a:	46 01       	movw	r8, r12
    3c8c:	82 9f       	mul	r24, r18
    3c8e:	80 0c       	add	r8, r0
    3c90:	91 1c       	adc	r9, r1
    3c92:	11 24       	eor	r1, r1
    3c94:	85 01       	movw	r16, r10
    3c96:	0f 0d       	add	r16, r15
    3c98:	11 1d       	adc	r17, r1
    3c9a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c9c:	92 17       	cp	r25, r18
    3c9e:	d8 f4       	brcc	.+54     	; 0x3cd6 <display_draw_bitmap+0xac>
    3ca0:	eb 81       	ldd	r30, Y+3	; 0x03
    3ca2:	fc 81       	ldd	r31, Y+4	; 0x04
    3ca4:	e8 0d       	add	r30, r8
    3ca6:	f9 1d       	adc	r31, r9
    3ca8:	e4 91       	lpm	r30, Z
    3caa:	f0 e0       	ldi	r31, 0x00	; 0
    3cac:	e6 21       	and	r30, r6
    3cae:	f7 21       	and	r31, r7
    3cb0:	ef 2b       	or	r30, r31
    3cb2:	59 f0       	breq	.+22     	; 0x3cca <display_draw_bitmap+0xa0>
    3cb4:	4e 2d       	mov	r20, r14
    3cb6:	b8 01       	movw	r22, r16
    3cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cba:	9c 81       	ldd	r25, Y+4	; 0x04
    3cbc:	82 0d       	add	r24, r2
    3cbe:	93 1d       	adc	r25, r3
    3cc0:	29 83       	std	Y+1, r18	; 0x01
    3cc2:	3a 83       	std	Y+2, r19	; 0x02
    3cc4:	0b df       	rcall	.-490    	; 0x3adc <display_draw_pixel>
    3cc6:	3a 81       	ldd	r19, Y+2	; 0x02
    3cc8:	29 81       	ldd	r18, Y+1	; 0x01
    3cca:	8b 81       	ldd	r24, Y+3	; 0x03
    3ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    3cce:	01 96       	adiw	r24, 0x01	; 1
    3cd0:	8b 83       	std	Y+3, r24	; 0x03
    3cd2:	9c 83       	std	Y+4, r25	; 0x04
    3cd4:	e2 cf       	rjmp	.-60     	; 0x3c9a <display_draw_bitmap+0x70>
    3cd6:	f3 94       	inc	r15
    3cd8:	c8 cf       	rjmp	.-112    	; 0x3c6a <display_draw_bitmap+0x40>
    3cda:	24 96       	adiw	r28, 0x04	; 4
    3cdc:	cd bf       	out	0x3d, r28	; 61
    3cde:	de bf       	out	0x3e, r29	; 62
    3ce0:	df 91       	pop	r29
    3ce2:	cf 91       	pop	r28
    3ce4:	1f 91       	pop	r17
    3ce6:	0f 91       	pop	r16
    3ce8:	ff 90       	pop	r15
    3cea:	ef 90       	pop	r14
    3cec:	df 90       	pop	r13
    3cee:	cf 90       	pop	r12
    3cf0:	bf 90       	pop	r11
    3cf2:	af 90       	pop	r10
    3cf4:	9f 90       	pop	r9
    3cf6:	8f 90       	pop	r8
    3cf8:	7f 90       	pop	r7
    3cfa:	6f 90       	pop	r6
    3cfc:	5f 90       	pop	r5
    3cfe:	4f 90       	pop	r4
    3d00:	3f 90       	pop	r3
    3d02:	2f 90       	pop	r2
    3d04:	08 95       	ret

00003d06 <display_draw_char_to_buffer>:
    3d06:	25 e0       	ldi	r18, 0x05	; 5
    3d08:	62 9f       	mul	r22, r18
    3d0a:	b0 01       	movw	r22, r0
    3d0c:	11 24       	eor	r1, r1
    3d0e:	48 0f       	add	r20, r24
    3d10:	59 1f       	adc	r21, r25
    3d12:	80 e0       	ldi	r24, 0x00	; 0
    3d14:	90 e0       	ldi	r25, 0x00	; 0
    3d16:	6c 57       	subi	r22, 0x7C	; 124
    3d18:	77 4f       	sbci	r23, 0xF7	; 247
    3d1a:	fb 01       	movw	r30, r22
    3d1c:	e8 0f       	add	r30, r24
    3d1e:	f9 1f       	adc	r31, r25
    3d20:	e4 91       	lpm	r30, Z
    3d22:	e2 95       	swap	r30
    3d24:	2e 2f       	mov	r18, r30
    3d26:	23 73       	andi	r18, 0x33	; 51
    3d28:	a4 e0       	ldi	r26, 0x04	; 4
    3d2a:	2a 9f       	mul	r18, r26
    3d2c:	90 01       	movw	r18, r0
    3d2e:	11 24       	eor	r1, r1
    3d30:	ec 7c       	andi	r30, 0xCC	; 204
    3d32:	e6 95       	lsr	r30
    3d34:	e6 95       	lsr	r30
    3d36:	e2 2b       	or	r30, r18
    3d38:	2e 2f       	mov	r18, r30
    3d3a:	25 75       	andi	r18, 0x55	; 85
    3d3c:	22 0f       	add	r18, r18
    3d3e:	ea 7a       	andi	r30, 0xAA	; 170
    3d40:	e6 95       	lsr	r30
    3d42:	e2 2b       	or	r30, r18
    3d44:	da 01       	movw	r26, r20
    3d46:	ed 93       	st	X+, r30
    3d48:	ad 01       	movw	r20, r26
    3d4a:	01 96       	adiw	r24, 0x01	; 1
    3d4c:	85 30       	cpi	r24, 0x05	; 5
    3d4e:	91 05       	cpc	r25, r1
    3d50:	21 f7       	brne	.-56     	; 0x3d1a <display_draw_char_to_buffer+0x14>
    3d52:	08 95       	ret

00003d54 <display_draw_char>:
    3d54:	2f 92       	push	r2
    3d56:	3f 92       	push	r3
    3d58:	4f 92       	push	r4
    3d5a:	5f 92       	push	r5
    3d5c:	6f 92       	push	r6
    3d5e:	7f 92       	push	r7
    3d60:	8f 92       	push	r8
    3d62:	9f 92       	push	r9
    3d64:	af 92       	push	r10
    3d66:	bf 92       	push	r11
    3d68:	cf 92       	push	r12
    3d6a:	df 92       	push	r13
    3d6c:	ef 92       	push	r14
    3d6e:	ff 92       	push	r15
    3d70:	0f 93       	push	r16
    3d72:	1f 93       	push	r17
    3d74:	cf 93       	push	r28
    3d76:	df 93       	push	r29
    3d78:	cd b7       	in	r28, 0x3d	; 61
    3d7a:	de b7       	in	r29, 0x3e	; 62
    3d7c:	25 97       	sbiw	r28, 0x05	; 5
    3d7e:	cd bf       	out	0x3d, r28	; 61
    3d80:	de bf       	out	0x3e, r29	; 62
    3d82:	89 83       	std	Y+1, r24	; 0x01
    3d84:	32 2e       	mov	r3, r18
    3d86:	10 2f       	mov	r17, r16
    3d88:	9c 01       	movw	r18, r24
    3d8a:	5c 01       	movw	r10, r24
    3d8c:	85 e0       	ldi	r24, 0x05	; 5
    3d8e:	a8 0e       	add	r10, r24
    3d90:	b1 1c       	adc	r11, r1
    3d92:	e6 2f       	mov	r30, r22
    3d94:	97 e0       	ldi	r25, 0x07	; 7
    3d96:	09 9f       	mul	r16, r25
    3d98:	e0 0d       	add	r30, r0
    3d9a:	11 24       	eor	r1, r1
    3d9c:	ea 83       	std	Y+2, r30	; 0x02
    3d9e:	2c 83       	std	Y+4, r18	; 0x04
    3da0:	3d 83       	std	Y+5, r19	; 0x05
    3da2:	51 2c       	mov	r5, r1
    3da4:	54 e8       	ldi	r21, 0x84	; 132
    3da6:	e5 2e       	mov	r14, r21
    3da8:	58 e0       	ldi	r21, 0x08	; 8
    3daa:	f5 2e       	mov	r15, r21
    3dac:	e2 1a       	sub	r14, r18
    3dae:	f3 0a       	sbc	r15, r19
    3db0:	f5 e0       	ldi	r31, 0x05	; 5
    3db2:	4f 9f       	mul	r20, r31
    3db4:	e0 0c       	add	r14, r0
    3db6:	f1 1c       	adc	r15, r1
    3db8:	11 24       	eor	r1, r1
    3dba:	4b 01       	movw	r8, r22
    3dbc:	86 e0       	ldi	r24, 0x06	; 6
    3dbe:	88 0e       	add	r8, r24
    3dc0:	91 1c       	adc	r9, r1
    3dc2:	3b 01       	movw	r6, r22
    3dc4:	91 e0       	ldi	r25, 0x01	; 1
    3dc6:	69 1a       	sub	r6, r25
    3dc8:	71 08       	sbc	r7, r1
    3dca:	ec 81       	ldd	r30, Y+4	; 0x04
    3dcc:	fd 81       	ldd	r31, Y+5	; 0x05
    3dce:	ee 0d       	add	r30, r14
    3dd0:	ff 1d       	adc	r31, r15
    3dd2:	44 90       	lpm	r4, Z
    3dd4:	e9 81       	ldd	r30, Y+1	; 0x01
    3dd6:	e5 0d       	add	r30, r5
    3dd8:	eb 83       	std	Y+3, r30	; 0x03
    3dda:	64 01       	movw	r12, r8
    3ddc:	21 2c       	mov	r2, r1
    3dde:	40 fe       	sbrs	r4, 0
    3de0:	11 c0       	rjmp	.+34     	; 0x3e04 <display_draw_char+0xb0>
    3de2:	11 30       	cpi	r17, 0x01	; 1
    3de4:	41 f4       	brne	.+16     	; 0x3df6 <display_draw_char+0xa2>
    3de6:	8c 81       	ldd	r24, Y+4	; 0x04
    3de8:	9d 81       	ldd	r25, Y+5	; 0x05
    3dea:	97 fd       	sbrc	r25, 7
    3dec:	0b c0       	rjmp	.+22     	; 0x3e04 <display_draw_char+0xb0>
    3dee:	43 2d       	mov	r20, r3
    3df0:	b6 01       	movw	r22, r12
    3df2:	74 de       	rcall	.-792    	; 0x3adc <display_draw_pixel>
    3df4:	07 c0       	rjmp	.+14     	; 0x3e04 <display_draw_char+0xb0>
    3df6:	03 2d       	mov	r16, r3
    3df8:	21 2f       	mov	r18, r17
    3dfa:	41 2f       	mov	r20, r17
    3dfc:	6a 81       	ldd	r22, Y+2	; 0x02
    3dfe:	62 0d       	add	r22, r2
    3e00:	8b 81       	ldd	r24, Y+3	; 0x03
    3e02:	a5 de       	rcall	.-694    	; 0x3b4e <display_draw_filled_rect>
    3e04:	46 94       	lsr	r4
    3e06:	91 e0       	ldi	r25, 0x01	; 1
    3e08:	c9 1a       	sub	r12, r25
    3e0a:	d1 08       	sbc	r13, r1
    3e0c:	21 1a       	sub	r2, r17
    3e0e:	c6 14       	cp	r12, r6
    3e10:	d7 04       	cpc	r13, r7
    3e12:	29 f7       	brne	.-54     	; 0x3dde <display_draw_char+0x8a>
    3e14:	ec 81       	ldd	r30, Y+4	; 0x04
    3e16:	fd 81       	ldd	r31, Y+5	; 0x05
    3e18:	31 96       	adiw	r30, 0x01	; 1
    3e1a:	ec 83       	std	Y+4, r30	; 0x04
    3e1c:	fd 83       	std	Y+5, r31	; 0x05
    3e1e:	51 0e       	add	r5, r17
    3e20:	ea 15       	cp	r30, r10
    3e22:	fb 05       	cpc	r31, r11
    3e24:	91 f6       	brne	.-92     	; 0x3dca <display_draw_char+0x76>
    3e26:	25 96       	adiw	r28, 0x05	; 5
    3e28:	cd bf       	out	0x3d, r28	; 61
    3e2a:	de bf       	out	0x3e, r29	; 62
    3e2c:	df 91       	pop	r29
    3e2e:	cf 91       	pop	r28
    3e30:	1f 91       	pop	r17
    3e32:	0f 91       	pop	r16
    3e34:	ff 90       	pop	r15
    3e36:	ef 90       	pop	r14
    3e38:	df 90       	pop	r13
    3e3a:	cf 90       	pop	r12
    3e3c:	bf 90       	pop	r11
    3e3e:	af 90       	pop	r10
    3e40:	9f 90       	pop	r9
    3e42:	8f 90       	pop	r8
    3e44:	7f 90       	pop	r7
    3e46:	6f 90       	pop	r6
    3e48:	5f 90       	pop	r5
    3e4a:	4f 90       	pop	r4
    3e4c:	3f 90       	pop	r3
    3e4e:	2f 90       	pop	r2
    3e50:	08 95       	ret

00003e52 <display_draw_small_char_to_buffer>:
    3e52:	af 92       	push	r10
    3e54:	bf 92       	push	r11
    3e56:	cf 92       	push	r12
    3e58:	df 92       	push	r13
    3e5a:	ef 92       	push	r14
    3e5c:	ff 92       	push	r15
    3e5e:	0f 93       	push	r16
    3e60:	1f 93       	push	r17
    3e62:	cf 93       	push	r28
    3e64:	df 93       	push	r29
    3e66:	cd b7       	in	r28, 0x3d	; 61
    3e68:	de b7       	in	r29, 0x3e	; 62
    3e6a:	25 97       	sbiw	r28, 0x05	; 5
    3e6c:	cd bf       	out	0x3d, r28	; 61
    3e6e:	de bf       	out	0x3e, r29	; 62
    3e70:	26 e0       	ldi	r18, 0x06	; 6
    3e72:	62 9f       	mul	r22, r18
    3e74:	b0 01       	movw	r22, r0
    3e76:	11 24       	eor	r1, r1
    3e78:	8e 01       	movw	r16, r28
    3e7a:	0f 5f       	subi	r16, 0xFF	; 255
    3e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e7e:	20 e0       	ldi	r18, 0x00	; 0
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	6c 57       	subi	r22, 0x7C	; 124
    3e84:	7d 4f       	sbci	r23, 0xFD	; 253
    3e86:	03 96       	adiw	r24, 0x03	; 3
    3e88:	48 0f       	add	r20, r24
    3e8a:	59 1f       	adc	r21, r25
    3e8c:	e5 e0       	ldi	r30, 0x05	; 5
    3e8e:	ee 2e       	mov	r14, r30
    3e90:	f1 2c       	mov	r15, r1
    3e92:	fb 01       	movw	r30, r22
    3e94:	e2 0f       	add	r30, r18
    3e96:	f3 1f       	adc	r31, r19
    3e98:	84 91       	lpm	r24, Z
    3e9a:	82 95       	swap	r24
    3e9c:	8f 70       	andi	r24, 0x0F	; 15
    3e9e:	f8 01       	movw	r30, r16
    3ea0:	81 93       	st	Z+, r24
    3ea2:	8f 01       	movw	r16, r30
    3ea4:	fa 01       	movw	r30, r20
    3ea6:	b8 2e       	mov	r11, r24
    3ea8:	80 e0       	ldi	r24, 0x00	; 0
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	67 01       	movw	r12, r14
    3eae:	c2 1a       	sub	r12, r18
    3eb0:	d3 0a       	sbc	r13, r19
    3eb2:	ab 2d       	mov	r26, r11
    3eb4:	a1 70       	andi	r26, 0x01	; 1
    3eb6:	0c 2c       	mov	r0, r12
    3eb8:	01 c0       	rjmp	.+2      	; 0x3ebc <display_draw_small_char_to_buffer+0x6a>
    3eba:	aa 0f       	add	r26, r26
    3ebc:	0a 94       	dec	r0
    3ebe:	ea f7       	brpl	.-6      	; 0x3eba <display_draw_small_char_to_buffer+0x68>
    3ec0:	a2 90       	ld	r10, -Z
    3ec2:	aa 2a       	or	r10, r26
    3ec4:	a0 82       	st	Z, r10
    3ec6:	b6 94       	lsr	r11
    3ec8:	01 96       	adiw	r24, 0x01	; 1
    3eca:	83 30       	cpi	r24, 0x03	; 3
    3ecc:	91 05       	cpc	r25, r1
    3ece:	89 f7       	brne	.-30     	; 0x3eb2 <display_draw_small_char_to_buffer+0x60>
    3ed0:	2f 5f       	subi	r18, 0xFF	; 255
    3ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ed4:	25 30       	cpi	r18, 0x05	; 5
    3ed6:	31 05       	cpc	r19, r1
    3ed8:	e1 f6       	brne	.-72     	; 0x3e92 <display_draw_small_char_to_buffer+0x40>
    3eda:	25 96       	adiw	r28, 0x05	; 5
    3edc:	cd bf       	out	0x3d, r28	; 61
    3ede:	de bf       	out	0x3e, r29	; 62
    3ee0:	df 91       	pop	r29
    3ee2:	cf 91       	pop	r28
    3ee4:	1f 91       	pop	r17
    3ee6:	0f 91       	pop	r16
    3ee8:	ff 90       	pop	r15
    3eea:	ef 90       	pop	r14
    3eec:	df 90       	pop	r13
    3eee:	cf 90       	pop	r12
    3ef0:	bf 90       	pop	r11
    3ef2:	af 90       	pop	r10
    3ef4:	08 95       	ret

00003ef6 <display_print_scrolling_text>:
    3ef6:	9f 92       	push	r9
    3ef8:	af 92       	push	r10
    3efa:	bf 92       	push	r11
    3efc:	cf 92       	push	r12
    3efe:	df 92       	push	r13
    3f00:	ef 92       	push	r14
    3f02:	ff 92       	push	r15
    3f04:	0f 93       	push	r16
    3f06:	1f 93       	push	r17
    3f08:	cf 93       	push	r28
    3f0a:	df 93       	push	r29
    3f0c:	8c 01       	movw	r16, r24
    3f0e:	96 2e       	mov	r9, r22
    3f10:	66 23       	and	r22, r22
    3f12:	71 f0       	breq	.+28     	; 0x3f30 <display_print_scrolling_text+0x3a>
    3f14:	fc 01       	movw	r30, r24
    3f16:	01 90       	ld	r0, Z+
    3f18:	00 20       	and	r0, r0
    3f1a:	e9 f7       	brne	.-6      	; 0x3f16 <display_print_scrolling_text+0x20>
    3f1c:	31 97       	sbiw	r30, 0x01	; 1
    3f1e:	e8 1b       	sub	r30, r24
    3f20:	f9 0b       	sbc	r31, r25
    3f22:	86 e0       	ldi	r24, 0x06	; 6
    3f24:	8e 9f       	mul	r24, r30
    3f26:	e0 01       	movw	r28, r0
    3f28:	8f 9f       	mul	r24, r31
    3f2a:	d0 0d       	add	r29, r0
    3f2c:	11 24       	eor	r1, r1
    3f2e:	0b c0       	rjmp	.+22     	; 0x3f46 <display_print_scrolling_text+0x50>
    3f30:	ec 01       	movw	r28, r24
    3f32:	09 90       	ld	r0, Y+
    3f34:	00 20       	and	r0, r0
    3f36:	e9 f7       	brne	.-6      	; 0x3f32 <display_print_scrolling_text+0x3c>
    3f38:	21 97       	sbiw	r28, 0x01	; 1
    3f3a:	c8 1b       	sub	r28, r24
    3f3c:	d9 0b       	sbc	r29, r25
    3f3e:	cc 0f       	add	r28, r28
    3f40:	dd 1f       	adc	r29, r29
    3f42:	cc 0f       	add	r28, r28
    3f44:	dd 1f       	adc	r29, r29
    3f46:	61 e0       	ldi	r22, 0x01	; 1
    3f48:	70 e0       	ldi	r23, 0x00	; 0
    3f4a:	ce 01       	movw	r24, r28
    3f4c:	0e 94 8d 62 	call	0xc51a	; 0xc51a <calloc>
    3f50:	7c 01       	movw	r14, r24
    3f52:	a1 2c       	mov	r10, r1
    3f54:	b1 2c       	mov	r11, r1
    3f56:	c1 2c       	mov	r12, r1
    3f58:	d1 2c       	mov	r13, r1
    3f5a:	f8 01       	movw	r30, r16
    3f5c:	61 91       	ld	r22, Z+
    3f5e:	8f 01       	movw	r16, r30
    3f60:	66 23       	and	r22, r22
    3f62:	79 f0       	breq	.+30     	; 0x3f82 <display_print_scrolling_text+0x8c>
    3f64:	a7 01       	movw	r20, r14
    3f66:	99 20       	and	r9, r9
    3f68:	19 f0       	breq	.+6      	; 0x3f70 <display_print_scrolling_text+0x7a>
    3f6a:	c6 01       	movw	r24, r12
    3f6c:	cc de       	rcall	.-616    	; 0x3d06 <display_draw_char_to_buffer>
    3f6e:	02 c0       	rjmp	.+4      	; 0x3f74 <display_print_scrolling_text+0x7e>
    3f70:	c5 01       	movw	r24, r10
    3f72:	6f df       	rcall	.-290    	; 0x3e52 <display_draw_small_char_to_buffer>
    3f74:	86 e0       	ldi	r24, 0x06	; 6
    3f76:	c8 0e       	add	r12, r24
    3f78:	d1 1c       	adc	r13, r1
    3f7a:	e4 e0       	ldi	r30, 0x04	; 4
    3f7c:	ae 0e       	add	r10, r30
    3f7e:	b1 1c       	adc	r11, r1
    3f80:	ec cf       	rjmp	.-40     	; 0x3f5a <display_print_scrolling_text+0x64>
    3f82:	be 01       	movw	r22, r28
    3f84:	c7 01       	movw	r24, r14
    3f86:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <ht1632c_print_buffer>
    3f8a:	c7 01       	movw	r24, r14
    3f8c:	df 91       	pop	r29
    3f8e:	cf 91       	pop	r28
    3f90:	1f 91       	pop	r17
    3f92:	0f 91       	pop	r16
    3f94:	ff 90       	pop	r15
    3f96:	ef 90       	pop	r14
    3f98:	df 90       	pop	r13
    3f9a:	cf 90       	pop	r12
    3f9c:	bf 90       	pop	r11
    3f9e:	af 90       	pop	r10
    3fa0:	9f 90       	pop	r9
    3fa2:	0c 94 3f 63 	jmp	0xc67e	; 0xc67e <free>

00003fa6 <display_draw_small_char>:
    3fa6:	2f 92       	push	r2
    3fa8:	3f 92       	push	r3
    3faa:	4f 92       	push	r4
    3fac:	5f 92       	push	r5
    3fae:	6f 92       	push	r6
    3fb0:	7f 92       	push	r7
    3fb2:	8f 92       	push	r8
    3fb4:	9f 92       	push	r9
    3fb6:	af 92       	push	r10
    3fb8:	bf 92       	push	r11
    3fba:	cf 92       	push	r12
    3fbc:	df 92       	push	r13
    3fbe:	ef 92       	push	r14
    3fc0:	ff 92       	push	r15
    3fc2:	0f 93       	push	r16
    3fc4:	1f 93       	push	r17
    3fc6:	cf 93       	push	r28
    3fc8:	df 93       	push	r29
    3fca:	cd b7       	in	r28, 0x3d	; 61
    3fcc:	de b7       	in	r29, 0x3e	; 62
    3fce:	28 97       	sbiw	r28, 0x08	; 8
    3fd0:	cd bf       	out	0x3d, r28	; 61
    3fd2:	de bf       	out	0x3e, r29	; 62
    3fd4:	5b 01       	movw	r10, r22
    3fd6:	29 83       	std	Y+1, r18	; 0x01
    3fd8:	10 2f       	mov	r17, r16
    3fda:	26 e0       	ldi	r18, 0x06	; 6
    3fdc:	42 9f       	mul	r20, r18
    3fde:	60 01       	movw	r12, r0
    3fe0:	11 24       	eor	r1, r1
    3fe2:	e8 2f       	mov	r30, r24
    3fe4:	37 e0       	ldi	r19, 0x07	; 7
    3fe6:	03 9f       	mul	r16, r19
    3fe8:	e0 0d       	add	r30, r0
    3fea:	11 24       	eor	r1, r1
    3fec:	ea 83       	std	Y+2, r30	; 0x02
    3fee:	21 2c       	mov	r2, r1
    3ff0:	1f 82       	std	Y+7, r1	; 0x07
    3ff2:	18 86       	std	Y+8, r1	; 0x08
    3ff4:	96 01       	movw	r18, r12
    3ff6:	2c 57       	subi	r18, 0x7C	; 124
    3ff8:	3d 4f       	sbci	r19, 0xFD	; 253
    3ffa:	69 01       	movw	r12, r18
    3ffc:	fc 01       	movw	r30, r24
    3ffe:	37 96       	adiw	r30, 0x07	; 7
    4000:	ec 83       	std	Y+4, r30	; 0x04
    4002:	fd 83       	std	Y+5, r31	; 0x05
    4004:	2c 01       	movw	r4, r24
    4006:	f1 e0       	ldi	r31, 0x01	; 1
    4008:	4f 1a       	sub	r4, r31
    400a:	51 08       	sbc	r5, r1
    400c:	3b 01       	movw	r6, r22
    400e:	23 e0       	ldi	r18, 0x03	; 3
    4010:	62 0e       	add	r6, r18
    4012:	71 1c       	adc	r7, r1
    4014:	ef 81       	ldd	r30, Y+7	; 0x07
    4016:	f8 85       	ldd	r31, Y+8	; 0x08
    4018:	ec 0d       	add	r30, r12
    401a:	fd 1d       	adc	r31, r13
    401c:	54 91       	lpm	r21, Z
    401e:	32 2d       	mov	r19, r2
    4020:	3a 0d       	add	r19, r10
    4022:	3b 83       	std	Y+3, r19	; 0x03
    4024:	ec 80       	ldd	r14, Y+4	; 0x04
    4026:	fd 80       	ldd	r15, Y+5	; 0x05
    4028:	31 2c       	mov	r3, r1
    402a:	43 01       	movw	r8, r6
    402c:	8f 81       	ldd	r24, Y+7	; 0x07
    402e:	98 85       	ldd	r25, Y+8	; 0x08
    4030:	88 1a       	sub	r8, r24
    4032:	99 0a       	sbc	r9, r25
    4034:	50 ff       	sbrs	r21, 0
    4036:	16 c0       	rjmp	.+44     	; 0x4064 <__stack+0x65>
    4038:	11 30       	cpi	r17, 0x01	; 1
    403a:	59 f4       	brne	.+22     	; 0x4052 <__stack+0x53>
    403c:	92 e0       	ldi	r25, 0x02	; 2
    403e:	e9 16       	cp	r14, r25
    4040:	f1 04       	cpc	r15, r1
    4042:	84 f0       	brlt	.+32     	; 0x4064 <__stack+0x65>
    4044:	49 81       	ldd	r20, Y+1	; 0x01
    4046:	b4 01       	movw	r22, r8
    4048:	c7 01       	movw	r24, r14
    404a:	02 97       	sbiw	r24, 0x02	; 2
    404c:	5e 83       	std	Y+6, r21	; 0x06
    404e:	46 dd       	rcall	.-1396   	; 0x3adc <display_draw_pixel>
    4050:	08 c0       	rjmp	.+16     	; 0x4062 <__stack+0x63>
    4052:	09 81       	ldd	r16, Y+1	; 0x01
    4054:	21 2f       	mov	r18, r17
    4056:	41 2f       	mov	r20, r17
    4058:	6b 81       	ldd	r22, Y+3	; 0x03
    405a:	8a 81       	ldd	r24, Y+2	; 0x02
    405c:	83 0d       	add	r24, r3
    405e:	5e 83       	std	Y+6, r21	; 0x06
    4060:	76 dd       	rcall	.-1300   	; 0x3b4e <display_draw_filled_rect>
    4062:	5e 81       	ldd	r21, Y+6	; 0x06
    4064:	56 95       	lsr	r21
    4066:	e1 e0       	ldi	r30, 0x01	; 1
    4068:	ee 1a       	sub	r14, r30
    406a:	f1 08       	sbc	r15, r1
    406c:	31 1a       	sub	r3, r17
    406e:	e4 14       	cp	r14, r4
    4070:	f5 04       	cpc	r15, r5
    4072:	01 f7       	brne	.-64     	; 0x4034 <__stack+0x35>
    4074:	2f 81       	ldd	r18, Y+7	; 0x07
    4076:	38 85       	ldd	r19, Y+8	; 0x08
    4078:	2f 5f       	subi	r18, 0xFF	; 255
    407a:	3f 4f       	sbci	r19, 0xFF	; 255
    407c:	2f 83       	std	Y+7, r18	; 0x07
    407e:	38 87       	std	Y+8, r19	; 0x08
    4080:	21 1a       	sub	r2, r17
    4082:	26 30       	cpi	r18, 0x06	; 6
    4084:	31 05       	cpc	r19, r1
    4086:	31 f6       	brne	.-116    	; 0x4014 <__stack+0x15>
    4088:	28 96       	adiw	r28, 0x08	; 8
    408a:	cd bf       	out	0x3d, r28	; 61
    408c:	de bf       	out	0x3e, r29	; 62
    408e:	df 91       	pop	r29
    4090:	cf 91       	pop	r28
    4092:	1f 91       	pop	r17
    4094:	0f 91       	pop	r16
    4096:	ff 90       	pop	r15
    4098:	ef 90       	pop	r14
    409a:	df 90       	pop	r13
    409c:	cf 90       	pop	r12
    409e:	bf 90       	pop	r11
    40a0:	af 90       	pop	r10
    40a2:	9f 90       	pop	r9
    40a4:	8f 90       	pop	r8
    40a6:	7f 90       	pop	r7
    40a8:	6f 90       	pop	r6
    40aa:	5f 90       	pop	r5
    40ac:	4f 90       	pop	r4
    40ae:	3f 90       	pop	r3
    40b0:	2f 90       	pop	r2
    40b2:	08 95       	ret

000040b4 <display_draw_four_letter_word>:
    40b4:	0f 93       	push	r16
    40b6:	cf 93       	push	r28
    40b8:	df 93       	push	r29
    40ba:	ec 01       	movw	r28, r24
    40bc:	01 e0       	ldi	r16, 0x01	; 1
    40be:	21 e0       	ldi	r18, 0x01	; 1
    40c0:	30 e0       	ldi	r19, 0x00	; 0
    40c2:	48 81       	ld	r20, Y
    40c4:	67 e0       	ldi	r22, 0x07	; 7
    40c6:	70 e0       	ldi	r23, 0x00	; 0
    40c8:	81 e0       	ldi	r24, 0x01	; 1
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	6c df       	rcall	.-296    	; 0x3fa6 <display_draw_small_char>
    40ce:	21 e0       	ldi	r18, 0x01	; 1
    40d0:	30 e0       	ldi	r19, 0x00	; 0
    40d2:	49 81       	ldd	r20, Y+1	; 0x01
    40d4:	67 e0       	ldi	r22, 0x07	; 7
    40d6:	70 e0       	ldi	r23, 0x00	; 0
    40d8:	85 e0       	ldi	r24, 0x05	; 5
    40da:	90 e0       	ldi	r25, 0x00	; 0
    40dc:	64 df       	rcall	.-312    	; 0x3fa6 <display_draw_small_char>
    40de:	21 e0       	ldi	r18, 0x01	; 1
    40e0:	30 e0       	ldi	r19, 0x00	; 0
    40e2:	4a 81       	ldd	r20, Y+2	; 0x02
    40e4:	67 e0       	ldi	r22, 0x07	; 7
    40e6:	70 e0       	ldi	r23, 0x00	; 0
    40e8:	89 e0       	ldi	r24, 0x09	; 9
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	5c df       	rcall	.-328    	; 0x3fa6 <display_draw_small_char>
    40ee:	21 e0       	ldi	r18, 0x01	; 1
    40f0:	30 e0       	ldi	r19, 0x00	; 0
    40f2:	4b 81       	ldd	r20, Y+3	; 0x03
    40f4:	67 e0       	ldi	r22, 0x07	; 7
    40f6:	70 e0       	ldi	r23, 0x00	; 0
    40f8:	8d e0       	ldi	r24, 0x0D	; 13
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	54 df       	rcall	.-344    	; 0x3fa6 <display_draw_small_char>
    40fe:	df 91       	pop	r29
    4100:	cf 91       	pop	r28
    4102:	0f 91       	pop	r16
    4104:	08 95       	ret

00004106 <display_draw_three_letter_word>:
    4106:	0f 93       	push	r16
    4108:	cf 93       	push	r28
    410a:	df 93       	push	r29
    410c:	ec 01       	movw	r28, r24
    410e:	01 e0       	ldi	r16, 0x01	; 1
    4110:	21 e0       	ldi	r18, 0x01	; 1
    4112:	30 e0       	ldi	r19, 0x00	; 0
    4114:	48 81       	ld	r20, Y
    4116:	67 e0       	ldi	r22, 0x07	; 7
    4118:	70 e0       	ldi	r23, 0x00	; 0
    411a:	83 e0       	ldi	r24, 0x03	; 3
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	43 df       	rcall	.-378    	; 0x3fa6 <display_draw_small_char>
    4120:	21 e0       	ldi	r18, 0x01	; 1
    4122:	30 e0       	ldi	r19, 0x00	; 0
    4124:	49 81       	ldd	r20, Y+1	; 0x01
    4126:	67 e0       	ldi	r22, 0x07	; 7
    4128:	70 e0       	ldi	r23, 0x00	; 0
    412a:	87 e0       	ldi	r24, 0x07	; 7
    412c:	90 e0       	ldi	r25, 0x00	; 0
    412e:	3b df       	rcall	.-394    	; 0x3fa6 <display_draw_small_char>
    4130:	21 e0       	ldi	r18, 0x01	; 1
    4132:	30 e0       	ldi	r19, 0x00	; 0
    4134:	4a 81       	ldd	r20, Y+2	; 0x02
    4136:	67 e0       	ldi	r22, 0x07	; 7
    4138:	70 e0       	ldi	r23, 0x00	; 0
    413a:	8b e0       	ldi	r24, 0x0B	; 11
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	33 df       	rcall	.-410    	; 0x3fa6 <display_draw_small_char>
    4140:	df 91       	pop	r29
    4142:	cf 91       	pop	r28
    4144:	0f 91       	pop	r16
    4146:	08 95       	ret

00004148 <display_draw_wifi_icon>:
    4148:	80 91 93 2e 	lds	r24, 0x2E93
    414c:	81 30       	cpi	r24, 0x01	; 1
    414e:	e9 f1       	breq	.+122    	; 0x41ca <display_draw_wifi_icon+0x82>
    4150:	a8 f1       	brcs	.+106    	; 0x41bc <display_draw_wifi_icon+0x74>
    4152:	82 30       	cpi	r24, 0x02	; 2
    4154:	09 f4       	brne	.+2      	; 0x4158 <display_draw_wifi_icon+0x10>
    4156:	48 c0       	rjmp	.+144    	; 0x41e8 <display_draw_wifi_icon+0xa0>
    4158:	83 30       	cpi	r24, 0x03	; 3
    415a:	09 f0       	breq	.+2      	; 0x415e <display_draw_wifi_icon+0x16>
    415c:	65 c0       	rjmp	.+202    	; 0x4228 <display_draw_wifi_icon+0xe0>
    415e:	82 e2       	ldi	r24, 0x22	; 34
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	0e 94 b7 09 	call	0x136e	; 0x136e <ht1632c_set_pixel>
    4166:	83 e3       	ldi	r24, 0x33	; 51
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	0e 94 b7 09 	call	0x136e	; 0x136e <ht1632c_set_pixel>
    416e:	84 e4       	ldi	r24, 0x44	; 68
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	0e 94 b7 09 	call	0x136e	; 0x136e <ht1632c_set_pixel>
    4176:	84 e5       	ldi	r24, 0x54	; 84
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	0e 94 b7 09 	call	0x136e	; 0x136e <ht1632c_set_pixel>
    417e:	85 e6       	ldi	r24, 0x65	; 101
    4180:	90 e0       	ldi	r25, 0x00	; 0
    4182:	0e 94 b7 09 	call	0x136e	; 0x136e <ht1632c_set_pixel>
    4186:	85 e7       	ldi	r24, 0x75	; 117
    4188:	90 e0       	ldi	r25, 0x00	; 0
    418a:	0e 94 b7 09 	call	0x136e	; 0x136e <ht1632c_set_pixel>
    418e:	8d e0       	ldi	r24, 0x0D	; 13
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	0e 94 b7 09 	call	0x136e	; 0x136e <ht1632c_set_pixel>
    4196:	8d e1       	ldi	r24, 0x1D	; 29
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	0e 94 b7 09 	call	0x136e	; 0x136e <ht1632c_set_pixel>
    419e:	8c e2       	ldi	r24, 0x2C	; 44
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	0e 94 b7 09 	call	0x136e	; 0x136e <ht1632c_set_pixel>
    41a6:	8c e3       	ldi	r24, 0x3C	; 60
    41a8:	90 e0       	ldi	r25, 0x00	; 0
    41aa:	0e 94 b7 09 	call	0x136e	; 0x136e <ht1632c_set_pixel>
    41ae:	8b e4       	ldi	r24, 0x4B	; 75
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	0e 94 b7 09 	call	0x136e	; 0x136e <ht1632c_set_pixel>
    41b6:	8a e5       	ldi	r24, 0x5A	; 90
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	34 c0       	rjmp	.+104    	; 0x4224 <display_draw_wifi_icon+0xdc>
    41bc:	83 ef       	ldi	r24, 0xF3	; 243
    41be:	90 e0       	ldi	r25, 0x00	; 0
    41c0:	0e 94 b7 09 	call	0x136e	; 0x136e <ht1632c_set_pixel>
    41c4:	8b e8       	ldi	r24, 0x8B	; 139
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	2d c0       	rjmp	.+90     	; 0x4224 <display_draw_wifi_icon+0xdc>
    41ca:	85 ee       	ldi	r24, 0xE5	; 229
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	0e 94 b7 09 	call	0x136e	; 0x136e <ht1632c_set_pixel>
    41d2:	86 ef       	ldi	r24, 0xF6	; 246
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	0e 94 b7 09 	call	0x136e	; 0x136e <ht1632c_set_pixel>
    41da:	8e e8       	ldi	r24, 0x8E	; 142
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	0e 94 b7 09 	call	0x136e	; 0x136e <ht1632c_set_pixel>
    41e2:	8d e9       	ldi	r24, 0x9D	; 157
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	1e c0       	rjmp	.+60     	; 0x4224 <display_draw_wifi_icon+0xdc>
    41e8:	87 ec       	ldi	r24, 0xC7	; 199
    41ea:	90 e0       	ldi	r25, 0x00	; 0
    41ec:	0e 94 b7 09 	call	0x136e	; 0x136e <ht1632c_set_pixel>
    41f0:	80 e5       	ldi	r24, 0x50	; 80
    41f2:	90 e0       	ldi	r25, 0x00	; 0
    41f4:	0e 94 b7 09 	call	0x136e	; 0x136e <ht1632c_set_pixel>
    41f8:	81 e6       	ldi	r24, 0x61	; 97
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	0e 94 b7 09 	call	0x136e	; 0x136e <ht1632c_set_pixel>
    4200:	81 e7       	ldi	r24, 0x71	; 113
    4202:	90 e0       	ldi	r25, 0x00	; 0
    4204:	0e 94 b7 09 	call	0x136e	; 0x136e <ht1632c_set_pixel>
    4208:	89 e0       	ldi	r24, 0x09	; 9
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	0e 94 b7 09 	call	0x136e	; 0x136e <ht1632c_set_pixel>
    4210:	89 e1       	ldi	r24, 0x19	; 25
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	0e 94 b7 09 	call	0x136e	; 0x136e <ht1632c_set_pixel>
    4218:	88 e2       	ldi	r24, 0x28	; 40
    421a:	90 e0       	ldi	r25, 0x00	; 0
    421c:	0e 94 b7 09 	call	0x136e	; 0x136e <ht1632c_set_pixel>
    4220:	8f eb       	ldi	r24, 0xBF	; 191
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	0e 94 b7 09 	call	0x136e	; 0x136e <ht1632c_set_pixel>
    4228:	80 91 93 2e 	lds	r24, 0x2E93
    422c:	91 e0       	ldi	r25, 0x01	; 1
    422e:	98 0f       	add	r25, r24
    4230:	90 93 93 2e 	sts	0x2E93, r25
    4234:	84 30       	cpi	r24, 0x04	; 4
    4236:	21 f4       	brne	.+8      	; 0x4240 <display_draw_wifi_icon+0xf8>
    4238:	10 92 93 2e 	sts	0x2E93, r1
    423c:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <ht1632c_clear_screen>
    4240:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <ht1632c_refresh_screen>

00004244 <display_slide_in_from_left>:
    4244:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <ht1632c_slide_in_from_left>

00004248 <display_slide_in_from_right>:
    4248:	0c 94 88 0b 	jmp	0x1710	; 0x1710 <ht1632c_slide_in_from_right>

0000424c <display_slide_in_from_bottom>:
    424c:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <ht1632c_slide_in_from_bottom>

00004250 <display_slide_in_from_top>:
    4250:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <ht1632c_slide_in_from_top>

00004254 <display_slide_out_to_right>:
    4254:	cf 93       	push	r28
    4256:	cf e1       	ldi	r28, 0x1F	; 31
    4258:	0e 94 b6 0a 	call	0x156c	; 0x156c <ht1632c_shift_right>
    425c:	c1 50       	subi	r28, 0x01	; 1
    425e:	e1 f7       	brne	.-8      	; 0x4258 <display_slide_out_to_right+0x4>
    4260:	cf 91       	pop	r28
    4262:	08 95       	ret

00004264 <display_slide_out_to_left>:
    4264:	cf 93       	push	r28
    4266:	cf e1       	ldi	r28, 0x1F	; 31
    4268:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <ht1632c_shift_left>
    426c:	c1 50       	subi	r28, 0x01	; 1
    426e:	e1 f7       	brne	.-8      	; 0x4268 <display_slide_out_to_left+0x4>
    4270:	cf 91       	pop	r28
    4272:	08 95       	ret

00004274 <display_slide_out_to_top>:
    4274:	cf 93       	push	r28
    4276:	cf e1       	ldi	r28, 0x1F	; 31
    4278:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <ht1632c_shift_up>
    427c:	c1 50       	subi	r28, 0x01	; 1
    427e:	e1 f7       	brne	.-8      	; 0x4278 <display_slide_out_to_top+0x4>
    4280:	cf 91       	pop	r28
    4282:	08 95       	ret

00004284 <display_off>:
    4284:	f7 df       	rcall	.-18     	; 0x4274 <display_slide_out_to_top>
    4286:	82 e0       	ldi	r24, 0x02	; 2
    4288:	0e 94 3e 0a 	call	0x147c	; 0x147c <ht1632c_write_command>
    428c:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <ht1632c_power_down>

00004290 <display_slide_out_to_bottom>:
    4290:	cf 93       	push	r28
    4292:	cf e1       	ldi	r28, 0x1F	; 31
    4294:	0e 94 0e 0b 	call	0x161c	; 0x161c <ht1632c_shift_down>
    4298:	c1 50       	subi	r28, 0x01	; 1
    429a:	e1 f7       	brne	.-8      	; 0x4294 <display_slide_out_to_bottom+0x4>
    429c:	cf 91       	pop	r28
    429e:	08 95       	ret

000042a0 <display_alarm_increment_minute>:
    42a0:	60 91 1b 3b 	lds	r22, 0x3B1B
    42a4:	6b 33       	cpi	r22, 0x3B	; 59
    42a6:	20 f4       	brcc	.+8      	; 0x42b0 <display_alarm_increment_minute+0x10>
    42a8:	6f 5f       	subi	r22, 0xFF	; 255
    42aa:	60 93 1b 3b 	sts	0x3B1B, r22
    42ae:	04 c0       	rjmp	.+8      	; 0x42b8 <display_alarm_increment_minute+0x18>
    42b0:	81 e0       	ldi	r24, 0x01	; 1
    42b2:	80 93 1b 3b 	sts	0x3B1B, r24
    42b6:	61 e0       	ldi	r22, 0x01	; 1
    42b8:	85 e0       	ldi	r24, 0x05	; 5
    42ba:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <rtc_update_display>
    42be:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <ht1632c_refresh_screen>

000042c2 <display_alarm_decrement_minute>:
    42c2:	60 91 1b 3b 	lds	r22, 0x3B1B
    42c6:	66 23       	and	r22, r22
    42c8:	21 f0       	breq	.+8      	; 0x42d2 <display_alarm_decrement_minute+0x10>
    42ca:	61 50       	subi	r22, 0x01	; 1
    42cc:	60 93 1b 3b 	sts	0x3B1B, r22
    42d0:	04 c0       	rjmp	.+8      	; 0x42da <display_alarm_decrement_minute+0x18>
    42d2:	8a e3       	ldi	r24, 0x3A	; 58
    42d4:	80 93 1b 3b 	sts	0x3B1B, r24
    42d8:	6a e3       	ldi	r22, 0x3A	; 58
    42da:	85 e0       	ldi	r24, 0x05	; 5
    42dc:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <rtc_update_display>
    42e0:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <ht1632c_refresh_screen>

000042e4 <display_alarm_increment_hour>:
    42e4:	60 91 1c 3b 	lds	r22, 0x3B1C
    42e8:	67 31       	cpi	r22, 0x17	; 23
    42ea:	20 f4       	brcc	.+8      	; 0x42f4 <display_alarm_increment_hour+0x10>
    42ec:	6f 5f       	subi	r22, 0xFF	; 255
    42ee:	60 93 1c 3b 	sts	0x3B1C, r22
    42f2:	04 c0       	rjmp	.+8      	; 0x42fc <display_alarm_increment_hour+0x18>
    42f4:	81 e0       	ldi	r24, 0x01	; 1
    42f6:	80 93 1c 3b 	sts	0x3B1C, r24
    42fa:	61 e0       	ldi	r22, 0x01	; 1
    42fc:	85 e0       	ldi	r24, 0x05	; 5
    42fe:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <rtc_update_display>
    4302:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <ht1632c_refresh_screen>

00004306 <display_alarm_decrement_hour>:
    4306:	60 91 1c 3b 	lds	r22, 0x3B1C
    430a:	66 23       	and	r22, r22
    430c:	21 f0       	breq	.+8      	; 0x4316 <display_alarm_decrement_hour+0x10>
    430e:	61 50       	subi	r22, 0x01	; 1
    4310:	60 93 1c 3b 	sts	0x3B1C, r22
    4314:	04 c0       	rjmp	.+8      	; 0x431e <display_alarm_decrement_hour+0x18>
    4316:	86 e1       	ldi	r24, 0x16	; 22
    4318:	80 93 1c 3b 	sts	0x3B1C, r24
    431c:	66 e1       	ldi	r22, 0x16	; 22
    431e:	85 e0       	ldi	r24, 0x05	; 5
    4320:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <rtc_update_display>
    4324:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <ht1632c_refresh_screen>

00004328 <display_draw_and_increment_hour>:
    4328:	60 91 20 3b 	lds	r22, 0x3B20
    432c:	67 31       	cpi	r22, 0x17	; 23
    432e:	20 f4       	brcc	.+8      	; 0x4338 <display_draw_and_increment_hour+0x10>
    4330:	6f 5f       	subi	r22, 0xFF	; 255
    4332:	60 93 20 3b 	sts	0x3B20, r22
    4336:	03 c0       	rjmp	.+6      	; 0x433e <display_draw_and_increment_hour+0x16>
    4338:	10 92 20 3b 	sts	0x3B20, r1
    433c:	60 e0       	ldi	r22, 0x00	; 0
    433e:	85 e0       	ldi	r24, 0x05	; 5
    4340:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <rtc_update_display>
    4344:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <ht1632c_refresh_screen>

00004348 <display_draw_and_decrement_hour>:
    4348:	60 91 20 3b 	lds	r22, 0x3B20
    434c:	66 23       	and	r22, r22
    434e:	21 f0       	breq	.+8      	; 0x4358 <display_draw_and_decrement_hour+0x10>
    4350:	61 50       	subi	r22, 0x01	; 1
    4352:	60 93 20 3b 	sts	0x3B20, r22
    4356:	04 c0       	rjmp	.+8      	; 0x4360 <display_draw_and_decrement_hour+0x18>
    4358:	87 e1       	ldi	r24, 0x17	; 23
    435a:	80 93 20 3b 	sts	0x3B20, r24
    435e:	67 e1       	ldi	r22, 0x17	; 23
    4360:	85 e0       	ldi	r24, 0x05	; 5
    4362:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <rtc_update_display>
    4366:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <ht1632c_refresh_screen>

0000436a <display_draw_and_increment_minute>:
    436a:	60 91 1f 3b 	lds	r22, 0x3B1F
    436e:	6b 33       	cpi	r22, 0x3B	; 59
    4370:	20 f4       	brcc	.+8      	; 0x437a <display_draw_and_increment_minute+0x10>
    4372:	6f 5f       	subi	r22, 0xFF	; 255
    4374:	60 93 1f 3b 	sts	0x3B1F, r22
    4378:	03 c0       	rjmp	.+6      	; 0x4380 <display_draw_and_increment_minute+0x16>
    437a:	10 92 1f 3b 	sts	0x3B1F, r1
    437e:	60 e0       	ldi	r22, 0x00	; 0
    4380:	85 e0       	ldi	r24, 0x05	; 5
    4382:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <rtc_update_display>
    4386:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <ht1632c_refresh_screen>

0000438a <display_draw_and_decrement_minute>:
    438a:	60 91 1f 3b 	lds	r22, 0x3B1F
    438e:	66 23       	and	r22, r22
    4390:	21 f0       	breq	.+8      	; 0x439a <display_draw_and_decrement_minute+0x10>
    4392:	61 50       	subi	r22, 0x01	; 1
    4394:	60 93 1f 3b 	sts	0x3B1F, r22
    4398:	04 c0       	rjmp	.+8      	; 0x43a2 <display_draw_and_decrement_minute+0x18>
    439a:	8b e3       	ldi	r24, 0x3B	; 59
    439c:	80 93 1f 3b 	sts	0x3B1F, r24
    43a0:	6b e3       	ldi	r22, 0x3B	; 59
    43a2:	85 e0       	ldi	r24, 0x05	; 5
    43a4:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <rtc_update_display>
    43a8:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <ht1632c_refresh_screen>

000043ac <display_draw_and_increment_day>:
	}
	display_refresh_screen();
}

void display_draw_and_increment_day(void)
{
    43ac:	cf 93       	push	r28
	if (env.time.day < time_get_days_in_month(env.time.month,env.time.year)) {
    43ae:	c0 91 21 3b 	lds	r28, 0x3B21
    43b2:	60 91 25 3b 	lds	r22, 0x3B25
    43b6:	70 91 26 3b 	lds	r23, 0x3B26
    43ba:	80 91 24 3b 	lds	r24, 0x3B24
    43be:	0e 94 fc 5b 	call	0xb7f8	; 0xb7f8 <time_get_days_in_month>
    43c2:	c8 17       	cp	r28, r24
    43c4:	30 f4       	brcc	.+12     	; 0x43d2 <display_draw_and_increment_day+0x26>
		rtc_update_display(5,++env.time.day);
    43c6:	60 91 21 3b 	lds	r22, 0x3B21
    43ca:	6f 5f       	subi	r22, 0xFF	; 255
    43cc:	60 93 21 3b 	sts	0x3B21, r22
    43d0:	04 c0       	rjmp	.+8      	; 0x43da <display_draw_and_increment_day+0x2e>
	} else {
		env.time.day = 1;
    43d2:	81 e0       	ldi	r24, 0x01	; 1
    43d4:	80 93 21 3b 	sts	0x3B21, r24
		rtc_update_display(5,env.time.day);
    43d8:	61 e0       	ldi	r22, 0x01	; 1
    43da:	85 e0       	ldi	r24, 0x05	; 5
    43dc:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <rtc_update_display>
	}
	display_refresh_screen();
}
    43e0:	cf 91       	pop	r28
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    43e2:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <ht1632c_refresh_screen>

000043e6 <display_draw_and_decrement_day>:
	display_refresh_screen();
}

void display_draw_and_decrement_day(void)
{
	if (env.time.day > 1) {
    43e6:	60 91 21 3b 	lds	r22, 0x3B21
    43ea:	62 30       	cpi	r22, 0x02	; 2
    43ec:	20 f0       	brcs	.+8      	; 0x43f6 <display_draw_and_decrement_day+0x10>
		rtc_update_display(5,--env.time.day);
    43ee:	61 50       	subi	r22, 0x01	; 1
    43f0:	60 93 21 3b 	sts	0x3B21, r22
    43f4:	0b c0       	rjmp	.+22     	; 0x440c <display_draw_and_decrement_day+0x26>
	} else {
		env.time.day = time_get_days_in_month(env.time.month,env.time.year);
    43f6:	60 91 25 3b 	lds	r22, 0x3B25
    43fa:	70 91 26 3b 	lds	r23, 0x3B26
    43fe:	80 91 24 3b 	lds	r24, 0x3B24
    4402:	0e 94 fc 5b 	call	0xb7f8	; 0xb7f8 <time_get_days_in_month>
    4406:	80 93 21 3b 	sts	0x3B21, r24
		rtc_update_display(5,env.time.day);
    440a:	68 2f       	mov	r22, r24
    440c:	85 e0       	ldi	r24, 0x05	; 5
    440e:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <rtc_update_display>
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4412:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <ht1632c_refresh_screen>

00004416 <display_draw_and_increment_month>:
	display_refresh_screen();
}

void display_draw_and_increment_month(void) 
{
	if (env.time.month < December) {
    4416:	80 91 24 3b 	lds	r24, 0x3B24
    441a:	8c 30       	cpi	r24, 0x0C	; 12
    441c:	10 f4       	brcc	.+4      	; 0x4422 <display_draw_and_increment_month+0xc>
		display_draw_three_letter_word(time_get_month_name(++env.time.month));
    441e:	8f 5f       	subi	r24, 0xFF	; 255
    4420:	01 c0       	rjmp	.+2      	; 0x4424 <display_draw_and_increment_month+0xe>
	} else {
		env.time.month = January;
    4422:	81 e0       	ldi	r24, 0x01	; 1
    4424:	80 93 24 3b 	sts	0x3B24, r24
		display_draw_three_letter_word(time_get_month_name(January));
    4428:	0e 94 a0 5b 	call	0xb740	; 0xb740 <time_get_month_name>
    442c:	6c de       	rcall	.-808    	; 0x4106 <display_draw_three_letter_word>
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    442e:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <ht1632c_refresh_screen>

00004432 <display_draw_and_decrement_month>:
	display_refresh_screen();
}

void display_draw_and_decrement_month(void) 
{
	if (env.time.month > January) {
    4432:	80 91 24 3b 	lds	r24, 0x3B24
    4436:	82 30       	cpi	r24, 0x02	; 2
    4438:	10 f0       	brcs	.+4      	; 0x443e <display_draw_and_decrement_month+0xc>
		display_draw_three_letter_word(time_get_month_name(--env.time.month));
    443a:	81 50       	subi	r24, 0x01	; 1
    443c:	01 c0       	rjmp	.+2      	; 0x4440 <display_draw_and_decrement_month+0xe>
	} else {
		env.time.month = December;
    443e:	8c e0       	ldi	r24, 0x0C	; 12
    4440:	80 93 24 3b 	sts	0x3B24, r24
		display_draw_three_letter_word(time_get_month_name(December));
    4444:	0e 94 a0 5b 	call	0xb740	; 0xb740 <time_get_month_name>
    4448:	5e de       	rcall	.-836    	; 0x4106 <display_draw_three_letter_word>
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    444a:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <ht1632c_refresh_screen>

0000444e <display_draw_and_increment_year>:
}

void display_draw_and_increment_year(void) 
{
	char *year = NULL;
	itoa_simple(year,++env.time.year);
    444e:	e5 e2       	ldi	r30, 0x25	; 37
    4450:	fb e3       	ldi	r31, 0x3B	; 59
    4452:	60 81       	ld	r22, Z
    4454:	71 81       	ldd	r23, Z+1	; 0x01
    4456:	6f 5f       	subi	r22, 0xFF	; 255
    4458:	7f 4f       	sbci	r23, 0xFF	; 255
    445a:	60 83       	st	Z, r22
    445c:	71 83       	std	Z+1, r23	; 0x01
    445e:	80 e0       	ldi	r24, 0x00	; 0
    4460:	90 e0       	ldi	r25, 0x00	; 0
    4462:	91 da       	rcall	.-2782   	; 0x3986 <itoa_simple.constprop.1>
	display_draw_four_letter_word(year);
    4464:	80 e0       	ldi	r24, 0x00	; 0
    4466:	90 e0       	ldi	r25, 0x00	; 0
    4468:	25 de       	rcall	.-950    	; 0x40b4 <display_draw_four_letter_word>
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    446a:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <ht1632c_refresh_screen>

0000446e <display_draw_and_decrement_year>:
}

void display_draw_and_decrement_year(void) 
{
	char *year = NULL;
	itoa_simple(year,--env.time.year);
    446e:	e5 e2       	ldi	r30, 0x25	; 37
    4470:	fb e3       	ldi	r31, 0x3B	; 59
    4472:	60 81       	ld	r22, Z
    4474:	71 81       	ldd	r23, Z+1	; 0x01
    4476:	61 50       	subi	r22, 0x01	; 1
    4478:	71 09       	sbc	r23, r1
    447a:	60 83       	st	Z, r22
    447c:	71 83       	std	Z+1, r23	; 0x01
    447e:	80 e0       	ldi	r24, 0x00	; 0
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	81 da       	rcall	.-2814   	; 0x3986 <itoa_simple.constprop.1>
	display_draw_four_letter_word(year);
    4484:	80 e0       	ldi	r24, 0x00	; 0
    4486:	90 e0       	ldi	r25, 0x00	; 0
    4488:	15 de       	rcall	.-982    	; 0x40b4 <display_draw_four_letter_word>
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    448a:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <ht1632c_refresh_screen>

0000448e <BUFFER_Init>:
	/* Save values */
	in = Buffer->In;
	out = Buffer->Out;
	
	return (Buffer->Size + in - out) % Buffer->Size;
}
    448e:	cf 93       	push	r28
    4490:	df 93       	push	r29
    4492:	ec 01       	movw	r28, r24
    4494:	82 e1       	ldi	r24, 0x12	; 18
    4496:	fe 01       	movw	r30, r28
    4498:	11 92       	st	Z+, r1
    449a:	8a 95       	dec	r24
    449c:	e9 f7       	brne	.-6      	; 0x4498 <BUFFER_Init+0xa>
    449e:	48 83       	st	Y, r20
    44a0:	59 83       	std	Y+1, r21	; 0x01
    44a2:	6a 83       	std	Y+2, r22	; 0x02
    44a4:	7b 83       	std	Y+3, r23	; 0x03
    44a6:	2c 87       	std	Y+12, r18	; 0x0c
    44a8:	3d 87       	std	Y+13, r19	; 0x0d
    44aa:	8a e0       	ldi	r24, 0x0A	; 10
    44ac:	8f 87       	std	Y+15, r24	; 0x0f
    44ae:	23 2b       	or	r18, r19
    44b0:	81 f4       	brne	.+32     	; 0x44d2 <BUFFER_Init+0x44>
    44b2:	ca 01       	movw	r24, r20
    44b4:	0e 94 a7 62 	call	0xc54e	; 0xc54e <malloc>
    44b8:	8c 87       	std	Y+12, r24	; 0x0c
    44ba:	9d 87       	std	Y+13, r25	; 0x0d
    44bc:	89 2b       	or	r24, r25
    44be:	31 f4       	brne	.+12     	; 0x44cc <BUFFER_Init+0x3e>
    44c0:	18 82       	st	Y, r1
    44c2:	19 82       	std	Y+1, r1	; 0x01
    44c4:	1a 82       	std	Y+2, r1	; 0x02
    44c6:	1b 82       	std	Y+3, r1	; 0x03
    44c8:	81 e0       	ldi	r24, 0x01	; 1
    44ca:	07 c0       	rjmp	.+14     	; 0x44da <BUFFER_Init+0x4c>
    44cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    44ce:	82 60       	ori	r24, 0x02	; 2
    44d0:	8e 87       	std	Y+14, r24	; 0x0e
    44d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    44d4:	81 60       	ori	r24, 0x01	; 1
    44d6:	8e 87       	std	Y+14, r24	; 0x0e
    44d8:	80 e0       	ldi	r24, 0x00	; 0
    44da:	df 91       	pop	r29
    44dc:	cf 91       	pop	r28
    44de:	08 95       	ret

000044e0 <BUFFER_GetFree>:
    44e0:	cf 92       	push	r12
    44e2:	df 92       	push	r13
    44e4:	ef 92       	push	r14
    44e6:	ff 92       	push	r15
    44e8:	0f 93       	push	r16
    44ea:	1f 93       	push	r17
    44ec:	fc 01       	movw	r30, r24
    44ee:	00 97       	sbiw	r24, 0x00	; 0
    44f0:	c9 f1       	breq	.+114    	; 0x4564 <BUFFER_GetFree+0x84>
    44f2:	04 81       	ldd	r16, Z+4	; 0x04
    44f4:	15 81       	ldd	r17, Z+5	; 0x05
    44f6:	26 81       	ldd	r18, Z+6	; 0x06
    44f8:	37 81       	ldd	r19, Z+7	; 0x07
    44fa:	c0 84       	ldd	r12, Z+8	; 0x08
    44fc:	d1 84       	ldd	r13, Z+9	; 0x09
    44fe:	e2 84       	ldd	r14, Z+10	; 0x0a
    4500:	f3 84       	ldd	r15, Z+11	; 0x0b
    4502:	0c 15       	cp	r16, r12
    4504:	1d 05       	cpc	r17, r13
    4506:	2e 05       	cpc	r18, r14
    4508:	3f 05       	cpc	r19, r15
    450a:	29 f4       	brne	.+10     	; 0x4516 <BUFFER_GetFree+0x36>
    450c:	40 81       	ld	r20, Z
    450e:	51 81       	ldd	r21, Z+1	; 0x01
    4510:	62 81       	ldd	r22, Z+2	; 0x02
    4512:	73 81       	ldd	r23, Z+3	; 0x03
    4514:	20 c0       	rjmp	.+64     	; 0x4556 <BUFFER_GetFree+0x76>
    4516:	0c 15       	cp	r16, r12
    4518:	1d 05       	cpc	r17, r13
    451a:	2e 05       	cpc	r18, r14
    451c:	3f 05       	cpc	r19, r15
    451e:	38 f4       	brcc	.+14     	; 0x452e <BUFFER_GetFree+0x4e>
    4520:	b7 01       	movw	r22, r14
    4522:	a6 01       	movw	r20, r12
    4524:	40 1b       	sub	r20, r16
    4526:	51 0b       	sbc	r21, r17
    4528:	62 0b       	sbc	r22, r18
    452a:	73 0b       	sbc	r23, r19
    452c:	03 c0       	rjmp	.+6      	; 0x4534 <BUFFER_GetFree+0x54>
    452e:	40 e0       	ldi	r20, 0x00	; 0
    4530:	50 e0       	ldi	r21, 0x00	; 0
    4532:	ba 01       	movw	r22, r20
    4534:	c0 16       	cp	r12, r16
    4536:	d1 06       	cpc	r13, r17
    4538:	e2 06       	cpc	r14, r18
    453a:	f3 06       	cpc	r15, r19
    453c:	60 f4       	brcc	.+24     	; 0x4556 <BUFFER_GetFree+0x76>
    453e:	40 81       	ld	r20, Z
    4540:	51 81       	ldd	r21, Z+1	; 0x01
    4542:	62 81       	ldd	r22, Z+2	; 0x02
    4544:	73 81       	ldd	r23, Z+3	; 0x03
    4546:	4c 0d       	add	r20, r12
    4548:	5d 1d       	adc	r21, r13
    454a:	6e 1d       	adc	r22, r14
    454c:	7f 1d       	adc	r23, r15
    454e:	40 1b       	sub	r20, r16
    4550:	51 0b       	sbc	r21, r17
    4552:	62 0b       	sbc	r22, r18
    4554:	73 0b       	sbc	r23, r19
    4556:	cb 01       	movw	r24, r22
    4558:	ba 01       	movw	r22, r20
    455a:	61 50       	subi	r22, 0x01	; 1
    455c:	71 09       	sbc	r23, r1
    455e:	81 09       	sbc	r24, r1
    4560:	91 09       	sbc	r25, r1
    4562:	03 c0       	rjmp	.+6      	; 0x456a <BUFFER_GetFree+0x8a>
    4564:	60 e0       	ldi	r22, 0x00	; 0
    4566:	70 e0       	ldi	r23, 0x00	; 0
    4568:	cb 01       	movw	r24, r22
    456a:	1f 91       	pop	r17
    456c:	0f 91       	pop	r16
    456e:	ff 90       	pop	r15
    4570:	ef 90       	pop	r14
    4572:	df 90       	pop	r13
    4574:	cf 90       	pop	r12
    4576:	08 95       	ret

00004578 <BUFFER_Write>:
    4578:	2f 92       	push	r2
    457a:	3f 92       	push	r3
    457c:	4f 92       	push	r4
    457e:	5f 92       	push	r5
    4580:	6f 92       	push	r6
    4582:	7f 92       	push	r7
    4584:	8f 92       	push	r8
    4586:	9f 92       	push	r9
    4588:	af 92       	push	r10
    458a:	bf 92       	push	r11
    458c:	cf 92       	push	r12
    458e:	df 92       	push	r13
    4590:	ef 92       	push	r14
    4592:	ff 92       	push	r15
    4594:	0f 93       	push	r16
    4596:	1f 93       	push	r17
    4598:	cf 93       	push	r28
    459a:	df 93       	push	r29
    459c:	00 d0       	rcall	.+0      	; 0x459e <BUFFER_Write+0x26>
    459e:	1f 92       	push	r1
    45a0:	cd b7       	in	r28, 0x3d	; 61
    45a2:	de b7       	in	r29, 0x3e	; 62
    45a4:	1c 01       	movw	r2, r24
    45a6:	8b 01       	movw	r16, r22
    45a8:	00 97       	sbiw	r24, 0x00	; 0
    45aa:	29 f4       	brne	.+10     	; 0x45b6 <BUFFER_Write+0x3e>
    45ac:	60 e0       	ldi	r22, 0x00	; 0
    45ae:	70 e0       	ldi	r23, 0x00	; 0
    45b0:	80 e0       	ldi	r24, 0x00	; 0
    45b2:	90 e0       	ldi	r25, 0x00	; 0
    45b4:	82 c0       	rjmp	.+260    	; 0x46ba <BUFFER_Write+0x142>
    45b6:	21 15       	cp	r18, r1
    45b8:	31 05       	cpc	r19, r1
    45ba:	41 05       	cpc	r20, r1
    45bc:	51 05       	cpc	r21, r1
    45be:	b1 f3       	breq	.-20     	; 0x45ac <BUFFER_Write+0x34>
    45c0:	fc 01       	movw	r30, r24
    45c2:	80 80       	ld	r8, Z
    45c4:	91 80       	ldd	r9, Z+1	; 0x01
    45c6:	a2 80       	ldd	r10, Z+2	; 0x02
    45c8:	b3 80       	ldd	r11, Z+3	; 0x03
    45ca:	84 81       	ldd	r24, Z+4	; 0x04
    45cc:	95 81       	ldd	r25, Z+5	; 0x05
    45ce:	a6 81       	ldd	r26, Z+6	; 0x06
    45d0:	b7 81       	ldd	r27, Z+7	; 0x07
    45d2:	88 15       	cp	r24, r8
    45d4:	99 05       	cpc	r25, r9
    45d6:	aa 05       	cpc	r26, r10
    45d8:	bb 05       	cpc	r27, r11
    45da:	20 f0       	brcs	.+8      	; 0x45e4 <BUFFER_Write+0x6c>
    45dc:	14 82       	std	Z+4, r1	; 0x04
    45de:	15 82       	std	Z+5, r1	; 0x05
    45e0:	16 82       	std	Z+6, r1	; 0x06
    45e2:	17 82       	std	Z+7, r1	; 0x07
    45e4:	c1 01       	movw	r24, r2
    45e6:	29 83       	std	Y+1, r18	; 0x01
    45e8:	3a 83       	std	Y+2, r19	; 0x02
    45ea:	4b 83       	std	Y+3, r20	; 0x03
    45ec:	5c 83       	std	Y+4, r21	; 0x04
    45ee:	78 df       	rcall	.-272    	; 0x44e0 <BUFFER_GetFree>
    45f0:	6b 01       	movw	r12, r22
    45f2:	7c 01       	movw	r14, r24
    45f4:	29 81       	ldd	r18, Y+1	; 0x01
    45f6:	3a 81       	ldd	r19, Y+2	; 0x02
    45f8:	4b 81       	ldd	r20, Y+3	; 0x03
    45fa:	5c 81       	ldd	r21, Y+4	; 0x04
    45fc:	62 17       	cp	r22, r18
    45fe:	73 07       	cpc	r23, r19
    4600:	84 07       	cpc	r24, r20
    4602:	95 07       	cpc	r25, r21
    4604:	30 f4       	brcc	.+12     	; 0x4612 <BUFFER_Write+0x9a>
    4606:	61 15       	cp	r22, r1
    4608:	71 05       	cpc	r23, r1
    460a:	81 05       	cpc	r24, r1
    460c:	91 05       	cpc	r25, r1
    460e:	19 f4       	brne	.+6      	; 0x4616 <BUFFER_Write+0x9e>
    4610:	cd cf       	rjmp	.-102    	; 0x45ac <BUFFER_Write+0x34>
    4612:	69 01       	movw	r12, r18
    4614:	7a 01       	movw	r14, r20
    4616:	f1 01       	movw	r30, r2
    4618:	44 81       	ldd	r20, Z+4	; 0x04
    461a:	55 81       	ldd	r21, Z+5	; 0x05
    461c:	66 81       	ldd	r22, Z+6	; 0x06
    461e:	77 81       	ldd	r23, Z+7	; 0x07
    4620:	d5 01       	movw	r26, r10
    4622:	c4 01       	movw	r24, r8
    4624:	84 1b       	sub	r24, r20
    4626:	95 0b       	sbc	r25, r21
    4628:	a6 0b       	sbc	r26, r22
    462a:	b7 0b       	sbc	r27, r23
    462c:	46 01       	movw	r8, r12
    462e:	57 01       	movw	r10, r14
    4630:	8c 15       	cp	r24, r12
    4632:	9d 05       	cpc	r25, r13
    4634:	ae 05       	cpc	r26, r14
    4636:	bf 05       	cpc	r27, r15
    4638:	10 f4       	brcc	.+4      	; 0x463e <BUFFER_Write+0xc6>
    463a:	4c 01       	movw	r8, r24
    463c:	5d 01       	movw	r10, r26
    463e:	f1 01       	movw	r30, r2
    4640:	84 85       	ldd	r24, Z+12	; 0x0c
    4642:	95 85       	ldd	r25, Z+13	; 0x0d
    4644:	84 0f       	add	r24, r20
    4646:	95 1f       	adc	r25, r21
    4648:	a4 01       	movw	r20, r8
    464a:	b8 01       	movw	r22, r16
    464c:	0e 94 c9 64 	call	0xc992	; 0xc992 <memcpy>
    4650:	f1 01       	movw	r30, r2
    4652:	84 81       	ldd	r24, Z+4	; 0x04
    4654:	95 81       	ldd	r25, Z+5	; 0x05
    4656:	a6 81       	ldd	r26, Z+6	; 0x06
    4658:	b7 81       	ldd	r27, Z+7	; 0x07
    465a:	88 0d       	add	r24, r8
    465c:	99 1d       	adc	r25, r9
    465e:	aa 1d       	adc	r26, r10
    4660:	bb 1d       	adc	r27, r11
    4662:	84 83       	std	Z+4, r24	; 0x04
    4664:	95 83       	std	Z+5, r25	; 0x05
    4666:	a6 83       	std	Z+6, r26	; 0x06
    4668:	b7 83       	std	Z+7, r27	; 0x07
    466a:	26 01       	movw	r4, r12
    466c:	37 01       	movw	r6, r14
    466e:	48 18       	sub	r4, r8
    4670:	59 08       	sbc	r5, r9
    4672:	6a 08       	sbc	r6, r10
    4674:	7b 08       	sbc	r7, r11
    4676:	69 f0       	breq	.+26     	; 0x4692 <BUFFER_Write+0x11a>
    4678:	b8 01       	movw	r22, r16
    467a:	68 0d       	add	r22, r8
    467c:	79 1d       	adc	r23, r9
    467e:	a2 01       	movw	r20, r4
    4680:	84 85       	ldd	r24, Z+12	; 0x0c
    4682:	95 85       	ldd	r25, Z+13	; 0x0d
    4684:	0e 94 c9 64 	call	0xc992	; 0xc992 <memcpy>
    4688:	f1 01       	movw	r30, r2
    468a:	44 82       	std	Z+4, r4	; 0x04
    468c:	55 82       	std	Z+5, r5	; 0x05
    468e:	66 82       	std	Z+6, r6	; 0x06
    4690:	77 82       	std	Z+7, r7	; 0x07
    4692:	f1 01       	movw	r30, r2
    4694:	44 81       	ldd	r20, Z+4	; 0x04
    4696:	55 81       	ldd	r21, Z+5	; 0x05
    4698:	66 81       	ldd	r22, Z+6	; 0x06
    469a:	77 81       	ldd	r23, Z+7	; 0x07
    469c:	80 81       	ld	r24, Z
    469e:	91 81       	ldd	r25, Z+1	; 0x01
    46a0:	a2 81       	ldd	r26, Z+2	; 0x02
    46a2:	b3 81       	ldd	r27, Z+3	; 0x03
    46a4:	48 17       	cp	r20, r24
    46a6:	59 07       	cpc	r21, r25
    46a8:	6a 07       	cpc	r22, r26
    46aa:	7b 07       	cpc	r23, r27
    46ac:	20 f0       	brcs	.+8      	; 0x46b6 <BUFFER_Write+0x13e>
    46ae:	14 82       	std	Z+4, r1	; 0x04
    46b0:	15 82       	std	Z+5, r1	; 0x05
    46b2:	16 82       	std	Z+6, r1	; 0x06
    46b4:	17 82       	std	Z+7, r1	; 0x07
    46b6:	b6 01       	movw	r22, r12
    46b8:	c7 01       	movw	r24, r14
    46ba:	24 96       	adiw	r28, 0x04	; 4
    46bc:	cd bf       	out	0x3d, r28	; 61
    46be:	de bf       	out	0x3e, r29	; 62
    46c0:	df 91       	pop	r29
    46c2:	cf 91       	pop	r28
    46c4:	1f 91       	pop	r17
    46c6:	0f 91       	pop	r16
    46c8:	ff 90       	pop	r15
    46ca:	ef 90       	pop	r14
    46cc:	df 90       	pop	r13
    46ce:	cf 90       	pop	r12
    46d0:	bf 90       	pop	r11
    46d2:	af 90       	pop	r10
    46d4:	9f 90       	pop	r9
    46d6:	8f 90       	pop	r8
    46d8:	7f 90       	pop	r7
    46da:	6f 90       	pop	r6
    46dc:	5f 90       	pop	r5
    46de:	4f 90       	pop	r4
    46e0:	3f 90       	pop	r3
    46e2:	2f 90       	pop	r2
    46e4:	08 95       	ret

000046e6 <BUFFER_GetFull>:
    46e6:	cf 92       	push	r12
    46e8:	df 92       	push	r13
    46ea:	ef 92       	push	r14
    46ec:	ff 92       	push	r15
    46ee:	0f 93       	push	r16
    46f0:	1f 93       	push	r17
    46f2:	fc 01       	movw	r30, r24
    46f4:	00 97       	sbiw	r24, 0x00	; 0
    46f6:	49 f1       	breq	.+82     	; 0x474a <BUFFER_GetFull+0x64>
    46f8:	c4 80       	ldd	r12, Z+4	; 0x04
    46fa:	d5 80       	ldd	r13, Z+5	; 0x05
    46fc:	e6 80       	ldd	r14, Z+6	; 0x06
    46fe:	f7 80       	ldd	r15, Z+7	; 0x07
    4700:	00 85       	ldd	r16, Z+8	; 0x08
    4702:	11 85       	ldd	r17, Z+9	; 0x09
    4704:	22 85       	ldd	r18, Z+10	; 0x0a
    4706:	33 85       	ldd	r19, Z+11	; 0x0b
    4708:	0c 15       	cp	r16, r12
    470a:	1d 05       	cpc	r17, r13
    470c:	2e 05       	cpc	r18, r14
    470e:	3f 05       	cpc	r19, r15
    4710:	38 f4       	brcc	.+14     	; 0x4720 <BUFFER_GetFull+0x3a>
    4712:	d7 01       	movw	r26, r14
    4714:	c6 01       	movw	r24, r12
    4716:	80 1b       	sub	r24, r16
    4718:	91 0b       	sbc	r25, r17
    471a:	a2 0b       	sbc	r26, r18
    471c:	b3 0b       	sbc	r27, r19
    471e:	03 c0       	rjmp	.+6      	; 0x4726 <BUFFER_GetFull+0x40>
    4720:	80 e0       	ldi	r24, 0x00	; 0
    4722:	90 e0       	ldi	r25, 0x00	; 0
    4724:	dc 01       	movw	r26, r24
    4726:	c0 16       	cp	r12, r16
    4728:	d1 06       	cpc	r13, r17
    472a:	e2 06       	cpc	r14, r18
    472c:	f3 06       	cpc	r15, r19
    472e:	88 f4       	brcc	.+34     	; 0x4752 <BUFFER_GetFull+0x6c>
    4730:	60 81       	ld	r22, Z
    4732:	71 81       	ldd	r23, Z+1	; 0x01
    4734:	82 81       	ldd	r24, Z+2	; 0x02
    4736:	93 81       	ldd	r25, Z+3	; 0x03
    4738:	6c 0d       	add	r22, r12
    473a:	7d 1d       	adc	r23, r13
    473c:	8e 1d       	adc	r24, r14
    473e:	9f 1d       	adc	r25, r15
    4740:	60 1b       	sub	r22, r16
    4742:	71 0b       	sbc	r23, r17
    4744:	82 0b       	sbc	r24, r18
    4746:	93 0b       	sbc	r25, r19
    4748:	06 c0       	rjmp	.+12     	; 0x4756 <BUFFER_GetFull+0x70>
    474a:	60 e0       	ldi	r22, 0x00	; 0
    474c:	70 e0       	ldi	r23, 0x00	; 0
    474e:	cb 01       	movw	r24, r22
    4750:	02 c0       	rjmp	.+4      	; 0x4756 <BUFFER_GetFull+0x70>
    4752:	bc 01       	movw	r22, r24
    4754:	cd 01       	movw	r24, r26
    4756:	1f 91       	pop	r17
    4758:	0f 91       	pop	r16
    475a:	ff 90       	pop	r15
    475c:	ef 90       	pop	r14
    475e:	df 90       	pop	r13
    4760:	cf 90       	pop	r12
    4762:	08 95       	ret

00004764 <BUFFER_Read>:
    4764:	2f 92       	push	r2
    4766:	3f 92       	push	r3
    4768:	4f 92       	push	r4
    476a:	5f 92       	push	r5
    476c:	6f 92       	push	r6
    476e:	7f 92       	push	r7
    4770:	8f 92       	push	r8
    4772:	9f 92       	push	r9
    4774:	af 92       	push	r10
    4776:	bf 92       	push	r11
    4778:	cf 92       	push	r12
    477a:	df 92       	push	r13
    477c:	ef 92       	push	r14
    477e:	ff 92       	push	r15
    4780:	0f 93       	push	r16
    4782:	1f 93       	push	r17
    4784:	cf 93       	push	r28
    4786:	df 93       	push	r29
    4788:	00 d0       	rcall	.+0      	; 0x478a <BUFFER_Read+0x26>
    478a:	1f 92       	push	r1
    478c:	cd b7       	in	r28, 0x3d	; 61
    478e:	de b7       	in	r29, 0x3e	; 62
    4790:	1c 01       	movw	r2, r24
    4792:	8b 01       	movw	r16, r22
    4794:	00 97       	sbiw	r24, 0x00	; 0
    4796:	29 f4       	brne	.+10     	; 0x47a2 <BUFFER_Read+0x3e>
    4798:	60 e0       	ldi	r22, 0x00	; 0
    479a:	70 e0       	ldi	r23, 0x00	; 0
    479c:	80 e0       	ldi	r24, 0x00	; 0
    479e:	90 e0       	ldi	r25, 0x00	; 0
    47a0:	82 c0       	rjmp	.+260    	; 0x48a6 <BUFFER_Read+0x142>
    47a2:	21 15       	cp	r18, r1
    47a4:	31 05       	cpc	r19, r1
    47a6:	41 05       	cpc	r20, r1
    47a8:	51 05       	cpc	r21, r1
    47aa:	b1 f3       	breq	.-20     	; 0x4798 <BUFFER_Read+0x34>
    47ac:	fc 01       	movw	r30, r24
    47ae:	80 80       	ld	r8, Z
    47b0:	91 80       	ldd	r9, Z+1	; 0x01
    47b2:	a2 80       	ldd	r10, Z+2	; 0x02
    47b4:	b3 80       	ldd	r11, Z+3	; 0x03
    47b6:	80 85       	ldd	r24, Z+8	; 0x08
    47b8:	91 85       	ldd	r25, Z+9	; 0x09
    47ba:	a2 85       	ldd	r26, Z+10	; 0x0a
    47bc:	b3 85       	ldd	r27, Z+11	; 0x0b
    47be:	88 15       	cp	r24, r8
    47c0:	99 05       	cpc	r25, r9
    47c2:	aa 05       	cpc	r26, r10
    47c4:	bb 05       	cpc	r27, r11
    47c6:	20 f0       	brcs	.+8      	; 0x47d0 <BUFFER_Read+0x6c>
    47c8:	10 86       	std	Z+8, r1	; 0x08
    47ca:	11 86       	std	Z+9, r1	; 0x09
    47cc:	12 86       	std	Z+10, r1	; 0x0a
    47ce:	13 86       	std	Z+11, r1	; 0x0b
    47d0:	c1 01       	movw	r24, r2
    47d2:	29 83       	std	Y+1, r18	; 0x01
    47d4:	3a 83       	std	Y+2, r19	; 0x02
    47d6:	4b 83       	std	Y+3, r20	; 0x03
    47d8:	5c 83       	std	Y+4, r21	; 0x04
    47da:	85 df       	rcall	.-246    	; 0x46e6 <BUFFER_GetFull>
    47dc:	6b 01       	movw	r12, r22
    47de:	7c 01       	movw	r14, r24
    47e0:	29 81       	ldd	r18, Y+1	; 0x01
    47e2:	3a 81       	ldd	r19, Y+2	; 0x02
    47e4:	4b 81       	ldd	r20, Y+3	; 0x03
    47e6:	5c 81       	ldd	r21, Y+4	; 0x04
    47e8:	62 17       	cp	r22, r18
    47ea:	73 07       	cpc	r23, r19
    47ec:	84 07       	cpc	r24, r20
    47ee:	95 07       	cpc	r25, r21
    47f0:	30 f4       	brcc	.+12     	; 0x47fe <BUFFER_Read+0x9a>
    47f2:	61 15       	cp	r22, r1
    47f4:	71 05       	cpc	r23, r1
    47f6:	81 05       	cpc	r24, r1
    47f8:	91 05       	cpc	r25, r1
    47fa:	19 f4       	brne	.+6      	; 0x4802 <BUFFER_Read+0x9e>
    47fc:	cd cf       	rjmp	.-102    	; 0x4798 <BUFFER_Read+0x34>
    47fe:	69 01       	movw	r12, r18
    4800:	7a 01       	movw	r14, r20
    4802:	f1 01       	movw	r30, r2
    4804:	80 85       	ldd	r24, Z+8	; 0x08
    4806:	91 85       	ldd	r25, Z+9	; 0x09
    4808:	a2 85       	ldd	r26, Z+10	; 0x0a
    480a:	b3 85       	ldd	r27, Z+11	; 0x0b
    480c:	b5 01       	movw	r22, r10
    480e:	a4 01       	movw	r20, r8
    4810:	48 1b       	sub	r20, r24
    4812:	59 0b       	sbc	r21, r25
    4814:	6a 0b       	sbc	r22, r26
    4816:	7b 0b       	sbc	r23, r27
    4818:	46 01       	movw	r8, r12
    481a:	57 01       	movw	r10, r14
    481c:	4c 15       	cp	r20, r12
    481e:	5d 05       	cpc	r21, r13
    4820:	6e 05       	cpc	r22, r14
    4822:	7f 05       	cpc	r23, r15
    4824:	10 f4       	brcc	.+4      	; 0x482a <BUFFER_Read+0xc6>
    4826:	4a 01       	movw	r8, r20
    4828:	5b 01       	movw	r10, r22
    482a:	f1 01       	movw	r30, r2
    482c:	64 85       	ldd	r22, Z+12	; 0x0c
    482e:	75 85       	ldd	r23, Z+13	; 0x0d
    4830:	68 0f       	add	r22, r24
    4832:	79 1f       	adc	r23, r25
    4834:	a4 01       	movw	r20, r8
    4836:	c8 01       	movw	r24, r16
    4838:	0e 94 c9 64 	call	0xc992	; 0xc992 <memcpy>
    483c:	f1 01       	movw	r30, r2
    483e:	80 85       	ldd	r24, Z+8	; 0x08
    4840:	91 85       	ldd	r25, Z+9	; 0x09
    4842:	a2 85       	ldd	r26, Z+10	; 0x0a
    4844:	b3 85       	ldd	r27, Z+11	; 0x0b
    4846:	88 0d       	add	r24, r8
    4848:	99 1d       	adc	r25, r9
    484a:	aa 1d       	adc	r26, r10
    484c:	bb 1d       	adc	r27, r11
    484e:	80 87       	std	Z+8, r24	; 0x08
    4850:	91 87       	std	Z+9, r25	; 0x09
    4852:	a2 87       	std	Z+10, r26	; 0x0a
    4854:	b3 87       	std	Z+11, r27	; 0x0b
    4856:	26 01       	movw	r4, r12
    4858:	37 01       	movw	r6, r14
    485a:	48 18       	sub	r4, r8
    485c:	59 08       	sbc	r5, r9
    485e:	6a 08       	sbc	r6, r10
    4860:	7b 08       	sbc	r7, r11
    4862:	69 f0       	breq	.+26     	; 0x487e <BUFFER_Read+0x11a>
    4864:	c8 01       	movw	r24, r16
    4866:	88 0d       	add	r24, r8
    4868:	99 1d       	adc	r25, r9
    486a:	64 85       	ldd	r22, Z+12	; 0x0c
    486c:	75 85       	ldd	r23, Z+13	; 0x0d
    486e:	a2 01       	movw	r20, r4
    4870:	0e 94 c9 64 	call	0xc992	; 0xc992 <memcpy>
    4874:	f1 01       	movw	r30, r2
    4876:	40 86       	std	Z+8, r4	; 0x08
    4878:	51 86       	std	Z+9, r5	; 0x09
    487a:	62 86       	std	Z+10, r6	; 0x0a
    487c:	73 86       	std	Z+11, r7	; 0x0b
    487e:	f1 01       	movw	r30, r2
    4880:	40 85       	ldd	r20, Z+8	; 0x08
    4882:	51 85       	ldd	r21, Z+9	; 0x09
    4884:	62 85       	ldd	r22, Z+10	; 0x0a
    4886:	73 85       	ldd	r23, Z+11	; 0x0b
    4888:	80 81       	ld	r24, Z
    488a:	91 81       	ldd	r25, Z+1	; 0x01
    488c:	a2 81       	ldd	r26, Z+2	; 0x02
    488e:	b3 81       	ldd	r27, Z+3	; 0x03
    4890:	48 17       	cp	r20, r24
    4892:	59 07       	cpc	r21, r25
    4894:	6a 07       	cpc	r22, r26
    4896:	7b 07       	cpc	r23, r27
    4898:	20 f0       	brcs	.+8      	; 0x48a2 <BUFFER_Read+0x13e>
    489a:	10 86       	std	Z+8, r1	; 0x08
    489c:	11 86       	std	Z+9, r1	; 0x09
    489e:	12 86       	std	Z+10, r1	; 0x0a
    48a0:	13 86       	std	Z+11, r1	; 0x0b
    48a2:	b6 01       	movw	r22, r12
    48a4:	c7 01       	movw	r24, r14
    48a6:	24 96       	adiw	r28, 0x04	; 4
    48a8:	cd bf       	out	0x3d, r28	; 61
    48aa:	de bf       	out	0x3e, r29	; 62
    48ac:	df 91       	pop	r29
    48ae:	cf 91       	pop	r28
    48b0:	1f 91       	pop	r17
    48b2:	0f 91       	pop	r16
    48b4:	ff 90       	pop	r15
    48b6:	ef 90       	pop	r14
    48b8:	df 90       	pop	r13
    48ba:	cf 90       	pop	r12
    48bc:	bf 90       	pop	r11
    48be:	af 90       	pop	r10
    48c0:	9f 90       	pop	r9
    48c2:	8f 90       	pop	r8
    48c4:	7f 90       	pop	r7
    48c6:	6f 90       	pop	r6
    48c8:	5f 90       	pop	r5
    48ca:	4f 90       	pop	r4
    48cc:	3f 90       	pop	r3
    48ce:	2f 90       	pop	r2
    48d0:	08 95       	ret

000048d2 <BUFFER_Reset>:

void BUFFER_Reset(BUFFER_t* Buffer) {
	/* Check buffer structure */
	if (Buffer == NULL) {
    48d2:	00 97       	sbiw	r24, 0x00	; 0
    48d4:	49 f0       	breq	.+18     	; 0x48e8 <BUFFER_Reset+0x16>
		return;
	}
	
	/* Reset values */
	Buffer->In = 0;
    48d6:	fc 01       	movw	r30, r24
    48d8:	14 82       	std	Z+4, r1	; 0x04
    48da:	15 82       	std	Z+5, r1	; 0x05
    48dc:	16 82       	std	Z+6, r1	; 0x06
    48de:	17 82       	std	Z+7, r1	; 0x07
	Buffer->Out = 0;
    48e0:	10 86       	std	Z+8, r1	; 0x08
    48e2:	11 86       	std	Z+9, r1	; 0x09
    48e4:	12 86       	std	Z+10, r1	; 0x0a
    48e6:	13 86       	std	Z+11, r1	; 0x0b
    48e8:	08 95       	ret

000048ea <BUFFER_FindElement>:
}

int32_t BUFFER_FindElement(BUFFER_t* Buffer, uint8_t Element) {
    48ea:	7f 92       	push	r7
    48ec:	8f 92       	push	r8
    48ee:	9f 92       	push	r9
    48f0:	af 92       	push	r10
    48f2:	bf 92       	push	r11
    48f4:	cf 92       	push	r12
    48f6:	df 92       	push	r13
    48f8:	ef 92       	push	r14
    48fa:	ff 92       	push	r15
    48fc:	0f 93       	push	r16
    48fe:	1f 93       	push	r17
    4900:	cf 93       	push	r28
    4902:	df 93       	push	r29
    4904:	ec 01       	movw	r28, r24
    4906:	76 2e       	mov	r7, r22
	uint32_t Num, Out, retval = 0;
	
	/* Check buffer structure */
	if (Buffer == NULL) {
    4908:	00 97       	sbiw	r24, 0x00	; 0
    490a:	71 f1       	breq	.+92     	; 0x4968 <BUFFER_FindElement+0x7e>
		return -1;
	}
	
	/* Create temporary variables */
	Num = BUFFER_GetFull(Buffer);
    490c:	ec de       	rcall	.-552    	; 0x46e6 <BUFFER_GetFull>
	Out = Buffer->Out;
    490e:	08 85       	ldd	r16, Y+8	; 0x08
    4910:	19 85       	ldd	r17, Y+9	; 0x09
    4912:	2a 85       	ldd	r18, Y+10	; 0x0a
    4914:	3b 85       	ldd	r19, Y+11	; 0x0b
	Buffer->In = 0;
	Buffer->Out = 0;
}

int32_t BUFFER_FindElement(BUFFER_t* Buffer, uint8_t Element) {
	uint32_t Num, Out, retval = 0;
    4916:	c1 2c       	mov	r12, r1
    4918:	d1 2c       	mov	r13, r1
    491a:	76 01       	movw	r14, r12
	/* Create temporary variables */
	Num = BUFFER_GetFull(Buffer);
	Out = Buffer->Out;
	
	/* Go through input elements */
	while (Num > 0) {
    491c:	c6 16       	cp	r12, r22
    491e:	d7 06       	cpc	r13, r23
    4920:	e8 06       	cpc	r14, r24
    4922:	f9 06       	cpc	r15, r25
    4924:	09 f1       	breq	.+66     	; 0x4968 <BUFFER_FindElement+0x7e>
		/* Check output overflow */
		if (Out >= Buffer->Size) {
    4926:	88 80       	ld	r8, Y
    4928:	99 80       	ldd	r9, Y+1	; 0x01
    492a:	aa 80       	ldd	r10, Y+2	; 0x02
    492c:	bb 80       	ldd	r11, Y+3	; 0x03
    492e:	08 15       	cp	r16, r8
    4930:	19 05       	cpc	r17, r9
    4932:	2a 05       	cpc	r18, r10
    4934:	3b 05       	cpc	r19, r11
    4936:	18 f0       	brcs	.+6      	; 0x493e <BUFFER_FindElement+0x54>
			Out = 0;
    4938:	00 e0       	ldi	r16, 0x00	; 0
    493a:	10 e0       	ldi	r17, 0x00	; 0
    493c:	98 01       	movw	r18, r16
		}
		
		/* Check for element */
		if ((uint8_t)Buffer->Buffer[Out] == (uint8_t)Element) {
    493e:	ec 85       	ldd	r30, Y+12	; 0x0c
    4940:	fd 85       	ldd	r31, Y+13	; 0x0d
    4942:	e0 0f       	add	r30, r16
    4944:	f1 1f       	adc	r31, r17
    4946:	40 81       	ld	r20, Z
    4948:	47 11       	cpse	r20, r7
    494a:	04 c0       	rjmp	.+8      	; 0x4954 <BUFFER_FindElement+0x6a>
			/* Element found, return position in buffer */
			return retval;
    494c:	3c 2d       	mov	r19, r12
    494e:	2d 2d       	mov	r18, r13
    4950:	c7 01       	movw	r24, r14
    4952:	0e c0       	rjmp	.+28     	; 0x4970 <BUFFER_FindElement+0x86>
		}
		
		/* Set new variables */
		Out++;
    4954:	0f 5f       	subi	r16, 0xFF	; 255
    4956:	1f 4f       	sbci	r17, 0xFF	; 255
    4958:	2f 4f       	sbci	r18, 0xFF	; 255
    495a:	3f 4f       	sbci	r19, 0xFF	; 255
		Num--;
		retval++;
    495c:	4f ef       	ldi	r20, 0xFF	; 255
    495e:	c4 1a       	sub	r12, r20
    4960:	d4 0a       	sbc	r13, r20
    4962:	e4 0a       	sbc	r14, r20
    4964:	f4 0a       	sbc	r15, r20
    4966:	da cf       	rjmp	.-76     	; 0x491c <BUFFER_FindElement+0x32>
int32_t BUFFER_FindElement(BUFFER_t* Buffer, uint8_t Element) {
	uint32_t Num, Out, retval = 0;
	
	/* Check buffer structure */
	if (Buffer == NULL) {
		return -1;
    4968:	3f ef       	ldi	r19, 0xFF	; 255
    496a:	2f ef       	ldi	r18, 0xFF	; 255
    496c:	8f ef       	ldi	r24, 0xFF	; 255
    496e:	9f ef       	ldi	r25, 0xFF	; 255
		retval++;
	}
	
	/* Element is not in buffer */
	return -1;
}
    4970:	63 2f       	mov	r22, r19
    4972:	72 2f       	mov	r23, r18
    4974:	df 91       	pop	r29
    4976:	cf 91       	pop	r28
    4978:	1f 91       	pop	r17
    497a:	0f 91       	pop	r16
    497c:	ff 90       	pop	r15
    497e:	ef 90       	pop	r14
    4980:	df 90       	pop	r13
    4982:	cf 90       	pop	r12
    4984:	bf 90       	pop	r11
    4986:	af 90       	pop	r10
    4988:	9f 90       	pop	r9
    498a:	8f 90       	pop	r8
    498c:	7f 90       	pop	r7
    498e:	08 95       	ret

00004990 <BUFFER_Find>:

int32_t BUFFER_Find(BUFFER_t* Buffer, uint8_t* Data, uint32_t Size) {
    4990:	2f 92       	push	r2
    4992:	3f 92       	push	r3
    4994:	4f 92       	push	r4
    4996:	5f 92       	push	r5
    4998:	6f 92       	push	r6
    499a:	7f 92       	push	r7
    499c:	8f 92       	push	r8
    499e:	9f 92       	push	r9
    49a0:	af 92       	push	r10
    49a2:	bf 92       	push	r11
    49a4:	cf 92       	push	r12
    49a6:	df 92       	push	r13
    49a8:	ef 92       	push	r14
    49aa:	ff 92       	push	r15
    49ac:	0f 93       	push	r16
    49ae:	1f 93       	push	r17
    49b0:	cf 93       	push	r28
    49b2:	df 93       	push	r29
    49b4:	cd b7       	in	r28, 0x3d	; 61
    49b6:	de b7       	in	r29, 0x3e	; 62
    49b8:	6a 97       	sbiw	r28, 0x1a	; 26
    49ba:	cd bf       	out	0x3d, r28	; 61
    49bc:	de bf       	out	0x3e, r29	; 62
    49be:	8d 8b       	std	Y+21, r24	; 0x15
    49c0:	9e 8b       	std	Y+22, r25	; 0x16
    49c2:	1b 01       	movw	r2, r22
    49c4:	2f 8b       	std	Y+23, r18	; 0x17
    49c6:	38 8f       	std	Y+24, r19	; 0x18
    49c8:	49 8f       	std	Y+25, r20	; 0x19
    49ca:	5a 8f       	std	Y+26, r21	; 0x1a
	uint32_t Num, Out, i, retval = 0;
	uint8_t found = 0;

	/* Check buffer structure and number of elements in buffer */
	if (Buffer == NULL || (Num = BUFFER_GetFull(Buffer)) < Size) {
    49cc:	00 97       	sbiw	r24, 0x00	; 0
    49ce:	09 f4       	brne	.+2      	; 0x49d2 <BUFFER_Find+0x42>
    49d0:	d3 c0       	rjmp	.+422    	; 0x4b78 <BUFFER_Find+0x1e8>
    49d2:	89 de       	rcall	.-750    	; 0x46e6 <BUFFER_GetFull>
    49d4:	4f 88       	ldd	r4, Y+23	; 0x17
    49d6:	58 8c       	ldd	r5, Y+24	; 0x18
    49d8:	69 8c       	ldd	r6, Y+25	; 0x19
    49da:	7a 8c       	ldd	r7, Y+26	; 0x1a
    49dc:	64 15       	cp	r22, r4
    49de:	75 05       	cpc	r23, r5
    49e0:	86 05       	cpc	r24, r6
    49e2:	97 05       	cpc	r25, r7
    49e4:	08 f4       	brcc	.+2      	; 0x49e8 <BUFFER_Find+0x58>
    49e6:	c8 c0       	rjmp	.+400    	; 0x4b78 <BUFFER_Find+0x1e8>
		return -1;
	}

	/* Create temporary variables */
	Out = Buffer->Out;
    49e8:	ad 89       	ldd	r26, Y+21	; 0x15
    49ea:	be 89       	ldd	r27, Y+22	; 0x16
    49ec:	18 96       	adiw	r26, 0x08	; 8
    49ee:	6d 90       	ld	r6, X+
    49f0:	7d 90       	ld	r7, X+
    49f2:	8d 90       	ld	r8, X+
    49f4:	9c 90       	ld	r9, X
    49f6:	1b 97       	sbiw	r26, 0x0b	; 11
    49f8:	69 82       	std	Y+1, r6	; 0x01
    49fa:	7a 82       	std	Y+2, r7	; 0x02
    49fc:	8b 82       	std	Y+3, r8	; 0x03
    49fe:	9c 82       	std	Y+4, r9	; 0x04
	return -1;
}

int32_t BUFFER_Find(BUFFER_t* Buffer, uint8_t* Data, uint32_t Size) {
	uint32_t Num, Out, i, retval = 0;
	uint8_t found = 0;
    4a00:	10 e0       	ldi	r17, 0x00	; 0
	/* Element is not in buffer */
	return -1;
}

int32_t BUFFER_Find(BUFFER_t* Buffer, uint8_t* Data, uint32_t Size) {
	uint32_t Num, Out, i, retval = 0;
    4a02:	19 8a       	std	Y+17, r1	; 0x11
    4a04:	1a 8a       	std	Y+18, r1	; 0x12
    4a06:	1b 8a       	std	Y+19, r1	; 0x13
    4a08:	1c 8a       	std	Y+20, r1	; 0x14

	/* Create temporary variables */
	Out = Buffer->Out;

	/* Go through input elements in buffer */
	while (Num > 0) {
    4a0a:	61 15       	cp	r22, r1
    4a0c:	71 05       	cpc	r23, r1
    4a0e:	81 05       	cpc	r24, r1
    4a10:	91 05       	cpc	r25, r1
    4a12:	09 f4       	brne	.+2      	; 0x4a16 <BUFFER_Find+0x86>
    4a14:	b1 c0       	rjmp	.+354    	; 0x4b78 <BUFFER_Find+0x1e8>
		/* Check output overflow */
		if (Out >= Buffer->Size) {
    4a16:	ad 89       	ldd	r26, Y+21	; 0x15
    4a18:	be 89       	ldd	r27, Y+22	; 0x16
    4a1a:	4d 90       	ld	r4, X+
    4a1c:	5d 90       	ld	r5, X+
    4a1e:	6d 90       	ld	r6, X+
    4a20:	7c 90       	ld	r7, X
    4a22:	49 86       	std	Y+9, r4	; 0x09
    4a24:	5a 86       	std	Y+10, r5	; 0x0a
    4a26:	6b 86       	std	Y+11, r6	; 0x0b
    4a28:	7c 86       	std	Y+12, r7	; 0x0c
    4a2a:	89 80       	ldd	r8, Y+1	; 0x01
    4a2c:	9a 80       	ldd	r9, Y+2	; 0x02
    4a2e:	ab 80       	ldd	r10, Y+3	; 0x03
    4a30:	bc 80       	ldd	r11, Y+4	; 0x04
    4a32:	84 14       	cp	r8, r4
    4a34:	95 04       	cpc	r9, r5
    4a36:	a6 04       	cpc	r10, r6
    4a38:	b7 04       	cpc	r11, r7
    4a3a:	20 f0       	brcs	.+8      	; 0x4a44 <BUFFER_Find+0xb4>
			Out = 0;
    4a3c:	19 82       	std	Y+1, r1	; 0x01
    4a3e:	1a 82       	std	Y+2, r1	; 0x02
    4a40:	1b 82       	std	Y+3, r1	; 0x03
    4a42:	1c 82       	std	Y+4, r1	; 0x04
		}

		/* Check if current element in buffer matches first element in data array */
		if ((uint8_t)Buffer->Buffer[Out] == (uint8_t)Data[0]) {
    4a44:	ed 89       	ldd	r30, Y+21	; 0x15
    4a46:	fe 89       	ldd	r31, Y+22	; 0x16
    4a48:	a4 85       	ldd	r26, Z+12	; 0x0c
    4a4a:	b5 85       	ldd	r27, Z+13	; 0x0d
    4a4c:	29 81       	ldd	r18, Y+1	; 0x01
    4a4e:	3a 81       	ldd	r19, Y+2	; 0x02
    4a50:	2a 0f       	add	r18, r26
    4a52:	3b 1f       	adc	r19, r27
    4a54:	f9 01       	movw	r30, r18
    4a56:	20 81       	ld	r18, Z
    4a58:	f1 01       	movw	r30, r2
    4a5a:	30 81       	ld	r19, Z
    4a5c:	23 13       	cpse	r18, r19
    4a5e:	01 c0       	rjmp	.+2      	; 0x4a62 <BUFFER_Find+0xd2>
			found = 1;
    4a60:	11 e0       	ldi	r17, 0x01	; 1
		}

		/* Set new variables */
		Out++;
    4a62:	29 81       	ldd	r18, Y+1	; 0x01
    4a64:	3a 81       	ldd	r19, Y+2	; 0x02
    4a66:	4b 81       	ldd	r20, Y+3	; 0x03
    4a68:	5c 81       	ldd	r21, Y+4	; 0x04
    4a6a:	2f 5f       	subi	r18, 0xFF	; 255
    4a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a6e:	4f 4f       	sbci	r20, 0xFF	; 255
    4a70:	5f 4f       	sbci	r21, 0xFF	; 255
    4a72:	29 83       	std	Y+1, r18	; 0x01
    4a74:	3a 83       	std	Y+2, r19	; 0x02
    4a76:	4b 83       	std	Y+3, r20	; 0x03
    4a78:	5c 83       	std	Y+4, r21	; 0x04
		Num--;
    4a7a:	9b 01       	movw	r18, r22
    4a7c:	ac 01       	movw	r20, r24
    4a7e:	21 50       	subi	r18, 0x01	; 1
    4a80:	31 09       	sbc	r19, r1
    4a82:	41 09       	sbc	r20, r1
    4a84:	51 09       	sbc	r21, r1
    4a86:	2d 83       	std	Y+5, r18	; 0x05
    4a88:	3e 83       	std	Y+6, r19	; 0x06
    4a8a:	4f 83       	std	Y+7, r20	; 0x07
    4a8c:	58 87       	std	Y+8, r21	; 0x08
		retval++;
    4a8e:	49 88       	ldd	r4, Y+17	; 0x11
    4a90:	5a 88       	ldd	r5, Y+18	; 0x12
    4a92:	6b 88       	ldd	r6, Y+19	; 0x13
    4a94:	7c 88       	ldd	r7, Y+20	; 0x14
    4a96:	3f ef       	ldi	r19, 0xFF	; 255
    4a98:	43 1a       	sub	r4, r19
    4a9a:	53 0a       	sbc	r5, r19
    4a9c:	63 0a       	sbc	r6, r19
    4a9e:	73 0a       	sbc	r7, r19

		/* We have found first element */
		if (found) {
    4aa0:	11 23       	and	r17, r17
    4aa2:	09 f4       	brne	.+2      	; 0x4aa6 <BUFFER_Find+0x116>
    4aa4:	60 c0       	rjmp	.+192    	; 0x4b66 <BUFFER_Find+0x1d6>
    4aa6:	c1 2c       	mov	r12, r1
    4aa8:	d1 2c       	mov	r13, r1
    4aaa:	76 01       	movw	r14, r12
    4aac:	c3 94       	inc	r12
    4aae:	9b 01       	movw	r18, r22
    4ab0:	ac 01       	movw	r20, r24
    4ab2:	2c 19       	sub	r18, r12
    4ab4:	3d 09       	sbc	r19, r13
    4ab6:	4e 09       	sbc	r20, r14
    4ab8:	5f 09       	sbc	r21, r15
    4aba:	2d 83       	std	Y+5, r18	; 0x05
    4abc:	3e 83       	std	Y+6, r19	; 0x06
    4abe:	4f 83       	std	Y+7, r20	; 0x07
    4ac0:	58 87       	std	Y+8, r21	; 0x08
			/* First character found */
			/* Check others */
			i = 1;
			while (i < Size) {
    4ac2:	8f 88       	ldd	r8, Y+23	; 0x17
    4ac4:	98 8c       	ldd	r9, Y+24	; 0x18
    4ac6:	a9 8c       	ldd	r10, Y+25	; 0x19
    4ac8:	ba 8c       	ldd	r11, Y+26	; 0x1a
    4aca:	c8 14       	cp	r12, r8
    4acc:	d9 04       	cpc	r13, r9
    4ace:	ea 04       	cpc	r14, r10
    4ad0:	fb 04       	cpc	r15, r11
    4ad2:	c0 f5       	brcc	.+112    	; 0x4b44 <BUFFER_Find+0x1b4>
				/* Check output overflow */
				if (Out >= Buffer->Size) {
    4ad4:	89 80       	ldd	r8, Y+1	; 0x01
    4ad6:	9a 80       	ldd	r9, Y+2	; 0x02
    4ad8:	ab 80       	ldd	r10, Y+3	; 0x03
    4ada:	bc 80       	ldd	r11, Y+4	; 0x04
    4adc:	09 85       	ldd	r16, Y+9	; 0x09
    4ade:	1a 85       	ldd	r17, Y+10	; 0x0a
    4ae0:	2b 85       	ldd	r18, Y+11	; 0x0b
    4ae2:	3c 85       	ldd	r19, Y+12	; 0x0c
    4ae4:	80 16       	cp	r8, r16
    4ae6:	91 06       	cpc	r9, r17
    4ae8:	a2 06       	cpc	r10, r18
    4aea:	b3 06       	cpc	r11, r19
    4aec:	20 f0       	brcs	.+8      	; 0x4af6 <BUFFER_Find+0x166>
					Out = 0;
    4aee:	19 82       	std	Y+1, r1	; 0x01
    4af0:	1a 82       	std	Y+2, r1	; 0x02
    4af2:	1b 82       	std	Y+3, r1	; 0x03
    4af4:	1c 82       	std	Y+4, r1	; 0x04
				}

				/* Check if current character in buffer matches character in string */
				if ((uint8_t)Buffer->Buffer[Out] != (uint8_t)Data[i]) {
    4af6:	29 81       	ldd	r18, Y+1	; 0x01
    4af8:	3a 81       	ldd	r19, Y+2	; 0x02
    4afa:	2a 0f       	add	r18, r26
    4afc:	3b 1f       	adc	r19, r27
    4afe:	f9 01       	movw	r30, r18
    4b00:	10 81       	ld	r17, Z
    4b02:	f1 01       	movw	r30, r2
    4b04:	ec 0d       	add	r30, r12
    4b06:	fd 1d       	adc	r31, r13
    4b08:	e0 81       	ld	r30, Z
    4b0a:	1e 17       	cp	r17, r30
    4b0c:	49 f0       	breq	.+18     	; 0x4b20 <BUFFER_Find+0x190>
					retval += i - 1;
    4b0e:	49 88       	ldd	r4, Y+17	; 0x11
    4b10:	5a 88       	ldd	r5, Y+18	; 0x12
    4b12:	6b 88       	ldd	r6, Y+19	; 0x13
    4b14:	7c 88       	ldd	r7, Y+20	; 0x14
    4b16:	4c 0c       	add	r4, r12
    4b18:	5d 1c       	adc	r5, r13
    4b1a:	6e 1c       	adc	r6, r14
    4b1c:	7f 1c       	adc	r7, r15
					break;
    4b1e:	12 c0       	rjmp	.+36     	; 0x4b44 <BUFFER_Find+0x1b4>
				}

				/* Set new variables */
				Out++;
    4b20:	09 81       	ldd	r16, Y+1	; 0x01
    4b22:	1a 81       	ldd	r17, Y+2	; 0x02
    4b24:	2b 81       	ldd	r18, Y+3	; 0x03
    4b26:	3c 81       	ldd	r19, Y+4	; 0x04
    4b28:	0f 5f       	subi	r16, 0xFF	; 255
    4b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b2c:	2f 4f       	sbci	r18, 0xFF	; 255
    4b2e:	3f 4f       	sbci	r19, 0xFF	; 255
    4b30:	09 83       	std	Y+1, r16	; 0x01
    4b32:	1a 83       	std	Y+2, r17	; 0x02
    4b34:	2b 83       	std	Y+3, r18	; 0x03
    4b36:	3c 83       	std	Y+4, r19	; 0x04
				Num--;
				i++;
    4b38:	1f ef       	ldi	r17, 0xFF	; 255
    4b3a:	c1 1a       	sub	r12, r17
    4b3c:	d1 0a       	sbc	r13, r17
    4b3e:	e1 0a       	sbc	r14, r17
    4b40:	f1 0a       	sbc	r15, r17
    4b42:	b5 cf       	rjmp	.-150    	; 0x4aae <BUFFER_Find+0x11e>
			}

			/* We have found data sequence in buffer */
			if (i == Size) {
    4b44:	2f 89       	ldd	r18, Y+23	; 0x17
    4b46:	38 8d       	ldd	r19, Y+24	; 0x18
    4b48:	49 8d       	ldd	r20, Y+25	; 0x19
    4b4a:	5a 8d       	ldd	r21, Y+26	; 0x1a
    4b4c:	c2 16       	cp	r12, r18
    4b4e:	d3 06       	cpc	r13, r19
    4b50:	e4 06       	cpc	r14, r20
    4b52:	f5 06       	cpc	r15, r21
    4b54:	39 f4       	brne	.+14     	; 0x4b64 <BUFFER_Find+0x1d4>
				return retval - 1;
    4b56:	c3 01       	movw	r24, r6
    4b58:	b2 01       	movw	r22, r4
    4b5a:	61 50       	subi	r22, 0x01	; 1
    4b5c:	71 09       	sbc	r23, r1
    4b5e:	81 09       	sbc	r24, r1
    4b60:	91 09       	sbc	r25, r1
    4b62:	0d c0       	rjmp	.+26     	; 0x4b7e <BUFFER_Find+0x1ee>
    4b64:	11 e0       	ldi	r17, 0x01	; 1
    4b66:	49 8a       	std	Y+17, r4	; 0x11
    4b68:	5a 8a       	std	Y+18, r5	; 0x12
    4b6a:	6b 8a       	std	Y+19, r6	; 0x13
    4b6c:	7c 8a       	std	Y+20, r7	; 0x14
    4b6e:	6d 81       	ldd	r22, Y+5	; 0x05
    4b70:	7e 81       	ldd	r23, Y+6	; 0x06
    4b72:	8f 81       	ldd	r24, Y+7	; 0x07
    4b74:	98 85       	ldd	r25, Y+8	; 0x08
    4b76:	49 cf       	rjmp	.-366    	; 0x4a0a <BUFFER_Find+0x7a>
	uint32_t Num, Out, i, retval = 0;
	uint8_t found = 0;

	/* Check buffer structure and number of elements in buffer */
	if (Buffer == NULL || (Num = BUFFER_GetFull(Buffer)) < Size) {
		return -1;
    4b78:	6f ef       	ldi	r22, 0xFF	; 255
    4b7a:	7f ef       	ldi	r23, 0xFF	; 255
    4b7c:	cb 01       	movw	r24, r22
		}
	}

	/* Data sequence is not in buffer */
	return -1;
}
    4b7e:	6a 96       	adiw	r28, 0x1a	; 26
    4b80:	cd bf       	out	0x3d, r28	; 61
    4b82:	de bf       	out	0x3e, r29	; 62
    4b84:	df 91       	pop	r29
    4b86:	cf 91       	pop	r28
    4b88:	1f 91       	pop	r17
    4b8a:	0f 91       	pop	r16
    4b8c:	ff 90       	pop	r15
    4b8e:	ef 90       	pop	r14
    4b90:	df 90       	pop	r13
    4b92:	cf 90       	pop	r12
    4b94:	bf 90       	pop	r11
    4b96:	af 90       	pop	r10
    4b98:	9f 90       	pop	r9
    4b9a:	8f 90       	pop	r8
    4b9c:	7f 90       	pop	r7
    4b9e:	6f 90       	pop	r6
    4ba0:	5f 90       	pop	r5
    4ba2:	4f 90       	pop	r4
    4ba4:	3f 90       	pop	r3
    4ba6:	2f 90       	pop	r2
    4ba8:	08 95       	ret

00004baa <BUFFER_WriteString>:

uint32_t BUFFER_WriteString(BUFFER_t* Buffer, char* buff) {
	/* Write string to buffer */
	return BUFFER_Write(Buffer, (uint8_t *)buff, strlen(buff));
    4baa:	fb 01       	movw	r30, r22
    4bac:	01 90       	ld	r0, Z+
    4bae:	00 20       	and	r0, r0
    4bb0:	e9 f7       	brne	.-6      	; 0x4bac <BUFFER_WriteString+0x2>
    4bb2:	31 97       	sbiw	r30, 0x01	; 1
    4bb4:	e6 1b       	sub	r30, r22
    4bb6:	f7 0b       	sbc	r31, r23
    4bb8:	9f 01       	movw	r18, r30
    4bba:	40 e0       	ldi	r20, 0x00	; 0
    4bbc:	50 e0       	ldi	r21, 0x00	; 0
    4bbe:	dc cc       	rjmp	.-1608   	; 0x4578 <BUFFER_Write>

00004bc0 <BUFFER_ReadString>:
}

uint32_t BUFFER_ReadString(BUFFER_t* Buffer, char* buff, uint32_t buffsize) {
    4bc0:	4f 92       	push	r4
    4bc2:	5f 92       	push	r5
    4bc4:	6f 92       	push	r6
    4bc6:	7f 92       	push	r7
    4bc8:	8f 92       	push	r8
    4bca:	9f 92       	push	r9
    4bcc:	af 92       	push	r10
    4bce:	bf 92       	push	r11
    4bd0:	cf 92       	push	r12
    4bd2:	df 92       	push	r13
    4bd4:	ef 92       	push	r14
    4bd6:	ff 92       	push	r15
    4bd8:	0f 93       	push	r16
    4bda:	1f 93       	push	r17
    4bdc:	cf 93       	push	r28
    4bde:	df 93       	push	r29
    4be0:	cd b7       	in	r28, 0x3d	; 61
    4be2:	de b7       	in	r29, 0x3e	; 62
    4be4:	25 97       	sbiw	r28, 0x05	; 5
    4be6:	cd bf       	out	0x3d, r28	; 61
    4be8:	de bf       	out	0x3e, r29	; 62
    4bea:	5c 01       	movw	r10, r24
    4bec:	8b 01       	movw	r16, r22
	uint32_t i = 0;
	uint8_t ch;
	uint32_t freeMem, fullMem;
	
	/* Check value buffer */
	if (Buffer == NULL) {
    4bee:	00 97       	sbiw	r24, 0x00	; 0
    4bf0:	09 f4       	brne	.+2      	; 0x4bf4 <BUFFER_ReadString+0x34>
    4bf2:	5d c0       	rjmp	.+186    	; 0x4cae <BUFFER_ReadString+0xee>
		return 0;
	}
	
	/* Get free */
	freeMem = BUFFER_GetFree(Buffer);
    4bf4:	2a 83       	std	Y+2, r18	; 0x02
    4bf6:	3b 83       	std	Y+3, r19	; 0x03
    4bf8:	4c 83       	std	Y+4, r20	; 0x04
    4bfa:	5d 83       	std	Y+5, r21	; 0x05
    4bfc:	71 dc       	rcall	.-1822   	; 0x44e0 <BUFFER_GetFree>
    4bfe:	2b 01       	movw	r4, r22
    4c00:	3c 01       	movw	r6, r24
	fullMem = BUFFER_GetFull(Buffer);
    4c02:	c5 01       	movw	r24, r10
    4c04:	70 dd       	rcall	.-1312   	; 0x46e6 <BUFFER_GetFull>
    4c06:	6b 01       	movw	r12, r22
    4c08:	7c 01       	movw	r14, r24
	
	/* Check for any data on USART */
	if (
    4c0a:	61 15       	cp	r22, r1
    4c0c:	71 05       	cpc	r23, r1
    4c0e:	81 05       	cpc	r24, r1
    4c10:	91 05       	cpc	r25, r1
    4c12:	09 f4       	brne	.+2      	; 0x4c16 <BUFFER_ReadString+0x56>
    4c14:	4c c0       	rjmp	.+152    	; 0x4cae <BUFFER_ReadString+0xee>
		fullMem == 0 ||                                                /*!< Buffer empty */
		(
			BUFFER_FindElement(Buffer, Buffer->StringDelimiter) < 0 && /*!< String delimiter is not in buffer */
    4c16:	f5 01       	movw	r30, r10
    4c18:	67 85       	ldd	r22, Z+15	; 0x0f
    4c1a:	c5 01       	movw	r24, r10
    4c1c:	66 de       	rcall	.-820    	; 0x48ea <BUFFER_FindElement>
	freeMem = BUFFER_GetFree(Buffer);
	fullMem = BUFFER_GetFull(Buffer);
	
	/* Check for any data on USART */
	if (
		fullMem == 0 ||                                                /*!< Buffer empty */
    4c1e:	2a 81       	ldd	r18, Y+2	; 0x02
    4c20:	3b 81       	ldd	r19, Y+3	; 0x03
    4c22:	4c 81       	ldd	r20, Y+4	; 0x04
    4c24:	5d 81       	ldd	r21, Y+5	; 0x05
    4c26:	97 ff       	sbrs	r25, 7
    4c28:	09 c0       	rjmp	.+18     	; 0x4c3c <BUFFER_ReadString+0x7c>
		(
			BUFFER_FindElement(Buffer, Buffer->StringDelimiter) < 0 && /*!< String delimiter is not in buffer */
    4c2a:	45 28       	or	r4, r5
    4c2c:	46 28       	or	r4, r6
    4c2e:	47 28       	or	r4, r7
    4c30:	29 f0       	breq	.+10     	; 0x4c3c <BUFFER_ReadString+0x7c>
			freeMem != 0 &&                                            /*!< Buffer is not full */
    4c32:	c2 16       	cp	r12, r18
    4c34:	d3 06       	cpc	r13, r19
    4c36:	e4 06       	cpc	r14, r20
    4c38:	f5 06       	cpc	r15, r21
    4c3a:	c8 f1       	brcs	.+114    	; 0x4cae <BUFFER_ReadString+0xee>
    4c3c:	48 01       	movw	r8, r16
    4c3e:	c1 2c       	mov	r12, r1
    4c40:	d1 2c       	mov	r13, r1
    4c42:	76 01       	movw	r14, r12
		/* Return 0 */
		return 0;
	}
	
	/* If available buffer size is more than 0 characters */
	while (i < (buffsize - 1)) {
    4c44:	29 01       	movw	r4, r18
    4c46:	3a 01       	movw	r6, r20
    4c48:	f1 e0       	ldi	r31, 0x01	; 1
    4c4a:	4f 1a       	sub	r4, r31
    4c4c:	51 08       	sbc	r5, r1
    4c4e:	61 08       	sbc	r6, r1
    4c50:	71 08       	sbc	r7, r1
    4c52:	c4 14       	cp	r12, r4
    4c54:	d5 04       	cpc	r13, r5
    4c56:	e6 04       	cpc	r14, r6
    4c58:	f7 04       	cpc	r15, r7
    4c5a:	88 f4       	brcc	.+34     	; 0x4c7e <BUFFER_ReadString+0xbe>
		/* We have available data */
		BUFFER_Read(Buffer, &ch, 1);
    4c5c:	21 e0       	ldi	r18, 0x01	; 1
    4c5e:	30 e0       	ldi	r19, 0x00	; 0
    4c60:	40 e0       	ldi	r20, 0x00	; 0
    4c62:	50 e0       	ldi	r21, 0x00	; 0
    4c64:	be 01       	movw	r22, r28
    4c66:	6f 5f       	subi	r22, 0xFF	; 255
    4c68:	7f 4f       	sbci	r23, 0xFF	; 255
    4c6a:	c5 01       	movw	r24, r10
    4c6c:	7b dd       	rcall	.-1290   	; 0x4764 <BUFFER_Read>
		
		/* Save character */
		buff[i] = (char)ch;
    4c6e:	89 81       	ldd	r24, Y+1	; 0x01
    4c70:	f4 01       	movw	r30, r8
    4c72:	81 93       	st	Z+, r24
    4c74:	4f 01       	movw	r8, r30
		
		/* Check for end of string */
		if ((char)buff[i] == (char)Buffer->StringDelimiter) {
    4c76:	f5 01       	movw	r30, r10
    4c78:	97 85       	ldd	r25, Z+15	; 0x0f
    4c7a:	89 13       	cpse	r24, r25
    4c7c:	0b c0       	rjmp	.+22     	; 0x4c94 <BUFFER_ReadString+0xd4>
		/* Increase */
		i++;
	}
	
	/* Add zero to the end of string */
	if (i == (buffsize - 1)) {
    4c7e:	c4 14       	cp	r12, r4
    4c80:	d5 04       	cpc	r13, r5
    4c82:	e6 04       	cpc	r14, r6
    4c84:	f7 04       	cpc	r15, r7
    4c86:	61 f0       	breq	.+24     	; 0x4ca0 <BUFFER_ReadString+0xe0>
		buff[i] = 0;
	} else {
		buff[++i] = 0;
    4c88:	8f ef       	ldi	r24, 0xFF	; 255
    4c8a:	c8 1a       	sub	r12, r24
    4c8c:	d8 0a       	sbc	r13, r24
    4c8e:	e8 0a       	sbc	r14, r24
    4c90:	f8 0a       	sbc	r15, r24
    4c92:	06 c0       	rjmp	.+12     	; 0x4ca0 <BUFFER_ReadString+0xe0>
			/* Done */
			break;
		}
		
		/* Increase */
		i++;
    4c94:	ff ef       	ldi	r31, 0xFF	; 255
    4c96:	cf 1a       	sub	r12, r31
    4c98:	df 0a       	sbc	r13, r31
    4c9a:	ef 0a       	sbc	r14, r31
    4c9c:	ff 0a       	sbc	r15, r31
    4c9e:	d9 cf       	rjmp	.-78     	; 0x4c52 <BUFFER_ReadString+0x92>
	
	/* Add zero to the end of string */
	if (i == (buffsize - 1)) {
		buff[i] = 0;
	} else {
		buff[++i] = 0;
    4ca0:	f8 01       	movw	r30, r16
    4ca2:	ec 0d       	add	r30, r12
    4ca4:	fd 1d       	adc	r31, r13
    4ca6:	10 82       	st	Z, r1
    4ca8:	b6 01       	movw	r22, r12
    4caa:	c7 01       	movw	r24, r14
    4cac:	04 c0       	rjmp	.+8      	; 0x4cb6 <BUFFER_ReadString+0xf6>
	uint8_t ch;
	uint32_t freeMem, fullMem;
	
	/* Check value buffer */
	if (Buffer == NULL) {
		return 0;
    4cae:	60 e0       	ldi	r22, 0x00	; 0
    4cb0:	70 e0       	ldi	r23, 0x00	; 0
    4cb2:	80 e0       	ldi	r24, 0x00	; 0
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
		buff[++i] = 0;
	}

	/* Return number of characters in buffer */
	return i;
}
    4cb6:	25 96       	adiw	r28, 0x05	; 5
    4cb8:	cd bf       	out	0x3d, r28	; 61
    4cba:	de bf       	out	0x3e, r29	; 62
    4cbc:	df 91       	pop	r29
    4cbe:	cf 91       	pop	r28
    4cc0:	1f 91       	pop	r17
    4cc2:	0f 91       	pop	r16
    4cc4:	ff 90       	pop	r15
    4cc6:	ef 90       	pop	r14
    4cc8:	df 90       	pop	r13
    4cca:	cf 90       	pop	r12
    4ccc:	bf 90       	pop	r11
    4cce:	af 90       	pop	r10
    4cd0:	9f 90       	pop	r9
    4cd2:	8f 90       	pop	r8
    4cd4:	7f 90       	pop	r7
    4cd6:	6f 90       	pop	r6
    4cd8:	5f 90       	pop	r5
    4cda:	4f 90       	pop	r4
    4cdc:	08 95       	ret

00004cde <ParseNumber>:
	/* Send command */
	SendCommand(ESP8266, ESP8266_COMMAND_AUTOCONN, NULL, NULL);
	
	/* Wait till end */
	return ESP8266_WaitReady(ESP8266);
}
    4cde:	ff 92       	push	r15
    4ce0:	0f 93       	push	r16
    4ce2:	1f 93       	push	r17
    4ce4:	cf 93       	push	r28
    4ce6:	df 93       	push	r29
    4ce8:	eb 01       	movw	r28, r22
    4cea:	fc 01       	movw	r30, r24
    4cec:	20 81       	ld	r18, Z
    4cee:	2d 32       	cpi	r18, 0x2D	; 45
    4cf0:	19 f4       	brne	.+6      	; 0x4cf8 <ParseNumber+0x1a>
    4cf2:	01 96       	adiw	r24, 0x01	; 1
    4cf4:	11 e0       	ldi	r17, 0x01	; 1
    4cf6:	01 c0       	rjmp	.+2      	; 0x4cfa <ParseNumber+0x1c>
    4cf8:	10 e0       	ldi	r17, 0x00	; 0
    4cfa:	fc 01       	movw	r30, r24
    4cfc:	20 e0       	ldi	r18, 0x00	; 0
    4cfe:	30 e0       	ldi	r19, 0x00	; 0
    4d00:	a9 01       	movw	r20, r18
    4d02:	f1 2e       	mov	r15, r17
    4d04:	f8 1a       	sub	r15, r24
    4d06:	8f 2d       	mov	r24, r15
    4d08:	8e 0f       	add	r24, r30
    4d0a:	01 91       	ld	r16, Z+
    4d0c:	90 ed       	ldi	r25, 0xD0	; 208
    4d0e:	90 0f       	add	r25, r16
    4d10:	9a 30       	cpi	r25, 0x0A	; 10
    4d12:	90 f4       	brcc	.+36     	; 0x4d38 <ParseNumber+0x5a>
    4d14:	aa e0       	ldi	r26, 0x0A	; 10
    4d16:	b0 e0       	ldi	r27, 0x00	; 0
    4d18:	0e 94 83 62 	call	0xc506	; 0xc506 <__muluhisi3>
    4d1c:	9b 01       	movw	r18, r22
    4d1e:	ac 01       	movw	r20, r24
    4d20:	80 2f       	mov	r24, r16
    4d22:	90 e0       	ldi	r25, 0x00	; 0
    4d24:	c0 97       	sbiw	r24, 0x30	; 48
    4d26:	aa 27       	eor	r26, r26
    4d28:	97 fd       	sbrc	r25, 7
    4d2a:	a0 95       	com	r26
    4d2c:	ba 2f       	mov	r27, r26
    4d2e:	28 0f       	add	r18, r24
    4d30:	39 1f       	adc	r19, r25
    4d32:	4a 1f       	adc	r20, r26
    4d34:	5b 1f       	adc	r21, r27
    4d36:	e7 cf       	rjmp	.-50     	; 0x4d06 <ParseNumber+0x28>
    4d38:	20 97       	sbiw	r28, 0x00	; 0
    4d3a:	09 f0       	breq	.+2      	; 0x4d3e <ParseNumber+0x60>
    4d3c:	88 83       	st	Y, r24
    4d3e:	11 23       	and	r17, r17
    4d40:	41 f0       	breq	.+16     	; 0x4d52 <ParseNumber+0x74>
    4d42:	66 27       	eor	r22, r22
    4d44:	77 27       	eor	r23, r23
    4d46:	cb 01       	movw	r24, r22
    4d48:	62 1b       	sub	r22, r18
    4d4a:	73 0b       	sbc	r23, r19
    4d4c:	84 0b       	sbc	r24, r20
    4d4e:	95 0b       	sbc	r25, r21
    4d50:	02 c0       	rjmp	.+4      	; 0x4d56 <ParseNumber+0x78>
    4d52:	ca 01       	movw	r24, r20
    4d54:	b9 01       	movw	r22, r18
    4d56:	df 91       	pop	r29
    4d58:	cf 91       	pop	r28
    4d5a:	1f 91       	pop	r17
    4d5c:	0f 91       	pop	r16
    4d5e:	ff 90       	pop	r15
    4d60:	08 95       	ret

00004d62 <EscapeStringAndSend>:
    4d62:	ef 92       	push	r14
    4d64:	ff 92       	push	r15
    4d66:	0f 93       	push	r16
    4d68:	1f 93       	push	r17
    4d6a:	cf 93       	push	r28
    4d6c:	df 93       	push	r29
    4d6e:	1f 92       	push	r1
    4d70:	cd b7       	in	r28, 0x3d	; 61
    4d72:	de b7       	in	r29, 0x3e	; 62
    4d74:	2c e5       	ldi	r18, 0x5C	; 92
    4d76:	29 83       	std	Y+1, r18	; 0x01
    4d78:	8c 01       	movw	r16, r24
    4d7a:	78 01       	movw	r14, r16
    4d7c:	f8 01       	movw	r30, r16
    4d7e:	21 91       	ld	r18, Z+
    4d80:	8f 01       	movw	r16, r30
    4d82:	22 23       	and	r18, r18
    4d84:	91 f0       	breq	.+36     	; 0x4daa <EscapeStringAndSend+0x48>
    4d86:	2c 32       	cpi	r18, 0x2C	; 44
    4d88:	21 f0       	breq	.+8      	; 0x4d92 <EscapeStringAndSend+0x30>
    4d8a:	22 32       	cpi	r18, 0x22	; 34
    4d8c:	11 f0       	breq	.+4      	; 0x4d92 <EscapeStringAndSend+0x30>
    4d8e:	2c 35       	cpi	r18, 0x5C	; 92
    4d90:	31 f4       	brne	.+12     	; 0x4d9e <EscapeStringAndSend+0x3c>
    4d92:	61 e0       	ldi	r22, 0x01	; 1
    4d94:	70 e0       	ldi	r23, 0x00	; 0
    4d96:	ce 01       	movw	r24, r28
    4d98:	01 96       	adiw	r24, 0x01	; 1
    4d9a:	0e 94 43 35 	call	0x6a86	; 0x6a86 <ESP8266_LL_USARTSend>
    4d9e:	61 e0       	ldi	r22, 0x01	; 1
    4da0:	70 e0       	ldi	r23, 0x00	; 0
    4da2:	c7 01       	movw	r24, r14
    4da4:	0e 94 43 35 	call	0x6a86	; 0x6a86 <ESP8266_LL_USARTSend>
    4da8:	e8 cf       	rjmp	.-48     	; 0x4d7a <EscapeStringAndSend+0x18>
    4daa:	0f 90       	pop	r0
    4dac:	df 91       	pop	r29
    4dae:	cf 91       	pop	r28
    4db0:	1f 91       	pop	r17
    4db2:	0f 91       	pop	r16
    4db4:	ff 90       	pop	r15
    4db6:	ef 90       	pop	r14
    4db8:	08 95       	ret

00004dba <Int2String>:
    4dba:	7f 93       	push	r23
    4dbc:	6f 93       	push	r22
    4dbe:	5f 93       	push	r21
    4dc0:	4f 93       	push	r20
    4dc2:	25 ed       	ldi	r18, 0xD5	; 213
    4dc4:	33 e2       	ldi	r19, 0x23	; 35
    4dc6:	3f 93       	push	r19
    4dc8:	2f 93       	push	r18
    4dca:	9f 93       	push	r25
    4dcc:	8f 93       	push	r24
    4dce:	0e 94 d8 65 	call	0xcbb0	; 0xcbb0 <sprintf>
    4dd2:	8d b7       	in	r24, 0x3d	; 61
    4dd4:	9e b7       	in	r25, 0x3e	; 62
    4dd6:	08 96       	adiw	r24, 0x08	; 8
    4dd8:	8d bf       	out	0x3d, r24	; 61
    4dda:	9e bf       	out	0x3e, r25	; 62
    4ddc:	08 95       	ret

00004dde <ParseIP>:
    4dde:	cf 92       	push	r12
    4de0:	df 92       	push	r13
    4de2:	ef 92       	push	r14
    4de4:	ff 92       	push	r15
    4de6:	0f 93       	push	r16
    4de8:	1f 93       	push	r17
    4dea:	cf 93       	push	r28
    4dec:	df 93       	push	r29
    4dee:	cd b7       	in	r28, 0x3d	; 61
    4df0:	de b7       	in	r29, 0x3e	; 62
    4df2:	61 97       	sbiw	r28, 0x11	; 17
    4df4:	cd bf       	out	0x3d, r28	; 61
    4df6:	de bf       	out	0x3e, r29	; 62
    4df8:	6b 01       	movw	r12, r22
    4dfa:	7a 01       	movw	r14, r20
    4dfc:	2f e0       	ldi	r18, 0x0F	; 15
    4dfe:	fc 01       	movw	r30, r24
    4e00:	de 01       	movw	r26, r28
    4e02:	11 96       	adiw	r26, 0x01	; 1
    4e04:	01 90       	ld	r0, Z+
    4e06:	0d 92       	st	X+, r0
    4e08:	2a 95       	dec	r18
    4e0a:	e1 f7       	brne	.-8      	; 0x4e04 <ParseIP+0x26>
    4e0c:	18 8a       	std	Y+16, r1	; 0x10
    4e0e:	66 e8       	ldi	r22, 0x86	; 134
    4e10:	73 e2       	ldi	r23, 0x23	; 35
    4e12:	ce 01       	movw	r24, r28
    4e14:	01 96       	adiw	r24, 0x01	; 1
    4e16:	0e 94 b9 64 	call	0xc972	; 0xc972 <strtok>
    4e1a:	86 01       	movw	r16, r12
    4e1c:	c1 2c       	mov	r12, r1
    4e1e:	d1 2c       	mov	r13, r1
    4e20:	00 97       	sbiw	r24, 0x00	; 0
    4e22:	a9 f0       	breq	.+42     	; 0x4e4e <ParseIP+0x70>
    4e24:	c3 94       	inc	r12
    4e26:	be 01       	movw	r22, r28
    4e28:	6f 5e       	subi	r22, 0xEF	; 239
    4e2a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e2c:	58 df       	rcall	.-336    	; 0x4cde <ParseNumber>
    4e2e:	f8 01       	movw	r30, r16
    4e30:	61 93       	st	Z+, r22
    4e32:	8f 01       	movw	r16, r30
    4e34:	89 89       	ldd	r24, Y+17	; 0x11
    4e36:	d8 0e       	add	r13, r24
    4e38:	f4 e0       	ldi	r31, 0x04	; 4
    4e3a:	cf 16       	cp	r12, r31
    4e3c:	41 f0       	breq	.+16     	; 0x4e4e <ParseIP+0x70>
    4e3e:	d3 94       	inc	r13
    4e40:	66 e8       	ldi	r22, 0x86	; 134
    4e42:	73 e2       	ldi	r23, 0x23	; 35
    4e44:	80 e0       	ldi	r24, 0x00	; 0
    4e46:	90 e0       	ldi	r25, 0x00	; 0
    4e48:	0e 94 b9 64 	call	0xc972	; 0xc972 <strtok>
    4e4c:	e9 cf       	rjmp	.-46     	; 0x4e20 <ParseIP+0x42>
    4e4e:	e1 14       	cp	r14, r1
    4e50:	f1 04       	cpc	r15, r1
    4e52:	11 f0       	breq	.+4      	; 0x4e58 <ParseIP+0x7a>
    4e54:	f7 01       	movw	r30, r14
    4e56:	d0 82       	st	Z, r13
    4e58:	61 96       	adiw	r28, 0x11	; 17
    4e5a:	cd bf       	out	0x3d, r28	; 61
    4e5c:	de bf       	out	0x3e, r29	; 62
    4e5e:	df 91       	pop	r29
    4e60:	cf 91       	pop	r28
    4e62:	1f 91       	pop	r17
    4e64:	0f 91       	pop	r16
    4e66:	ff 90       	pop	r15
    4e68:	ef 90       	pop	r14
    4e6a:	df 90       	pop	r13
    4e6c:	cf 90       	pop	r12
    4e6e:	08 95       	ret

00004e70 <ParseCIPSTA>:
    4e70:	0f 93       	push	r16
    4e72:	1f 93       	push	r17
    4e74:	cf 93       	push	r28
    4e76:	df 93       	push	r29
    4e78:	8c 01       	movw	r16, r24
    4e7a:	eb 01       	movw	r28, r22
    4e7c:	4e e0       	ldi	r20, 0x0E	; 14
    4e7e:	50 e0       	ldi	r21, 0x00	; 0
    4e80:	89 ed       	ldi	r24, 0xD9	; 217
    4e82:	93 e2       	ldi	r25, 0x23	; 35
    4e84:	0e 94 ff 64 	call	0xc9fe	; 0xc9fe <strncmp>
    4e88:	89 2b       	or	r24, r25
    4e8a:	09 f4       	brne	.+2      	; 0x4e8e <ParseCIPSTA+0x1e>
    4e8c:	70 c0       	rjmp	.+224    	; 0x4f6e <ParseCIPSTA+0xfe>
    4e8e:	43 e1       	ldi	r20, 0x13	; 19
    4e90:	50 e0       	ldi	r21, 0x00	; 0
    4e92:	be 01       	movw	r22, r28
    4e94:	88 ee       	ldi	r24, 0xE8	; 232
    4e96:	93 e2       	ldi	r25, 0x23	; 35
    4e98:	0e 94 ff 64 	call	0xc9fe	; 0xc9fe <strncmp>
    4e9c:	89 2b       	or	r24, r25
    4e9e:	09 f4       	brne	.+2      	; 0x4ea2 <ParseCIPSTA+0x32>
    4ea0:	79 c0       	rjmp	.+242    	; 0x4f94 <ParseCIPSTA+0x124>
    4ea2:	43 e1       	ldi	r20, 0x13	; 19
    4ea4:	50 e0       	ldi	r21, 0x00	; 0
    4ea6:	be 01       	movw	r22, r28
    4ea8:	8c ef       	ldi	r24, 0xFC	; 252
    4eaa:	93 e2       	ldi	r25, 0x23	; 35
    4eac:	0e 94 ff 64 	call	0xc9fe	; 0xc9fe <strncmp>
    4eb0:	89 2b       	or	r24, r25
    4eb2:	09 f4       	brne	.+2      	; 0x4eb6 <ParseCIPSTA+0x46>
    4eb4:	82 c0       	rjmp	.+260    	; 0x4fba <ParseCIPSTA+0x14a>
    4eb6:	4a e0       	ldi	r20, 0x0A	; 10
    4eb8:	50 e0       	ldi	r21, 0x00	; 0
    4eba:	be 01       	movw	r22, r28
    4ebc:	80 e1       	ldi	r24, 0x10	; 16
    4ebe:	94 e2       	ldi	r25, 0x24	; 36
    4ec0:	0e 94 ff 64 	call	0xc9fe	; 0xc9fe <strncmp>
    4ec4:	89 2b       	or	r24, r25
    4ec6:	09 f4       	brne	.+2      	; 0x4eca <ParseCIPSTA+0x5a>
    4ec8:	54 c0       	rjmp	.+168    	; 0x4f72 <ParseCIPSTA+0x102>
    4eca:	4f e0       	ldi	r20, 0x0F	; 15
    4ecc:	50 e0       	ldi	r21, 0x00	; 0
    4ece:	be 01       	movw	r22, r28
    4ed0:	8b e1       	ldi	r24, 0x1B	; 27
    4ed2:	94 e2       	ldi	r25, 0x24	; 36
    4ed4:	0e 94 ff 64 	call	0xc9fe	; 0xc9fe <strncmp>
    4ed8:	89 2b       	or	r24, r25
    4eda:	09 f4       	brne	.+2      	; 0x4ede <ParseCIPSTA+0x6e>
    4edc:	5d c0       	rjmp	.+186    	; 0x4f98 <ParseCIPSTA+0x128>
    4ede:	4f e0       	ldi	r20, 0x0F	; 15
    4ee0:	50 e0       	ldi	r21, 0x00	; 0
    4ee2:	be 01       	movw	r22, r28
    4ee4:	8b e2       	ldi	r24, 0x2B	; 43
    4ee6:	94 e2       	ldi	r25, 0x24	; 36
    4ee8:	0e 94 ff 64 	call	0xc9fe	; 0xc9fe <strncmp>
    4eec:	89 2b       	or	r24, r25
    4eee:	09 f4       	brne	.+2      	; 0x4ef2 <ParseCIPSTA+0x82>
    4ef0:	66 c0       	rjmp	.+204    	; 0x4fbe <ParseCIPSTA+0x14e>
    4ef2:	4d e0       	ldi	r20, 0x0D	; 13
    4ef4:	50 e0       	ldi	r21, 0x00	; 0
    4ef6:	be 01       	movw	r22, r28
    4ef8:	8b e3       	ldi	r24, 0x3B	; 59
    4efa:	94 e2       	ldi	r25, 0x24	; 36
    4efc:	0e 94 ff 64 	call	0xc9fe	; 0xc9fe <strncmp>
    4f00:	89 2b       	or	r24, r25
    4f02:	09 f4       	brne	.+2      	; 0x4f06 <ParseCIPSTA+0x96>
    4f04:	6d c0       	rjmp	.+218    	; 0x4fe0 <ParseCIPSTA+0x170>
    4f06:	42 e1       	ldi	r20, 0x12	; 18
    4f08:	50 e0       	ldi	r21, 0x00	; 0
    4f0a:	be 01       	movw	r22, r28
    4f0c:	89 e4       	ldi	r24, 0x49	; 73
    4f0e:	94 e2       	ldi	r25, 0x24	; 36
    4f10:	0e 94 ff 64 	call	0xc9fe	; 0xc9fe <strncmp>
    4f14:	89 2b       	or	r24, r25
    4f16:	09 f4       	brne	.+2      	; 0x4f1a <ParseCIPSTA+0xaa>
    4f18:	76 c0       	rjmp	.+236    	; 0x5006 <ParseCIPSTA+0x196>
    4f1a:	42 e1       	ldi	r20, 0x12	; 18
    4f1c:	50 e0       	ldi	r21, 0x00	; 0
    4f1e:	be 01       	movw	r22, r28
    4f20:	8c e5       	ldi	r24, 0x5C	; 92
    4f22:	94 e2       	ldi	r25, 0x24	; 36
    4f24:	0e 94 ff 64 	call	0xc9fe	; 0xc9fe <strncmp>
    4f28:	89 2b       	or	r24, r25
    4f2a:	09 f4       	brne	.+2      	; 0x4f2e <ParseCIPSTA+0xbe>
    4f2c:	7f c0       	rjmp	.+254    	; 0x502c <ParseCIPSTA+0x1bc>
    4f2e:	49 e0       	ldi	r20, 0x09	; 9
    4f30:	50 e0       	ldi	r21, 0x00	; 0
    4f32:	be 01       	movw	r22, r28
    4f34:	8f e6       	ldi	r24, 0x6F	; 111
    4f36:	94 e2       	ldi	r25, 0x24	; 36
    4f38:	0e 94 ff 64 	call	0xc9fe	; 0xc9fe <strncmp>
    4f3c:	89 2b       	or	r24, r25
    4f3e:	09 f4       	brne	.+2      	; 0x4f42 <ParseCIPSTA+0xd2>
    4f40:	51 c0       	rjmp	.+162    	; 0x4fe4 <ParseCIPSTA+0x174>
    4f42:	4e e0       	ldi	r20, 0x0E	; 14
    4f44:	50 e0       	ldi	r21, 0x00	; 0
    4f46:	be 01       	movw	r22, r28
    4f48:	89 e7       	ldi	r24, 0x79	; 121
    4f4a:	94 e2       	ldi	r25, 0x24	; 36
    4f4c:	0e 94 ff 64 	call	0xc9fe	; 0xc9fe <strncmp>
    4f50:	89 2b       	or	r24, r25
    4f52:	09 f4       	brne	.+2      	; 0x4f56 <ParseCIPSTA+0xe6>
    4f54:	5a c0       	rjmp	.+180    	; 0x500a <ParseCIPSTA+0x19a>
    4f56:	4e e0       	ldi	r20, 0x0E	; 14
    4f58:	50 e0       	ldi	r21, 0x00	; 0
    4f5a:	be 01       	movw	r22, r28
    4f5c:	88 e8       	ldi	r24, 0x88	; 136
    4f5e:	94 e2       	ldi	r25, 0x24	; 36
    4f60:	0e 94 ff 64 	call	0xc9fe	; 0xc9fe <strncmp>
    4f64:	89 2b       	or	r24, r25
    4f66:	09 f0       	breq	.+2      	; 0x4f6a <ParseCIPSTA+0xfa>
    4f68:	72 c0       	rjmp	.+228    	; 0x504e <ParseCIPSTA+0x1de>
    4f6a:	8e e0       	ldi	r24, 0x0E	; 14
    4f6c:	60 c0       	rjmp	.+192    	; 0x502e <ParseCIPSTA+0x1be>
    4f6e:	8e e0       	ldi	r24, 0x0E	; 14
    4f70:	01 c0       	rjmp	.+2      	; 0x4f74 <ParseCIPSTA+0x104>
    4f72:	8a e0       	ldi	r24, 0x0A	; 10
    4f74:	b8 01       	movw	r22, r16
    4f76:	6d 52       	subi	r22, 0x2D	; 45
    4f78:	7f 4f       	sbci	r23, 0xFF	; 255
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	02 96       	adiw	r24, 0x02	; 2
    4f7e:	40 e0       	ldi	r20, 0x00	; 0
    4f80:	50 e0       	ldi	r21, 0x00	; 0
    4f82:	8c 0f       	add	r24, r28
    4f84:	9d 1f       	adc	r25, r29
    4f86:	2b df       	rcall	.-426    	; 0x4dde <ParseIP>
    4f88:	f8 01       	movw	r30, r16
    4f8a:	e3 5d       	subi	r30, 0xD3	; 211
    4f8c:	fe 4f       	sbci	r31, 0xFE	; 254
    4f8e:	80 81       	ld	r24, Z
    4f90:	81 60       	ori	r24, 0x01	; 1
    4f92:	5c c0       	rjmp	.+184    	; 0x504c <ParseCIPSTA+0x1dc>
    4f94:	83 e1       	ldi	r24, 0x13	; 19
    4f96:	01 c0       	rjmp	.+2      	; 0x4f9a <ParseCIPSTA+0x12a>
    4f98:	8f e0       	ldi	r24, 0x0F	; 15
    4f9a:	b8 01       	movw	r22, r16
    4f9c:	65 52       	subi	r22, 0x25	; 37
    4f9e:	7f 4f       	sbci	r23, 0xFF	; 255
    4fa0:	90 e0       	ldi	r25, 0x00	; 0
    4fa2:	02 96       	adiw	r24, 0x02	; 2
    4fa4:	40 e0       	ldi	r20, 0x00	; 0
    4fa6:	50 e0       	ldi	r21, 0x00	; 0
    4fa8:	8c 0f       	add	r24, r28
    4faa:	9d 1f       	adc	r25, r29
    4fac:	18 df       	rcall	.-464    	; 0x4dde <ParseIP>
    4fae:	f8 01       	movw	r30, r16
    4fb0:	e3 5d       	subi	r30, 0xD3	; 211
    4fb2:	fe 4f       	sbci	r31, 0xFE	; 254
    4fb4:	80 81       	ld	r24, Z
    4fb6:	82 60       	ori	r24, 0x02	; 2
    4fb8:	49 c0       	rjmp	.+146    	; 0x504c <ParseCIPSTA+0x1dc>
    4fba:	83 e1       	ldi	r24, 0x13	; 19
    4fbc:	01 c0       	rjmp	.+2      	; 0x4fc0 <ParseCIPSTA+0x150>
    4fbe:	8f e0       	ldi	r24, 0x0F	; 15
    4fc0:	b8 01       	movw	r22, r16
    4fc2:	69 52       	subi	r22, 0x29	; 41
    4fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    4fc6:	90 e0       	ldi	r25, 0x00	; 0
    4fc8:	02 96       	adiw	r24, 0x02	; 2
    4fca:	40 e0       	ldi	r20, 0x00	; 0
    4fcc:	50 e0       	ldi	r21, 0x00	; 0
    4fce:	8c 0f       	add	r24, r28
    4fd0:	9d 1f       	adc	r25, r29
    4fd2:	05 df       	rcall	.-502    	; 0x4dde <ParseIP>
    4fd4:	f8 01       	movw	r30, r16
    4fd6:	e3 5d       	subi	r30, 0xD3	; 211
    4fd8:	fe 4f       	sbci	r31, 0xFE	; 254
    4fda:	80 81       	ld	r24, Z
    4fdc:	84 60       	ori	r24, 0x04	; 4
    4fde:	36 c0       	rjmp	.+108    	; 0x504c <ParseCIPSTA+0x1dc>
    4fe0:	8d e0       	ldi	r24, 0x0D	; 13
    4fe2:	01 c0       	rjmp	.+2      	; 0x4fe6 <ParseCIPSTA+0x176>
    4fe4:	89 e0       	ldi	r24, 0x09	; 9
    4fe6:	b8 01       	movw	r22, r16
    4fe8:	6b 51       	subi	r22, 0x1B	; 27
    4fea:	7f 4f       	sbci	r23, 0xFF	; 255
    4fec:	90 e0       	ldi	r25, 0x00	; 0
    4fee:	02 96       	adiw	r24, 0x02	; 2
    4ff0:	40 e0       	ldi	r20, 0x00	; 0
    4ff2:	50 e0       	ldi	r21, 0x00	; 0
    4ff4:	8c 0f       	add	r24, r28
    4ff6:	9d 1f       	adc	r25, r29
    4ff8:	f2 de       	rcall	.-540    	; 0x4dde <ParseIP>
    4ffa:	f8 01       	movw	r30, r16
    4ffc:	e3 5d       	subi	r30, 0xD3	; 211
    4ffe:	fe 4f       	sbci	r31, 0xFE	; 254
    5000:	80 81       	ld	r24, Z
    5002:	80 61       	ori	r24, 0x10	; 16
    5004:	23 c0       	rjmp	.+70     	; 0x504c <ParseCIPSTA+0x1dc>
    5006:	82 e1       	ldi	r24, 0x12	; 18
    5008:	01 c0       	rjmp	.+2      	; 0x500c <ParseCIPSTA+0x19c>
    500a:	8e e0       	ldi	r24, 0x0E	; 14
    500c:	b8 01       	movw	r22, r16
    500e:	63 51       	subi	r22, 0x13	; 19
    5010:	7f 4f       	sbci	r23, 0xFF	; 255
    5012:	90 e0       	ldi	r25, 0x00	; 0
    5014:	02 96       	adiw	r24, 0x02	; 2
    5016:	40 e0       	ldi	r20, 0x00	; 0
    5018:	50 e0       	ldi	r21, 0x00	; 0
    501a:	8c 0f       	add	r24, r28
    501c:	9d 1f       	adc	r25, r29
    501e:	df de       	rcall	.-578    	; 0x4dde <ParseIP>
    5020:	f8 01       	movw	r30, r16
    5022:	e3 5d       	subi	r30, 0xD3	; 211
    5024:	fe 4f       	sbci	r31, 0xFE	; 254
    5026:	80 81       	ld	r24, Z
    5028:	80 62       	ori	r24, 0x20	; 32
    502a:	10 c0       	rjmp	.+32     	; 0x504c <ParseCIPSTA+0x1dc>
    502c:	82 e1       	ldi	r24, 0x12	; 18
    502e:	b8 01       	movw	r22, r16
    5030:	67 51       	subi	r22, 0x17	; 23
    5032:	7f 4f       	sbci	r23, 0xFF	; 255
    5034:	90 e0       	ldi	r25, 0x00	; 0
    5036:	02 96       	adiw	r24, 0x02	; 2
    5038:	40 e0       	ldi	r20, 0x00	; 0
    503a:	50 e0       	ldi	r21, 0x00	; 0
    503c:	8c 0f       	add	r24, r28
    503e:	9d 1f       	adc	r25, r29
    5040:	ce de       	rcall	.-612    	; 0x4dde <ParseIP>
    5042:	f8 01       	movw	r30, r16
    5044:	e3 5d       	subi	r30, 0xD3	; 211
    5046:	fe 4f       	sbci	r31, 0xFE	; 254
    5048:	80 81       	ld	r24, Z
    504a:	80 64       	ori	r24, 0x40	; 64
    504c:	80 83       	st	Z, r24
    504e:	df 91       	pop	r29
    5050:	cf 91       	pop	r28
    5052:	1f 91       	pop	r17
    5054:	0f 91       	pop	r16
    5056:	08 95       	ret

00005058 <ParseMAC>:
    5058:	ef 92       	push	r14
    505a:	ff 92       	push	r15
    505c:	0f 93       	push	r16
    505e:	1f 93       	push	r17
    5060:	cf 93       	push	r28
    5062:	df 93       	push	r29
    5064:	7b 01       	movw	r14, r22
    5066:	8a 01       	movw	r16, r20
    5068:	6c e4       	ldi	r22, 0x4C	; 76
    506a:	75 e2       	ldi	r23, 0x25	; 37
    506c:	0e 94 b9 64 	call	0xc972	; 0xc972 <strtok>
    5070:	e7 01       	movw	r28, r14
    5072:	f1 2c       	mov	r15, r1
    5074:	e1 2c       	mov	r14, r1
    5076:	00 97       	sbiw	r24, 0x00	; 0
    5078:	99 f0       	breq	.+38     	; 0x50a0 <ParseMAC+0x48>
    507a:	e3 94       	inc	r14
    507c:	58 2f       	mov	r21, r24
    507e:	fc 01       	movw	r30, r24
    5080:	80 e0       	ldi	r24, 0x00	; 0
    5082:	90 e0       	ldi	r25, 0x00	; 0
    5084:	dc 01       	movw	r26, r24
    5086:	6e 2f       	mov	r22, r30
    5088:	65 1b       	sub	r22, r21
    508a:	21 91       	ld	r18, Z+
    508c:	30 ed       	ldi	r19, 0xD0	; 208
    508e:	32 0f       	add	r19, r18
    5090:	3a 30       	cpi	r19, 0x0A	; 10
    5092:	c8 f0       	brcs	.+50     	; 0x50c6 <ParseMAC+0x6e>
    5094:	42 2f       	mov	r20, r18
    5096:	4f 7d       	andi	r20, 0xDF	; 223
    5098:	41 54       	subi	r20, 0x41	; 65
    509a:	46 30       	cpi	r20, 0x06	; 6
    509c:	38 f4       	brcc	.+14     	; 0x50ac <ParseMAC+0x54>
    509e:	13 c0       	rjmp	.+38     	; 0x50c6 <ParseMAC+0x6e>
    50a0:	01 15       	cp	r16, r1
    50a2:	11 05       	cpc	r17, r1
    50a4:	69 f1       	breq	.+90     	; 0x5100 <ParseMAC+0xa8>
    50a6:	f8 01       	movw	r30, r16
    50a8:	f0 82       	st	Z, r15
    50aa:	2a c0       	rjmp	.+84     	; 0x5100 <ParseMAC+0xa8>
    50ac:	89 93       	st	Y+, r24
    50ae:	f6 0e       	add	r15, r22
    50b0:	f6 e0       	ldi	r31, 0x06	; 6
    50b2:	ef 16       	cp	r14, r31
    50b4:	a9 f3       	breq	.-22     	; 0x50a0 <ParseMAC+0x48>
    50b6:	f3 94       	inc	r15
    50b8:	6c e4       	ldi	r22, 0x4C	; 76
    50ba:	75 e2       	ldi	r23, 0x25	; 37
    50bc:	80 e0       	ldi	r24, 0x00	; 0
    50be:	90 e0       	ldi	r25, 0x00	; 0
    50c0:	0e 94 b9 64 	call	0xc972	; 0xc972 <strtok>
    50c4:	d8 cf       	rjmp	.-80     	; 0x5076 <ParseMAC+0x1e>
    50c6:	44 e0       	ldi	r20, 0x04	; 4
    50c8:	88 0f       	add	r24, r24
    50ca:	99 1f       	adc	r25, r25
    50cc:	aa 1f       	adc	r26, r26
    50ce:	bb 1f       	adc	r27, r27
    50d0:	4a 95       	dec	r20
    50d2:	d1 f7       	brne	.-12     	; 0x50c8 <ParseMAC+0x70>
    50d4:	3a 30       	cpi	r19, 0x0A	; 10
    50d6:	70 f0       	brcs	.+28     	; 0x50f4 <ParseMAC+0x9c>
    50d8:	3f e9       	ldi	r19, 0x9F	; 159
    50da:	32 0f       	add	r19, r18
    50dc:	36 30       	cpi	r19, 0x06	; 6
    50de:	10 f4       	brcc	.+4      	; 0x50e4 <ParseMAC+0x8c>
    50e0:	27 55       	subi	r18, 0x57	; 87
    50e2:	09 c0       	rjmp	.+18     	; 0x50f6 <ParseMAC+0x9e>
    50e4:	3f eb       	ldi	r19, 0xBF	; 191
    50e6:	32 0f       	add	r19, r18
    50e8:	36 30       	cpi	r19, 0x06	; 6
    50ea:	10 f4       	brcc	.+4      	; 0x50f0 <ParseMAC+0x98>
    50ec:	27 53       	subi	r18, 0x37	; 55
    50ee:	03 c0       	rjmp	.+6      	; 0x50f6 <ParseMAC+0x9e>
    50f0:	20 e0       	ldi	r18, 0x00	; 0
    50f2:	01 c0       	rjmp	.+2      	; 0x50f6 <ParseMAC+0x9e>
    50f4:	23 2f       	mov	r18, r19
    50f6:	82 0f       	add	r24, r18
    50f8:	91 1d       	adc	r25, r1
    50fa:	a1 1d       	adc	r26, r1
    50fc:	b1 1d       	adc	r27, r1
    50fe:	c3 cf       	rjmp	.-122    	; 0x5086 <ParseMAC+0x2e>
    5100:	df 91       	pop	r29
    5102:	cf 91       	pop	r28
    5104:	1f 91       	pop	r17
    5106:	0f 91       	pop	r16
    5108:	ff 90       	pop	r15
    510a:	ef 90       	pop	r14
    510c:	08 95       	ret

0000510e <ESP8266_On>:
    510e:	e0 e6       	ldi	r30, 0x60	; 96
    5110:	f6 e0       	ldi	r31, 0x06	; 6
    5112:	81 e3       	ldi	r24, 0x31	; 49
    5114:	81 83       	std	Z+1, r24	; 0x01
    5116:	80 e3       	ldi	r24, 0x30	; 48
    5118:	85 83       	std	Z+5, r24	; 0x05
    511a:	81 e0       	ldi	r24, 0x01	; 1
    511c:	86 83       	std	Z+6, r24	; 0x06
    511e:	2f ef       	ldi	r18, 0xFF	; 255
    5120:	87 ea       	ldi	r24, 0xA7	; 167
    5122:	91 e6       	ldi	r25, 0x61	; 97
    5124:	21 50       	subi	r18, 0x01	; 1
    5126:	80 40       	sbci	r24, 0x00	; 0
    5128:	90 40       	sbci	r25, 0x00	; 0
    512a:	e1 f7       	brne	.-8      	; 0x5124 <ESP8266_On+0x16>
    512c:	00 c0       	rjmp	.+0      	; 0x512e <ESP8266_On+0x20>
    512e:	00 00       	nop
    5130:	08 95       	ret

00005132 <ESP8266_Off>:
    5132:	e0 e6       	ldi	r30, 0x60	; 96
    5134:	f6 e0       	ldi	r31, 0x06	; 6
    5136:	81 e2       	ldi	r24, 0x21	; 33
    5138:	81 83       	std	Z+1, r24	; 0x01
    513a:	80 e2       	ldi	r24, 0x20	; 32
    513c:	86 83       	std	Z+6, r24	; 0x06
    513e:	81 e0       	ldi	r24, 0x01	; 1
    5140:	85 83       	std	Z+5, r24	; 0x05
    5142:	08 95       	ret

00005144 <ESP8266_TimerStart>:
    5144:	e0 e7       	ldi	r30, 0x70	; 112
    5146:	f0 e0       	ldi	r31, 0x00	; 0
    5148:	84 81       	ldd	r24, Z+4	; 0x04
    514a:	8e 7f       	andi	r24, 0xFE	; 254
    514c:	84 83       	std	Z+4, r24	; 0x04
    514e:	e0 e0       	ldi	r30, 0x00	; 0
    5150:	f9 e0       	ldi	r31, 0x09	; 9
    5152:	10 a2       	std	Z+32, r1	; 0x20
    5154:	11 a2       	std	Z+33, r1	; 0x21
    5156:	8d e7       	ldi	r24, 0x7D	; 125
    5158:	90 e0       	ldi	r25, 0x00	; 0
    515a:	86 a3       	std	Z+38, r24	; 0x26
    515c:	97 a3       	std	Z+39, r25	; 0x27
    515e:	26 e0       	ldi	r18, 0x06	; 6
    5160:	20 83       	st	Z, r18
    5162:	86 a7       	std	Z+46, r24	; 0x2e
    5164:	97 a7       	std	Z+47, r25	; 0x2f
    5166:	87 81       	ldd	r24, Z+7	; 0x07
    5168:	80 64       	ori	r24, 0x40	; 64
    516a:	87 83       	std	Z+7, r24	; 0x07
    516c:	81 81       	ldd	r24, Z+1	; 0x01
    516e:	80 68       	ori	r24, 0x80	; 128
    5170:	81 83       	std	Z+1, r24	; 0x01
    5172:	08 95       	ret

00005174 <ESP8266_TimerStop>:
    5174:	e0 e0       	ldi	r30, 0x00	; 0
    5176:	f9 e0       	ldi	r31, 0x09	; 9
    5178:	10 82       	st	Z, r1
    517a:	87 81       	ldd	r24, Z+7	; 0x07
    517c:	8f 7b       	andi	r24, 0xBF	; 191
    517e:	87 83       	std	Z+7, r24	; 0x07
    5180:	81 81       	ldd	r24, Z+1	; 0x01
    5182:	8f 77       	andi	r24, 0x7F	; 127
    5184:	81 83       	std	Z+1, r24	; 0x01
    5186:	e0 e7       	ldi	r30, 0x70	; 112
    5188:	f0 e0       	ldi	r31, 0x00	; 0
    518a:	84 81       	ldd	r24, Z+4	; 0x04
    518c:	81 60       	ori	r24, 0x01	; 1
    518e:	84 83       	std	Z+4, r24	; 0x04
    5190:	08 95       	ret

00005192 <ESP8266_TimeUpdate>:
    5192:	0f 93       	push	r16
    5194:	1f 93       	push	r17
    5196:	fc 01       	movw	r30, r24
    5198:	06 85       	ldd	r16, Z+14	; 0x0e
    519a:	17 85       	ldd	r17, Z+15	; 0x0f
    519c:	20 89       	ldd	r18, Z+16	; 0x10
    519e:	31 89       	ldd	r19, Z+17	; 0x11
    51a0:	40 0f       	add	r20, r16
    51a2:	51 1f       	adc	r21, r17
    51a4:	62 1f       	adc	r22, r18
    51a6:	73 1f       	adc	r23, r19
    51a8:	46 87       	std	Z+14, r20	; 0x0e
    51aa:	57 87       	std	Z+15, r21	; 0x0f
    51ac:	60 8b       	std	Z+16, r22	; 0x10
    51ae:	71 8b       	std	Z+17, r23	; 0x11
    51b0:	1f 91       	pop	r17
    51b2:	0f 91       	pop	r16
    51b4:	08 95       	ret

000051b6 <ESP8266_DataReceived>:
    51b6:	9b 01       	movw	r18, r22
    51b8:	40 e0       	ldi	r20, 0x00	; 0
    51ba:	50 e0       	ldi	r21, 0x00	; 0
    51bc:	bc 01       	movw	r22, r24
    51be:	88 e4       	ldi	r24, 0x48	; 72
    51c0:	9a e3       	ldi	r25, 0x3A	; 58
    51c2:	da d9       	rcall	.-3148   	; 0x4578 <BUFFER_Write>
    51c4:	cb 01       	movw	r24, r22
    51c6:	08 95       	ret

000051c8 <ESP8266_Callback_ServerConnectionActive>:
    51c8:	08 95       	ret

000051ca <ESP8266_Callback_ServerConnectionClosed>:
    51ca:	08 95       	ret

000051cc <ESP8266_Callback_ServerConnectionDataReceived>:
    51cc:	08 95       	ret

000051ce <ESP8266_Callback_ServerConnectionSendData>:
    51ce:	80 e0       	ldi	r24, 0x00	; 0
    51d0:	90 e0       	ldi	r25, 0x00	; 0
    51d2:	08 95       	ret

000051d4 <ESP8266_Callback_ServerConnectionDataSent>:
    51d4:	08 95       	ret

000051d6 <ESP8266_Callback_ClientConnectionSendData>:
    51d6:	80 e0       	ldi	r24, 0x00	; 0
    51d8:	90 e0       	ldi	r25, 0x00	; 0
    51da:	08 95       	ret

000051dc <CallConnectionCallbacks>:
    51dc:	ef 92       	push	r14
    51de:	ff 92       	push	r15
    51e0:	0f 93       	push	r16
    51e2:	1f 93       	push	r17
    51e4:	cf 93       	push	r28
    51e6:	df 93       	push	r29
    51e8:	8c 01       	movw	r16, r24
    51ea:	ec 01       	movw	r28, r24
    51ec:	6a 96       	adiw	r28, 0x1a	; 26
    51ee:	7c 01       	movw	r14, r24
    51f0:	83 ed       	ldi	r24, 0xD3	; 211
    51f2:	e8 0e       	add	r14, r24
    51f4:	f1 1c       	adc	r15, r1
    51f6:	88 81       	ld	r24, Y
    51f8:	88 23       	and	r24, r24
    51fa:	d9 f0       	breq	.+54     	; 0x5232 <CallConnectionCallbacks+0x56>
    51fc:	89 8d       	ldd	r24, Y+25	; 0x19
    51fe:	88 23       	and	r24, r24
    5200:	c1 f0       	breq	.+48     	; 0x5232 <CallConnectionCallbacks+0x56>
    5202:	8a 81       	ldd	r24, Y+2	; 0x02
    5204:	81 11       	cpse	r24, r1
    5206:	09 c0       	rjmp	.+18     	; 0x521a <CallConnectionCallbacks+0x3e>
    5208:	f8 01       	movw	r30, r16
    520a:	44 81       	ldd	r20, Z+4	; 0x04
    520c:	55 81       	ldd	r21, Z+5	; 0x05
    520e:	66 81       	ldd	r22, Z+6	; 0x06
    5210:	77 81       	ldd	r23, Z+7	; 0x07
    5212:	45 2b       	or	r20, r21
    5214:	46 2b       	or	r20, r22
    5216:	47 2b       	or	r20, r23
    5218:	61 f4       	brne	.+24     	; 0x5232 <CallConnectionCallbacks+0x56>
    521a:	19 8e       	std	Y+25, r1	; 0x19
    521c:	4c 89       	ldd	r20, Y+20	; 0x14
    521e:	5d 89       	ldd	r21, Y+21	; 0x15
    5220:	be 01       	movw	r22, r28
    5222:	88 23       	and	r24, r24
    5224:	21 f0       	breq	.+8      	; 0x522e <CallConnectionCallbacks+0x52>
    5226:	c8 01       	movw	r24, r16
    5228:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <ESP8266_Callback_ClientConnectionDataReceived>
    522c:	02 c0       	rjmp	.+4      	; 0x5232 <CallConnectionCallbacks+0x56>
    522e:	c8 01       	movw	r24, r16
    5230:	cd df       	rcall	.-102    	; 0x51cc <ESP8266_Callback_ServerConnectionDataReceived>
    5232:	a5 96       	adiw	r28, 0x25	; 37
    5234:	ce 15       	cp	r28, r14
    5236:	df 05       	cpc	r29, r15
    5238:	f1 f6       	brne	.-68     	; 0x51f6 <CallConnectionCallbacks+0x1a>
    523a:	df 91       	pop	r29
    523c:	cf 91       	pop	r28
    523e:	1f 91       	pop	r17
    5240:	0f 91       	pop	r16
    5242:	ff 90       	pop	r15
    5244:	ef 90       	pop	r14
    5246:	08 95       	ret

00005248 <ParseReceived>:
    5248:	2f 92       	push	r2
    524a:	3f 92       	push	r3
    524c:	4f 92       	push	r4
    524e:	5f 92       	push	r5
    5250:	6f 92       	push	r6
    5252:	7f 92       	push	r7
    5254:	8f 92       	push	r8
    5256:	9f 92       	push	r9
    5258:	af 92       	push	r10
    525a:	bf 92       	push	r11
    525c:	cf 92       	push	r12
    525e:	df 92       	push	r13
    5260:	ef 92       	push	r14
    5262:	ff 92       	push	r15
    5264:	0f 93       	push	r16
    5266:	1f 93       	push	r17
    5268:	cf 93       	push	r28
    526a:	df 93       	push	r29
    526c:	1f 92       	push	r1
    526e:	1f 92       	push	r1
    5270:	cd b7       	in	r28, 0x3d	; 61
    5272:	de b7       	in	r29, 0x3e	; 62
    5274:	8c 01       	movw	r16, r24
    5276:	7b 01       	movw	r14, r22
    5278:	d4 2e       	mov	r13, r20
    527a:	59 01       	movw	r10, r18
    527c:	fc 01       	movw	r30, r24
    527e:	86 85       	ldd	r24, Z+14	; 0x0e
    5280:	97 85       	ldd	r25, Z+15	; 0x0f
    5282:	a0 89       	ldd	r26, Z+16	; 0x10
    5284:	b1 89       	ldd	r27, Z+17	; 0x11
    5286:	82 8b       	std	Z+18, r24	; 0x12
    5288:	93 8b       	std	Z+19, r25	; 0x13
    528a:	a4 8b       	std	Z+20, r26	; 0x14
    528c:	b5 8b       	std	Z+21, r27	; 0x15
    528e:	22 30       	cpi	r18, 0x02	; 2
    5290:	31 05       	cpc	r19, r1
    5292:	49 f4       	brne	.+18     	; 0x52a6 <ParseReceived+0x5e>
    5294:	db 01       	movw	r26, r22
    5296:	8c 91       	ld	r24, X
    5298:	8d 30       	cpi	r24, 0x0D	; 13
    529a:	29 f4       	brne	.+10     	; 0x52a6 <ParseReceived+0x5e>
    529c:	11 96       	adiw	r26, 0x01	; 1
    529e:	8c 91       	ld	r24, X
    52a0:	8a 30       	cpi	r24, 0x0A	; 10
    52a2:	09 f4       	brne	.+2      	; 0x52a6 <ParseReceived+0x5e>
    52a4:	12 c5       	rjmp	.+2596   	; 0x5cca <ParseReceived+0xa82>
    52a6:	f8 01       	movw	r30, r16
    52a8:	84 81       	ldd	r24, Z+4	; 0x04
    52aa:	95 81       	ldd	r25, Z+5	; 0x05
    52ac:	a6 81       	ldd	r26, Z+6	; 0x06
    52ae:	b7 81       	ldd	r27, Z+7	; 0x07
    52b0:	89 2b       	or	r24, r25
    52b2:	8a 2b       	or	r24, r26
    52b4:	8b 2b       	or	r24, r27
    52b6:	09 f4       	brne	.+2      	; 0x52ba <ParseReceived+0x72>
    52b8:	47 c0       	rjmp	.+142    	; 0x5348 <ParseReceived+0x100>
    52ba:	dd 20       	and	r13, r13
    52bc:	09 f4       	brne	.+2      	; 0x52c0 <ParseReceived+0x78>
    52be:	44 c0       	rjmp	.+136    	; 0x5348 <ParseReceived+0x100>
    52c0:	6c e9       	ldi	r22, 0x9C	; 156
    52c2:	74 e2       	ldi	r23, 0x24	; 36
    52c4:	c7 01       	movw	r24, r14
    52c6:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    52ca:	89 2b       	or	r24, r25
    52cc:	e9 f1       	breq	.+122    	; 0x5348 <ParseReceived+0x100>
    52ce:	67 e9       	ldi	r22, 0x97	; 151
    52d0:	74 e2       	ldi	r23, 0x24	; 36
    52d2:	c7 01       	movw	r24, r14
    52d4:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    52d8:	89 2b       	or	r24, r25
    52da:	b1 f1       	breq	.+108    	; 0x5348 <ParseReceived+0x100>
    52dc:	61 ea       	ldi	r22, 0xA1	; 161
    52de:	74 e2       	ldi	r23, 0x24	; 36
    52e0:	c7 01       	movw	r24, r14
    52e2:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    52e6:	89 2b       	or	r24, r25
    52e8:	79 f1       	breq	.+94     	; 0x5348 <ParseReceived+0x100>
    52ea:	69 ea       	ldi	r22, 0xA9	; 169
    52ec:	74 e2       	ldi	r23, 0x24	; 36
    52ee:	c7 01       	movw	r24, r14
    52f0:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    52f4:	89 2b       	or	r24, r25
    52f6:	41 f1       	breq	.+80     	; 0x5348 <ParseReceived+0x100>
    52f8:	61 eb       	ldi	r22, 0xB1	; 177
    52fa:	74 e2       	ldi	r23, 0x24	; 36
    52fc:	c7 01       	movw	r24, r14
    52fe:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    5302:	89 2b       	or	r24, r25
    5304:	09 f1       	breq	.+66     	; 0x5348 <ParseReceived+0x100>
    5306:	45 e0       	ldi	r20, 0x05	; 5
    5308:	50 e0       	ldi	r21, 0x00	; 0
    530a:	6d eb       	ldi	r22, 0xBD	; 189
    530c:	74 e2       	ldi	r23, 0x24	; 36
    530e:	c7 01       	movw	r24, r14
    5310:	0e 94 ff 64 	call	0xc9fe	; 0xc9fe <strncmp>
    5314:	89 2b       	or	r24, r25
    5316:	c1 f0       	breq	.+48     	; 0x5348 <ParseReceived+0x100>
    5318:	d8 01       	movw	r26, r16
    531a:	18 96       	adiw	r26, 0x08	; 8
    531c:	6d 91       	ld	r22, X+
    531e:	7c 91       	ld	r23, X
    5320:	19 97       	sbiw	r26, 0x09	; 9
    5322:	fb 01       	movw	r30, r22
    5324:	01 90       	ld	r0, Z+
    5326:	00 20       	and	r0, r0
    5328:	e9 f7       	brne	.-6      	; 0x5324 <ParseReceived+0xdc>
    532a:	af 01       	movw	r20, r30
    532c:	41 50       	subi	r20, 0x01	; 1
    532e:	51 09       	sbc	r21, r1
    5330:	46 1b       	sub	r20, r22
    5332:	57 0b       	sbc	r21, r23
    5334:	c7 01       	movw	r24, r14
    5336:	0e 94 ff 64 	call	0xc9fe	; 0xc9fe <strncmp>
    533a:	89 2b       	or	r24, r25
    533c:	29 f0       	breq	.+10     	; 0x5348 <ParseReceived+0x100>
    533e:	b7 01       	movw	r22, r14
    5340:	8a e5       	ldi	r24, 0x5A	; 90
    5342:	9a e3       	ldi	r25, 0x3A	; 58
    5344:	32 dc       	rcall	.-1948   	; 0x4baa <BUFFER_WriteString>
    5346:	c1 c4       	rjmp	.+2434   	; 0x5cca <ParseReceived+0xa82>
    5348:	69 ea       	ldi	r22, 0xA9	; 169
    534a:	74 e2       	ldi	r23, 0x24	; 36
    534c:	c7 01       	movw	r24, r14
    534e:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    5352:	89 2b       	or	r24, r25
    5354:	19 f4       	brne	.+6      	; 0x535c <ParseReceived+0x114>
    5356:	c8 01       	movw	r24, r16
    5358:	0e 94 4f 5a 	call	0xb49e	; 0xb49e <ESP8266_Callback_DeviceReady>
    535c:	63 ec       	ldi	r22, 0xC3	; 195
    535e:	74 e2       	ldi	r23, 0x24	; 36
    5360:	c7 01       	movw	r24, r14
    5362:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    5366:	89 2b       	or	r24, r25
    5368:	19 f4       	brne	.+6      	; 0x5370 <ParseReceived+0x128>
    536a:	c8 01       	movw	r24, r16
    536c:	0e 94 53 5a 	call	0xb4a6	; 0xb4a6 <ESP8266_Callback_WatchdogReset>
    5370:	c8 01       	movw	r24, r16
    5372:	34 df       	rcall	.-408    	; 0x51dc <CallConnectionCallbacks>
    5374:	6f ec       	ldi	r22, 0xCF	; 207
    5376:	74 e2       	ldi	r23, 0x24	; 36
    5378:	c7 01       	movw	r24, r14
    537a:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    537e:	89 2b       	or	r24, r25
    5380:	51 f4       	brne	.+20     	; 0x5396 <ParseReceived+0x14e>
    5382:	f8 01       	movw	r30, r16
    5384:	e3 5d       	subi	r30, 0xD3	; 211
    5386:	fe 4f       	sbci	r31, 0xFE	; 254
    5388:	81 81       	ldd	r24, Z+1	; 0x01
    538a:	84 60       	ori	r24, 0x04	; 4
    538c:	81 83       	std	Z+1, r24	; 0x01
    538e:	c8 01       	movw	r24, r16
    5390:	0e 94 5b 5a 	call	0xb4b6	; 0xb4b6 <ESP8266_Callback_WifiConnected>
    5394:	3a c0       	rjmp	.+116    	; 0x540a <ParseReceived+0x1c2>
    5396:	60 ee       	ldi	r22, 0xE0	; 224
    5398:	74 e2       	ldi	r23, 0x24	; 36
    539a:	c7 01       	movw	r24, r14
    539c:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    53a0:	89 2b       	or	r24, r25
    53a2:	c1 f4       	brne	.+48     	; 0x53d4 <ParseReceived+0x18c>
    53a4:	f8 01       	movw	r30, r16
    53a6:	e3 5d       	subi	r30, 0xD3	; 211
    53a8:	fe 4f       	sbci	r31, 0xFE	; 254
    53aa:	81 81       	ldd	r24, Z+1	; 0x01
    53ac:	8b 7f       	andi	r24, 0xFB	; 251
    53ae:	87 7f       	andi	r24, 0xF7	; 247
    53b0:	81 83       	std	Z+1, r24	; 0x01
    53b2:	89 e1       	ldi	r24, 0x19	; 25
    53b4:	b5 97       	sbiw	r30, 0x25	; 37
    53b6:	df 01       	movw	r26, r30
    53b8:	1d 92       	st	X+, r1
    53ba:	8a 95       	dec	r24
    53bc:	e9 f7       	brne	.-6      	; 0x53b8 <ParseReceived+0x170>
    53be:	89 eb       	ldi	r24, 0xB9	; 185
    53c0:	ee 5e       	subi	r30, 0xEE	; 238
    53c2:	f1 09       	sbc	r31, r1
    53c4:	df 01       	movw	r26, r30
    53c6:	1d 92       	st	X+, r1
    53c8:	8a 95       	dec	r24
    53ca:	e9 f7       	brne	.-6      	; 0x53c6 <ParseReceived+0x17e>
    53cc:	c8 01       	movw	r24, r16
    53ce:	0e 94 57 5a 	call	0xb4ae	; 0xb4ae <ESP8266_Callback_WifiDisconnected>
    53d2:	1b c0       	rjmp	.+54     	; 0x540a <ParseReceived+0x1c2>
    53d4:	62 ef       	ldi	r22, 0xF2	; 242
    53d6:	74 e2       	ldi	r23, 0x24	; 36
    53d8:	c7 01       	movw	r24, r14
    53da:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    53de:	89 2b       	or	r24, r25
    53e0:	51 f4       	brne	.+20     	; 0x53f6 <ParseReceived+0x1ae>
    53e2:	f8 01       	movw	r30, r16
    53e4:	e3 5d       	subi	r30, 0xD3	; 211
    53e6:	fe 4f       	sbci	r31, 0xFE	; 254
    53e8:	81 81       	ldd	r24, Z+1	; 0x01
    53ea:	88 60       	ori	r24, 0x08	; 8
    53ec:	81 83       	std	Z+1, r24	; 0x01
    53ee:	c8 01       	movw	r24, r16
    53f0:	0e 94 70 5a 	call	0xb4e0	; 0xb4e0 <ESP8266_Callback_WifiGotIP>
    53f4:	0a c0       	rjmp	.+20     	; 0x540a <ParseReceived+0x1c2>
    53f6:	60 e0       	ldi	r22, 0x00	; 0
    53f8:	75 e2       	ldi	r23, 0x25	; 37
    53fa:	c7 01       	movw	r24, r14
    53fc:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    5400:	89 2b       	or	r24, r25
    5402:	19 f4       	brne	.+6      	; 0x540a <ParseReceived+0x1c2>
    5404:	c8 01       	movw	r24, r16
    5406:	0e 94 a7 5a 	call	0xb54e	; 0xb54e <ESP8266_Callback_DHCPTimeout>
    540a:	67 e9       	ldi	r22, 0x97	; 151
    540c:	74 e2       	ldi	r23, 0x24	; 36
    540e:	c7 01       	movw	r24, r14
    5410:	0e 94 27 65 	call	0xca4e	; 0xca4e <strstr>
    5414:	89 2b       	or	r24, r25
    5416:	29 f4       	brne	.+10     	; 0x5422 <ParseReceived+0x1da>
    5418:	bb e0       	ldi	r27, 0x0B	; 11
    541a:	ab 16       	cp	r10, r27
    541c:	b1 04       	cpc	r11, r1
    541e:	48 f5       	brcc	.+82     	; 0x5472 <ParseReceived+0x22a>
    5420:	68 c0       	rjmp	.+208    	; 0x54f2 <ParseReceived+0x2aa>
    5422:	f8 01       	movw	r30, r16
    5424:	14 82       	std	Z+4, r1	; 0x04
    5426:	15 82       	std	Z+5, r1	; 0x05
    5428:	16 82       	std	Z+6, r1	; 0x06
    542a:	17 82       	std	Z+7, r1	; 0x07
    542c:	48 01       	movw	r8, r16
    542e:	fa e1       	ldi	r31, 0x1A	; 26
    5430:	8f 0e       	add	r8, r31
    5432:	91 1c       	adc	r9, r1
    5434:	38 01       	movw	r6, r16
    5436:	33 ed       	ldi	r19, 0xD3	; 211
    5438:	63 0e       	add	r6, r19
    543a:	71 1c       	adc	r7, r1
    543c:	d4 01       	movw	r26, r8
    543e:	53 96       	adiw	r26, 0x13	; 19
    5440:	8c 91       	ld	r24, X
    5442:	53 97       	sbiw	r26, 0x13	; 19
    5444:	88 23       	and	r24, r24
    5446:	71 f0       	breq	.+28     	; 0x5464 <ParseReceived+0x21c>
    5448:	53 96       	adiw	r26, 0x13	; 19
    544a:	1c 92       	st	X, r1
    544c:	53 97       	sbiw	r26, 0x13	; 19
    544e:	12 96       	adiw	r26, 0x02	; 2
    5450:	8c 91       	ld	r24, X
    5452:	b4 01       	movw	r22, r8
    5454:	88 23       	and	r24, r24
    5456:	21 f0       	breq	.+8      	; 0x5460 <ParseReceived+0x218>
    5458:	c8 01       	movw	r24, r16
    545a:	0e 94 d6 5a 	call	0xb5ac	; 0xb5ac <ESP8266_Callback_ClientConnectionDataSent>
    545e:	02 c0       	rjmp	.+4      	; 0x5464 <ParseReceived+0x21c>
    5460:	c8 01       	movw	r24, r16
    5462:	b8 de       	rcall	.-656    	; 0x51d4 <ESP8266_Callback_ServerConnectionDataSent>
    5464:	b5 e2       	ldi	r27, 0x25	; 37
    5466:	8b 0e       	add	r8, r27
    5468:	91 1c       	adc	r9, r1
    546a:	86 14       	cp	r8, r6
    546c:	97 04       	cpc	r9, r7
    546e:	31 f7       	brne	.-52     	; 0x543c <ParseReceived+0x1f4>
    5470:	d3 cf       	rjmp	.-90     	; 0x5418 <ParseReceived+0x1d0>
    5472:	45 01       	movw	r8, r10
    5474:	ea e0       	ldi	r30, 0x0A	; 10
    5476:	8e 1a       	sub	r8, r30
    5478:	91 08       	sbc	r9, r1
    547a:	8e 0c       	add	r8, r14
    547c:	9f 1c       	adc	r9, r15
    547e:	4a e0       	ldi	r20, 0x0A	; 10
    5480:	50 e0       	ldi	r21, 0x00	; 0
    5482:	6d e0       	ldi	r22, 0x0D	; 13
    5484:	75 e2       	ldi	r23, 0x25	; 37
    5486:	c4 01       	movw	r24, r8
    5488:	0e 94 bc 64 	call	0xc978	; 0xc978 <memcmp>
    548c:	89 2b       	or	r24, r25
    548e:	89 f5       	brne	.+98     	; 0x54f2 <ParseReceived+0x2aa>
    5490:	81 14       	cp	r8, r1
    5492:	91 04       	cpc	r9, r1
    5494:	71 f1       	breq	.+92     	; 0x54f2 <ParseReceived+0x2aa>
    5496:	f4 01       	movw	r30, r8
    5498:	82 91       	ld	r24, -Z
    549a:	90 e0       	ldi	r25, 0x00	; 0
    549c:	c0 97       	sbiw	r24, 0x30	; 48
    549e:	25 e2       	ldi	r18, 0x25	; 37
    54a0:	28 9f       	mul	r18, r24
    54a2:	b0 01       	movw	r22, r0
    54a4:	29 9f       	mul	r18, r25
    54a6:	70 0d       	add	r23, r0
    54a8:	11 24       	eor	r1, r1
    54aa:	66 5e       	subi	r22, 0xE6	; 230
    54ac:	7f 4f       	sbci	r23, 0xFF	; 255
    54ae:	60 0f       	add	r22, r16
    54b0:	71 1f       	adc	r23, r17
    54b2:	81 e0       	ldi	r24, 0x01	; 1
    54b4:	db 01       	movw	r26, r22
    54b6:	8c 93       	st	X, r24
    54b8:	80 81       	ld	r24, Z
    54ba:	80 53       	subi	r24, 0x30	; 48
    54bc:	11 96       	adiw	r26, 0x01	; 1
    54be:	8c 93       	st	X, r24
    54c0:	11 97       	sbiw	r26, 0x01	; 1
    54c2:	12 96       	adiw	r26, 0x02	; 2
    54c4:	8c 91       	ld	r24, X
    54c6:	88 23       	and	r24, r24
    54c8:	89 f0       	breq	.+34     	; 0x54ec <ParseReceived+0x2a4>
    54ca:	f8 01       	movw	r30, r16
    54cc:	84 81       	ldd	r24, Z+4	; 0x04
    54ce:	95 81       	ldd	r25, Z+5	; 0x05
    54d0:	a6 81       	ldd	r26, Z+6	; 0x06
    54d2:	b7 81       	ldd	r27, Z+7	; 0x07
    54d4:	0a 97       	sbiw	r24, 0x0a	; 10
    54d6:	a1 05       	cpc	r26, r1
    54d8:	b1 05       	cpc	r27, r1
    54da:	21 f4       	brne	.+8      	; 0x54e4 <ParseReceived+0x29c>
    54dc:	14 82       	std	Z+4, r1	; 0x04
    54de:	15 82       	std	Z+5, r1	; 0x05
    54e0:	16 82       	std	Z+6, r1	; 0x06
    54e2:	17 82       	std	Z+7, r1	; 0x07
    54e4:	c8 01       	movw	r24, r16
    54e6:	0e 94 ab 5a 	call	0xb556	; 0xb556 <ESP8266_Callback_ClientConnectionConnected>
    54ea:	76 c0       	rjmp	.+236    	; 0x55d8 <ParseReceived+0x390>
    54ec:	c8 01       	movw	r24, r16
    54ee:	6c de       	rcall	.-808    	; 0x51c8 <ESP8266_Callback_ServerConnectionActive>
    54f0:	73 c0       	rjmp	.+230    	; 0x55d8 <ParseReceived+0x390>
    54f2:	68 e1       	ldi	r22, 0x18	; 24
    54f4:	75 e2       	ldi	r23, 0x25	; 37
    54f6:	c7 01       	movw	r24, r14
    54f8:	0e 94 27 65 	call	0xca4e	; 0xca4e <strstr>
    54fc:	89 2b       	or	r24, r25
    54fe:	09 f0       	breq	.+2      	; 0x5502 <ParseReceived+0x2ba>
    5500:	6b c0       	rjmp	.+214    	; 0x55d8 <ParseReceived+0x390>
    5502:	ba e0       	ldi	r27, 0x0A	; 10
    5504:	ab 16       	cp	r10, r27
    5506:	b1 04       	cpc	r11, r1
    5508:	08 f4       	brcc	.+2      	; 0x550c <ParseReceived+0x2c4>
    550a:	66 c0       	rjmp	.+204    	; 0x55d8 <ParseReceived+0x390>
    550c:	45 01       	movw	r8, r10
    550e:	e9 e0       	ldi	r30, 0x09	; 9
    5510:	8e 1a       	sub	r8, r30
    5512:	91 08       	sbc	r9, r1
    5514:	8e 0c       	add	r8, r14
    5516:	9f 1c       	adc	r9, r15
    5518:	49 e0       	ldi	r20, 0x09	; 9
    551a:	50 e0       	ldi	r21, 0x00	; 0
    551c:	6c e2       	ldi	r22, 0x2C	; 44
    551e:	75 e2       	ldi	r23, 0x25	; 37
    5520:	c4 01       	movw	r24, r8
    5522:	0e 94 bc 64 	call	0xc978	; 0xc978 <memcmp>
    5526:	89 2b       	or	r24, r25
    5528:	a9 f5       	brne	.+106    	; 0x5594 <ParseReceived+0x34c>
    552a:	81 14       	cp	r8, r1
    552c:	91 04       	cpc	r9, r1
    552e:	91 f1       	breq	.+100    	; 0x5594 <ParseReceived+0x34c>
    5530:	e8 14       	cp	r14, r8
    5532:	f9 04       	cpc	r15, r9
    5534:	79 f1       	breq	.+94     	; 0x5594 <ParseReceived+0x34c>
    5536:	d4 01       	movw	r26, r8
    5538:	8e 91       	ld	r24, -X
    553a:	bd 01       	movw	r22, r26
    553c:	97 01       	movw	r18, r14
    553e:	2f 5f       	subi	r18, 0xFF	; 255
    5540:	3f 4f       	sbci	r19, 0xFF	; 255
    5542:	82 16       	cp	r8, r18
    5544:	93 06       	cpc	r9, r19
    5546:	e9 f4       	brne	.+58     	; 0x5582 <ParseReceived+0x33a>
    5548:	90 e0       	ldi	r25, 0x00	; 0
    554a:	c0 97       	sbiw	r24, 0x30	; 48
    554c:	25 e2       	ldi	r18, 0x25	; 37
    554e:	28 9f       	mul	r18, r24
    5550:	f0 01       	movw	r30, r0
    5552:	29 9f       	mul	r18, r25
    5554:	f0 0d       	add	r31, r0
    5556:	11 24       	eor	r1, r1
    5558:	7a 96       	adiw	r30, 0x1a	; 26
    555a:	e0 0f       	add	r30, r16
    555c:	f1 1f       	adc	r31, r17
    555e:	82 81       	ldd	r24, Z+2	; 0x02
    5560:	90 81       	ld	r25, Z
    5562:	10 82       	st	Z, r1
    5564:	12 82       	std	Z+2, r1	; 0x02
    5566:	13 a2       	std	Z+35, r1	; 0x23
    5568:	12 a2       	std	Z+34, r1	; 0x22
    556a:	99 23       	and	r25, r25
    556c:	a9 f1       	breq	.+106    	; 0x55d8 <ParseReceived+0x390>
    556e:	bf 01       	movw	r22, r30
    5570:	88 23       	and	r24, r24
    5572:	21 f0       	breq	.+8      	; 0x557c <ParseReceived+0x334>
    5574:	c8 01       	movw	r24, r16
    5576:	0e 94 27 5b 	call	0xb64e	; 0xb64e <ESP8266_Callback_ClientConnectionClosed>
    557a:	2e c0       	rjmp	.+92     	; 0x55d8 <ParseReceived+0x390>
    557c:	c8 01       	movw	r24, r16
    557e:	25 de       	rcall	.-950    	; 0x51ca <ESP8266_Callback_ServerConnectionClosed>
    5580:	2b c0       	rjmp	.+86     	; 0x55d8 <ParseReceived+0x390>
    5582:	2a e0       	ldi	r18, 0x0A	; 10
    5584:	30 e0       	ldi	r19, 0x00	; 0
    5586:	40 e0       	ldi	r20, 0x00	; 0
    5588:	50 e0       	ldi	r21, 0x00	; 0
    558a:	8a e5       	ldi	r24, 0x5A	; 90
    558c:	9a e3       	ldi	r25, 0x3A	; 58
    558e:	0e 94 bc 22 	call	0x4578	; 0x4578 <BUFFER_Write>
    5592:	22 c0       	rjmp	.+68     	; 0x55d8 <ParseReceived+0x390>
    5594:	b1 e1       	ldi	r27, 0x11	; 17
    5596:	ab 16       	cp	r10, r27
    5598:	b1 04       	cpc	r11, r1
    559a:	f0 f0       	brcs	.+60     	; 0x55d8 <ParseReceived+0x390>
    559c:	66 e3       	ldi	r22, 0x36	; 54
    559e:	75 e2       	ldi	r23, 0x25	; 37
    55a0:	c5 01       	movw	r24, r10
    55a2:	0f 97       	sbiw	r24, 0x0f	; 15
    55a4:	8e 0d       	add	r24, r14
    55a6:	9f 1d       	adc	r25, r15
    55a8:	0e 94 27 65 	call	0xca4e	; 0xca4e <strstr>
    55ac:	00 97       	sbiw	r24, 0x00	; 0
    55ae:	a1 f0       	breq	.+40     	; 0x55d8 <ParseReceived+0x390>
    55b0:	dc 01       	movw	r26, r24
    55b2:	8e 91       	ld	r24, -X
    55b4:	90 e0       	ldi	r25, 0x00	; 0
    55b6:	c0 97       	sbiw	r24, 0x30	; 48
    55b8:	25 e2       	ldi	r18, 0x25	; 37
    55ba:	28 9f       	mul	r18, r24
    55bc:	f0 01       	movw	r30, r0
    55be:	29 9f       	mul	r18, r25
    55c0:	f0 0d       	add	r31, r0
    55c2:	11 24       	eor	r1, r1
    55c4:	7a 96       	adiw	r30, 0x1a	; 26
    55c6:	e0 0f       	add	r30, r16
    55c8:	f1 1f       	adc	r31, r17
    55ca:	10 82       	st	Z, r1
    55cc:	12 82       	std	Z+2, r1	; 0x02
    55ce:	13 a2       	std	Z+35, r1	; 0x23
    55d0:	12 a2       	std	Z+34, r1	; 0x22
    55d2:	8c 91       	ld	r24, X
    55d4:	80 53       	subi	r24, 0x30	; 48
    55d6:	81 83       	std	Z+1, r24	; 0x01
    55d8:	45 e0       	ldi	r20, 0x05	; 5
    55da:	50 e0       	ldi	r21, 0x00	; 0
    55dc:	6d eb       	ldi	r22, 0xBD	; 189
    55de:	74 e2       	ldi	r23, 0x24	; 36
    55e0:	c7 01       	movw	r24, r14
    55e2:	0e 94 ff 64 	call	0xc9fe	; 0xc9fe <strncmp>
    55e6:	89 2b       	or	r24, r25
    55e8:	09 f0       	breq	.+2      	; 0x55ec <ParseReceived+0x3a4>
    55ea:	ef c0       	rjmp	.+478    	; 0x57ca <ParseReceived+0x582>
    55ec:	48 01       	movw	r8, r16
    55ee:	e1 e0       	ldi	r30, 0x01	; 1
    55f0:	8e 0e       	add	r8, r30
    55f2:	9e 1e       	adc	r9, r30
    55f4:	77 24       	eor	r7, r7
    55f6:	73 94       	inc	r7
    55f8:	d4 01       	movw	r26, r8
    55fa:	7c 92       	st	X, r7
    55fc:	f8 01       	movw	r30, r16
    55fe:	e9 5f       	subi	r30, 0xF9	; 249
    5600:	fe 4f       	sbci	r31, 0xFE	; 254
    5602:	d0 82       	st	Z, r13
    5604:	f7 01       	movw	r30, r14
    5606:	85 81       	ldd	r24, Z+5	; 0x05
    5608:	80 53       	subi	r24, 0x30	; 48
    560a:	f8 01       	movw	r30, r16
    560c:	ea 5f       	subi	r30, 0xFA	; 250
    560e:	fe 4f       	sbci	r31, 0xFE	; 254
    5610:	80 83       	st	Z, r24
    5612:	68 01       	movw	r12, r16
    5614:	35 e2       	ldi	r19, 0x25	; 37
    5616:	83 9f       	mul	r24, r19
    5618:	c0 0c       	add	r12, r0
    561a:	d1 1c       	adc	r13, r1
    561c:	11 24       	eor	r1, r1
    561e:	c6 01       	movw	r24, r12
    5620:	4a 96       	adiw	r24, 0x1a	; 26
    5622:	6c 01       	movw	r12, r24
    5624:	84 e9       	ldi	r24, 0x94	; 148
    5626:	9e e2       	ldi	r25, 0x2E	; 46
    5628:	d6 01       	movw	r26, r12
    562a:	54 96       	adiw	r26, 0x14	; 20
    562c:	8d 93       	st	X+, r24
    562e:	9c 93       	st	X, r25
    5630:	55 97       	sbiw	r26, 0x15	; 21
    5632:	80 81       	ld	r24, Z
    5634:	11 96       	adiw	r26, 0x01	; 1
    5636:	8c 93       	st	X, r24
    5638:	be 01       	movw	r22, r28
    563a:	6e 5f       	subi	r22, 0xFE	; 254
    563c:	7f 4f       	sbci	r23, 0xFF	; 255
    563e:	c7 01       	movw	r24, r14
    5640:	07 96       	adiw	r24, 0x07	; 7
    5642:	4d db       	rcall	.-2406   	; 0x4cde <ParseNumber>
    5644:	f6 01       	movw	r30, r12
    5646:	62 87       	std	Z+10, r22	; 0x0a
    5648:	73 87       	std	Z+11, r23	; 0x0b
    564a:	84 87       	std	Z+12, r24	; 0x0c
    564c:	95 87       	std	Z+13, r25	; 0x0d
    564e:	26 85       	ldd	r18, Z+14	; 0x0e
    5650:	37 85       	ldd	r19, Z+15	; 0x0f
    5652:	40 89       	ldd	r20, Z+16	; 0x10
    5654:	51 89       	ldd	r21, Z+17	; 0x11
    5656:	21 15       	cp	r18, r1
    5658:	31 05       	cpc	r19, r1
    565a:	41 05       	cpc	r20, r1
    565c:	51 05       	cpc	r21, r1
    565e:	19 f4       	brne	.+6      	; 0x5666 <ParseReceived+0x41e>
    5660:	12 a2       	std	Z+34, r1	; 0x22
    5662:	73 a2       	std	Z+35, r7	; 0x23
    5664:	01 c0       	rjmp	.+2      	; 0x5668 <ParseReceived+0x420>
    5666:	13 a2       	std	Z+35, r1	; 0x23
    5668:	2b 01       	movw	r4, r22
    566a:	3c 01       	movw	r6, r24
    566c:	42 0e       	add	r4, r18
    566e:	53 1e       	adc	r5, r19
    5670:	64 1e       	adc	r6, r20
    5672:	75 1e       	adc	r7, r21
    5674:	f6 01       	movw	r30, r12
    5676:	46 86       	std	Z+14, r4	; 0x0e
    5678:	57 86       	std	Z+15, r5	; 0x0f
    567a:	60 8a       	std	Z+16, r6	; 0x10
    567c:	71 8a       	std	Z+17, r7	; 0x11
    567e:	f8 01       	movw	r30, r16
    5680:	ed 5d       	subi	r30, 0xDD	; 221
    5682:	fe 4f       	sbci	r31, 0xFE	; 254
    5684:	40 80       	ld	r4, Z
    5686:	51 80       	ldd	r5, Z+1	; 0x01
    5688:	62 80       	ldd	r6, Z+2	; 0x02
    568a:	73 80       	ldd	r7, Z+3	; 0x03
    568c:	46 0e       	add	r4, r22
    568e:	57 1e       	adc	r5, r23
    5690:	68 1e       	adc	r6, r24
    5692:	79 1e       	adc	r7, r25
    5694:	40 82       	st	Z, r4
    5696:	51 82       	std	Z+1, r5	; 0x01
    5698:	62 82       	std	Z+2, r6	; 0x02
    569a:	73 82       	std	Z+3, r7	; 0x03
    569c:	4a 80       	ldd	r4, Y+2	; 0x02
    569e:	51 2c       	mov	r5, r1
    56a0:	ff ef       	ldi	r31, 0xFF	; 255
    56a2:	4f 1a       	sub	r4, r31
    56a4:	5f 0a       	sbc	r5, r31
    56a6:	66 24       	eor	r6, r6
    56a8:	57 fc       	sbrc	r5, 7
    56aa:	60 94       	com	r6
    56ac:	76 2c       	mov	r7, r6
    56ae:	37 e0       	ldi	r19, 0x07	; 7
    56b0:	43 0e       	add	r4, r19
    56b2:	51 1c       	adc	r5, r1
    56b4:	61 1c       	adc	r6, r1
    56b6:	71 1c       	adc	r7, r1
    56b8:	c7 01       	movw	r24, r14
    56ba:	84 0d       	add	r24, r4
    56bc:	95 1d       	adc	r25, r5
    56be:	ae 01       	movw	r20, r28
    56c0:	4e 5f       	subi	r20, 0xFE	; 254
    56c2:	5f 4f       	sbci	r21, 0xFF	; 255
    56c4:	b6 01       	movw	r22, r12
    56c6:	6b 5f       	subi	r22, 0xFB	; 251
    56c8:	7f 4f       	sbci	r23, 0xFF	; 255
    56ca:	89 db       	rcall	.-2286   	; 0x4dde <ParseIP>
    56cc:	8a 81       	ldd	r24, Y+2	; 0x02
    56ce:	90 e0       	ldi	r25, 0x00	; 0
    56d0:	01 96       	adiw	r24, 0x01	; 1
    56d2:	aa 27       	eor	r26, r26
    56d4:	97 fd       	sbrc	r25, 7
    56d6:	a0 95       	com	r26
    56d8:	ba 2f       	mov	r27, r26
    56da:	84 0d       	add	r24, r4
    56dc:	95 1d       	adc	r25, r5
    56de:	a6 1d       	adc	r26, r6
    56e0:	b7 1d       	adc	r27, r7
    56e2:	8e 0d       	add	r24, r14
    56e4:	9f 1d       	adc	r25, r15
    56e6:	be 01       	movw	r22, r28
    56e8:	6e 5f       	subi	r22, 0xFE	; 254
    56ea:	7f 4f       	sbci	r23, 0xFF	; 255
    56ec:	f8 da       	rcall	.-2576   	; 0x4cde <ParseNumber>
    56ee:	d6 01       	movw	r26, r12
    56f0:	13 96       	adiw	r26, 0x03	; 3
    56f2:	6d 93       	st	X+, r22
    56f4:	7c 93       	st	X, r23
    56f6:	14 97       	sbiw	r26, 0x04	; 4
    56f8:	f7 01       	movw	r30, r14
    56fa:	80 e0       	ldi	r24, 0x00	; 0
    56fc:	90 e0       	ldi	r25, 0x00	; 0
    56fe:	dc 01       	movw	r26, r24
    5700:	a5 01       	movw	r20, r10
    5702:	60 e0       	ldi	r22, 0x00	; 0
    5704:	70 e0       	ldi	r23, 0x00	; 0
    5706:	21 91       	ld	r18, Z+
    5708:	1c 01       	movw	r2, r24
    570a:	2d 01       	movw	r4, r26
    570c:	3f ef       	ldi	r19, 0xFF	; 255
    570e:	23 1a       	sub	r2, r19
    5710:	33 0a       	sbc	r3, r19
    5712:	43 0a       	sbc	r4, r19
    5714:	53 0a       	sbc	r5, r19
    5716:	2a 33       	cpi	r18, 0x3A	; 58
    5718:	91 f4       	brne	.+36     	; 0x573e <ParseReceived+0x4f6>
    571a:	f6 01       	movw	r30, r12
    571c:	82 85       	ldd	r24, Z+10	; 0x0a
    571e:	93 85       	ldd	r25, Z+11	; 0x0b
    5720:	a4 85       	ldd	r26, Z+12	; 0x0c
    5722:	b5 85       	ldd	r27, Z+13	; 0x0d
    5724:	42 19       	sub	r20, r2
    5726:	53 09       	sbc	r21, r3
    5728:	64 09       	sbc	r22, r4
    572a:	75 09       	sbc	r23, r5
    572c:	84 17       	cp	r24, r20
    572e:	95 07       	cpc	r25, r21
    5730:	a6 07       	cpc	r26, r22
    5732:	b7 07       	cpc	r27, r23
    5734:	60 f4       	brcc	.+24     	; 0x574e <ParseReceived+0x506>
    5736:	51 01       	movw	r10, r2
    5738:	a8 0e       	add	r10, r24
    573a:	b9 1e       	adc	r11, r25
    573c:	08 c0       	rjmp	.+16     	; 0x574e <ParseReceived+0x506>
    573e:	84 17       	cp	r24, r20
    5740:	95 07       	cpc	r25, r21
    5742:	a6 07       	cpc	r26, r22
    5744:	b7 07       	cpc	r27, r23
    5746:	48 f7       	brcc	.-46     	; 0x571a <ParseReceived+0x4d2>
    5748:	d2 01       	movw	r26, r4
    574a:	c1 01       	movw	r24, r2
    574c:	dc cf       	rjmp	.-72     	; 0x5706 <ParseReceived+0x4be>
    574e:	35 01       	movw	r6, r10
    5750:	62 18       	sub	r6, r2
    5752:	73 08       	sbc	r7, r3
    5754:	a3 01       	movw	r20, r6
    5756:	b7 01       	movw	r22, r14
    5758:	62 0d       	add	r22, r2
    575a:	73 1d       	adc	r23, r3
    575c:	d6 01       	movw	r26, r12
    575e:	54 96       	adiw	r26, 0x14	; 20
    5760:	8d 91       	ld	r24, X+
    5762:	9c 91       	ld	r25, X
    5764:	55 97       	sbiw	r26, 0x15	; 21
    5766:	0e 94 c9 64 	call	0xc992	; 0xc992 <memcpy>
    576a:	f6 01       	movw	r30, r12
    576c:	42 85       	ldd	r20, Z+10	; 0x0a
    576e:	53 85       	ldd	r21, Z+11	; 0x0b
    5770:	64 85       	ldd	r22, Z+12	; 0x0c
    5772:	75 85       	ldd	r23, Z+13	; 0x0d
    5774:	c5 01       	movw	r24, r10
    5776:	a0 e0       	ldi	r26, 0x00	; 0
    5778:	b0 e0       	ldi	r27, 0x00	; 0
    577a:	82 19       	sub	r24, r2
    577c:	93 09       	sbc	r25, r3
    577e:	a4 09       	sbc	r26, r4
    5780:	b5 09       	sbc	r27, r5
    5782:	48 17       	cp	r20, r24
    5784:	59 07       	cpc	r21, r25
    5786:	6a 07       	cpc	r22, r26
    5788:	7b 07       	cpc	r23, r27
    578a:	30 f4       	brcc	.+12     	; 0x5798 <ParseReceived+0x550>
    578c:	04 88       	ldd	r0, Z+20	; 0x14
    578e:	f5 89       	ldd	r31, Z+21	; 0x15
    5790:	e0 2d       	mov	r30, r0
    5792:	e4 0f       	add	r30, r20
    5794:	f5 1f       	adc	r31, r21
    5796:	10 82       	st	Z, r1
    5798:	f8 01       	movw	r30, r16
    579a:	ec 5f       	subi	r30, 0xFC	; 252
    579c:	fe 4f       	sbci	r31, 0xFE	; 254
    579e:	60 82       	st	Z, r6
    57a0:	71 82       	std	Z+1, r7	; 0x01
    57a2:	32 97       	sbiw	r30, 0x02	; 2
    57a4:	60 82       	st	Z, r6
    57a6:	71 82       	std	Z+1, r7	; 0x01
    57a8:	f6 01       	movw	r30, r12
    57aa:	82 85       	ldd	r24, Z+10	; 0x0a
    57ac:	93 85       	ldd	r25, Z+11	; 0x0b
    57ae:	a4 85       	ldd	r26, Z+12	; 0x0c
    57b0:	b5 85       	ldd	r27, Z+13	; 0x0d
    57b2:	28 16       	cp	r2, r24
    57b4:	39 06       	cpc	r3, r25
    57b6:	4a 06       	cpc	r4, r26
    57b8:	5b 06       	cpc	r5, r27
    57ba:	38 f0       	brcs	.+14     	; 0x57ca <ParseReceived+0x582>
    57bc:	d4 01       	movw	r26, r8
    57be:	1c 92       	st	X, r1
    57c0:	26 8a       	std	Z+22, r2	; 0x16
    57c2:	37 8a       	std	Z+23, r3	; 0x17
    57c4:	81 e0       	ldi	r24, 0x01	; 1
    57c6:	80 8f       	std	Z+24, r24	; 0x18
    57c8:	81 8f       	std	Z+25, r24	; 0x19
    57ca:	f8 01       	movw	r30, r16
    57cc:	84 81       	ldd	r24, Z+4	; 0x04
    57ce:	95 81       	ldd	r25, Z+5	; 0x05
    57d0:	a6 81       	ldd	r26, Z+6	; 0x06
    57d2:	b7 81       	ldd	r27, Z+7	; 0x07
    57d4:	fc 01       	movw	r30, r24
    57d6:	31 97       	sbiw	r30, 0x01	; 1
    57d8:	e1 32       	cpi	r30, 0x21	; 33
    57da:	f1 05       	cpc	r31, r1
    57dc:	08 f0       	brcs	.+2      	; 0x57e0 <ParseReceived+0x598>
    57de:	26 c2       	rjmp	.+1100   	; 0x5c2c <ParseReceived+0x9e4>
    57e0:	e2 50       	subi	r30, 0x02	; 2
    57e2:	ff 4f       	sbci	r31, 0xFF	; 255
    57e4:	0c 94 6e 62 	jmp	0xc4dc	; 0xc4dc <__tablejump2__>
    57e8:	47 e0       	ldi	r20, 0x07	; 7
    57ea:	50 e0       	ldi	r21, 0x00	; 0
    57ec:	66 e4       	ldi	r22, 0x46	; 70
    57ee:	75 e2       	ldi	r23, 0x25	; 37
    57f0:	c7 01       	movw	r24, r14
    57f2:	0e 94 ff 64 	call	0xc9fe	; 0xc9fe <strncmp>
    57f6:	89 2b       	or	r24, r25
    57f8:	71 f4       	brne	.+28     	; 0x5816 <ParseReceived+0x5ce>
    57fa:	8f e3       	ldi	r24, 0x3F	; 63
    57fc:	95 e2       	ldi	r25, 0x25	; 37
    57fe:	d8 01       	movw	r26, r16
    5800:	18 96       	adiw	r26, 0x08	; 8
    5802:	8d 93       	st	X+, r24
    5804:	9c 93       	st	X, r25
    5806:	19 97       	sbiw	r26, 0x09	; 9
    5808:	f7 01       	movw	r30, r14
    580a:	87 81       	ldd	r24, Z+7	; 0x07
    580c:	80 53       	subi	r24, 0x30	; 48
    580e:	f8 01       	movw	r30, r16
    5810:	ef 5d       	subi	r30, 0xDF	; 223
    5812:	fe 4f       	sbci	r31, 0xFE	; 254
    5814:	80 83       	st	Z, r24
    5816:	6c e9       	ldi	r22, 0x9C	; 156
    5818:	74 e2       	ldi	r23, 0x24	; 36
    581a:	c7 01       	movw	r24, r14
    581c:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    5820:	89 2b       	or	r24, r25
    5822:	39 f4       	brne	.+14     	; 0x5832 <ParseReceived+0x5ea>
    5824:	d8 01       	movw	r26, r16
    5826:	14 96       	adiw	r26, 0x04	; 4
    5828:	1d 92       	st	X+, r1
    582a:	1d 92       	st	X+, r1
    582c:	1d 92       	st	X+, r1
    582e:	1c 92       	st	X, r1
    5830:	17 97       	sbiw	r26, 0x07	; 7
    5832:	6f e3       	ldi	r22, 0x3F	; 63
    5834:	75 e2       	ldi	r23, 0x25	; 37
    5836:	c7 01       	movw	r24, r14
    5838:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    583c:	89 2b       	or	r24, r25
    583e:	09 f0       	breq	.+2      	; 0x5842 <ParseReceived+0x5fa>
    5840:	f5 c1       	rjmp	.+1002   	; 0x5c2c <ParseReceived+0x9e4>
    5842:	f8 01       	movw	r30, r16
    5844:	14 82       	std	Z+4, r1	; 0x04
    5846:	15 82       	std	Z+5, r1	; 0x05
    5848:	16 82       	std	Z+6, r1	; 0x06
    584a:	17 82       	std	Z+7, r1	; 0x07
    584c:	c8 01       	movw	r24, r16
    584e:	0e 94 5f 5a 	call	0xb4be	; 0xb4be <ESP8266_Callback_WifiConnectFailed>
    5852:	ec c1       	rjmp	.+984    	; 0x5c2c <ParseReceived+0x9e4>
    5854:	4b e0       	ldi	r20, 0x0B	; 11
    5856:	50 e0       	ldi	r21, 0x00	; 0
    5858:	6e e4       	ldi	r22, 0x4E	; 78
    585a:	75 e2       	ldi	r23, 0x25	; 37
    585c:	c7 01       	movw	r24, r14
    585e:	0e 94 ff 64 	call	0xc9fe	; 0xc9fe <strncmp>
    5862:	89 2b       	or	r24, r25
    5864:	09 f0       	breq	.+2      	; 0x5868 <ParseReceived+0x620>
    5866:	d4 c1       	rjmp	.+936    	; 0x5c10 <ParseReceived+0x9c8>
    5868:	6a e5       	ldi	r22, 0x5A	; 90
    586a:	75 e2       	ldi	r23, 0x25	; 37
    586c:	c7 01       	movw	r24, r14
    586e:	0e 94 27 65 	call	0xca4e	; 0xca4e <strstr>
    5872:	89 2b       	or	r24, r25
    5874:	09 f4       	brne	.+2      	; 0x5878 <ParseReceived+0x630>
    5876:	cc c1       	rjmp	.+920    	; 0x5c10 <ParseReceived+0x9c8>
    5878:	f7 01       	movw	r30, r14
    587a:	cf 01       	movw	r24, r30
    587c:	21 91       	ld	r18, Z+
    587e:	22 23       	and	r18, r18
    5880:	09 f4       	brne	.+2      	; 0x5884 <ParseReceived+0x63c>
    5882:	c6 c1       	rjmp	.+908    	; 0x5c10 <ParseReceived+0x9c8>
    5884:	22 32       	cpi	r18, 0x22	; 34
    5886:	c9 f7       	brne	.-14     	; 0x587a <ParseReceived+0x632>
    5888:	01 96       	adiw	r24, 0x01	; 1
    588a:	fc 01       	movw	r30, r24
    588c:	40 81       	ld	r20, Z
    588e:	2e 2f       	mov	r18, r30
    5890:	28 1b       	sub	r18, r24
    5892:	30 e0       	ldi	r19, 0x00	; 0
    5894:	41 11       	cpse	r20, r1
    5896:	31 c0       	rjmp	.+98     	; 0x58fa <ParseReceived+0x6b2>
    5898:	20 0f       	add	r18, r16
    589a:	31 1f       	adc	r19, r17
    589c:	d9 01       	movw	r26, r18
    589e:	a8 5f       	subi	r26, 0xF8	; 248
    58a0:	be 4f       	sbci	r27, 0xFE	; 254
    58a2:	1c 92       	st	X, r1
    58a4:	5f 01       	movw	r10, r30
    58a6:	33 e0       	ldi	r19, 0x03	; 3
    58a8:	a3 0e       	add	r10, r19
    58aa:	b1 1c       	adc	r11, r1
    58ac:	ae 01       	movw	r20, r28
    58ae:	4f 5f       	subi	r20, 0xFF	; 255
    58b0:	5f 4f       	sbci	r21, 0xFF	; 255
    58b2:	b8 01       	movw	r22, r16
    58b4:	68 5e       	subi	r22, 0xE8	; 232
    58b6:	7e 4f       	sbci	r23, 0xFE	; 254
    58b8:	c5 01       	movw	r24, r10
    58ba:	ce db       	rcall	.-2148   	; 0x5058 <ParseMAC>
    58bc:	c9 80       	ldd	r12, Y+1	; 0x01
    58be:	d1 2c       	mov	r13, r1
    58c0:	82 e0       	ldi	r24, 0x02	; 2
    58c2:	c8 0e       	add	r12, r24
    58c4:	d1 1c       	adc	r13, r1
    58c6:	ca 0c       	add	r12, r10
    58c8:	db 1c       	adc	r13, r11
    58ca:	be 01       	movw	r22, r28
    58cc:	6f 5f       	subi	r22, 0xFF	; 255
    58ce:	7f 4f       	sbci	r23, 0xFF	; 255
    58d0:	c6 01       	movw	r24, r12
    58d2:	05 da       	rcall	.-3062   	; 0x4cde <ParseNumber>
    58d4:	f8 01       	movw	r30, r16
    58d6:	e2 5e       	subi	r30, 0xE2	; 226
    58d8:	fe 4f       	sbci	r31, 0xFE	; 254
    58da:	60 83       	st	Z, r22
    58dc:	89 81       	ldd	r24, Y+1	; 0x01
    58de:	90 e0       	ldi	r25, 0x00	; 0
    58e0:	01 96       	adiw	r24, 0x01	; 1
    58e2:	be 01       	movw	r22, r28
    58e4:	6f 5f       	subi	r22, 0xFF	; 255
    58e6:	7f 4f       	sbci	r23, 0xFF	; 255
    58e8:	8c 0d       	add	r24, r12
    58ea:	9d 1d       	adc	r25, r13
    58ec:	f8 d9       	rcall	.-3088   	; 0x4cde <ParseNumber>
    58ee:	f8 01       	movw	r30, r16
    58f0:	e1 5e       	subi	r30, 0xE1	; 225
    58f2:	fe 4f       	sbci	r31, 0xFE	; 254
    58f4:	60 83       	st	Z, r22
    58f6:	71 83       	std	Z+1, r23	; 0x01
    58f8:	8b c1       	rjmp	.+790    	; 0x5c10 <ParseReceived+0x9c8>
    58fa:	42 32       	cpi	r20, 0x22	; 34
    58fc:	41 f0       	breq	.+16     	; 0x590e <ParseReceived+0x6c6>
    58fe:	31 96       	adiw	r30, 0x01	; 1
    5900:	20 0f       	add	r18, r16
    5902:	31 1f       	adc	r19, r17
    5904:	d9 01       	movw	r26, r18
    5906:	a8 5f       	subi	r26, 0xF8	; 248
    5908:	be 4f       	sbci	r27, 0xFE	; 254
    590a:	4c 93       	st	X, r20
    590c:	bf cf       	rjmp	.-130    	; 0x588c <ParseReceived+0x644>
    590e:	51 81       	ldd	r21, Z+1	; 0x01
    5910:	5c 32       	cpi	r21, 0x2C	; 44
    5912:	a9 f7       	brne	.-22     	; 0x58fe <ParseReceived+0x6b6>
    5914:	52 81       	ldd	r21, Z+2	; 0x02
    5916:	52 32       	cpi	r21, 0x22	; 34
    5918:	91 f7       	brne	.-28     	; 0x58fe <ParseReceived+0x6b6>
    591a:	be cf       	rjmp	.-132    	; 0x5898 <ParseReceived+0x650>
    591c:	46 e0       	ldi	r20, 0x06	; 6
    591e:	50 e0       	ldi	r21, 0x00	; 0
    5920:	62 e6       	ldi	r22, 0x62	; 98
    5922:	75 e2       	ldi	r23, 0x25	; 37
    5924:	c7 01       	movw	r24, r14
    5926:	0e 94 ff 64 	call	0xc9fe	; 0xc9fe <strncmp>
    592a:	89 2b       	or	r24, r25
    592c:	09 f0       	breq	.+2      	; 0x5930 <ParseReceived+0x6e8>
    592e:	70 c1       	rjmp	.+736    	; 0x5c10 <ParseReceived+0x9c8>
    5930:	d7 01       	movw	r26, r14
    5932:	fd 01       	movw	r30, r26
    5934:	8d 91       	ld	r24, X+
    5936:	88 23       	and	r24, r24
    5938:	11 f0       	breq	.+4      	; 0x593e <ParseReceived+0x6f6>
    593a:	8a 33       	cpi	r24, 0x3A	; 58
    593c:	d1 f7       	brne	.-12     	; 0x5932 <ParseReceived+0x6ea>
    593e:	30 97       	sbiw	r30, 0x00	; 0
    5940:	09 f4       	brne	.+2      	; 0x5944 <ParseReceived+0x6fc>
    5942:	66 c1       	rjmp	.+716    	; 0x5c10 <ParseReceived+0x9c8>
    5944:	68 01       	movw	r12, r16
    5946:	b9 ef       	ldi	r27, 0xF9	; 249
    5948:	cb 0e       	add	r12, r27
    594a:	d1 1c       	adc	r13, r1
    594c:	d6 01       	movw	r26, r12
    594e:	8d 91       	ld	r24, X+
    5950:	9c 91       	ld	r25, X
    5952:	dc 01       	movw	r26, r24
    5954:	1c 92       	st	X, r1
    5956:	81 81       	ldd	r24, Z+1	; 0x01
    5958:	82 32       	cpi	r24, 0x22	; 34
    595a:	19 f0       	breq	.+6      	; 0x5962 <ParseReceived+0x71a>
    595c:	cf 01       	movw	r24, r30
    595e:	01 96       	adiw	r24, 0x01	; 1
    5960:	02 c0       	rjmp	.+4      	; 0x5966 <ParseReceived+0x71e>
    5962:	cf 01       	movw	r24, r30
    5964:	02 96       	adiw	r24, 0x02	; 2
    5966:	fc 01       	movw	r30, r24
    5968:	60 81       	ld	r22, Z
    596a:	4e 2f       	mov	r20, r30
    596c:	48 1b       	sub	r20, r24
    596e:	50 e0       	ldi	r21, 0x00	; 0
    5970:	61 11       	cpse	r22, r1
    5972:	10 c0       	rjmp	.+32     	; 0x5994 <ParseReceived+0x74c>
    5974:	d6 01       	movw	r26, r12
    5976:	8d 91       	ld	r24, X+
    5978:	9c 91       	ld	r25, X
    597a:	84 0f       	add	r24, r20
    597c:	95 1f       	adc	r25, r21
    597e:	dc 01       	movw	r26, r24
    5980:	1c 92       	st	X, r1
    5982:	af 01       	movw	r20, r30
    5984:	4d 5f       	subi	r20, 0xFD	; 253
    5986:	5f 4f       	sbci	r21, 0xFF	; 255
    5988:	da 01       	movw	r26, r20
    598a:	f8 01       	movw	r30, r16
    598c:	e5 50       	subi	r30, 0x05	; 5
    598e:	ff 4f       	sbci	r31, 0xFF	; 255
    5990:	6f 01       	movw	r12, r30
    5992:	1d c0       	rjmp	.+58     	; 0x59ce <ParseReceived+0x786>
    5994:	62 32       	cpi	r22, 0x22	; 34
    5996:	49 f0       	breq	.+18     	; 0x59aa <ParseReceived+0x762>
    5998:	31 96       	adiw	r30, 0x01	; 1
    599a:	d6 01       	movw	r26, r12
    599c:	2d 91       	ld	r18, X+
    599e:	3c 91       	ld	r19, X
    59a0:	24 0f       	add	r18, r20
    59a2:	35 1f       	adc	r19, r21
    59a4:	d9 01       	movw	r26, r18
    59a6:	6c 93       	st	X, r22
    59a8:	df cf       	rjmp	.-66     	; 0x5968 <ParseReceived+0x720>
    59aa:	21 81       	ldd	r18, Z+1	; 0x01
    59ac:	2c 32       	cpi	r18, 0x2C	; 44
    59ae:	a1 f7       	brne	.-24     	; 0x5998 <ParseReceived+0x750>
    59b0:	22 81       	ldd	r18, Z+2	; 0x02
    59b2:	22 32       	cpi	r18, 0x22	; 34
    59b4:	89 f7       	brne	.-30     	; 0x5998 <ParseReceived+0x750>
    59b6:	de cf       	rjmp	.-68     	; 0x5974 <ParseReceived+0x72c>
    59b8:	62 32       	cpi	r22, 0x22	; 34
    59ba:	09 f4       	brne	.+2      	; 0x59be <ParseReceived+0x776>
    59bc:	4f c0       	rjmp	.+158    	; 0x5a5c <ParseReceived+0x814>
    59be:	11 96       	adiw	r26, 0x01	; 1
    59c0:	f6 01       	movw	r30, r12
    59c2:	80 81       	ld	r24, Z
    59c4:	91 81       	ldd	r25, Z+1	; 0x01
    59c6:	82 0f       	add	r24, r18
    59c8:	93 1f       	adc	r25, r19
    59ca:	fc 01       	movw	r30, r24
    59cc:	60 83       	st	Z, r22
    59ce:	6c 91       	ld	r22, X
    59d0:	2a 2f       	mov	r18, r26
    59d2:	24 1b       	sub	r18, r20
    59d4:	30 e0       	ldi	r19, 0x00	; 0
    59d6:	61 11       	cpse	r22, r1
    59d8:	ef cf       	rjmp	.-34     	; 0x59b8 <ParseReceived+0x770>
    59da:	f6 01       	movw	r30, r12
    59dc:	80 81       	ld	r24, Z
    59de:	91 81       	ldd	r25, Z+1	; 0x01
    59e0:	82 0f       	add	r24, r18
    59e2:	93 1f       	adc	r25, r19
    59e4:	fc 01       	movw	r30, r24
    59e6:	10 82       	st	Z, r1
    59e8:	6d 01       	movw	r12, r26
    59ea:	f2 e0       	ldi	r31, 0x02	; 2
    59ec:	cf 0e       	add	r12, r31
    59ee:	d1 1c       	adc	r13, r1
    59f0:	be 01       	movw	r22, r28
    59f2:	6f 5f       	subi	r22, 0xFF	; 255
    59f4:	7f 4f       	sbci	r23, 0xFF	; 255
    59f6:	c6 01       	movw	r24, r12
    59f8:	72 d9       	rcall	.-3356   	; 0x4cde <ParseNumber>
    59fa:	f8 01       	movw	r30, r16
    59fc:	e2 50       	subi	r30, 0x02	; 2
    59fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5a00:	60 83       	st	Z, r22
    5a02:	a9 80       	ldd	r10, Y+1	; 0x01
    5a04:	b1 2c       	mov	r11, r1
    5a06:	3f ef       	ldi	r19, 0xFF	; 255
    5a08:	a3 1a       	sub	r10, r19
    5a0a:	b3 0a       	sbc	r11, r19
    5a0c:	ac 0c       	add	r10, r12
    5a0e:	bd 1c       	adc	r11, r13
    5a10:	be 01       	movw	r22, r28
    5a12:	6f 5f       	subi	r22, 0xFF	; 255
    5a14:	7f 4f       	sbci	r23, 0xFF	; 255
    5a16:	c5 01       	movw	r24, r10
    5a18:	62 d9       	rcall	.-3388   	; 0x4cde <ParseNumber>
    5a1a:	f8 01       	movw	r30, r16
    5a1c:	e3 50       	subi	r30, 0x03	; 3
    5a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a20:	60 83       	st	Z, r22
    5a22:	c9 80       	ldd	r12, Y+1	; 0x01
    5a24:	d1 2c       	mov	r13, r1
    5a26:	8f ef       	ldi	r24, 0xFF	; 255
    5a28:	c8 1a       	sub	r12, r24
    5a2a:	d8 0a       	sbc	r13, r24
    5a2c:	ca 0c       	add	r12, r10
    5a2e:	db 1c       	adc	r13, r11
    5a30:	be 01       	movw	r22, r28
    5a32:	6f 5f       	subi	r22, 0xFF	; 255
    5a34:	7f 4f       	sbci	r23, 0xFF	; 255
    5a36:	c6 01       	movw	r24, r12
    5a38:	52 d9       	rcall	.-3420   	; 0x4cde <ParseNumber>
    5a3a:	f8 01       	movw	r30, r16
    5a3c:	e1 50       	subi	r30, 0x01	; 1
    5a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a40:	60 83       	st	Z, r22
    5a42:	89 81       	ldd	r24, Y+1	; 0x01
    5a44:	90 e0       	ldi	r25, 0x00	; 0
    5a46:	01 96       	adiw	r24, 0x01	; 1
    5a48:	be 01       	movw	r22, r28
    5a4a:	6f 5f       	subi	r22, 0xFF	; 255
    5a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    5a4e:	8c 0d       	add	r24, r12
    5a50:	9d 1d       	adc	r25, r13
    5a52:	45 d9       	rcall	.-3446   	; 0x4cde <ParseNumber>
    5a54:	f8 01       	movw	r30, r16
    5a56:	f3 95       	inc	r31
    5a58:	60 83       	st	Z, r22
    5a5a:	da c0       	rjmp	.+436    	; 0x5c10 <ParseReceived+0x9c8>
    5a5c:	11 96       	adiw	r26, 0x01	; 1
    5a5e:	8c 91       	ld	r24, X
    5a60:	11 97       	sbiw	r26, 0x01	; 1
    5a62:	8c 32       	cpi	r24, 0x2C	; 44
    5a64:	09 f0       	breq	.+2      	; 0x5a68 <ParseReceived+0x820>
    5a66:	ab cf       	rjmp	.-170    	; 0x59be <ParseReceived+0x776>
    5a68:	b8 cf       	rjmp	.-144    	; 0x59da <ParseReceived+0x792>
    5a6a:	47 e0       	ldi	r20, 0x07	; 7
    5a6c:	50 e0       	ldi	r21, 0x00	; 0
    5a6e:	69 e6       	ldi	r22, 0x69	; 105
    5a70:	75 e2       	ldi	r23, 0x25	; 37
    5a72:	c7 01       	movw	r24, r14
    5a74:	0e 94 ff 64 	call	0xc9fe	; 0xc9fe <strncmp>
    5a78:	89 2b       	or	r24, r25
    5a7a:	19 f4       	brne	.+6      	; 0x5a82 <ParseReceived+0x83a>
    5a7c:	b7 01       	movw	r22, r14
    5a7e:	c8 01       	movw	r24, r16
    5a80:	f7 d9       	rcall	.-3090   	; 0x4e70 <ParseCIPSTA>
    5a82:	6c e9       	ldi	r22, 0x9C	; 156
    5a84:	74 e2       	ldi	r23, 0x24	; 36
    5a86:	c7 01       	movw	r24, r14
    5a88:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    5a8c:	89 2b       	or	r24, r25
    5a8e:	09 f0       	breq	.+2      	; 0x5a92 <ParseReceived+0x84a>
    5a90:	cd c0       	rjmp	.+410    	; 0x5c2c <ParseReceived+0x9e4>
    5a92:	f8 01       	movw	r30, r16
    5a94:	14 82       	std	Z+4, r1	; 0x04
    5a96:	15 82       	std	Z+5, r1	; 0x05
    5a98:	16 82       	std	Z+6, r1	; 0x06
    5a9a:	17 82       	std	Z+7, r1	; 0x07
    5a9c:	c8 01       	movw	r24, r16
    5a9e:	0e 94 89 5a 	call	0xb512	; 0xb512 <ESP8266_Callback_WifiIPSet>
    5aa2:	c4 c0       	rjmp	.+392    	; 0x5c2c <ParseReceived+0x9e4>
    5aa4:	46 e0       	ldi	r20, 0x06	; 6
    5aa6:	50 e0       	ldi	r21, 0x00	; 0
    5aa8:	61 e7       	ldi	r22, 0x71	; 113
    5aaa:	75 e2       	ldi	r23, 0x25	; 37
    5aac:	c7 01       	movw	r24, r14
    5aae:	0e 94 ff 64 	call	0xc9fe	; 0xc9fe <strncmp>
    5ab2:	89 2b       	or	r24, r25
    5ab4:	09 f0       	breq	.+2      	; 0x5ab8 <ParseReceived+0x870>
    5ab6:	ac c0       	rjmp	.+344    	; 0x5c10 <ParseReceived+0x9c8>
    5ab8:	b7 01       	movw	r22, r14
    5aba:	c8 01       	movw	r24, r16
    5abc:	d9 d9       	rcall	.-3150   	; 0x4e70 <ParseCIPSTA>
    5abe:	a8 c0       	rjmp	.+336    	; 0x5c10 <ParseReceived+0x9c8>
    5ac0:	6c e9       	ldi	r22, 0x9C	; 156
    5ac2:	74 e2       	ldi	r23, 0x24	; 36
    5ac4:	c7 01       	movw	r24, r14
    5ac6:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    5aca:	89 2b       	or	r24, r25
    5acc:	09 f0       	breq	.+2      	; 0x5ad0 <ParseReceived+0x888>
    5ace:	ae c0       	rjmp	.+348    	; 0x5c2c <ParseReceived+0x9e4>
    5ad0:	f8 01       	movw	r30, r16
    5ad2:	14 82       	std	Z+4, r1	; 0x04
    5ad4:	15 82       	std	Z+5, r1	; 0x05
    5ad6:	16 82       	std	Z+6, r1	; 0x06
    5ad8:	17 82       	std	Z+7, r1	; 0x07
    5ada:	e9 50       	subi	r30, 0x09	; 9
    5adc:	ff 4f       	sbci	r31, 0xFF	; 255
    5ade:	80 81       	ld	r24, Z
    5ae0:	31 96       	adiw	r30, 0x01	; 1
    5ae2:	80 83       	st	Z, r24
    5ae4:	a3 c0       	rjmp	.+326    	; 0x5c2c <ParseReceived+0x9e4>
    5ae6:	6c e9       	ldi	r22, 0x9C	; 156
    5ae8:	74 e2       	ldi	r23, 0x24	; 36
    5aea:	c7 01       	movw	r24, r14
    5aec:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    5af0:	89 2b       	or	r24, r25
    5af2:	09 f0       	breq	.+2      	; 0x5af6 <ParseReceived+0x8ae>
    5af4:	9b c0       	rjmp	.+310    	; 0x5c2c <ParseReceived+0x9e4>
    5af6:	8d e1       	ldi	r24, 0x1D	; 29
    5af8:	90 e0       	ldi	r25, 0x00	; 0
    5afa:	a0 e0       	ldi	r26, 0x00	; 0
    5afc:	b0 e0       	ldi	r27, 0x00	; 0
    5afe:	f8 01       	movw	r30, r16
    5b00:	84 83       	std	Z+4, r24	; 0x04
    5b02:	95 83       	std	Z+5, r25	; 0x05
    5b04:	a6 83       	std	Z+6, r26	; 0x06
    5b06:	b7 83       	std	Z+7, r27	; 0x07
    5b08:	e3 5d       	subi	r30, 0xD3	; 211
    5b0a:	fe 4f       	sbci	r31, 0xFE	; 254
    5b0c:	81 81       	ldd	r24, Z+1	; 0x01
    5b0e:	81 60       	ori	r24, 0x01	; 1
    5b10:	81 83       	std	Z+1, r24	; 0x01
    5b12:	88 e7       	ldi	r24, 0x78	; 120
    5b14:	95 e2       	ldi	r25, 0x25	; 37
    5b16:	d8 01       	movw	r26, r16
    5b18:	18 96       	adiw	r26, 0x08	; 8
    5b1a:	8d 93       	st	X+, r24
    5b1c:	9c 93       	st	X, r25
    5b1e:	19 97       	sbiw	r26, 0x09	; 9
    5b20:	85 c0       	rjmp	.+266    	; 0x5c2c <ParseReceived+0x9e4>
    5b22:	6c e9       	ldi	r22, 0x9C	; 156
    5b24:	74 e2       	ldi	r23, 0x24	; 36
    5b26:	c7 01       	movw	r24, r14
    5b28:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    5b2c:	89 2b       	or	r24, r25
    5b2e:	29 f4       	brne	.+10     	; 0x5b3a <ParseReceived+0x8f2>
    5b30:	f8 01       	movw	r30, r16
    5b32:	14 82       	std	Z+4, r1	; 0x04
    5b34:	15 82       	std	Z+5, r1	; 0x05
    5b36:	16 82       	std	Z+6, r1	; 0x06
    5b38:	17 82       	std	Z+7, r1	; 0x07
    5b3a:	61 ea       	ldi	r22, 0xA1	; 161
    5b3c:	74 e2       	ldi	r23, 0x24	; 36
    5b3e:	c7 01       	movw	r24, r14
    5b40:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    5b44:	89 2b       	or	r24, r25
    5b46:	09 f0       	breq	.+2      	; 0x5b4a <ParseReceived+0x902>
    5b48:	71 c0       	rjmp	.+226    	; 0x5c2c <ParseReceived+0x9e4>
    5b4a:	d8 01       	movw	r26, r16
    5b4c:	14 96       	adiw	r26, 0x04	; 4
    5b4e:	1d 92       	st	X+, r1
    5b50:	1d 92       	st	X+, r1
    5b52:	1d 92       	st	X+, r1
    5b54:	1c 92       	st	X, r1
    5b56:	17 97       	sbiw	r26, 0x07	; 7
    5b58:	f8 01       	movw	r30, r16
    5b5a:	ee 5d       	subi	r30, 0xDE	; 222
    5b5c:	fe 4f       	sbci	r31, 0xFE	; 254
    5b5e:	60 81       	ld	r22, Z
    5b60:	b5 e2       	ldi	r27, 0x25	; 37
    5b62:	6b 02       	muls	r22, r27
    5b64:	b0 01       	movw	r22, r0
    5b66:	11 24       	eor	r1, r1
    5b68:	f8 01       	movw	r30, r16
    5b6a:	e6 0f       	add	r30, r22
    5b6c:	f7 1f       	adc	r31, r23
    5b6e:	12 8e       	std	Z+26, r1	; 0x1a
    5b70:	14 8e       	std	Z+28, r1	; 0x1c
    5b72:	15 ae       	std	Z+61, r1	; 0x3d
    5b74:	14 ae       	std	Z+60, r1	; 0x3c
    5b76:	66 5e       	subi	r22, 0xE6	; 230
    5b78:	7f 4f       	sbci	r23, 0xFF	; 255
    5b7a:	60 0f       	add	r22, r16
    5b7c:	71 1f       	adc	r23, r17
    5b7e:	c8 01       	movw	r24, r16
    5b80:	0e 94 c7 5a 	call	0xb58e	; 0xb58e <ESP8266_Callback_ClientConnectionError>
    5b84:	53 c0       	rjmp	.+166    	; 0x5c2c <ParseReceived+0x9e4>
    5b86:	69 ea       	ldi	r22, 0xA9	; 169
    5b88:	74 e2       	ldi	r23, 0x24	; 36
    5b8a:	c7 01       	movw	r24, r14
    5b8c:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    5b90:	89 2b       	or	r24, r25
    5b92:	09 f0       	breq	.+2      	; 0x5b96 <ParseReceived+0x94e>
    5b94:	4b c0       	rjmp	.+150    	; 0x5c2c <ParseReceived+0x9e4>
    5b96:	d8 01       	movw	r26, r16
    5b98:	14 96       	adiw	r26, 0x04	; 4
    5b9a:	1d 92       	st	X+, r1
    5b9c:	1d 92       	st	X+, r1
    5b9e:	1d 92       	st	X+, r1
    5ba0:	1c 92       	st	X, r1
    5ba2:	17 97       	sbiw	r26, 0x07	; 7
    5ba4:	f8 01       	movw	r30, r16
    5ba6:	e3 5d       	subi	r30, 0xD3	; 211
    5ba8:	fe 4f       	sbci	r31, 0xFE	; 254
    5baa:	81 81       	ldd	r24, Z+1	; 0x01
    5bac:	82 60       	ori	r24, 0x02	; 2
    5bae:	81 83       	std	Z+1, r24	; 0x01
    5bb0:	3d c0       	rjmp	.+122    	; 0x5c2c <ParseReceived+0x9e4>
    5bb2:	4a e0       	ldi	r20, 0x0A	; 10
    5bb4:	50 e0       	ldi	r21, 0x00	; 0
    5bb6:	60 e8       	ldi	r22, 0x80	; 128
    5bb8:	75 e2       	ldi	r23, 0x25	; 37
    5bba:	c7 01       	movw	r24, r14
    5bbc:	0e 94 ff 64 	call	0xc9fe	; 0xc9fe <strncmp>
    5bc0:	89 2b       	or	r24, r25
    5bc2:	41 f4       	brne	.+16     	; 0x5bd4 <ParseReceived+0x98c>
    5bc4:	40 e0       	ldi	r20, 0x00	; 0
    5bc6:	50 e0       	ldi	r21, 0x00	; 0
    5bc8:	b8 01       	movw	r22, r16
    5bca:	61 52       	subi	r22, 0x21	; 33
    5bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    5bce:	c7 01       	movw	r24, r14
    5bd0:	0c 96       	adiw	r24, 0x0c	; 12
    5bd2:	42 da       	rcall	.-2940   	; 0x5058 <ParseMAC>
    5bd4:	6c e9       	ldi	r22, 0x9C	; 156
    5bd6:	74 e2       	ldi	r23, 0x24	; 36
    5bd8:	c7 01       	movw	r24, r14
    5bda:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    5bde:	89 2b       	or	r24, r25
    5be0:	29 f5       	brne	.+74     	; 0x5c2c <ParseReceived+0x9e4>
    5be2:	f8 01       	movw	r30, r16
    5be4:	14 82       	std	Z+4, r1	; 0x04
    5be6:	15 82       	std	Z+5, r1	; 0x05
    5be8:	16 82       	std	Z+6, r1	; 0x06
    5bea:	17 82       	std	Z+7, r1	; 0x07
    5bec:	1f c0       	rjmp	.+62     	; 0x5c2c <ParseReceived+0x9e4>
    5bee:	49 e0       	ldi	r20, 0x09	; 9
    5bf0:	50 e0       	ldi	r21, 0x00	; 0
    5bf2:	6b e8       	ldi	r22, 0x8B	; 139
    5bf4:	75 e2       	ldi	r23, 0x25	; 37
    5bf6:	c7 01       	movw	r24, r14
    5bf8:	0e 94 ff 64 	call	0xc9fe	; 0xc9fe <strncmp>
    5bfc:	89 2b       	or	r24, r25
    5bfe:	41 f4       	brne	.+16     	; 0x5c10 <ParseReceived+0x9c8>
    5c00:	40 e0       	ldi	r20, 0x00	; 0
    5c02:	50 e0       	ldi	r21, 0x00	; 0
    5c04:	b8 01       	movw	r22, r16
    5c06:	6f 50       	subi	r22, 0x0F	; 15
    5c08:	7f 4f       	sbci	r23, 0xFF	; 255
    5c0a:	c7 01       	movw	r24, r14
    5c0c:	0b 96       	adiw	r24, 0x0b	; 11
    5c0e:	24 da       	rcall	.-3000   	; 0x5058 <ParseMAC>
    5c10:	6c e9       	ldi	r22, 0x9C	; 156
    5c12:	74 e2       	ldi	r23, 0x24	; 36
    5c14:	c7 01       	movw	r24, r14
    5c16:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    5c1a:	89 2b       	or	r24, r25
    5c1c:	39 f4       	brne	.+14     	; 0x5c2c <ParseReceived+0x9e4>
    5c1e:	d8 01       	movw	r26, r16
    5c20:	14 96       	adiw	r26, 0x04	; 4
    5c22:	1d 92       	st	X+, r1
    5c24:	1d 92       	st	X+, r1
    5c26:	1d 92       	st	X+, r1
    5c28:	1c 92       	st	X, r1
    5c2a:	17 97       	sbiw	r26, 0x07	; 7
    5c2c:	6c e9       	ldi	r22, 0x9C	; 156
    5c2e:	74 e2       	ldi	r23, 0x24	; 36
    5c30:	c7 01       	movw	r24, r14
    5c32:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    5c36:	89 2b       	or	r24, r25
    5c38:	d9 f4       	brne	.+54     	; 0x5c70 <ParseReceived+0xa28>
    5c3a:	f8 01       	movw	r30, r16
    5c3c:	e3 5d       	subi	r30, 0xD3	; 211
    5c3e:	fe 4f       	sbci	r31, 0xFE	; 254
    5c40:	81 81       	ldd	r24, Z+1	; 0x01
    5c42:	82 60       	ori	r24, 0x02	; 2
    5c44:	81 83       	std	Z+1, r24	; 0x01
    5c46:	f8 01       	movw	r30, r16
    5c48:	84 81       	ldd	r24, Z+4	; 0x04
    5c4a:	95 81       	ldd	r25, Z+5	; 0x05
    5c4c:	a6 81       	ldd	r26, Z+6	; 0x06
    5c4e:	b7 81       	ldd	r27, Z+7	; 0x07
    5c50:	08 97       	sbiw	r24, 0x08	; 8
    5c52:	a1 05       	cpc	r26, r1
    5c54:	b1 05       	cpc	r27, r1
    5c56:	61 f0       	breq	.+24     	; 0x5c70 <ParseReceived+0xa28>
    5c58:	84 81       	ldd	r24, Z+4	; 0x04
    5c5a:	95 81       	ldd	r25, Z+5	; 0x05
    5c5c:	a6 81       	ldd	r26, Z+6	; 0x06
    5c5e:	b7 81       	ldd	r27, Z+7	; 0x07
    5c60:	4d 97       	sbiw	r24, 0x1d	; 29
    5c62:	a1 05       	cpc	r26, r1
    5c64:	b1 05       	cpc	r27, r1
    5c66:	21 f0       	breq	.+8      	; 0x5c70 <ParseReceived+0xa28>
    5c68:	14 82       	std	Z+4, r1	; 0x04
    5c6a:	15 82       	std	Z+5, r1	; 0x05
    5c6c:	16 82       	std	Z+6, r1	; 0x06
    5c6e:	17 82       	std	Z+7, r1	; 0x07
    5c70:	61 ea       	ldi	r22, 0xA1	; 161
    5c72:	74 e2       	ldi	r23, 0x24	; 36
    5c74:	c7 01       	movw	r24, r14
    5c76:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    5c7a:	89 2b       	or	r24, r25
    5c7c:	39 f0       	breq	.+14     	; 0x5c8c <ParseReceived+0xa44>
    5c7e:	61 eb       	ldi	r22, 0xB1	; 177
    5c80:	74 e2       	ldi	r23, 0x24	; 36
    5c82:	c7 01       	movw	r24, r14
    5c84:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    5c88:	89 2b       	or	r24, r25
    5c8a:	59 f4       	brne	.+22     	; 0x5ca2 <ParseReceived+0xa5a>
    5c8c:	f8 01       	movw	r30, r16
    5c8e:	e3 5d       	subi	r30, 0xD3	; 211
    5c90:	fe 4f       	sbci	r31, 0xFE	; 254
    5c92:	81 81       	ldd	r24, Z+1	; 0x01
    5c94:	8d 7f       	andi	r24, 0xFD	; 253
    5c96:	81 83       	std	Z+1, r24	; 0x01
    5c98:	f8 01       	movw	r30, r16
    5c9a:	14 82       	std	Z+4, r1	; 0x04
    5c9c:	15 82       	std	Z+5, r1	; 0x05
    5c9e:	16 82       	std	Z+6, r1	; 0x06
    5ca0:	17 82       	std	Z+7, r1	; 0x07
    5ca2:	67 e9       	ldi	r22, 0x97	; 151
    5ca4:	74 e2       	ldi	r23, 0x24	; 36
    5ca6:	c7 01       	movw	r24, r14
    5ca8:	0e 94 ef 64 	call	0xc9de	; 0xc9de <strcmp>
    5cac:	89 2b       	or	r24, r25
    5cae:	69 f4       	brne	.+26     	; 0x5cca <ParseReceived+0xa82>
    5cb0:	d8 01       	movw	r26, r16
    5cb2:	14 96       	adiw	r26, 0x04	; 4
    5cb4:	1d 92       	st	X+, r1
    5cb6:	1d 92       	st	X+, r1
    5cb8:	1d 92       	st	X+, r1
    5cba:	1c 92       	st	X, r1
    5cbc:	17 97       	sbiw	r26, 0x07	; 7
    5cbe:	f8 01       	movw	r30, r16
    5cc0:	e3 5d       	subi	r30, 0xD3	; 211
    5cc2:	fe 4f       	sbci	r31, 0xFE	; 254
    5cc4:	81 81       	ldd	r24, Z+1	; 0x01
    5cc6:	8e 7f       	andi	r24, 0xFE	; 254
    5cc8:	81 83       	std	Z+1, r24	; 0x01
    5cca:	0f 90       	pop	r0
    5ccc:	0f 90       	pop	r0
    5cce:	df 91       	pop	r29
    5cd0:	cf 91       	pop	r28
    5cd2:	1f 91       	pop	r17
    5cd4:	0f 91       	pop	r16
    5cd6:	ff 90       	pop	r15
    5cd8:	ef 90       	pop	r14
    5cda:	df 90       	pop	r13
    5cdc:	cf 90       	pop	r12
    5cde:	bf 90       	pop	r11
    5ce0:	af 90       	pop	r10
    5ce2:	9f 90       	pop	r9
    5ce4:	8f 90       	pop	r8
    5ce6:	7f 90       	pop	r7
    5ce8:	6f 90       	pop	r6
    5cea:	5f 90       	pop	r5
    5cec:	4f 90       	pop	r4
    5cee:	3f 90       	pop	r3
    5cf0:	2f 90       	pop	r2
    5cf2:	08 95       	ret

00005cf4 <ESP8266_Update>:
    5cf4:	2f 92       	push	r2
    5cf6:	3f 92       	push	r3
    5cf8:	4f 92       	push	r4
    5cfa:	5f 92       	push	r5
    5cfc:	6f 92       	push	r6
    5cfe:	7f 92       	push	r7
    5d00:	8f 92       	push	r8
    5d02:	9f 92       	push	r9
    5d04:	af 92       	push	r10
    5d06:	bf 92       	push	r11
    5d08:	cf 92       	push	r12
    5d0a:	df 92       	push	r13
    5d0c:	ef 92       	push	r14
    5d0e:	ff 92       	push	r15
    5d10:	0f 93       	push	r16
    5d12:	1f 93       	push	r17
    5d14:	cf 93       	push	r28
    5d16:	df 93       	push	r29
    5d18:	cd b7       	in	r28, 0x3d	; 61
    5d1a:	de b7       	in	r29, 0x3e	; 62
    5d1c:	c1 58       	subi	r28, 0x81	; 129
    5d1e:	d1 09       	sbc	r29, r1
    5d20:	cd bf       	out	0x3d, r28	; 61
    5d22:	de bf       	out	0x3e, r29	; 62
    5d24:	8c 01       	movw	r16, r24
    5d26:	fc 01       	movw	r30, r24
    5d28:	86 89       	ldd	r24, Z+22	; 0x16
    5d2a:	97 89       	ldd	r25, Z+23	; 0x17
    5d2c:	a0 8d       	ldd	r26, Z+24	; 0x18
    5d2e:	b1 8d       	ldd	r27, Z+25	; 0x19
    5d30:	89 2b       	or	r24, r25
    5d32:	8a 2b       	or	r24, r26
    5d34:	8b 2b       	or	r24, r27
    5d36:	41 f4       	brne	.+16     	; 0x5d48 <ESP8266_Update+0x54>
    5d38:	80 e3       	ldi	r24, 0x30	; 48
    5d3a:	95 e7       	ldi	r25, 0x75	; 117
    5d3c:	a0 e0       	ldi	r26, 0x00	; 0
    5d3e:	b0 e0       	ldi	r27, 0x00	; 0
    5d40:	86 8b       	std	Z+22, r24	; 0x16
    5d42:	97 8b       	std	Z+23, r25	; 0x17
    5d44:	a0 8f       	std	Z+24, r26	; 0x18
    5d46:	b1 8f       	std	Z+25, r27	; 0x19
    5d48:	f8 01       	movw	r30, r16
    5d4a:	86 85       	ldd	r24, Z+14	; 0x0e
    5d4c:	97 85       	ldd	r25, Z+15	; 0x0f
    5d4e:	a0 89       	ldd	r26, Z+16	; 0x10
    5d50:	b1 89       	ldd	r27, Z+17	; 0x11
    5d52:	42 85       	ldd	r20, Z+10	; 0x0a
    5d54:	53 85       	ldd	r21, Z+11	; 0x0b
    5d56:	64 85       	ldd	r22, Z+12	; 0x0c
    5d58:	75 85       	ldd	r23, Z+13	; 0x0d
    5d5a:	84 1b       	sub	r24, r20
    5d5c:	95 0b       	sbc	r25, r21
    5d5e:	a6 0b       	sbc	r26, r22
    5d60:	b7 0b       	sbc	r27, r23
    5d62:	46 89       	ldd	r20, Z+22	; 0x16
    5d64:	57 89       	ldd	r21, Z+23	; 0x17
    5d66:	60 8d       	ldd	r22, Z+24	; 0x18
    5d68:	71 8d       	ldd	r23, Z+25	; 0x19
    5d6a:	48 17       	cp	r20, r24
    5d6c:	59 07       	cpc	r21, r25
    5d6e:	6a 07       	cpc	r22, r26
    5d70:	7b 07       	cpc	r23, r27
    5d72:	f8 f4       	brcc	.+62     	; 0x5db2 <ESP8266_Update+0xbe>
    5d74:	84 81       	ldd	r24, Z+4	; 0x04
    5d76:	95 81       	ldd	r25, Z+5	; 0x05
    5d78:	a6 81       	ldd	r26, Z+6	; 0x06
    5d7a:	b7 81       	ldd	r27, Z+7	; 0x07
    5d7c:	14 82       	std	Z+4, r1	; 0x04
    5d7e:	15 82       	std	Z+5, r1	; 0x05
    5d80:	16 82       	std	Z+6, r1	; 0x06
    5d82:	17 82       	std	Z+7, r1	; 0x07
    5d84:	8a 30       	cpi	r24, 0x0A	; 10
    5d86:	a9 f4       	brne	.+42     	; 0x5db2 <ESP8266_Update+0xbe>
    5d88:	ee 5d       	subi	r30, 0xDE	; 222
    5d8a:	fe 4f       	sbci	r31, 0xFE	; 254
    5d8c:	60 81       	ld	r22, Z
    5d8e:	f5 e2       	ldi	r31, 0x25	; 37
    5d90:	6f 02       	muls	r22, r31
    5d92:	b0 01       	movw	r22, r0
    5d94:	11 24       	eor	r1, r1
    5d96:	f8 01       	movw	r30, r16
    5d98:	e6 0f       	add	r30, r22
    5d9a:	f7 1f       	adc	r31, r23
    5d9c:	12 8e       	std	Z+26, r1	; 0x1a
    5d9e:	14 8e       	std	Z+28, r1	; 0x1c
    5da0:	15 ae       	std	Z+61, r1	; 0x3d
    5da2:	14 ae       	std	Z+60, r1	; 0x3c
    5da4:	66 5e       	subi	r22, 0xE6	; 230
    5da6:	7f 4f       	sbci	r23, 0xFF	; 255
    5da8:	60 0f       	add	r22, r16
    5daa:	71 1f       	adc	r23, r17
    5dac:	c8 01       	movw	r24, r16
    5dae:	0e 94 49 5b 	call	0xb692	; 0xb692 <ESP8266_Callback_ClientConnectionTimeout>
    5db2:	f8 01       	movw	r30, r16
    5db4:	84 81       	ldd	r24, Z+4	; 0x04
    5db6:	95 81       	ldd	r25, Z+5	; 0x05
    5db8:	a6 81       	ldd	r26, Z+6	; 0x06
    5dba:	b7 81       	ldd	r27, Z+7	; 0x07
    5dbc:	4d 97       	sbiw	r24, 0x1d	; 29
    5dbe:	a1 05       	cpc	r26, r1
    5dc0:	b1 05       	cpc	r27, r1
    5dc2:	09 f0       	breq	.+2      	; 0x5dc6 <ESP8266_Update+0xd2>
    5dc4:	68 c0       	rjmp	.+208    	; 0x5e96 <ESP8266_Update+0x1a2>
    5dc6:	e2 5d       	subi	r30, 0xD2	; 210
    5dc8:	fe 4f       	sbci	r31, 0xFE	; 254
    5dca:	80 81       	ld	r24, Z
    5dcc:	80 ff       	sbrs	r24, 0
    5dce:	63 c0       	rjmp	.+198    	; 0x5e96 <ESP8266_Update+0x1a2>
    5dd0:	22 e0       	ldi	r18, 0x02	; 2
    5dd2:	30 e0       	ldi	r19, 0x00	; 0
    5dd4:	40 e0       	ldi	r20, 0x00	; 0
    5dd6:	50 e0       	ldi	r21, 0x00	; 0
    5dd8:	65 e9       	ldi	r22, 0x95	; 149
    5dda:	75 e2       	ldi	r23, 0x25	; 37
    5ddc:	88 e4       	ldi	r24, 0x48	; 72
    5dde:	9a e3       	ldi	r25, 0x3A	; 58
    5de0:	0e 94 c8 24 	call	0x4990	; 0x4990 <BUFFER_Find>
    5de4:	77 fd       	sbrc	r23, 7
    5de6:	0c c0       	rjmp	.+24     	; 0x5e00 <ESP8266_Update+0x10c>
    5de8:	67 2b       	or	r22, r23
    5dea:	11 f5       	brne	.+68     	; 0x5e30 <ESP8266_Update+0x13c>
    5dec:	22 e0       	ldi	r18, 0x02	; 2
    5dee:	30 e0       	ldi	r19, 0x00	; 0
    5df0:	40 e0       	ldi	r20, 0x00	; 0
    5df2:	50 e0       	ldi	r21, 0x00	; 0
    5df4:	be 01       	movw	r22, r28
    5df6:	6f 5f       	subi	r22, 0xFF	; 255
    5df8:	7f 4f       	sbci	r23, 0xFF	; 255
    5dfa:	88 e4       	ldi	r24, 0x48	; 72
    5dfc:	9a e3       	ldi	r25, 0x3A	; 58
    5dfe:	16 c0       	rjmp	.+44     	; 0x5e2c <ESP8266_Update+0x138>
    5e00:	20 e0       	ldi	r18, 0x00	; 0
    5e02:	30 e0       	ldi	r19, 0x00	; 0
    5e04:	a9 01       	movw	r20, r18
    5e06:	65 e9       	ldi	r22, 0x95	; 149
    5e08:	75 e2       	ldi	r23, 0x25	; 37
    5e0a:	8a e5       	ldi	r24, 0x5A	; 90
    5e0c:	9a e3       	ldi	r25, 0x3A	; 58
    5e0e:	0e 94 c8 24 	call	0x4990	; 0x4990 <BUFFER_Find>
    5e12:	77 fd       	sbrc	r23, 7
    5e14:	40 c0       	rjmp	.+128    	; 0x5e96 <ESP8266_Update+0x1a2>
    5e16:	67 2b       	or	r22, r23
    5e18:	59 f4       	brne	.+22     	; 0x5e30 <ESP8266_Update+0x13c>
    5e1a:	22 e0       	ldi	r18, 0x02	; 2
    5e1c:	30 e0       	ldi	r19, 0x00	; 0
    5e1e:	40 e0       	ldi	r20, 0x00	; 0
    5e20:	50 e0       	ldi	r21, 0x00	; 0
    5e22:	be 01       	movw	r22, r28
    5e24:	6f 5f       	subi	r22, 0xFF	; 255
    5e26:	7f 4f       	sbci	r23, 0xFF	; 255
    5e28:	8a e5       	ldi	r24, 0x5A	; 90
    5e2a:	9a e3       	ldi	r25, 0x3A	; 58
    5e2c:	0e 94 b2 23 	call	0x4764	; 0x4764 <BUFFER_Read>
    5e30:	f8 01       	movw	r30, r16
    5e32:	e5 5d       	subi	r30, 0xD5	; 213
    5e34:	fe 4f       	sbci	r31, 0xFE	; 254
    5e36:	e0 80       	ld	r14, Z
    5e38:	f1 80       	ldd	r15, Z+1	; 0x01
    5e3a:	32 96       	adiw	r30, 0x02	; 2
    5e3c:	81 81       	ldd	r24, Z+1	; 0x01
    5e3e:	8e 7f       	andi	r24, 0xFE	; 254
    5e40:	81 83       	std	Z+1, r24	; 0x01
    5e42:	8d e1       	ldi	r24, 0x1D	; 29
    5e44:	90 e0       	ldi	r25, 0x00	; 0
    5e46:	a0 e0       	ldi	r26, 0x00	; 0
    5e48:	b0 e0       	ldi	r27, 0x00	; 0
    5e4a:	f8 01       	movw	r30, r16
    5e4c:	84 83       	std	Z+4, r24	; 0x04
    5e4e:	95 83       	std	Z+5, r25	; 0x05
    5e50:	a6 83       	std	Z+6, r26	; 0x06
    5e52:	b7 83       	std	Z+7, r27	; 0x07
    5e54:	d7 01       	movw	r26, r14
    5e56:	12 96       	adiw	r26, 0x02	; 2
    5e58:	8c 91       	ld	r24, X
    5e5a:	12 97       	sbiw	r26, 0x02	; 2
    5e5c:	54 96       	adiw	r26, 0x14	; 20
    5e5e:	4d 91       	ld	r20, X+
    5e60:	5c 91       	ld	r21, X
    5e62:	55 97       	sbiw	r26, 0x15	; 21
    5e64:	88 23       	and	r24, r24
    5e66:	09 f4       	brne	.+2      	; 0x5e6a <ESP8266_Update+0x176>
    5e68:	66 c1       	rjmp	.+716    	; 0x6136 <ESP8266_Update+0x442>
    5e6a:	24 eb       	ldi	r18, 0xB4	; 180
    5e6c:	35 e0       	ldi	r19, 0x05	; 5
    5e6e:	b7 01       	movw	r22, r14
    5e70:	c8 01       	movw	r24, r16
    5e72:	b1 d9       	rcall	.-3230   	; 0x51d6 <ESP8266_Callback_ClientConnectionSendData>
    5e74:	6c 01       	movw	r12, r24
    5e76:	85 3b       	cpi	r24, 0xB5	; 181
    5e78:	f5 e0       	ldi	r31, 0x05	; 5
    5e7a:	9f 07       	cpc	r25, r31
    5e7c:	08 f0       	brcs	.+2      	; 0x5e80 <ESP8266_Update+0x18c>
    5e7e:	61 c1       	rjmp	.+706    	; 0x6142 <ESP8266_Update+0x44e>
    5e80:	00 97       	sbiw	r24, 0x00	; 0
    5e82:	09 f0       	breq	.+2      	; 0x5e86 <ESP8266_Update+0x192>
    5e84:	62 c1       	rjmp	.+708    	; 0x614a <ESP8266_Update+0x456>
    5e86:	62 e0       	ldi	r22, 0x02	; 2
    5e88:	70 e0       	ldi	r23, 0x00	; 0
    5e8a:	88 e9       	ldi	r24, 0x98	; 152
    5e8c:	95 e2       	ldi	r25, 0x25	; 37
    5e8e:	fb d5       	rcall	.+3062   	; 0x6a86 <ESP8266_LL_USARTSend>
    5e90:	81 e0       	ldi	r24, 0x01	; 1
    5e92:	f7 01       	movw	r30, r14
    5e94:	83 8b       	std	Z+19, r24	; 0x13
    5e96:	f8 01       	movw	r30, r16
    5e98:	84 81       	ldd	r24, Z+4	; 0x04
    5e9a:	95 81       	ldd	r25, Z+5	; 0x05
    5e9c:	a6 81       	ldd	r26, Z+6	; 0x06
    5e9e:	b7 81       	ldd	r27, Z+7	; 0x07
    5ea0:	98 01       	movw	r18, r16
    5ea2:	2f 5f       	subi	r18, 0xFF	; 255
    5ea4:	3e 4f       	sbci	r19, 0xFE	; 254
    5ea6:	59 01       	movw	r10, r18
    5ea8:	41 97       	sbiw	r24, 0x11	; 17
    5eaa:	a1 05       	cpc	r26, r1
    5eac:	b1 05       	cpc	r27, r1
    5eae:	a1 f5       	brne	.+104    	; 0x5f18 <ESP8266_Update+0x224>
    5eb0:	d9 01       	movw	r26, r18
    5eb2:	8c 91       	ld	r24, X
    5eb4:	81 11       	cpse	r24, r1
    5eb6:	30 c0       	rjmp	.+96     	; 0x5f18 <ESP8266_Update+0x224>
    5eb8:	24 e0       	ldi	r18, 0x04	; 4
    5eba:	30 e0       	ldi	r19, 0x00	; 0
    5ebc:	40 e0       	ldi	r20, 0x00	; 0
    5ebe:	50 e0       	ldi	r21, 0x00	; 0
    5ec0:	6c e9       	ldi	r22, 0x9C	; 156
    5ec2:	74 e2       	ldi	r23, 0x24	; 36
    5ec4:	88 e4       	ldi	r24, 0x48	; 72
    5ec6:	9a e3       	ldi	r25, 0x3A	; 58
    5ec8:	0e 94 c8 24 	call	0x4990	; 0x4990 <BUFFER_Find>
    5ecc:	97 fd       	sbrc	r25, 7
    5ece:	24 c0       	rjmp	.+72     	; 0x5f18 <ESP8266_Update+0x224>
    5ed0:	88 e4       	ldi	r24, 0x48	; 72
    5ed2:	9a e3       	ldi	r25, 0x3A	; 58
    5ed4:	0e 94 69 24 	call	0x48d2	; 0x48d2 <BUFFER_Reset>
    5ed8:	f8 01       	movw	r30, r16
    5eda:	14 82       	std	Z+4, r1	; 0x04
    5edc:	15 82       	std	Z+5, r1	; 0x05
    5ede:	16 82       	std	Z+6, r1	; 0x06
    5ee0:	17 82       	std	Z+7, r1	; 0x07
    5ee2:	e3 5d       	subi	r30, 0xD3	; 211
    5ee4:	fe 4f       	sbci	r31, 0xFE	; 254
    5ee6:	81 81       	ldd	r24, Z+1	; 0x01
    5ee8:	82 60       	ori	r24, 0x02	; 2
    5eea:	81 83       	std	Z+1, r24	; 0x01
    5eec:	15 c0       	rjmp	.+42     	; 0x5f18 <ESP8266_Update+0x224>
    5eee:	20 e8       	ldi	r18, 0x80	; 128
    5ef0:	30 e0       	ldi	r19, 0x00	; 0
    5ef2:	40 e0       	ldi	r20, 0x00	; 0
    5ef4:	50 e0       	ldi	r21, 0x00	; 0
    5ef6:	be 01       	movw	r22, r28
    5ef8:	6f 5f       	subi	r22, 0xFF	; 255
    5efa:	7f 4f       	sbci	r23, 0xFF	; 255
    5efc:	88 e4       	ldi	r24, 0x48	; 72
    5efe:	9a e3       	ldi	r25, 0x3A	; 58
    5f00:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <BUFFER_ReadString>
    5f04:	61 15       	cp	r22, r1
    5f06:	71 05       	cpc	r23, r1
    5f08:	51 f1       	breq	.+84     	; 0x5f5e <ESP8266_Update+0x26a>
    5f0a:	9b 01       	movw	r18, r22
    5f0c:	41 e0       	ldi	r20, 0x01	; 1
    5f0e:	be 01       	movw	r22, r28
    5f10:	6f 5f       	subi	r22, 0xFF	; 255
    5f12:	7f 4f       	sbci	r23, 0xFF	; 255
    5f14:	c8 01       	movw	r24, r16
    5f16:	98 d9       	rcall	.-3280   	; 0x5248 <ParseReceived>
    5f18:	d5 01       	movw	r26, r10
    5f1a:	8c 91       	ld	r24, X
    5f1c:	88 23       	and	r24, r24
    5f1e:	39 f3       	breq	.-50     	; 0x5eee <ESP8266_Update+0x1fa>
    5f20:	1e c0       	rjmp	.+60     	; 0x5f5e <ESP8266_Update+0x26a>
    5f22:	f8 01       	movw	r30, r16
    5f24:	84 81       	ldd	r24, Z+4	; 0x04
    5f26:	95 81       	ldd	r25, Z+5	; 0x05
    5f28:	a6 81       	ldd	r26, Z+6	; 0x06
    5f2a:	b7 81       	ldd	r27, Z+7	; 0x07
    5f2c:	89 2b       	or	r24, r25
    5f2e:	8a 2b       	or	r24, r26
    5f30:	8b 2b       	or	r24, r27
    5f32:	c9 f4       	brne	.+50     	; 0x5f66 <ESP8266_Update+0x272>
    5f34:	20 e8       	ldi	r18, 0x80	; 128
    5f36:	30 e0       	ldi	r19, 0x00	; 0
    5f38:	40 e0       	ldi	r20, 0x00	; 0
    5f3a:	50 e0       	ldi	r21, 0x00	; 0
    5f3c:	be 01       	movw	r22, r28
    5f3e:	6f 5f       	subi	r22, 0xFF	; 255
    5f40:	7f 4f       	sbci	r23, 0xFF	; 255
    5f42:	8a e5       	ldi	r24, 0x5A	; 90
    5f44:	9a e3       	ldi	r25, 0x3A	; 58
    5f46:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <BUFFER_ReadString>
    5f4a:	61 15       	cp	r22, r1
    5f4c:	71 05       	cpc	r23, r1
    5f4e:	59 f0       	breq	.+22     	; 0x5f66 <ESP8266_Update+0x272>
    5f50:	9b 01       	movw	r18, r22
    5f52:	40 e0       	ldi	r20, 0x00	; 0
    5f54:	be 01       	movw	r22, r28
    5f56:	6f 5f       	subi	r22, 0xFF	; 255
    5f58:	7f 4f       	sbci	r23, 0xFF	; 255
    5f5a:	c8 01       	movw	r24, r16
    5f5c:	75 d9       	rcall	.-3350   	; 0x5248 <ParseReceived>
    5f5e:	f5 01       	movw	r30, r10
    5f60:	80 81       	ld	r24, Z
    5f62:	88 23       	and	r24, r24
    5f64:	f1 f2       	breq	.-68     	; 0x5f22 <ESP8266_Update+0x22e>
    5f66:	d5 01       	movw	r26, r10
    5f68:	8c 91       	ld	r24, X
    5f6a:	88 23       	and	r24, r24
    5f6c:	09 f4       	brne	.+2      	; 0x5f70 <ESP8266_Update+0x27c>
    5f6e:	04 c1       	rjmp	.+520    	; 0x6178 <ESP8266_Update+0x484>
    5f70:	f8 01       	movw	r30, r16
    5f72:	e9 5f       	subi	r30, 0xF9	; 249
    5f74:	fe 4f       	sbci	r31, 0xFE	; 254
    5f76:	80 81       	ld	r24, Z
    5f78:	88 23       	and	r24, r24
    5f7a:	29 f0       	breq	.+10     	; 0x5f86 <ESP8266_Update+0x292>
    5f7c:	68 e4       	ldi	r22, 0x48	; 72
    5f7e:	86 2e       	mov	r8, r22
    5f80:	6a e3       	ldi	r22, 0x3A	; 58
    5f82:	96 2e       	mov	r9, r22
    5f84:	04 c0       	rjmp	.+8      	; 0x5f8e <ESP8266_Update+0x29a>
    5f86:	5a e5       	ldi	r21, 0x5A	; 90
    5f88:	85 2e       	mov	r8, r21
    5f8a:	5a e3       	ldi	r21, 0x3A	; 58
    5f8c:	95 2e       	mov	r9, r21
    5f8e:	78 01       	movw	r14, r16
    5f90:	fe ef       	ldi	r31, 0xFE	; 254
    5f92:	ef 1a       	sub	r14, r31
    5f94:	ff 0a       	sbc	r15, r31
    5f96:	68 01       	movw	r12, r16
    5f98:	2a ef       	ldi	r18, 0xFA	; 250
    5f9a:	c2 1a       	sub	r12, r18
    5f9c:	2e ef       	ldi	r18, 0xFE	; 254
    5f9e:	d2 0a       	sbc	r13, r18
    5fa0:	c8 01       	movw	r24, r16
    5fa2:	8c 5f       	subi	r24, 0xFC	; 252
    5fa4:	9e 4f       	sbci	r25, 0xFE	; 254
    5fa6:	3c 01       	movw	r6, r24
    5fa8:	d7 01       	movw	r26, r14
    5faa:	4d 91       	ld	r20, X+
    5fac:	5c 91       	ld	r21, X
    5fae:	60 e0       	ldi	r22, 0x00	; 0
    5fb0:	70 e0       	ldi	r23, 0x00	; 0
    5fb2:	f6 01       	movw	r30, r12
    5fb4:	80 81       	ld	r24, Z
    5fb6:	f8 01       	movw	r30, r16
    5fb8:	25 e2       	ldi	r18, 0x25	; 37
    5fba:	28 9f       	mul	r18, r24
    5fbc:	e0 0d       	add	r30, r0
    5fbe:	f1 1d       	adc	r31, r1
    5fc0:	11 24       	eor	r1, r1
    5fc2:	84 a1       	ldd	r24, Z+36	; 0x24
    5fc4:	95 a1       	ldd	r25, Z+37	; 0x25
    5fc6:	a6 a1       	ldd	r26, Z+38	; 0x26
    5fc8:	b7 a1       	ldd	r27, Z+39	; 0x27
    5fca:	48 17       	cp	r20, r24
    5fcc:	59 07       	cpc	r21, r25
    5fce:	6a 07       	cpc	r22, r26
    5fd0:	7b 07       	cpc	r23, r27
    5fd2:	c8 f0       	brcs	.+50     	; 0x6006 <ESP8266_Update+0x312>
    5fd4:	d6 01       	movw	r26, r12
    5fd6:	8c 91       	ld	r24, X
    5fd8:	f3 01       	movw	r30, r6
    5fda:	40 81       	ld	r20, Z
    5fdc:	51 81       	ldd	r21, Z+1	; 0x01
    5fde:	60 e0       	ldi	r22, 0x00	; 0
    5fe0:	70 e0       	ldi	r23, 0x00	; 0
    5fe2:	48 01       	movw	r8, r16
    5fe4:	f5 e2       	ldi	r31, 0x25	; 37
    5fe6:	8f 9f       	mul	r24, r31
    5fe8:	80 0c       	add	r8, r0
    5fea:	91 1c       	adc	r9, r1
    5fec:	11 24       	eor	r1, r1
    5fee:	f4 01       	movw	r30, r8
    5ff0:	84 a1       	ldd	r24, Z+36	; 0x24
    5ff2:	95 a1       	ldd	r25, Z+37	; 0x25
    5ff4:	a6 a1       	ldd	r26, Z+38	; 0x26
    5ff6:	b7 a1       	ldd	r27, Z+39	; 0x27
    5ff8:	48 17       	cp	r20, r24
    5ffa:	59 07       	cpc	r21, r25
    5ffc:	6a 07       	cpc	r22, r26
    5ffe:	7b 07       	cpc	r23, r27
    6000:	08 f0       	brcs	.+2      	; 0x6004 <ESP8266_Update+0x310>
    6002:	67 c0       	rjmp	.+206    	; 0x60d2 <ESP8266_Update+0x3de>
    6004:	b9 c0       	rjmp	.+370    	; 0x6178 <ESP8266_Update+0x484>
    6006:	c4 01       	movw	r24, r8
    6008:	0e 94 73 23 	call	0x46e6	; 0x46e6 <BUFFER_GetFull>
    600c:	67 2b       	or	r22, r23
    600e:	68 2b       	or	r22, r24
    6010:	69 2b       	or	r22, r25
    6012:	01 f3       	breq	.-64     	; 0x5fd4 <ESP8266_Update+0x2e0>
    6014:	21 e0       	ldi	r18, 0x01	; 1
    6016:	30 e0       	ldi	r19, 0x00	; 0
    6018:	40 e0       	ldi	r20, 0x00	; 0
    601a:	50 e0       	ldi	r21, 0x00	; 0
    601c:	be 01       	movw	r22, r28
    601e:	6f 57       	subi	r22, 0x7F	; 127
    6020:	7f 4f       	sbci	r23, 0xFF	; 255
    6022:	c4 01       	movw	r24, r8
    6024:	0e 94 b2 23 	call	0x4764	; 0x4764 <BUFFER_Read>
    6028:	cf 57       	subi	r28, 0x7F	; 127
    602a:	df 4f       	sbci	r29, 0xFF	; 255
    602c:	28 81       	ld	r18, Y
    602e:	c1 58       	subi	r28, 0x81	; 129
    6030:	d0 40       	sbci	r29, 0x00	; 0
    6032:	d6 01       	movw	r26, r12
    6034:	8c 91       	ld	r24, X
    6036:	f8 01       	movw	r30, r16
    6038:	b5 e2       	ldi	r27, 0x25	; 37
    603a:	b8 9f       	mul	r27, r24
    603c:	e0 0d       	add	r30, r0
    603e:	f1 1d       	adc	r31, r1
    6040:	11 24       	eor	r1, r1
    6042:	06 a4       	ldd	r0, Z+46	; 0x2e
    6044:	f7 a5       	ldd	r31, Z+47	; 0x2f
    6046:	e0 2d       	mov	r30, r0
    6048:	d7 01       	movw	r26, r14
    604a:	8d 91       	ld	r24, X+
    604c:	9c 91       	ld	r25, X
    604e:	11 97       	sbiw	r26, 0x01	; 1
    6050:	e8 0f       	add	r30, r24
    6052:	f9 1f       	adc	r31, r25
    6054:	20 83       	st	Z, r18
    6056:	8d 91       	ld	r24, X+
    6058:	9c 91       	ld	r25, X
    605a:	11 97       	sbiw	r26, 0x01	; 1
    605c:	01 96       	adiw	r24, 0x01	; 1
    605e:	8d 93       	st	X+, r24
    6060:	9c 93       	st	X, r25
    6062:	f3 01       	movw	r30, r6
    6064:	20 81       	ld	r18, Z
    6066:	31 81       	ldd	r19, Z+1	; 0x01
    6068:	2f 5f       	subi	r18, 0xFF	; 255
    606a:	3f 4f       	sbci	r19, 0xFF	; 255
    606c:	20 83       	st	Z, r18
    606e:	31 83       	std	Z+1, r19	; 0x01
    6070:	84 3b       	cpi	r24, 0xB4	; 180
    6072:	f5 e0       	ldi	r31, 0x05	; 5
    6074:	9f 07       	cpc	r25, r31
    6076:	08 f4       	brcc	.+2      	; 0x607a <ESP8266_Update+0x386>
    6078:	97 cf       	rjmp	.-210    	; 0x5fa8 <ESP8266_Update+0x2b4>
    607a:	d6 01       	movw	r26, r12
    607c:	6c 91       	ld	r22, X
    607e:	1c 01       	movw	r2, r24
    6080:	41 2c       	mov	r4, r1
    6082:	51 2c       	mov	r5, r1
    6084:	b5 e2       	ldi	r27, 0x25	; 37
    6086:	b6 9f       	mul	r27, r22
    6088:	b0 01       	movw	r22, r0
    608a:	11 24       	eor	r1, r1
    608c:	f8 01       	movw	r30, r16
    608e:	e6 0f       	add	r30, r22
    6090:	f7 1f       	adc	r31, r23
    6092:	24 a1       	ldd	r18, Z+36	; 0x24
    6094:	35 a1       	ldd	r19, Z+37	; 0x25
    6096:	46 a1       	ldd	r20, Z+38	; 0x26
    6098:	57 a1       	ldd	r21, Z+39	; 0x27
    609a:	22 16       	cp	r2, r18
    609c:	33 06       	cpc	r3, r19
    609e:	44 06       	cpc	r4, r20
    60a0:	55 06       	cpc	r5, r21
    60a2:	09 f4       	brne	.+2      	; 0x60a6 <ESP8266_Update+0x3b2>
    60a4:	81 cf       	rjmp	.-254    	; 0x5fa8 <ESP8266_Update+0x2b4>
    60a6:	80 ab       	std	Z+48, r24	; 0x30
    60a8:	91 ab       	std	Z+49, r25	; 0x31
    60aa:	12 aa       	std	Z+50, r1	; 0x32
    60ac:	84 8d       	ldd	r24, Z+28	; 0x1c
    60ae:	66 5e       	subi	r22, 0xE6	; 230
    60b0:	7f 4f       	sbci	r23, 0xFF	; 255
    60b2:	46 a5       	ldd	r20, Z+46	; 0x2e
    60b4:	57 a5       	ldd	r21, Z+47	; 0x2f
    60b6:	60 0f       	add	r22, r16
    60b8:	71 1f       	adc	r23, r17
    60ba:	88 23       	and	r24, r24
    60bc:	21 f0       	breq	.+8      	; 0x60c6 <ESP8266_Update+0x3d2>
    60be:	c8 01       	movw	r24, r16
    60c0:	0e 94 da 5a 	call	0xb5b4	; 0xb5b4 <ESP8266_Callback_ClientConnectionDataReceived>
    60c4:	02 c0       	rjmp	.+4      	; 0x60ca <ESP8266_Update+0x3d6>
    60c6:	c8 01       	movw	r24, r16
    60c8:	81 d8       	rcall	.-3838   	; 0x51cc <ESP8266_Callback_ServerConnectionDataReceived>
    60ca:	f7 01       	movw	r30, r14
    60cc:	10 82       	st	Z, r1
    60ce:	11 82       	std	Z+1, r1	; 0x01
    60d0:	6b cf       	rjmp	.-298    	; 0x5fa8 <ESP8266_Update+0x2b4>
    60d2:	d5 01       	movw	r26, r10
    60d4:	1c 92       	st	X, r1
    60d6:	f7 01       	movw	r30, r14
    60d8:	80 81       	ld	r24, Z
    60da:	91 81       	ldd	r25, Z+1	; 0x01
    60dc:	d4 01       	movw	r26, r8
    60de:	d0 96       	adiw	r26, 0x30	; 48
    60e0:	8d 93       	st	X+, r24
    60e2:	9c 93       	st	X, r25
    60e4:	d1 97       	sbiw	r26, 0x31	; 49
    60e6:	81 e0       	ldi	r24, 0x01	; 1
    60e8:	d2 96       	adiw	r26, 0x32	; 50
    60ea:	8c 93       	st	X, r24
    60ec:	d2 97       	sbiw	r26, 0x32	; 50
    60ee:	dd 96       	adiw	r26, 0x3d	; 61
    60f0:	8c 91       	ld	r24, X
    60f2:	dd 97       	sbiw	r26, 0x3d	; 61
    60f4:	88 23       	and	r24, r24
    60f6:	a1 f0       	breq	.+40     	; 0x6120 <ESP8266_Update+0x42c>
    60f8:	6b e9       	ldi	r22, 0x9B	; 155
    60fa:	75 e2       	ldi	r23, 0x25	; 37
    60fc:	9e 96       	adiw	r26, 0x2e	; 46
    60fe:	8d 91       	ld	r24, X+
    6100:	9c 91       	ld	r25, X
    6102:	9f 97       	sbiw	r26, 0x2f	; 47
    6104:	0e 94 27 65 	call	0xca4e	; 0xca4e <strstr>
    6108:	00 97       	sbiw	r24, 0x00	; 0
    610a:	51 f0       	breq	.+20     	; 0x6120 <ESP8266_Update+0x42c>
    610c:	60 e0       	ldi	r22, 0x00	; 0
    610e:	70 e0       	ldi	r23, 0x00	; 0
    6110:	40 96       	adiw	r24, 0x10	; 16
    6112:	0e 94 6f 26 	call	0x4cde	; 0x4cde <ParseNumber>
    6116:	f4 01       	movw	r30, r8
    6118:	64 ab       	std	Z+52, r22	; 0x34
    611a:	75 ab       	std	Z+53, r23	; 0x35
    611c:	86 ab       	std	Z+54, r24	; 0x36
    611e:	97 ab       	std	Z+55, r25	; 0x37
    6120:	d6 01       	movw	r26, r12
    6122:	8c 91       	ld	r24, X
    6124:	f8 01       	movw	r30, r16
    6126:	b5 e2       	ldi	r27, 0x25	; 37
    6128:	8b 9f       	mul	r24, r27
    612a:	e0 0d       	add	r30, r0
    612c:	f1 1d       	adc	r31, r1
    612e:	11 24       	eor	r1, r1
    6130:	81 e0       	ldi	r24, 0x01	; 1
    6132:	83 ab       	std	Z+51, r24	; 0x33
    6134:	21 c0       	rjmp	.+66     	; 0x6178 <ESP8266_Update+0x484>
    6136:	24 eb       	ldi	r18, 0xB4	; 180
    6138:	35 e0       	ldi	r19, 0x05	; 5
    613a:	b7 01       	movw	r22, r14
    613c:	c8 01       	movw	r24, r16
    613e:	47 d8       	rcall	.-3954   	; 0x51ce <ESP8266_Callback_ServerConnectionSendData>
    6140:	99 ce       	rjmp	.-718    	; 0x5e74 <ESP8266_Update+0x180>
    6142:	74 eb       	ldi	r23, 0xB4	; 180
    6144:	c7 2e       	mov	r12, r23
    6146:	75 e0       	ldi	r23, 0x05	; 5
    6148:	d7 2e       	mov	r13, r23
    614a:	b6 01       	movw	r22, r12
    614c:	d7 01       	movw	r26, r14
    614e:	54 96       	adiw	r26, 0x14	; 20
    6150:	8d 91       	ld	r24, X+
    6152:	9c 91       	ld	r25, X
    6154:	55 97       	sbiw	r26, 0x15	; 21
    6156:	97 d4       	rcall	.+2350   	; 0x6a86 <ESP8266_LL_USARTSend>
    6158:	f8 01       	movw	r30, r16
    615a:	e9 5d       	subi	r30, 0xD9	; 217
    615c:	fe 4f       	sbci	r31, 0xFE	; 254
    615e:	40 81       	ld	r20, Z
    6160:	51 81       	ldd	r21, Z+1	; 0x01
    6162:	62 81       	ldd	r22, Z+2	; 0x02
    6164:	73 81       	ldd	r23, Z+3	; 0x03
    6166:	4c 0d       	add	r20, r12
    6168:	5d 1d       	adc	r21, r13
    616a:	61 1d       	adc	r22, r1
    616c:	71 1d       	adc	r23, r1
    616e:	40 83       	st	Z, r20
    6170:	51 83       	std	Z+1, r21	; 0x01
    6172:	62 83       	std	Z+2, r22	; 0x02
    6174:	73 83       	std	Z+3, r23	; 0x03
    6176:	87 ce       	rjmp	.-754    	; 0x5e86 <ESP8266_Update+0x192>
    6178:	c8 01       	movw	r24, r16
    617a:	30 d8       	rcall	.-4000   	; 0x51dc <CallConnectionCallbacks>
    617c:	f8 01       	movw	r30, r16
    617e:	ef 5c       	subi	r30, 0xCF	; 207
    6180:	fe 4f       	sbci	r31, 0xFE	; 254
    6182:	10 82       	st	Z, r1
    6184:	80 e0       	ldi	r24, 0x00	; 0
    6186:	cf 57       	subi	r28, 0x7F	; 127
    6188:	df 4f       	sbci	r29, 0xFF	; 255
    618a:	cd bf       	out	0x3d, r28	; 61
    618c:	de bf       	out	0x3e, r29	; 62
    618e:	df 91       	pop	r29
    6190:	cf 91       	pop	r28
    6192:	1f 91       	pop	r17
    6194:	0f 91       	pop	r16
    6196:	ff 90       	pop	r15
    6198:	ef 90       	pop	r14
    619a:	df 90       	pop	r13
    619c:	cf 90       	pop	r12
    619e:	bf 90       	pop	r11
    61a0:	af 90       	pop	r10
    61a2:	9f 90       	pop	r9
    61a4:	8f 90       	pop	r8
    61a6:	7f 90       	pop	r7
    61a8:	6f 90       	pop	r6
    61aa:	5f 90       	pop	r5
    61ac:	4f 90       	pop	r4
    61ae:	3f 90       	pop	r3
    61b0:	2f 90       	pop	r2
    61b2:	08 95       	ret

000061b4 <SendCommand>:
    61b4:	7f 92       	push	r7
    61b6:	8f 92       	push	r8
    61b8:	9f 92       	push	r9
    61ba:	af 92       	push	r10
    61bc:	bf 92       	push	r11
    61be:	cf 92       	push	r12
    61c0:	df 92       	push	r13
    61c2:	ef 92       	push	r14
    61c4:	ff 92       	push	r15
    61c6:	0f 93       	push	r16
    61c8:	1f 93       	push	r17
    61ca:	cf 93       	push	r28
    61cc:	df 93       	push	r29
    61ce:	ec 01       	movw	r28, r24
    61d0:	76 2e       	mov	r7, r22
    61d2:	6a 01       	movw	r12, r20
    61d4:	79 01       	movw	r14, r18
    61d6:	8c 80       	ldd	r8, Y+4	; 0x04
    61d8:	9d 80       	ldd	r9, Y+5	; 0x05
    61da:	ae 80       	ldd	r10, Y+6	; 0x06
    61dc:	bf 80       	ldd	r11, Y+7	; 0x07
    61de:	8c 01       	movw	r16, r24
    61e0:	0f 5c       	subi	r16, 0xCF	; 207
    61e2:	1e 4f       	sbci	r17, 0xFE	; 254
    61e4:	89 28       	or	r8, r9
    61e6:	8a 28       	or	r8, r10
    61e8:	8b 28       	or	r8, r11
    61ea:	29 f0       	breq	.+10     	; 0x61f6 <SendCommand+0x42>
    61ec:	83 dd       	rcall	.-1274   	; 0x5cf4 <ESP8266_Update>
    61ee:	87 e0       	ldi	r24, 0x07	; 7
    61f0:	f8 01       	movw	r30, r16
    61f2:	80 83       	st	Z, r24
    61f4:	2a c0       	rjmp	.+84     	; 0x624a <SendCommand+0x96>
    61f6:	f1 e1       	ldi	r31, 0x11	; 17
    61f8:	6f 13       	cpse	r22, r31
    61fa:	04 c0       	rjmp	.+8      	; 0x6204 <SendCommand+0x50>
    61fc:	88 e4       	ldi	r24, 0x48	; 72
    61fe:	9a e3       	ldi	r25, 0x3A	; 58
    6200:	0e 94 69 24 	call	0x48d2	; 0x48d2 <BUFFER_Reset>
    6204:	c1 14       	cp	r12, r1
    6206:	d1 04       	cpc	r13, r1
    6208:	59 f0       	breq	.+22     	; 0x6220 <SendCommand+0x6c>
    620a:	f6 01       	movw	r30, r12
    620c:	01 90       	ld	r0, Z+
    620e:	00 20       	and	r0, r0
    6210:	e9 f7       	brne	.-6      	; 0x620c <SendCommand+0x58>
    6212:	bf 01       	movw	r22, r30
    6214:	61 50       	subi	r22, 0x01	; 1
    6216:	71 09       	sbc	r23, r1
    6218:	6c 19       	sub	r22, r12
    621a:	7d 09       	sbc	r23, r13
    621c:	c6 01       	movw	r24, r12
    621e:	33 d4       	rcall	.+2150   	; 0x6a86 <ESP8266_LL_USARTSend>
    6220:	87 2d       	mov	r24, r7
    6222:	90 e0       	ldi	r25, 0x00	; 0
    6224:	a0 e0       	ldi	r26, 0x00	; 0
    6226:	b0 e0       	ldi	r27, 0x00	; 0
    6228:	8c 83       	std	Y+4, r24	; 0x04
    622a:	9d 83       	std	Y+5, r25	; 0x05
    622c:	ae 83       	std	Y+6, r26	; 0x06
    622e:	bf 83       	std	Y+7, r27	; 0x07
    6230:	e8 86       	std	Y+8, r14	; 0x08
    6232:	f9 86       	std	Y+9, r15	; 0x09
    6234:	4e 85       	ldd	r20, Y+14	; 0x0e
    6236:	5f 85       	ldd	r21, Y+15	; 0x0f
    6238:	68 89       	ldd	r22, Y+16	; 0x10
    623a:	79 89       	ldd	r23, Y+17	; 0x11
    623c:	4a 87       	std	Y+10, r20	; 0x0a
    623e:	5b 87       	std	Y+11, r21	; 0x0b
    6240:	6c 87       	std	Y+12, r22	; 0x0c
    6242:	7d 87       	std	Y+13, r23	; 0x0d
    6244:	f8 01       	movw	r30, r16
    6246:	10 82       	st	Z, r1
    6248:	80 e0       	ldi	r24, 0x00	; 0
    624a:	df 91       	pop	r29
    624c:	cf 91       	pop	r28
    624e:	1f 91       	pop	r17
    6250:	0f 91       	pop	r16
    6252:	ff 90       	pop	r15
    6254:	ef 90       	pop	r14
    6256:	df 90       	pop	r13
    6258:	cf 90       	pop	r12
    625a:	bf 90       	pop	r11
    625c:	af 90       	pop	r10
    625e:	9f 90       	pop	r9
    6260:	8f 90       	pop	r8
    6262:	7f 90       	pop	r7
    6264:	08 95       	ret

00006266 <ESP8266_GetSTAIP>:
    6266:	cf 93       	push	r28
    6268:	df 93       	push	r29
    626a:	ec 01       	movw	r28, r24
    626c:	20 ee       	ldi	r18, 0xE0	; 224
    626e:	35 e2       	ldi	r19, 0x25	; 37
    6270:	4c ee       	ldi	r20, 0xEC	; 236
    6272:	55 e2       	ldi	r21, 0x25	; 37
    6274:	66 e1       	ldi	r22, 0x16	; 22
    6276:	9e df       	rcall	.-196    	; 0x61b4 <SendCommand>
    6278:	fe 01       	movw	r30, r28
    627a:	ef 5c       	subi	r30, 0xCF	; 207
    627c:	fe 4f       	sbci	r31, 0xFE	; 254
    627e:	80 81       	ld	r24, Z
    6280:	81 11       	cpse	r24, r1
    6282:	06 c0       	rjmp	.+12     	; 0x6290 <ESP8266_GetSTAIP+0x2a>
    6284:	c3 5d       	subi	r28, 0xD3	; 211
    6286:	de 4f       	sbci	r29, 0xFE	; 254
    6288:	98 81       	ld	r25, Y
    628a:	9c 7f       	andi	r25, 0xFC	; 252
    628c:	9b 7f       	andi	r25, 0xFB	; 251
    628e:	98 83       	st	Y, r25
    6290:	df 91       	pop	r29
    6292:	cf 91       	pop	r28
    6294:	08 95       	ret

00006296 <ESP8266_GetAPIP>:
    6296:	cf 93       	push	r28
    6298:	df 93       	push	r29
    629a:	ec 01       	movw	r28, r24
    629c:	2d ef       	ldi	r18, 0xFD	; 253
    629e:	35 e2       	ldi	r19, 0x25	; 37
    62a0:	48 e0       	ldi	r20, 0x08	; 8
    62a2:	56 e2       	ldi	r21, 0x26	; 38
    62a4:	67 e1       	ldi	r22, 0x17	; 23
    62a6:	86 df       	rcall	.-244    	; 0x61b4 <SendCommand>
    62a8:	fe 01       	movw	r30, r28
    62aa:	ef 5c       	subi	r30, 0xCF	; 207
    62ac:	fe 4f       	sbci	r31, 0xFE	; 254
    62ae:	80 81       	ld	r24, Z
    62b0:	81 11       	cpse	r24, r1
    62b2:	06 c0       	rjmp	.+12     	; 0x62c0 <ESP8266_GetAPIP+0x2a>
    62b4:	c3 5d       	subi	r28, 0xD3	; 211
    62b6:	de 4f       	sbci	r29, 0xFE	; 254
    62b8:	98 81       	ld	r25, Y
    62ba:	9f 7c       	andi	r25, 0xCF	; 207
    62bc:	9f 7b       	andi	r25, 0xBF	; 191
    62be:	98 83       	st	Y, r25
    62c0:	df 91       	pop	r29
    62c2:	cf 91       	pop	r28
    62c4:	08 95       	ret

000062c6 <ESP8266_GetSTAMAC>:
    62c6:	cf 93       	push	r28
    62c8:	df 93       	push	r29
    62ca:	ec 01       	movw	r28, r24
    62cc:	20 e8       	ldi	r18, 0x80	; 128
    62ce:	35 e2       	ldi	r19, 0x25	; 37
    62d0:	48 e1       	ldi	r20, 0x18	; 24
    62d2:	56 e2       	ldi	r21, 0x26	; 38
    62d4:	68 e1       	ldi	r22, 0x18	; 24
    62d6:	6e df       	rcall	.-292    	; 0x61b4 <SendCommand>
    62d8:	fe 01       	movw	r30, r28
    62da:	ef 5c       	subi	r30, 0xCF	; 207
    62dc:	fe 4f       	sbci	r31, 0xFE	; 254
    62de:	80 81       	ld	r24, Z
    62e0:	81 11       	cpse	r24, r1
    62e2:	05 c0       	rjmp	.+10     	; 0x62ee <ESP8266_GetSTAMAC+0x28>
    62e4:	c3 5d       	subi	r28, 0xD3	; 211
    62e6:	de 4f       	sbci	r29, 0xFE	; 254
    62e8:	98 81       	ld	r25, Y
    62ea:	97 7f       	andi	r25, 0xF7	; 247
    62ec:	98 83       	st	Y, r25
    62ee:	df 91       	pop	r29
    62f0:	cf 91       	pop	r28
    62f2:	08 95       	ret

000062f4 <ESP8266_GetAPMAC>:
    62f4:	cf 93       	push	r28
    62f6:	df 93       	push	r29
    62f8:	ec 01       	movw	r28, r24
    62fa:	2b e8       	ldi	r18, 0x8B	; 139
    62fc:	35 e2       	ldi	r19, 0x25	; 37
    62fe:	48 e2       	ldi	r20, 0x28	; 40
    6300:	56 e2       	ldi	r21, 0x26	; 38
    6302:	69 e1       	ldi	r22, 0x19	; 25
    6304:	57 df       	rcall	.-338    	; 0x61b4 <SendCommand>
    6306:	fe 01       	movw	r30, r28
    6308:	ef 5c       	subi	r30, 0xCF	; 207
    630a:	fe 4f       	sbci	r31, 0xFE	; 254
    630c:	80 81       	ld	r24, Z
    630e:	81 11       	cpse	r24, r1
    6310:	05 c0       	rjmp	.+10     	; 0x631c <ESP8266_GetAPMAC+0x28>
    6312:	c3 5d       	subi	r28, 0xD3	; 211
    6314:	de 4f       	sbci	r29, 0xFE	; 254
    6316:	98 81       	ld	r25, Y
    6318:	9f 77       	andi	r25, 0x7F	; 127
    631a:	98 83       	st	Y, r25
    631c:	df 91       	pop	r29
    631e:	cf 91       	pop	r28
    6320:	08 95       	ret

00006322 <ESP8266_WaitReady>:
    6322:	0f 93       	push	r16
    6324:	1f 93       	push	r17
    6326:	cf 93       	push	r28
    6328:	df 93       	push	r29
    632a:	ec 01       	movw	r28, r24
    632c:	8c 01       	movw	r16, r24
    632e:	02 5d       	subi	r16, 0xD2	; 210
    6330:	1e 4f       	sbci	r17, 0xFE	; 254
    6332:	f8 01       	movw	r30, r16
    6334:	80 81       	ld	r24, Z
    6336:	80 ff       	sbrs	r24, 0
    6338:	13 c0       	rjmp	.+38     	; 0x6360 <ESP8266_WaitReady+0x3e>
    633a:	22 e0       	ldi	r18, 0x02	; 2
    633c:	30 e0       	ldi	r19, 0x00	; 0
    633e:	40 e0       	ldi	r20, 0x00	; 0
    6340:	50 e0       	ldi	r21, 0x00	; 0
    6342:	65 e9       	ldi	r22, 0x95	; 149
    6344:	75 e2       	ldi	r23, 0x25	; 37
    6346:	88 e4       	ldi	r24, 0x48	; 72
    6348:	9a e3       	ldi	r25, 0x3A	; 58
    634a:	0e 94 c8 24 	call	0x4990	; 0x4990 <BUFFER_Find>
    634e:	97 fd       	sbrc	r25, 7
    6350:	07 c0       	rjmp	.+14     	; 0x6360 <ESP8266_WaitReady+0x3e>
    6352:	fe 01       	movw	r30, r28
    6354:	e3 5d       	subi	r30, 0xD3	; 211
    6356:	fe 4f       	sbci	r31, 0xFE	; 254
    6358:	81 81       	ldd	r24, Z+1	; 0x01
    635a:	8e 7f       	andi	r24, 0xFE	; 254
    635c:	81 83       	std	Z+1, r24	; 0x01
    635e:	0a c0       	rjmp	.+20     	; 0x6374 <ESP8266_WaitReady+0x52>
    6360:	ce 01       	movw	r24, r28
    6362:	c8 dc       	rcall	.-1648   	; 0x5cf4 <ESP8266_Update>
    6364:	4c 81       	ldd	r20, Y+4	; 0x04
    6366:	5d 81       	ldd	r21, Y+5	; 0x05
    6368:	6e 81       	ldd	r22, Y+6	; 0x06
    636a:	7f 81       	ldd	r23, Y+7	; 0x07
    636c:	45 2b       	or	r20, r21
    636e:	46 2b       	or	r20, r22
    6370:	47 2b       	or	r20, r23
    6372:	f9 f6       	brne	.-66     	; 0x6332 <ESP8266_WaitReady+0x10>
    6374:	cf 5c       	subi	r28, 0xCF	; 207
    6376:	de 4f       	sbci	r29, 0xFE	; 254
    6378:	18 82       	st	Y, r1
    637a:	80 e0       	ldi	r24, 0x00	; 0
    637c:	df 91       	pop	r29
    637e:	cf 91       	pop	r28
    6380:	1f 91       	pop	r17
    6382:	0f 91       	pop	r16
    6384:	08 95       	ret

00006386 <ESP8266_GetAP>:
    6386:	cf 93       	push	r28
    6388:	df 93       	push	r29
    638a:	ec 01       	movw	r28, r24
    638c:	22 e6       	ldi	r18, 0x62	; 98
    638e:	35 e2       	ldi	r19, 0x25	; 37
    6390:	4e eb       	ldi	r20, 0xBE	; 190
    6392:	56 e2       	ldi	r21, 0x26	; 38
    6394:	6c e0       	ldi	r22, 0x0C	; 12
    6396:	0e df       	rcall	.-484    	; 0x61b4 <SendCommand>
    6398:	88 23       	and	r24, r24
    639a:	31 f0       	breq	.+12     	; 0x63a8 <ESP8266_GetAP+0x22>
    639c:	cf 5c       	subi	r28, 0xCF	; 207
    639e:	de 4f       	sbci	r29, 0xFE	; 254
    63a0:	88 81       	ld	r24, Y
    63a2:	df 91       	pop	r29
    63a4:	cf 91       	pop	r28
    63a6:	08 95       	ret
    63a8:	ce 01       	movw	r24, r28
    63aa:	df 91       	pop	r29
    63ac:	cf 91       	pop	r28
    63ae:	b9 cf       	rjmp	.-142    	; 0x6322 <ESP8266_WaitReady>

000063b0 <ESP8266_SetMode>:
    63b0:	ff 92       	push	r15
    63b2:	0f 93       	push	r16
    63b4:	1f 93       	push	r17
    63b6:	cf 93       	push	r28
    63b8:	df 93       	push	r29
    63ba:	1f 92       	push	r1
    63bc:	cd b7       	in	r28, 0x3d	; 61
    63be:	de b7       	in	r29, 0x3e	; 62
    63c0:	8c 01       	movw	r16, r24
    63c2:	f6 2e       	mov	r15, r22
    63c4:	69 83       	std	Y+1, r22	; 0x01
    63c6:	fc 01       	movw	r30, r24
    63c8:	44 81       	ldd	r20, Z+4	; 0x04
    63ca:	55 81       	ldd	r21, Z+5	; 0x05
    63cc:	66 81       	ldd	r22, Z+6	; 0x06
    63ce:	77 81       	ldd	r23, Z+7	; 0x07
    63d0:	45 2b       	or	r20, r21
    63d2:	46 2b       	or	r20, r22
    63d4:	47 2b       	or	r20, r23
    63d6:	31 f0       	breq	.+12     	; 0x63e4 <ESP8266_SetMode+0x34>
    63d8:	8d dc       	rcall	.-1766   	; 0x5cf4 <ESP8266_Update>
    63da:	f8 01       	movw	r30, r16
    63dc:	ef 5c       	subi	r30, 0xCF	; 207
    63de:	fe 4f       	sbci	r31, 0xFE	; 254
    63e0:	87 e0       	ldi	r24, 0x07	; 7
    63e2:	2d c0       	rjmp	.+90     	; 0x643e <ESP8266_SetMode+0x8e>
    63e4:	80 e3       	ldi	r24, 0x30	; 48
    63e6:	8f 0d       	add	r24, r15
    63e8:	89 83       	std	Y+1, r24	; 0x01
    63ea:	6e e0       	ldi	r22, 0x0E	; 14
    63ec:	70 e0       	ldi	r23, 0x00	; 0
    63ee:	80 ef       	ldi	r24, 0xF0	; 240
    63f0:	96 e2       	ldi	r25, 0x26	; 38
    63f2:	49 d3       	rcall	.+1682   	; 0x6a86 <ESP8266_LL_USARTSend>
    63f4:	61 e0       	ldi	r22, 0x01	; 1
    63f6:	70 e0       	ldi	r23, 0x00	; 0
    63f8:	ce 01       	movw	r24, r28
    63fa:	01 96       	adiw	r24, 0x01	; 1
    63fc:	44 d3       	rcall	.+1672   	; 0x6a86 <ESP8266_LL_USARTSend>
    63fe:	62 e0       	ldi	r22, 0x02	; 2
    6400:	70 e0       	ldi	r23, 0x00	; 0
    6402:	85 ee       	ldi	r24, 0xE5	; 229
    6404:	90 e2       	ldi	r25, 0x20	; 32
    6406:	3f d3       	rcall	.+1662   	; 0x6a86 <ESP8266_LL_USARTSend>
    6408:	2f ef       	ldi	r18, 0xFF	; 255
    640a:	36 e2       	ldi	r19, 0x26	; 38
    640c:	40 e0       	ldi	r20, 0x00	; 0
    640e:	50 e0       	ldi	r21, 0x00	; 0
    6410:	65 e0       	ldi	r22, 0x05	; 5
    6412:	c8 01       	movw	r24, r16
    6414:	cf de       	rcall	.-610    	; 0x61b4 <SendCommand>
    6416:	f8 01       	movw	r30, r16
    6418:	88 23       	and	r24, r24
    641a:	21 f0       	breq	.+8      	; 0x6424 <ESP8266_SetMode+0x74>
    641c:	ef 5c       	subi	r30, 0xCF	; 207
    641e:	fe 4f       	sbci	r31, 0xFE	; 254
    6420:	80 81       	ld	r24, Z
    6422:	11 c0       	rjmp	.+34     	; 0x6446 <ESP8266_SetMode+0x96>
    6424:	e9 50       	subi	r30, 0x09	; 9
    6426:	ff 4f       	sbci	r31, 0xFF	; 255
    6428:	f0 82       	st	Z, r15
    642a:	c8 01       	movw	r24, r16
    642c:	7a df       	rcall	.-268    	; 0x6322 <ESP8266_WaitReady>
    642e:	f8 01       	movw	r30, r16
    6430:	e8 50       	subi	r30, 0x08	; 8
    6432:	ff 4f       	sbci	r31, 0xFF	; 255
    6434:	80 81       	ld	r24, Z
    6436:	8f 15       	cp	r24, r15
    6438:	21 f0       	breq	.+8      	; 0x6442 <ESP8266_SetMode+0x92>
    643a:	f9 96       	adiw	r30, 0x39	; 57
    643c:	81 e0       	ldi	r24, 0x01	; 1
    643e:	80 83       	st	Z, r24
    6440:	02 c0       	rjmp	.+4      	; 0x6446 <ESP8266_SetMode+0x96>
    6442:	c8 01       	movw	r24, r16
    6444:	a0 df       	rcall	.-192    	; 0x6386 <ESP8266_GetAP>
    6446:	0f 90       	pop	r0
    6448:	df 91       	pop	r29
    644a:	cf 91       	pop	r28
    644c:	1f 91       	pop	r17
    644e:	0f 91       	pop	r16
    6450:	ff 90       	pop	r15
    6452:	08 95       	ret

00006454 <ESP8266_RequestSendData>:
    6454:	ef 92       	push	r14
    6456:	ff 92       	push	r15
    6458:	0f 93       	push	r16
    645a:	1f 93       	push	r17
    645c:	cf 93       	push	r28
    645e:	df 93       	push	r29
    6460:	8c 01       	movw	r16, r24
    6462:	eb 01       	movw	r28, r22
    6464:	fc 01       	movw	r30, r24
    6466:	44 81       	ldd	r20, Z+4	; 0x04
    6468:	55 81       	ldd	r21, Z+5	; 0x05
    646a:	66 81       	ldd	r22, Z+6	; 0x06
    646c:	77 81       	ldd	r23, Z+7	; 0x07
    646e:	8f 5c       	subi	r24, 0xCF	; 207
    6470:	9e 4f       	sbci	r25, 0xFE	; 254
    6472:	7c 01       	movw	r14, r24
    6474:	45 2b       	or	r20, r21
    6476:	46 2b       	or	r20, r22
    6478:	47 2b       	or	r20, r23
    647a:	31 f0       	breq	.+12     	; 0x6488 <ESP8266_RequestSendData+0x34>
    647c:	c8 01       	movw	r24, r16
    647e:	3a dc       	rcall	.-1932   	; 0x5cf4 <ESP8266_Update>
    6480:	87 e0       	ldi	r24, 0x07	; 7
    6482:	f7 01       	movw	r30, r14
    6484:	80 83       	st	Z, r24
    6486:	2b c0       	rjmp	.+86     	; 0x64de <ESP8266_RequestSendData+0x8a>
    6488:	89 81       	ldd	r24, Y+1	; 0x01
    648a:	80 5d       	subi	r24, 0xD0	; 208
    648c:	89 83       	std	Y+1, r24	; 0x01
    648e:	6d e0       	ldi	r22, 0x0D	; 13
    6490:	70 e0       	ldi	r23, 0x00	; 0
    6492:	89 e0       	ldi	r24, 0x09	; 9
    6494:	97 e2       	ldi	r25, 0x27	; 39
    6496:	f7 d2       	rcall	.+1518   	; 0x6a86 <ESP8266_LL_USARTSend>
    6498:	61 e0       	ldi	r22, 0x01	; 1
    649a:	70 e0       	ldi	r23, 0x00	; 0
    649c:	ce 01       	movw	r24, r28
    649e:	01 96       	adiw	r24, 0x01	; 1
    64a0:	f2 d2       	rcall	.+1508   	; 0x6a86 <ESP8266_LL_USARTSend>
    64a2:	67 e0       	ldi	r22, 0x07	; 7
    64a4:	70 e0       	ldi	r23, 0x00	; 0
    64a6:	87 e1       	ldi	r24, 0x17	; 23
    64a8:	97 e2       	ldi	r25, 0x27	; 39
    64aa:	ed d2       	rcall	.+1498   	; 0x6a86 <ESP8266_LL_USARTSend>
    64ac:	89 81       	ldd	r24, Y+1	; 0x01
    64ae:	80 53       	subi	r24, 0x30	; 48
    64b0:	89 83       	std	Y+1, r24	; 0x01
    64b2:	20 e0       	ldi	r18, 0x00	; 0
    64b4:	30 e0       	ldi	r19, 0x00	; 0
    64b6:	40 e0       	ldi	r20, 0x00	; 0
    64b8:	50 e0       	ldi	r21, 0x00	; 0
    64ba:	68 e0       	ldi	r22, 0x08	; 8
    64bc:	c8 01       	movw	r24, r16
    64be:	7a de       	rcall	.-780    	; 0x61b4 <SendCommand>
    64c0:	81 11       	cpse	r24, r1
    64c2:	0b c0       	rjmp	.+22     	; 0x64da <ESP8266_RequestSendData+0x86>
    64c4:	81 e0       	ldi	r24, 0x01	; 1
    64c6:	8a 8b       	std	Y+18, r24	; 0x12
    64c8:	f8 01       	movw	r30, r16
    64ca:	e3 5d       	subi	r30, 0xD3	; 211
    64cc:	fe 4f       	sbci	r31, 0xFE	; 254
    64ce:	81 81       	ldd	r24, Z+1	; 0x01
    64d0:	81 60       	ori	r24, 0x01	; 1
    64d2:	81 83       	std	Z+1, r24	; 0x01
    64d4:	32 97       	sbiw	r30, 0x02	; 2
    64d6:	c0 83       	st	Z, r28
    64d8:	d1 83       	std	Z+1, r29	; 0x01
    64da:	f7 01       	movw	r30, r14
    64dc:	80 81       	ld	r24, Z
    64de:	df 91       	pop	r29
    64e0:	cf 91       	pop	r28
    64e2:	1f 91       	pop	r17
    64e4:	0f 91       	pop	r16
    64e6:	ff 90       	pop	r15
    64e8:	ef 90       	pop	r14
    64ea:	08 95       	ret

000064ec <ESP8266_SetMux>:
    64ec:	ef 92       	push	r14
    64ee:	ff 92       	push	r15
    64f0:	0f 93       	push	r16
    64f2:	1f 93       	push	r17
    64f4:	cf 93       	push	r28
    64f6:	df 93       	push	r29
    64f8:	1f 92       	push	r1
    64fa:	cd b7       	in	r28, 0x3d	; 61
    64fc:	de b7       	in	r29, 0x3e	; 62
    64fe:	8c 01       	movw	r16, r24
    6500:	60 5d       	subi	r22, 0xD0	; 208
    6502:	69 83       	std	Y+1, r22	; 0x01
    6504:	fc 01       	movw	r30, r24
    6506:	44 81       	ldd	r20, Z+4	; 0x04
    6508:	55 81       	ldd	r21, Z+5	; 0x05
    650a:	66 81       	ldd	r22, Z+6	; 0x06
    650c:	77 81       	ldd	r23, Z+7	; 0x07
    650e:	8f 5c       	subi	r24, 0xCF	; 207
    6510:	9e 4f       	sbci	r25, 0xFE	; 254
    6512:	7c 01       	movw	r14, r24
    6514:	45 2b       	or	r20, r21
    6516:	46 2b       	or	r20, r22
    6518:	47 2b       	or	r20, r23
    651a:	21 f0       	breq	.+8      	; 0x6524 <ESP8266_SetMux+0x38>
    651c:	c8 01       	movw	r24, r16
    651e:	ea db       	rcall	.-2092   	; 0x5cf4 <ESP8266_Update>
    6520:	87 e0       	ldi	r24, 0x07	; 7
    6522:	24 c0       	rjmp	.+72     	; 0x656c <ESP8266_SetMux+0x80>
    6524:	6a e0       	ldi	r22, 0x0A	; 10
    6526:	70 e0       	ldi	r23, 0x00	; 0
    6528:	8c e2       	ldi	r24, 0x2C	; 44
    652a:	97 e2       	ldi	r25, 0x27	; 39
    652c:	ac d2       	rcall	.+1368   	; 0x6a86 <ESP8266_LL_USARTSend>
    652e:	61 e0       	ldi	r22, 0x01	; 1
    6530:	70 e0       	ldi	r23, 0x00	; 0
    6532:	ce 01       	movw	r24, r28
    6534:	01 96       	adiw	r24, 0x01	; 1
    6536:	a7 d2       	rcall	.+1358   	; 0x6a86 <ESP8266_LL_USARTSend>
    6538:	62 e0       	ldi	r22, 0x02	; 2
    653a:	70 e0       	ldi	r23, 0x00	; 0
    653c:	85 ee       	ldi	r24, 0xE5	; 229
    653e:	90 e2       	ldi	r25, 0x20	; 32
    6540:	a2 d2       	rcall	.+1348   	; 0x6a86 <ESP8266_LL_USARTSend>
    6542:	20 e0       	ldi	r18, 0x00	; 0
    6544:	30 e0       	ldi	r19, 0x00	; 0
    6546:	40 e0       	ldi	r20, 0x00	; 0
    6548:	50 e0       	ldi	r21, 0x00	; 0
    654a:	6b e0       	ldi	r22, 0x0B	; 11
    654c:	c8 01       	movw	r24, r16
    654e:	32 de       	rcall	.-924    	; 0x61b4 <SendCommand>
    6550:	88 23       	and	r24, r24
    6552:	19 f0       	breq	.+6      	; 0x655a <ESP8266_SetMux+0x6e>
    6554:	f7 01       	movw	r30, r14
    6556:	80 81       	ld	r24, Z
    6558:	0f c0       	rjmp	.+30     	; 0x6578 <ESP8266_SetMux+0x8c>
    655a:	c8 01       	movw	r24, r16
    655c:	e2 de       	rcall	.-572    	; 0x6322 <ESP8266_WaitReady>
    655e:	f8 01       	movw	r30, r16
    6560:	e2 5d       	subi	r30, 0xD2	; 210
    6562:	fe 4f       	sbci	r31, 0xFE	; 254
    6564:	80 81       	ld	r24, Z
    6566:	81 fd       	sbrc	r24, 1
    6568:	04 c0       	rjmp	.+8      	; 0x6572 <ESP8266_SetMux+0x86>
    656a:	81 e0       	ldi	r24, 0x01	; 1
    656c:	f7 01       	movw	r30, r14
    656e:	80 83       	st	Z, r24
    6570:	03 c0       	rjmp	.+6      	; 0x6578 <ESP8266_SetMux+0x8c>
    6572:	f7 01       	movw	r30, r14
    6574:	10 82       	st	Z, r1
    6576:	80 e0       	ldi	r24, 0x00	; 0
    6578:	0f 90       	pop	r0
    657a:	df 91       	pop	r29
    657c:	cf 91       	pop	r28
    657e:	1f 91       	pop	r17
    6580:	0f 91       	pop	r16
    6582:	ff 90       	pop	r15
    6584:	ef 90       	pop	r14
    6586:	08 95       	ret

00006588 <ESP8266_Setdinfo>:
    6588:	ef 92       	push	r14
    658a:	ff 92       	push	r15
    658c:	0f 93       	push	r16
    658e:	1f 93       	push	r17
    6590:	cf 93       	push	r28
    6592:	df 93       	push	r29
    6594:	1f 92       	push	r1
    6596:	cd b7       	in	r28, 0x3d	; 61
    6598:	de b7       	in	r29, 0x3e	; 62
    659a:	8c 01       	movw	r16, r24
    659c:	60 5d       	subi	r22, 0xD0	; 208
    659e:	69 83       	std	Y+1, r22	; 0x01
    65a0:	fc 01       	movw	r30, r24
    65a2:	44 81       	ldd	r20, Z+4	; 0x04
    65a4:	55 81       	ldd	r21, Z+5	; 0x05
    65a6:	66 81       	ldd	r22, Z+6	; 0x06
    65a8:	77 81       	ldd	r23, Z+7	; 0x07
    65aa:	8f 5c       	subi	r24, 0xCF	; 207
    65ac:	9e 4f       	sbci	r25, 0xFE	; 254
    65ae:	7c 01       	movw	r14, r24
    65b0:	45 2b       	or	r20, r21
    65b2:	46 2b       	or	r20, r22
    65b4:	47 2b       	or	r20, r23
    65b6:	21 f0       	breq	.+8      	; 0x65c0 <ESP8266_Setdinfo+0x38>
    65b8:	c8 01       	movw	r24, r16
    65ba:	9c db       	rcall	.-2248   	; 0x5cf4 <ESP8266_Update>
    65bc:	87 e0       	ldi	r24, 0x07	; 7
    65be:	24 c0       	rjmp	.+72     	; 0x6608 <ESP8266_Setdinfo+0x80>
    65c0:	6c e0       	ldi	r22, 0x0C	; 12
    65c2:	70 e0       	ldi	r23, 0x00	; 0
    65c4:	87 e3       	ldi	r24, 0x37	; 55
    65c6:	97 e2       	ldi	r25, 0x27	; 39
    65c8:	5e d2       	rcall	.+1212   	; 0x6a86 <ESP8266_LL_USARTSend>
    65ca:	61 e0       	ldi	r22, 0x01	; 1
    65cc:	70 e0       	ldi	r23, 0x00	; 0
    65ce:	ce 01       	movw	r24, r28
    65d0:	01 96       	adiw	r24, 0x01	; 1
    65d2:	59 d2       	rcall	.+1202   	; 0x6a86 <ESP8266_LL_USARTSend>
    65d4:	62 e0       	ldi	r22, 0x02	; 2
    65d6:	70 e0       	ldi	r23, 0x00	; 0
    65d8:	85 ee       	ldi	r24, 0xE5	; 229
    65da:	90 e2       	ldi	r25, 0x20	; 32
    65dc:	54 d2       	rcall	.+1192   	; 0x6a86 <ESP8266_LL_USARTSend>
    65de:	20 e0       	ldi	r18, 0x00	; 0
    65e0:	30 e0       	ldi	r19, 0x00	; 0
    65e2:	40 e0       	ldi	r20, 0x00	; 0
    65e4:	50 e0       	ldi	r21, 0x00	; 0
    65e6:	67 e0       	ldi	r22, 0x07	; 7
    65e8:	c8 01       	movw	r24, r16
    65ea:	e4 dd       	rcall	.-1080   	; 0x61b4 <SendCommand>
    65ec:	88 23       	and	r24, r24
    65ee:	19 f0       	breq	.+6      	; 0x65f6 <ESP8266_Setdinfo+0x6e>
    65f0:	f7 01       	movw	r30, r14
    65f2:	80 81       	ld	r24, Z
    65f4:	0f c0       	rjmp	.+30     	; 0x6614 <ESP8266_Setdinfo+0x8c>
    65f6:	c8 01       	movw	r24, r16
    65f8:	94 de       	rcall	.-728    	; 0x6322 <ESP8266_WaitReady>
    65fa:	f8 01       	movw	r30, r16
    65fc:	e2 5d       	subi	r30, 0xD2	; 210
    65fe:	fe 4f       	sbci	r31, 0xFE	; 254
    6600:	80 81       	ld	r24, Z
    6602:	81 fd       	sbrc	r24, 1
    6604:	04 c0       	rjmp	.+8      	; 0x660e <ESP8266_Setdinfo+0x86>
    6606:	81 e0       	ldi	r24, 0x01	; 1
    6608:	f7 01       	movw	r30, r14
    660a:	80 83       	st	Z, r24
    660c:	03 c0       	rjmp	.+6      	; 0x6614 <ESP8266_Setdinfo+0x8c>
    660e:	f7 01       	movw	r30, r14
    6610:	10 82       	st	Z, r1
    6612:	80 e0       	ldi	r24, 0x00	; 0
    6614:	0f 90       	pop	r0
    6616:	df 91       	pop	r29
    6618:	cf 91       	pop	r28
    661a:	1f 91       	pop	r17
    661c:	0f 91       	pop	r16
    661e:	ff 90       	pop	r15
    6620:	ef 90       	pop	r14
    6622:	08 95       	ret

00006624 <ESP8266_Init>:
    6624:	4f 92       	push	r4
    6626:	5f 92       	push	r5
    6628:	6f 92       	push	r6
    662a:	7f 92       	push	r7
    662c:	8f 92       	push	r8
    662e:	9f 92       	push	r9
    6630:	af 92       	push	r10
    6632:	bf 92       	push	r11
    6634:	cf 92       	push	r12
    6636:	df 92       	push	r13
    6638:	ef 92       	push	r14
    663a:	ff 92       	push	r15
    663c:	0f 93       	push	r16
    663e:	1f 93       	push	r17
    6640:	cf 93       	push	r28
    6642:	df 93       	push	r29
    6644:	cd b7       	in	r28, 0x3d	; 61
    6646:	de b7       	in	r29, 0x3e	; 62
    6648:	28 97       	sbiw	r28, 0x08	; 8
    664a:	cd bf       	out	0x3d, r28	; 61
    664c:	de bf       	out	0x3e, r29	; 62
    664e:	7c 01       	movw	r14, r24
    6650:	4a 01       	movw	r8, r20
    6652:	5b 01       	movw	r10, r22
    6654:	fc 01       	movw	r30, r24
    6656:	16 8a       	std	Z+22, r1	; 0x16
    6658:	17 8a       	std	Z+23, r1	; 0x17
    665a:	10 8e       	std	Z+24, r1	; 0x18
    665c:	11 8e       	std	Z+25, r1	; 0x19
    665e:	28 e4       	ldi	r18, 0x48	; 72
    6660:	38 e3       	ldi	r19, 0x38	; 56
    6662:	40 e0       	ldi	r20, 0x00	; 0
    6664:	52 e0       	ldi	r21, 0x02	; 2
    6666:	60 e0       	ldi	r22, 0x00	; 0
    6668:	70 e0       	ldi	r23, 0x00	; 0
    666a:	8a e5       	ldi	r24, 0x5A	; 90
    666c:	9a e3       	ldi	r25, 0x3A	; 58
    666e:	0e 94 47 22 	call	0x448e	; 0x448e <BUFFER_Init>
    6672:	81 11       	cpse	r24, r1
    6674:	0c c0       	rjmp	.+24     	; 0x668e <ESP8266_Init+0x6a>
    6676:	28 e4       	ldi	r18, 0x48	; 72
    6678:	34 e3       	ldi	r19, 0x34	; 52
    667a:	40 e0       	ldi	r20, 0x00	; 0
    667c:	54 e0       	ldi	r21, 0x04	; 4
    667e:	60 e0       	ldi	r22, 0x00	; 0
    6680:	70 e0       	ldi	r23, 0x00	; 0
    6682:	88 e4       	ldi	r24, 0x48	; 72
    6684:	9a e3       	ldi	r25, 0x3A	; 58
    6686:	0e 94 47 22 	call	0x448e	; 0x448e <BUFFER_Init>
    668a:	88 23       	and	r24, r24
    668c:	29 f0       	breq	.+10     	; 0x6698 <ESP8266_Init+0x74>
    668e:	f7 01       	movw	r30, r14
    6690:	ef 5c       	subi	r30, 0xCF	; 207
    6692:	fe 4f       	sbci	r31, 0xFE	; 254
    6694:	85 e0       	ldi	r24, 0x05	; 5
    6696:	ab c0       	rjmp	.+342    	; 0x67ee <ESP8266_Init+0x1ca>
    6698:	80 e1       	ldi	r24, 0x10	; 16
    669a:	80 93 61 06 	sts	0x0661, r24
    669e:	80 93 66 06 	sts	0x0666, r24
    66a2:	f7 01       	movw	r30, r14
    66a4:	86 85       	ldd	r24, Z+14	; 0x0e
    66a6:	97 85       	ldd	r25, Z+15	; 0x0f
    66a8:	a0 89       	ldd	r26, Z+16	; 0x10
    66aa:	b1 89       	ldd	r27, Z+17	; 0x11
    66ac:	8d 83       	std	Y+5, r24	; 0x05
    66ae:	9e 83       	std	Y+6, r25	; 0x06
    66b0:	af 83       	std	Y+7, r26	; 0x07
    66b2:	b8 87       	std	Y+8, r27	; 0x08
    66b4:	f7 01       	movw	r30, r14
    66b6:	86 85       	ldd	r24, Z+14	; 0x0e
    66b8:	97 85       	ldd	r25, Z+15	; 0x0f
    66ba:	a0 89       	ldd	r26, Z+16	; 0x10
    66bc:	b1 89       	ldd	r27, Z+17	; 0x11
    66be:	4d 81       	ldd	r20, Y+5	; 0x05
    66c0:	5e 81       	ldd	r21, Y+6	; 0x06
    66c2:	6f 81       	ldd	r22, Y+7	; 0x07
    66c4:	78 85       	ldd	r23, Y+8	; 0x08
    66c6:	84 1b       	sub	r24, r20
    66c8:	95 0b       	sbc	r25, r21
    66ca:	a6 0b       	sbc	r26, r22
    66cc:	b7 0b       	sbc	r27, r23
    66ce:	84 36       	cpi	r24, 0x64	; 100
    66d0:	91 05       	cpc	r25, r1
    66d2:	a1 05       	cpc	r26, r1
    66d4:	b1 05       	cpc	r27, r1
    66d6:	70 f3       	brcs	.-36     	; 0x66b4 <ESP8266_Init+0x90>
    66d8:	80 e1       	ldi	r24, 0x10	; 16
    66da:	80 93 65 06 	sts	0x0665, r24
    66de:	86 85       	ldd	r24, Z+14	; 0x0e
    66e0:	97 85       	ldd	r25, Z+15	; 0x0f
    66e2:	a0 89       	ldd	r26, Z+16	; 0x10
    66e4:	b1 89       	ldd	r27, Z+17	; 0x11
    66e6:	89 83       	std	Y+1, r24	; 0x01
    66e8:	9a 83       	std	Y+2, r25	; 0x02
    66ea:	ab 83       	std	Y+3, r26	; 0x03
    66ec:	bc 83       	std	Y+4, r27	; 0x04
    66ee:	f7 01       	movw	r30, r14
    66f0:	06 85       	ldd	r16, Z+14	; 0x0e
    66f2:	17 85       	ldd	r17, Z+15	; 0x0f
    66f4:	20 89       	ldd	r18, Z+16	; 0x10
    66f6:	31 89       	ldd	r19, Z+17	; 0x11
    66f8:	89 81       	ldd	r24, Y+1	; 0x01
    66fa:	9a 81       	ldd	r25, Y+2	; 0x02
    66fc:	ab 81       	ldd	r26, Y+3	; 0x03
    66fe:	bc 81       	ldd	r27, Y+4	; 0x04
    6700:	08 1b       	sub	r16, r24
    6702:	19 0b       	sbc	r17, r25
    6704:	2a 0b       	sbc	r18, r26
    6706:	3b 0b       	sbc	r19, r27
    6708:	04 36       	cpi	r16, 0x64	; 100
    670a:	11 05       	cpc	r17, r1
    670c:	21 05       	cpc	r18, r1
    670e:	31 05       	cpc	r19, r1
    6710:	70 f3       	brcs	.-36     	; 0x66ee <ESP8266_Init+0xca>
    6712:	80 82       	st	Z, r8
    6714:	91 82       	std	Z+1, r9	; 0x01
    6716:	a2 82       	std	Z+2, r10	; 0x02
    6718:	b3 82       	std	Z+3, r11	; 0x03
    671a:	c5 01       	movw	r24, r10
    671c:	b4 01       	movw	r22, r8
    671e:	af d1       	rcall	.+862    	; 0x6a7e <ESP8266_LL_USARTInit>
    6720:	88 ee       	ldi	r24, 0xE8	; 232
    6722:	93 e0       	ldi	r25, 0x03	; 3
    6724:	a0 e0       	ldi	r26, 0x00	; 0
    6726:	b0 e0       	ldi	r27, 0x00	; 0
    6728:	f7 01       	movw	r30, r14
    672a:	86 8b       	std	Z+22, r24	; 0x16
    672c:	97 8b       	std	Z+23, r25	; 0x17
    672e:	a0 8f       	std	Z+24, r26	; 0x18
    6730:	b1 8f       	std	Z+25, r27	; 0x19
    6732:	29 ea       	ldi	r18, 0xA9	; 169
    6734:	34 e2       	ldi	r19, 0x24	; 36
    6736:	44 e4       	ldi	r20, 0x44	; 68
    6738:	57 e2       	ldi	r21, 0x27	; 39
    673a:	6f e0       	ldi	r22, 0x0F	; 15
    673c:	c7 01       	movw	r24, r14
    673e:	3a dd       	rcall	.-1420   	; 0x61b4 <SendCommand>
    6740:	c7 01       	movw	r24, r14
    6742:	ef dd       	rcall	.-1058   	; 0x6322 <ESP8266_WaitReady>
    6744:	87 01       	movw	r16, r14
    6746:	02 5d       	subi	r16, 0xD2	; 210
    6748:	1e 4f       	sbci	r17, 0xFE	; 254
    674a:	f8 01       	movw	r30, r16
    674c:	80 81       	ld	r24, Z
    674e:	81 fd       	sbrc	r24, 1
    6750:	30 c0       	rjmp	.+96     	; 0x67b2 <ESP8266_Init+0x18e>
    6752:	e5 e6       	ldi	r30, 0x65	; 101
    6754:	ce 2e       	mov	r12, r30
    6756:	e8 e2       	ldi	r30, 0x28	; 40
    6758:	de 2e       	mov	r13, r30
    675a:	f8 ee       	ldi	r31, 0xE8	; 232
    675c:	4f 2e       	mov	r4, r31
    675e:	f3 e0       	ldi	r31, 0x03	; 3
    6760:	5f 2e       	mov	r5, r31
    6762:	61 2c       	mov	r6, r1
    6764:	71 2c       	mov	r7, r1
    6766:	f6 01       	movw	r30, r12
    6768:	81 90       	ld	r8, Z+
    676a:	91 90       	ld	r9, Z+
    676c:	a1 90       	ld	r10, Z+
    676e:	b1 90       	ld	r11, Z+
    6770:	6f 01       	movw	r12, r30
    6772:	c5 01       	movw	r24, r10
    6774:	b4 01       	movw	r22, r8
    6776:	83 d1       	rcall	.+774    	; 0x6a7e <ESP8266_LL_USARTInit>
    6778:	f7 01       	movw	r30, r14
    677a:	46 8a       	std	Z+22, r4	; 0x16
    677c:	57 8a       	std	Z+23, r5	; 0x17
    677e:	60 8e       	std	Z+24, r6	; 0x18
    6780:	71 8e       	std	Z+25, r7	; 0x19
    6782:	29 ea       	ldi	r18, 0xA9	; 169
    6784:	34 e2       	ldi	r19, 0x24	; 36
    6786:	44 e4       	ldi	r20, 0x44	; 68
    6788:	57 e2       	ldi	r21, 0x27	; 39
    678a:	6f e0       	ldi	r22, 0x0F	; 15
    678c:	c7 01       	movw	r24, r14
    678e:	12 dd       	rcall	.-1500   	; 0x61b4 <SendCommand>
    6790:	c7 01       	movw	r24, r14
    6792:	c7 dd       	rcall	.-1138   	; 0x6322 <ESP8266_WaitReady>
    6794:	f8 01       	movw	r30, r16
    6796:	80 81       	ld	r24, Z
    6798:	81 ff       	sbrs	r24, 1
    679a:	06 c0       	rjmp	.+12     	; 0x67a8 <ESP8266_Init+0x184>
    679c:	f7 01       	movw	r30, r14
    679e:	80 82       	st	Z, r8
    67a0:	91 82       	std	Z+1, r9	; 0x01
    67a2:	a2 82       	std	Z+2, r10	; 0x02
    67a4:	b3 82       	std	Z+3, r11	; 0x03
    67a6:	05 c0       	rjmp	.+10     	; 0x67b2 <ESP8266_Init+0x18e>
    67a8:	f5 e7       	ldi	r31, 0x75	; 117
    67aa:	cf 16       	cp	r12, r31
    67ac:	f8 e2       	ldi	r31, 0x28	; 40
    67ae:	df 06       	cpc	r13, r31
    67b0:	d1 f6       	brne	.-76     	; 0x6766 <ESP8266_Init+0x142>
    67b2:	f8 01       	movw	r30, r16
    67b4:	80 81       	ld	r24, Z
    67b6:	81 ff       	sbrs	r24, 1
    67b8:	16 c0       	rjmp	.+44     	; 0x67e6 <ESP8266_Init+0x1c2>
    67ba:	80 e3       	ldi	r24, 0x30	; 48
    67bc:	95 e7       	ldi	r25, 0x75	; 117
    67be:	a0 e0       	ldi	r26, 0x00	; 0
    67c0:	b0 e0       	ldi	r27, 0x00	; 0
    67c2:	f7 01       	movw	r30, r14
    67c4:	86 8b       	std	Z+22, r24	; 0x16
    67c6:	97 8b       	std	Z+23, r25	; 0x17
    67c8:	a0 8f       	std	Z+24, r26	; 0x18
    67ca:	b1 8f       	std	Z+25, r27	; 0x19
    67cc:	2c e9       	ldi	r18, 0x9C	; 156
    67ce:	34 e2       	ldi	r19, 0x24	; 36
    67d0:	4d e4       	ldi	r20, 0x4D	; 77
    67d2:	57 e2       	ldi	r21, 0x27	; 39
    67d4:	6e e0       	ldi	r22, 0x0E	; 14
    67d6:	c7 01       	movw	r24, r14
    67d8:	ed dc       	rcall	.-1574   	; 0x61b4 <SendCommand>
    67da:	c7 01       	movw	r24, r14
    67dc:	a2 dd       	rcall	.-1212   	; 0x6322 <ESP8266_WaitReady>
    67de:	f8 01       	movw	r30, r16
    67e0:	80 81       	ld	r24, Z
    67e2:	81 fd       	sbrc	r24, 1
    67e4:	06 c0       	rjmp	.+12     	; 0x67f2 <ESP8266_Init+0x1ce>
    67e6:	f7 01       	movw	r30, r14
    67e8:	ef 5c       	subi	r30, 0xCF	; 207
    67ea:	fe 4f       	sbci	r31, 0xFE	; 254
    67ec:	82 e0       	ldi	r24, 0x02	; 2
    67ee:	80 83       	st	Z, r24
    67f0:	26 c0       	rjmp	.+76     	; 0x683e <ESP8266_Init+0x21a>
    67f2:	22 e5       	ldi	r18, 0x52	; 82
    67f4:	37 e2       	ldi	r19, 0x27	; 39
    67f6:	47 e5       	ldi	r20, 0x57	; 87
    67f8:	57 e2       	ldi	r21, 0x27	; 39
    67fa:	6d e0       	ldi	r22, 0x0D	; 13
    67fc:	c7 01       	movw	r24, r14
    67fe:	da dc       	rcall	.-1612   	; 0x61b4 <SendCommand>
    6800:	c7 01       	movw	r24, r14
    6802:	8f dd       	rcall	.-1250   	; 0x6322 <ESP8266_WaitReady>
    6804:	61 e0       	ldi	r22, 0x01	; 1
    6806:	c7 01       	movw	r24, r14
    6808:	71 de       	rcall	.-798    	; 0x64ec <ESP8266_SetMux>
    680a:	81 11       	cpse	r24, r1
    680c:	fb cf       	rjmp	.-10     	; 0x6804 <ESP8266_Init+0x1e0>
    680e:	61 e0       	ldi	r22, 0x01	; 1
    6810:	c7 01       	movw	r24, r14
    6812:	ba de       	rcall	.-652    	; 0x6588 <ESP8266_Setdinfo>
    6814:	81 11       	cpse	r24, r1
    6816:	fb cf       	rjmp	.-10     	; 0x680e <ESP8266_Init+0x1ea>
    6818:	63 e0       	ldi	r22, 0x03	; 3
    681a:	c7 01       	movw	r24, r14
    681c:	c9 dd       	rcall	.-1134   	; 0x63b0 <ESP8266_SetMode>
    681e:	81 11       	cpse	r24, r1
    6820:	fb cf       	rjmp	.-10     	; 0x6818 <ESP8266_Init+0x1f4>
    6822:	c7 01       	movw	r24, r14
    6824:	50 dd       	rcall	.-1376   	; 0x62c6 <ESP8266_GetSTAMAC>
    6826:	81 11       	cpse	r24, r1
    6828:	fc cf       	rjmp	.-8      	; 0x6822 <ESP8266_Init+0x1fe>
    682a:	c7 01       	movw	r24, r14
    682c:	63 dd       	rcall	.-1338   	; 0x62f4 <ESP8266_GetAPMAC>
    682e:	81 11       	cpse	r24, r1
    6830:	fc cf       	rjmp	.-8      	; 0x682a <ESP8266_Init+0x206>
    6832:	c7 01       	movw	r24, r14
    6834:	30 dd       	rcall	.-1440   	; 0x6296 <ESP8266_GetAPIP>
    6836:	81 11       	cpse	r24, r1
    6838:	fc cf       	rjmp	.-8      	; 0x6832 <ESP8266_Init+0x20e>
    683a:	c7 01       	movw	r24, r14
    683c:	72 dd       	rcall	.-1308   	; 0x6322 <ESP8266_WaitReady>
    683e:	28 96       	adiw	r28, 0x08	; 8
    6840:	cd bf       	out	0x3d, r28	; 61
    6842:	de bf       	out	0x3e, r29	; 62
    6844:	df 91       	pop	r29
    6846:	cf 91       	pop	r28
    6848:	1f 91       	pop	r17
    684a:	0f 91       	pop	r16
    684c:	ff 90       	pop	r15
    684e:	ef 90       	pop	r14
    6850:	df 90       	pop	r13
    6852:	cf 90       	pop	r12
    6854:	bf 90       	pop	r11
    6856:	af 90       	pop	r10
    6858:	9f 90       	pop	r9
    685a:	8f 90       	pop	r8
    685c:	7f 90       	pop	r7
    685e:	6f 90       	pop	r6
    6860:	5f 90       	pop	r5
    6862:	4f 90       	pop	r4
    6864:	08 95       	ret

00006866 <ESP8266_WifiConnect>:
    6866:	cf 92       	push	r12
    6868:	df 92       	push	r13
    686a:	ef 92       	push	r14
    686c:	ff 92       	push	r15
    686e:	0f 93       	push	r16
    6870:	1f 93       	push	r17
    6872:	cf 93       	push	r28
    6874:	df 93       	push	r29
    6876:	ec 01       	movw	r28, r24
    6878:	7b 01       	movw	r14, r22
    687a:	6a 01       	movw	r12, r20
    687c:	0c 81       	ldd	r16, Y+4	; 0x04
    687e:	1d 81       	ldd	r17, Y+5	; 0x05
    6880:	2e 81       	ldd	r18, Y+6	; 0x06
    6882:	3f 81       	ldd	r19, Y+7	; 0x07
    6884:	01 2b       	or	r16, r17
    6886:	02 2b       	or	r16, r18
    6888:	03 2b       	or	r16, r19
    688a:	21 f5       	brne	.+72     	; 0x68d4 <ESP8266_WifiConnect+0x6e>
    688c:	6e e0       	ldi	r22, 0x0E	; 14
    688e:	70 e0       	ldi	r23, 0x00	; 0
    6890:	89 e7       	ldi	r24, 0x79	; 121
    6892:	97 e2       	ldi	r25, 0x27	; 39
    6894:	f8 d0       	rcall	.+496    	; 0x6a86 <ESP8266_LL_USARTSend>
    6896:	c7 01       	movw	r24, r14
    6898:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <EscapeStringAndSend>
    689c:	63 e0       	ldi	r22, 0x03	; 3
    689e:	70 e0       	ldi	r23, 0x00	; 0
    68a0:	86 e4       	ldi	r24, 0x46	; 70
    68a2:	98 e2       	ldi	r25, 0x28	; 40
    68a4:	f0 d0       	rcall	.+480    	; 0x6a86 <ESP8266_LL_USARTSend>
    68a6:	c6 01       	movw	r24, r12
    68a8:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <EscapeStringAndSend>
    68ac:	63 e0       	ldi	r22, 0x03	; 3
    68ae:	70 e0       	ldi	r23, 0x00	; 0
    68b0:	88 e8       	ldi	r24, 0x88	; 136
    68b2:	97 e2       	ldi	r25, 0x27	; 39
    68b4:	e8 d0       	rcall	.+464    	; 0x6a86 <ESP8266_LL_USARTSend>
    68b6:	26 e4       	ldi	r18, 0x46	; 70
    68b8:	35 e2       	ldi	r19, 0x25	; 37
    68ba:	40 e0       	ldi	r20, 0x00	; 0
    68bc:	50 e0       	ldi	r21, 0x00	; 0
    68be:	63 e0       	ldi	r22, 0x03	; 3
    68c0:	ce 01       	movw	r24, r28
    68c2:	df 91       	pop	r29
    68c4:	cf 91       	pop	r28
    68c6:	1f 91       	pop	r17
    68c8:	0f 91       	pop	r16
    68ca:	ff 90       	pop	r15
    68cc:	ef 90       	pop	r14
    68ce:	df 90       	pop	r13
    68d0:	cf 90       	pop	r12
    68d2:	70 cc       	rjmp	.-1824   	; 0x61b4 <SendCommand>
    68d4:	0f da       	rcall	.-3042   	; 0x5cf4 <ESP8266_Update>
    68d6:	cf 5c       	subi	r28, 0xCF	; 207
    68d8:	de 4f       	sbci	r29, 0xFE	; 254
    68da:	87 e0       	ldi	r24, 0x07	; 7
    68dc:	88 83       	st	Y, r24
    68de:	df 91       	pop	r29
    68e0:	cf 91       	pop	r28
    68e2:	1f 91       	pop	r17
    68e4:	0f 91       	pop	r16
    68e6:	ff 90       	pop	r15
    68e8:	ef 90       	pop	r14
    68ea:	df 90       	pop	r13
    68ec:	cf 90       	pop	r12
    68ee:	08 95       	ret

000068f0 <ESP8266_StartClientConnectionTCP>:

/******************************************/
/*               TCP CLIENT               */
/******************************************/
ESP8266_Result_t ESP8266_StartClientConnectionTCP(ESP8266_t* ESP8266, const char* name, char* location, uint16_t port, void* user_parameters) {
    68f0:	4f 92       	push	r4
    68f2:	5f 92       	push	r5
    68f4:	7f 92       	push	r7
    68f6:	8f 92       	push	r8
    68f8:	9f 92       	push	r9
    68fa:	af 92       	push	r10
    68fc:	bf 92       	push	r11
    68fe:	cf 92       	push	r12
    6900:	df 92       	push	r13
    6902:	ef 92       	push	r14
    6904:	ff 92       	push	r15
    6906:	0f 93       	push	r16
    6908:	1f 93       	push	r17
    690a:	cf 93       	push	r28
    690c:	df 93       	push	r29
    690e:	cd b7       	in	r28, 0x3d	; 61
    6910:	de b7       	in	r29, 0x3e	; 62
    6912:	27 97       	sbiw	r28, 0x07	; 7
    6914:	cd bf       	out	0x3d, r28	; 61
    6916:	de bf       	out	0x3e, r29	; 62
    6918:	7c 01       	movw	r14, r24
    691a:	4b 01       	movw	r8, r22
    691c:	6a 01       	movw	r12, r20
    691e:	a9 01       	movw	r20, r18
	int8_t conn = -1;
    6920:	8f ef       	ldi	r24, 0xFF	; 255
    6922:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t i = 0;
	
	/* Check if IDLE */
	ESP8266_CHECK_IDLE(ESP8266);
    6924:	f7 01       	movw	r30, r14
    6926:	84 81       	ldd	r24, Z+4	; 0x04
    6928:	95 81       	ldd	r25, Z+5	; 0x05
    692a:	a6 81       	ldd	r26, Z+6	; 0x06
    692c:	b7 81       	ldd	r27, Z+7	; 0x07
    692e:	89 2b       	or	r24, r25
    6930:	8a 2b       	or	r24, r26
    6932:	8b 2b       	or	r24, r27
    6934:	39 f0       	breq	.+14     	; 0x6944 <ESP8266_StartClientConnectionTCP+0x54>
    6936:	c7 01       	movw	r24, r14
    6938:	dd d9       	rcall	.-3142   	; 0x5cf4 <ESP8266_Update>
    693a:	f7 01       	movw	r30, r14
    693c:	ef 5c       	subi	r30, 0xCF	; 207
    693e:	fe 4f       	sbci	r31, 0xFE	; 254
    6940:	87 e0       	ldi	r24, 0x07	; 7
    6942:	89 c0       	rjmp	.+274    	; 0x6a56 <ESP8266_StartClientConnectionTCP+0x166>
	
	/* Check if connected to network */
	ESP8266_CHECK_WIFICONNECTED(ESP8266);
    6944:	f7 01       	movw	r30, r14
    6946:	e2 5d       	subi	r30, 0xD2	; 210
    6948:	fe 4f       	sbci	r31, 0xFE	; 254
    694a:	80 81       	ld	r24, Z
    694c:	82 fd       	sbrc	r24, 2
    694e:	03 c0       	rjmp	.+6      	; 0x6956 <ESP8266_StartClientConnectionTCP+0x66>
    6950:	33 96       	adiw	r30, 0x03	; 3
    6952:	86 e0       	ldi	r24, 0x06	; 6
    6954:	80 c0       	rjmp	.+256    	; 0x6a56 <ESP8266_StartClientConnectionTCP+0x166>
    6956:	80 e0       	ldi	r24, 0x00	; 0
    6958:	90 e0       	ldi	r25, 0x00	; 0
    695a:	71 2c       	mov	r7, r1
    695c:	f7 01       	movw	r30, r14
    695e:	e8 0f       	add	r30, r24
    6960:	f9 1f       	adc	r31, r25
	
	/* Find available connection */
	for (i = 0; i < ESP8266_MAX_CONNECTIONS; i++) {
		if (!ESP8266->Connection[i].Active) {
    6962:	22 8d       	ldd	r18, Z+26	; 0x1a
    6964:	21 11       	cpse	r18, r1
    6966:	02 c0       	rjmp	.+4      	; 0x696c <ESP8266_StartClientConnectionTCP+0x7c>
			/* Save */
			conn = i;
    6968:	7f 82       	std	Y+7, r7	; 0x07
			
			break;
    696a:	05 c0       	rjmp	.+10     	; 0x6976 <ESP8266_StartClientConnectionTCP+0x86>
	
	/* Check if connected to network */
	ESP8266_CHECK_WIFICONNECTED(ESP8266);
	
	/* Find available connection */
	for (i = 0; i < ESP8266_MAX_CONNECTIONS; i++) {
    696c:	73 94       	inc	r7
    696e:	85 96       	adiw	r24, 0x25	; 37
    6970:	f5 e0       	ldi	r31, 0x05	; 5
    6972:	7f 12       	cpse	r7, r31
    6974:	f3 cf       	rjmp	.-26     	; 0x695c <ESP8266_StartClientConnectionTCP+0x6c>
			break;
		}
	}
	
	/* Try it */
	if (conn != -1) {
    6976:	8f 81       	ldd	r24, Y+7	; 0x07
    6978:	97 01       	movw	r18, r14
    697a:	2f 5c       	subi	r18, 0xCF	; 207
    697c:	3e 4f       	sbci	r19, 0xFE	; 254
    697e:	59 01       	movw	r10, r18
    6980:	8f 3f       	cpi	r24, 0xFF	; 255
    6982:	09 f4       	brne	.+2      	; 0x6986 <ESP8266_StartClientConnectionTCP+0x96>
    6984:	66 c0       	rjmp	.+204    	; 0x6a52 <ESP8266_StartClientConnectionTCP+0x162>
		char tmp[6];
		
		/* Format port */
		Int2String(tmp, port);
    6986:	60 e0       	ldi	r22, 0x00	; 0
    6988:	70 e0       	ldi	r23, 0x00	; 0
    698a:	ce 01       	movw	r24, r28
    698c:	01 96       	adiw	r24, 0x01	; 1
    698e:	2c 01       	movw	r4, r24
    6990:	0e 94 dd 26 	call	0x4dba	; 0x4dba <Int2String>
		
		/* Go to ASCII number */
		conn += '0';
    6994:	8f 81       	ldd	r24, Y+7	; 0x07
    6996:	80 5d       	subi	r24, 0xD0	; 208
    6998:	8f 83       	std	Y+7, r24	; 0x07
		
		/* Send separate */
		ESP8266_USARTSENDSTRING("AT+CIPSTART=");
    699a:	6c e0       	ldi	r22, 0x0C	; 12
    699c:	70 e0       	ldi	r23, 0x00	; 0
    699e:	8b e2       	ldi	r24, 0x2B	; 43
    69a0:	98 e2       	ldi	r25, 0x28	; 40
    69a2:	71 d0       	rcall	.+226    	; 0x6a86 <ESP8266_LL_USARTSend>
		ESP8266_USARTSENDCHAR(&conn);
    69a4:	61 e0       	ldi	r22, 0x01	; 1
    69a6:	70 e0       	ldi	r23, 0x00	; 0
    69a8:	ce 01       	movw	r24, r28
    69aa:	07 96       	adiw	r24, 0x07	; 7
    69ac:	6c d0       	rcall	.+216    	; 0x6a86 <ESP8266_LL_USARTSend>
		ESP8266_USARTSENDSTRING(",\"TCP\",\"");
    69ae:	68 e0       	ldi	r22, 0x08	; 8
    69b0:	70 e0       	ldi	r23, 0x00	; 0
    69b2:	88 e3       	ldi	r24, 0x38	; 56
    69b4:	98 e2       	ldi	r25, 0x28	; 40
    69b6:	67 d0       	rcall	.+206    	; 0x6a86 <ESP8266_LL_USARTSend>
		ESP8266_USARTSENDSTRING(location);
    69b8:	f6 01       	movw	r30, r12
    69ba:	01 90       	ld	r0, Z+
    69bc:	00 20       	and	r0, r0
    69be:	e9 f7       	brne	.-6      	; 0x69ba <ESP8266_StartClientConnectionTCP+0xca>
    69c0:	bf 01       	movw	r22, r30
    69c2:	61 50       	subi	r22, 0x01	; 1
    69c4:	71 09       	sbc	r23, r1
    69c6:	6c 19       	sub	r22, r12
    69c8:	7d 09       	sbc	r23, r13
    69ca:	c6 01       	movw	r24, r12
    69cc:	5c d0       	rcall	.+184    	; 0x6a86 <ESP8266_LL_USARTSend>
		ESP8266_USARTSENDSTRING("\",");
    69ce:	62 e0       	ldi	r22, 0x02	; 2
    69d0:	70 e0       	ldi	r23, 0x00	; 0
    69d2:	8a e0       	ldi	r24, 0x0A	; 10
    69d4:	98 e2       	ldi	r25, 0x28	; 40
    69d6:	57 d0       	rcall	.+174    	; 0x6a86 <ESP8266_LL_USARTSend>
		ESP8266_USARTSENDSTRING(tmp);
    69d8:	f2 01       	movw	r30, r4
    69da:	01 90       	ld	r0, Z+
    69dc:	00 20       	and	r0, r0
    69de:	e9 f7       	brne	.-6      	; 0x69da <ESP8266_StartClientConnectionTCP+0xea>
    69e0:	bf 01       	movw	r22, r30
    69e2:	61 50       	subi	r22, 0x01	; 1
    69e4:	71 09       	sbc	r23, r1
    69e6:	64 19       	sub	r22, r4
    69e8:	75 09       	sbc	r23, r5
    69ea:	c2 01       	movw	r24, r4
    69ec:	4c d0       	rcall	.+152    	; 0x6a86 <ESP8266_LL_USARTSend>
		ESP8266_USARTSENDSTRING("\r\n");
    69ee:	62 e0       	ldi	r22, 0x02	; 2
    69f0:	70 e0       	ldi	r23, 0x00	; 0
    69f2:	85 ee       	ldi	r24, 0xE5	; 229
    69f4:	90 e2       	ldi	r25, 0x20	; 32
    69f6:	47 d0       	rcall	.+142    	; 0x6a86 <ESP8266_LL_USARTSend>
		
		/* Send command */
		if (SendCommand(ESP8266, ESP8266_COMMAND_CIPSTART, NULL, NULL) != ESP_OK) {
    69f8:	20 e0       	ldi	r18, 0x00	; 0
    69fa:	30 e0       	ldi	r19, 0x00	; 0
    69fc:	40 e0       	ldi	r20, 0x00	; 0
    69fe:	50 e0       	ldi	r21, 0x00	; 0
    6a00:	6a e0       	ldi	r22, 0x0A	; 10
    6a02:	c7 01       	movw	r24, r14
    6a04:	d7 db       	rcall	.-2130   	; 0x61b4 <SendCommand>
    6a06:	88 23       	and	r24, r24
    6a08:	19 f0       	breq	.+6      	; 0x6a10 <ESP8266_StartClientConnectionTCP+0x120>
			return ESP8266->Result;
    6a0a:	f5 01       	movw	r30, r10
    6a0c:	80 81       	ld	r24, Z
    6a0e:	24 c0       	rjmp	.+72     	; 0x6a58 <ESP8266_StartClientConnectionTCP+0x168>
		}
		
		/* Go back from ASCII number to real number */
		conn -= '0';
    6a10:	8f 81       	ldd	r24, Y+7	; 0x07
    6a12:	80 53       	subi	r24, 0x30	; 48
		
		/* We are active now as client */
		ESP8266->Connection[i].Active = 1;
    6a14:	f7 01       	movw	r30, r14
    6a16:	25 e2       	ldi	r18, 0x25	; 37
    6a18:	72 9e       	mul	r7, r18
    6a1a:	e0 0d       	add	r30, r0
    6a1c:	f1 1d       	adc	r31, r1
    6a1e:	11 24       	eor	r1, r1
    6a20:	91 e0       	ldi	r25, 0x01	; 1
    6a22:	92 8f       	std	Z+26, r25	; 0x1a
		ESP8266->Connection[i].Client = 1;
    6a24:	94 8f       	std	Z+28, r25	; 0x1c
		ESP8266->Connection[i].Type = ESP8266_ConnectionType_TCP;
    6a26:	13 a2       	std	Z+35, r1	; 0x23
		ESP8266->Connection[i].TotalBytesReceived = 0;
    6a28:	10 a6       	std	Z+40, r1	; 0x28
    6a2a:	11 a6       	std	Z+41, r1	; 0x29
    6a2c:	12 a6       	std	Z+42, r1	; 0x2a
    6a2e:	13 a6       	std	Z+43, r1	; 0x2b
		ESP8266->Connection[i].Number = conn;
    6a30:	83 8f       	std	Z+27, r24	; 0x1b
#if ESP8266_USE_SINGLE_CONNECTION_BUFFER == 1
		ESP8266->Connection[i].Data = ConnectionData;
    6a32:	84 e9       	ldi	r24, 0x94	; 148
    6a34:	9e e2       	ldi	r25, 0x2E	; 46
    6a36:	86 a7       	std	Z+46, r24	; 0x2e
    6a38:	97 a7       	std	Z+47, r25	; 0x2f
#endif
		ESP8266->StartConnectionSent = i;
    6a3a:	d7 01       	movw	r26, r14
    6a3c:	ae 5d       	subi	r26, 0xDE	; 222
    6a3e:	be 4f       	sbci	r27, 0xFE	; 254
    6a40:	7c 92       	st	X, r7
		
		/* Copy values */
		ESP8266->Connection[i].Name = (char *)name;
    6a42:	80 ae       	std	Z+56, r8	; 0x38
    6a44:	91 ae       	std	Z+57, r9	; 0x39
		ESP8266->Connection[i].UserParameters = user_parameters;
    6a46:	02 af       	std	Z+58, r16	; 0x3a
    6a48:	13 af       	std	Z+59, r17	; 0x3b
		
		/* Return OK */
		ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
    6a4a:	f5 01       	movw	r30, r10
    6a4c:	10 82       	st	Z, r1
    6a4e:	80 e0       	ldi	r24, 0x00	; 0
    6a50:	03 c0       	rjmp	.+6      	; 0x6a58 <ESP8266_StartClientConnectionTCP+0x168>
	}
	
	/* Return error */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_ERROR);
    6a52:	81 e0       	ldi	r24, 0x01	; 1
    6a54:	f9 01       	movw	r30, r18
    6a56:	80 83       	st	Z, r24
}
    6a58:	27 96       	adiw	r28, 0x07	; 7
    6a5a:	cd bf       	out	0x3d, r28	; 61
    6a5c:	de bf       	out	0x3e, r29	; 62
    6a5e:	df 91       	pop	r29
    6a60:	cf 91       	pop	r28
    6a62:	1f 91       	pop	r17
    6a64:	0f 91       	pop	r16
    6a66:	ff 90       	pop	r15
    6a68:	ef 90       	pop	r14
    6a6a:	df 90       	pop	r13
    6a6c:	cf 90       	pop	r12
    6a6e:	bf 90       	pop	r11
    6a70:	af 90       	pop	r10
    6a72:	9f 90       	pop	r9
    6a74:	8f 90       	pop	r8
    6a76:	7f 90       	pop	r7
    6a78:	5f 90       	pop	r5
    6a7a:	4f 90       	pop	r4
    6a7c:	08 95       	ret

00006a7e <ESP8266_LL_USARTInit>:
/**************************************************************************/
/**************************************************************************/

uint8_t ESP8266_LL_USARTInit(uint32_t baudrate) {
	/* Init USART */
	uart_setup();
    6a7e:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <uart_setup>
	
	/* Return 0 = Successful */
	return 0;
}
    6a82:	80 e0       	ldi	r24, 0x00	; 0
    6a84:	08 95       	ret

00006a86 <ESP8266_LL_USARTSend>:

uint8_t ESP8266_LL_USARTSend(uint8_t* data, uint16_t count) {
    6a86:	0f 93       	push	r16
    6a88:	1f 93       	push	r17
    6a8a:	cf 93       	push	r28
    6a8c:	df 93       	push	r29
    6a8e:	8b 01       	movw	r16, r22
    6a90:	ec 01       	movw	r28, r24
    6a92:	08 0f       	add	r16, r24
    6a94:	19 1f       	adc	r17, r25
	/* Send data via USART */
	while (count--) {
    6a96:	c0 17       	cp	r28, r16
    6a98:	d1 07       	cpc	r29, r17
    6a9a:	21 f0       	breq	.+8      	; 0x6aa4 <ESP8266_LL_USARTSend+0x1e>
		uart_put_char(*data++);
    6a9c:	89 91       	ld	r24, Y+
    6a9e:	0e 94 a1 1b 	call	0x3742	; 0x3742 <uart_put_char>
    6aa2:	f9 cf       	rjmp	.-14     	; 0x6a96 <ESP8266_LL_USARTSend+0x10>
	}
	
	/* Return 0 = Successful */
	return 0;
}
    6aa4:	80 e0       	ldi	r24, 0x00	; 0
    6aa6:	df 91       	pop	r29
    6aa8:	cf 91       	pop	r28
    6aaa:	1f 91       	pop	r17
    6aac:	0f 91       	pop	r16
    6aae:	08 95       	ret

00006ab0 <__vector_88>:

/* USART receive interrupt handler */
//void USART_RX_INTERRUPT_HANDLER_FUNCTION_NAME(void) 

ISR(USARTD0_RXC_vect) {
    6ab0:	1f 92       	push	r1
    6ab2:	0f 92       	push	r0
    6ab4:	0f b6       	in	r0, 0x3f	; 63
    6ab6:	0f 92       	push	r0
    6ab8:	11 24       	eor	r1, r1
    6aba:	08 b6       	in	r0, 0x38	; 56
    6abc:	0f 92       	push	r0
    6abe:	18 be       	out	0x38, r1	; 56
    6ac0:	09 b6       	in	r0, 0x39	; 57
    6ac2:	0f 92       	push	r0
    6ac4:	19 be       	out	0x39, r1	; 57
    6ac6:	0a b6       	in	r0, 0x3a	; 58
    6ac8:	0f 92       	push	r0
    6aca:	1a be       	out	0x3a, r1	; 58
    6acc:	0b b6       	in	r0, 0x3b	; 59
    6ace:	0f 92       	push	r0
    6ad0:	1b be       	out	0x3b, r1	; 59
    6ad2:	2f 93       	push	r18
    6ad4:	3f 93       	push	r19
    6ad6:	4f 93       	push	r20
    6ad8:	5f 93       	push	r21
    6ada:	6f 93       	push	r22
    6adc:	7f 93       	push	r23
    6ade:	8f 93       	push	r24
    6ae0:	9f 93       	push	r25
    6ae2:	af 93       	push	r26
    6ae4:	bf 93       	push	r27
    6ae6:	ef 93       	push	r30
    6ae8:	ff 93       	push	r31
    6aea:	cf 93       	push	r28
    6aec:	df 93       	push	r29
    6aee:	1f 92       	push	r1
    6af0:	cd b7       	in	r28, 0x3d	; 61
    6af2:	de b7       	in	r29, 0x3e	; 62
	uint8_t ch;
	/* Get character from USART */
	ch = USARTD0.DATA;
    6af4:	80 91 a0 09 	lds	r24, 0x09A0
    6af8:	89 83       	std	Y+1, r24	; 0x01
	
	/* Send received character to ESP stack */
	ESP8266_DataReceived(&ch, 1);
    6afa:	61 e0       	ldi	r22, 0x01	; 1
    6afc:	70 e0       	ldi	r23, 0x00	; 0
    6afe:	ce 01       	movw	r24, r28
    6b00:	01 96       	adiw	r24, 0x01	; 1
    6b02:	0e 94 db 28 	call	0x51b6	; 0x51b6 <ESP8266_DataReceived>
}
    6b06:	0f 90       	pop	r0
    6b08:	df 91       	pop	r29
    6b0a:	cf 91       	pop	r28
    6b0c:	ff 91       	pop	r31
    6b0e:	ef 91       	pop	r30
    6b10:	bf 91       	pop	r27
    6b12:	af 91       	pop	r26
    6b14:	9f 91       	pop	r25
    6b16:	8f 91       	pop	r24
    6b18:	7f 91       	pop	r23
    6b1a:	6f 91       	pop	r22
    6b1c:	5f 91       	pop	r21
    6b1e:	4f 91       	pop	r20
    6b20:	3f 91       	pop	r19
    6b22:	2f 91       	pop	r18
    6b24:	0f 90       	pop	r0
    6b26:	0b be       	out	0x3b, r0	; 59
    6b28:	0f 90       	pop	r0
    6b2a:	0a be       	out	0x3a, r0	; 58
    6b2c:	0f 90       	pop	r0
    6b2e:	09 be       	out	0x39, r0	; 57
    6b30:	0f 90       	pop	r0
    6b32:	08 be       	out	0x38, r0	; 56
    6b34:	0f 90       	pop	r0
    6b36:	0f be       	out	0x3f, r0	; 63
    6b38:	0f 90       	pop	r0
    6b3a:	1f 90       	pop	r1
    6b3c:	18 95       	reti

00006b3e <mem_cpy>:
		*tp = 0;
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    6b3e:	cf 93       	push	r28
    6b40:	df 93       	push	r29
    6b42:	db 01       	movw	r26, r22
    6b44:	fc 01       	movw	r30, r24
    6b46:	9a 01       	movw	r18, r20
    6b48:	22 30       	cpi	r18, 0x02	; 2
    6b4a:	31 05       	cpc	r19, r1
    6b4c:	38 f0       	brcs	.+14     	; 0x6b5c <mem_cpy+0x1e>
    6b4e:	cd 91       	ld	r28, X+
    6b50:	dd 91       	ld	r29, X+
    6b52:	c1 93       	st	Z+, r28
    6b54:	d1 93       	st	Z+, r29
    6b56:	22 50       	subi	r18, 0x02	; 2
    6b58:	31 09       	sbc	r19, r1
    6b5a:	f6 cf       	rjmp	.-20     	; 0x6b48 <mem_cpy+0xa>
    6b5c:	da 01       	movw	r26, r20
    6b5e:	ae 7f       	andi	r26, 0xFE	; 254
    6b60:	fb 01       	movw	r30, r22
    6b62:	ea 0f       	add	r30, r26
    6b64:	fb 1f       	adc	r31, r27
    6b66:	a8 0f       	add	r26, r24
    6b68:	b9 1f       	adc	r27, r25
    6b6a:	41 70       	andi	r20, 0x01	; 1
    6b6c:	55 27       	eor	r21, r21
    6b6e:	4e 0f       	add	r20, r30
    6b70:	5f 1f       	adc	r21, r31
    6b72:	e4 17       	cp	r30, r20
    6b74:	f5 07       	cpc	r31, r21
    6b76:	19 f0       	breq	.+6      	; 0x6b7e <mem_cpy+0x40>
    6b78:	81 91       	ld	r24, Z+
    6b7a:	8d 93       	st	X+, r24
    6b7c:	fa cf       	rjmp	.-12     	; 0x6b72 <mem_cpy+0x34>
    6b7e:	df 91       	pop	r29
    6b80:	cf 91       	pop	r28
    6b82:	08 95       	ret

00006b84 <mem_set>:
    6b84:	48 0f       	add	r20, r24
    6b86:	59 1f       	adc	r21, r25
    6b88:	84 17       	cp	r24, r20
    6b8a:	95 07       	cpc	r25, r21
    6b8c:	21 f0       	breq	.+8      	; 0x6b96 <mem_set+0x12>
    6b8e:	fc 01       	movw	r30, r24
    6b90:	61 93       	st	Z+, r22
    6b92:	cf 01       	movw	r24, r30
    6b94:	f9 cf       	rjmp	.-14     	; 0x6b88 <mem_set+0x4>
    6b96:	08 95       	ret

00006b98 <get_ldnumber>:
    6b98:	dc 01       	movw	r26, r24
    6b9a:	2d 91       	ld	r18, X+
    6b9c:	3c 91       	ld	r19, X
    6b9e:	11 97       	sbiw	r26, 0x01	; 1
    6ba0:	21 15       	cp	r18, r1
    6ba2:	31 05       	cpc	r19, r1
    6ba4:	b9 f0       	breq	.+46     	; 0x6bd4 <get_ldnumber+0x3c>
    6ba6:	f9 01       	movw	r30, r18
    6ba8:	af 01       	movw	r20, r30
    6baa:	81 91       	ld	r24, Z+
    6bac:	81 32       	cpi	r24, 0x21	; 33
    6bae:	a8 f0       	brcs	.+42     	; 0x6bda <get_ldnumber+0x42>
    6bb0:	8a 33       	cpi	r24, 0x3A	; 58
    6bb2:	d1 f7       	brne	.-12     	; 0x6ba8 <get_ldnumber+0x10>
    6bb4:	f9 01       	movw	r30, r18
    6bb6:	81 91       	ld	r24, Z+
    6bb8:	4e 17       	cp	r20, r30
    6bba:	5f 07       	cpc	r21, r31
    6bbc:	59 f4       	brne	.+22     	; 0x6bd4 <get_ldnumber+0x3c>
    6bbe:	90 ed       	ldi	r25, 0xD0	; 208
    6bc0:	98 0f       	add	r25, r24
    6bc2:	92 30       	cpi	r25, 0x02	; 2
    6bc4:	38 f4       	brcc	.+14     	; 0x6bd4 <get_ldnumber+0x3c>
    6bc6:	90 e0       	ldi	r25, 0x00	; 0
    6bc8:	c0 97       	sbiw	r24, 0x30	; 48
    6bca:	2e 5f       	subi	r18, 0xFE	; 254
    6bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    6bce:	2d 93       	st	X+, r18
    6bd0:	3c 93       	st	X, r19
    6bd2:	08 95       	ret
    6bd4:	8f ef       	ldi	r24, 0xFF	; 255
    6bd6:	9f ef       	ldi	r25, 0xFF	; 255
    6bd8:	08 95       	ret
    6bda:	80 91 6c 3a 	lds	r24, 0x3A6C
    6bde:	90 e0       	ldi	r25, 0x00	; 0
    6be0:	08 95       	ret

00006be2 <validate>:
    6be2:	00 97       	sbiw	r24, 0x00	; 0
    6be4:	c9 f0       	breq	.+50     	; 0x6c18 <validate+0x36>
    6be6:	dc 01       	movw	r26, r24
    6be8:	ed 91       	ld	r30, X+
    6bea:	fc 91       	ld	r31, X
    6bec:	11 97       	sbiw	r26, 0x01	; 1
    6bee:	30 97       	sbiw	r30, 0x00	; 0
    6bf0:	99 f0       	breq	.+38     	; 0x6c18 <validate+0x36>
    6bf2:	20 81       	ld	r18, Z
    6bf4:	22 23       	and	r18, r18
    6bf6:	81 f0       	breq	.+32     	; 0x6c18 <validate+0x36>
    6bf8:	26 81       	ldd	r18, Z+6	; 0x06
    6bfa:	37 81       	ldd	r19, Z+7	; 0x07
    6bfc:	12 96       	adiw	r26, 0x02	; 2
    6bfe:	8d 91       	ld	r24, X+
    6c00:	9c 91       	ld	r25, X
    6c02:	13 97       	sbiw	r26, 0x03	; 3
    6c04:	28 17       	cp	r18, r24
    6c06:	39 07       	cpc	r19, r25
    6c08:	39 f4       	brne	.+14     	; 0x6c18 <validate+0x36>
    6c0a:	81 81       	ldd	r24, Z+1	; 0x01
    6c0c:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <disk_status>
    6c10:	80 fd       	sbrc	r24, 0
    6c12:	02 c0       	rjmp	.+4      	; 0x6c18 <validate+0x36>
    6c14:	80 e0       	ldi	r24, 0x00	; 0
    6c16:	08 95       	ret
    6c18:	89 e0       	ldi	r24, 0x09	; 9
    6c1a:	08 95       	ret

00006c1c <sync_window>:
    6c1c:	4f 92       	push	r4
    6c1e:	5f 92       	push	r5
    6c20:	6f 92       	push	r6
    6c22:	7f 92       	push	r7
    6c24:	af 92       	push	r10
    6c26:	bf 92       	push	r11
    6c28:	cf 92       	push	r12
    6c2a:	df 92       	push	r13
    6c2c:	ef 92       	push	r14
    6c2e:	ff 92       	push	r15
    6c30:	0f 93       	push	r16
    6c32:	1f 93       	push	r17
    6c34:	cf 93       	push	r28
    6c36:	df 93       	push	r29
    6c38:	ec 01       	movw	r28, r24
    6c3a:	8c 81       	ldd	r24, Y+4	; 0x04
    6c3c:	88 23       	and	r24, r24
    6c3e:	09 f4       	brne	.+2      	; 0x6c42 <sync_window+0x26>
    6c40:	45 c0       	rjmp	.+138    	; 0x6ccc <sync_window+0xb0>
    6c42:	4e a4       	ldd	r4, Y+46	; 0x2e
    6c44:	5f a4       	ldd	r5, Y+47	; 0x2f
    6c46:	68 a8       	ldd	r6, Y+48	; 0x30
    6c48:	79 a8       	ldd	r7, Y+49	; 0x31
    6c4a:	6e 01       	movw	r12, r28
    6c4c:	82 e3       	ldi	r24, 0x32	; 50
    6c4e:	c8 0e       	add	r12, r24
    6c50:	d1 1c       	adc	r13, r1
    6c52:	01 e0       	ldi	r16, 0x01	; 1
    6c54:	10 e0       	ldi	r17, 0x00	; 0
    6c56:	a3 01       	movw	r20, r6
    6c58:	92 01       	movw	r18, r4
    6c5a:	b6 01       	movw	r22, r12
    6c5c:	89 81       	ldd	r24, Y+1	; 0x01
    6c5e:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <disk_write>
    6c62:	81 11       	cpse	r24, r1
    6c64:	31 c0       	rjmp	.+98     	; 0x6cc8 <sync_window+0xac>
    6c66:	1c 82       	std	Y+4, r1	; 0x04
    6c68:	8a a1       	ldd	r24, Y+34	; 0x22
    6c6a:	9b a1       	ldd	r25, Y+35	; 0x23
    6c6c:	ac a1       	ldd	r26, Y+36	; 0x24
    6c6e:	bd a1       	ldd	r27, Y+37	; 0x25
    6c70:	b3 01       	movw	r22, r6
    6c72:	a2 01       	movw	r20, r4
    6c74:	48 1b       	sub	r20, r24
    6c76:	59 0b       	sbc	r21, r25
    6c78:	6a 0b       	sbc	r22, r26
    6c7a:	7b 0b       	sbc	r23, r27
    6c7c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6c7e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6c80:	ac 8d       	ldd	r26, Y+28	; 0x1c
    6c82:	bd 8d       	ldd	r27, Y+29	; 0x1d
    6c84:	48 17       	cp	r20, r24
    6c86:	59 07       	cpc	r21, r25
    6c88:	6a 07       	cpc	r22, r26
    6c8a:	7b 07       	cpc	r23, r27
    6c8c:	f8 f4       	brcc	.+62     	; 0x6ccc <sync_window+0xb0>
    6c8e:	ab 80       	ldd	r10, Y+3	; 0x03
    6c90:	b1 2c       	mov	r11, r1
    6c92:	e1 2c       	mov	r14, r1
    6c94:	f1 2c       	mov	r15, r1
    6c96:	c5 01       	movw	r24, r10
    6c98:	8e 19       	sub	r24, r14
    6c9a:	9f 09       	sbc	r25, r15
    6c9c:	02 97       	sbiw	r24, 0x02	; 2
    6c9e:	b0 f0       	brcs	.+44     	; 0x6ccc <sync_window+0xb0>
    6ca0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6ca2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6ca4:	ac 8d       	ldd	r26, Y+28	; 0x1c
    6ca6:	bd 8d       	ldd	r27, Y+29	; 0x1d
    6ca8:	48 0e       	add	r4, r24
    6caa:	59 1e       	adc	r5, r25
    6cac:	6a 1e       	adc	r6, r26
    6cae:	7b 1e       	adc	r7, r27
    6cb0:	01 e0       	ldi	r16, 0x01	; 1
    6cb2:	10 e0       	ldi	r17, 0x00	; 0
    6cb4:	a3 01       	movw	r20, r6
    6cb6:	92 01       	movw	r18, r4
    6cb8:	b6 01       	movw	r22, r12
    6cba:	89 81       	ldd	r24, Y+1	; 0x01
    6cbc:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <disk_write>
    6cc0:	8f ef       	ldi	r24, 0xFF	; 255
    6cc2:	e8 1a       	sub	r14, r24
    6cc4:	f8 0a       	sbc	r15, r24
    6cc6:	e7 cf       	rjmp	.-50     	; 0x6c96 <sync_window+0x7a>
    6cc8:	81 e0       	ldi	r24, 0x01	; 1
    6cca:	01 c0       	rjmp	.+2      	; 0x6cce <sync_window+0xb2>
    6ccc:	80 e0       	ldi	r24, 0x00	; 0
    6cce:	df 91       	pop	r29
    6cd0:	cf 91       	pop	r28
    6cd2:	1f 91       	pop	r17
    6cd4:	0f 91       	pop	r16
    6cd6:	ff 90       	pop	r15
    6cd8:	ef 90       	pop	r14
    6cda:	df 90       	pop	r13
    6cdc:	cf 90       	pop	r12
    6cde:	bf 90       	pop	r11
    6ce0:	af 90       	pop	r10
    6ce2:	7f 90       	pop	r7
    6ce4:	6f 90       	pop	r6
    6ce6:	5f 90       	pop	r5
    6ce8:	4f 90       	pop	r4
    6cea:	08 95       	ret

00006cec <sync_fs>:
    6cec:	ef 92       	push	r14
    6cee:	ff 92       	push	r15
    6cf0:	0f 93       	push	r16
    6cf2:	1f 93       	push	r17
    6cf4:	cf 93       	push	r28
    6cf6:	df 93       	push	r29
    6cf8:	ec 01       	movw	r28, r24
    6cfa:	90 df       	rcall	.-224    	; 0x6c1c <sync_window>
    6cfc:	98 2f       	mov	r25, r24
    6cfe:	81 11       	cpse	r24, r1
    6d00:	59 c0       	rjmp	.+178    	; 0x6db4 <sync_fs+0xc8>
    6d02:	88 81       	ld	r24, Y
    6d04:	83 30       	cpi	r24, 0x03	; 3
    6d06:	09 f0       	breq	.+2      	; 0x6d0a <sync_fs+0x1e>
    6d08:	4b c0       	rjmp	.+150    	; 0x6da0 <sync_fs+0xb4>
    6d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    6d0c:	81 30       	cpi	r24, 0x01	; 1
    6d0e:	09 f0       	breq	.+2      	; 0x6d12 <sync_fs+0x26>
    6d10:	47 c0       	rjmp	.+142    	; 0x6da0 <sync_fs+0xb4>
    6d12:	40 e0       	ldi	r20, 0x00	; 0
    6d14:	52 e0       	ldi	r21, 0x02	; 2
    6d16:	60 e0       	ldi	r22, 0x00	; 0
    6d18:	70 e0       	ldi	r23, 0x00	; 0
    6d1a:	7e 01       	movw	r14, r28
    6d1c:	82 e3       	ldi	r24, 0x32	; 50
    6d1e:	e8 0e       	add	r14, r24
    6d20:	f1 1c       	adc	r15, r1
    6d22:	c7 01       	movw	r24, r14
    6d24:	2f df       	rcall	.-418    	; 0x6b84 <mem_set>
    6d26:	85 e5       	ldi	r24, 0x55	; 85
    6d28:	9a ea       	ldi	r25, 0xAA	; 170
    6d2a:	fe 01       	movw	r30, r28
    6d2c:	e0 5d       	subi	r30, 0xD0	; 208
    6d2e:	fd 4f       	sbci	r31, 0xFD	; 253
    6d30:	80 83       	st	Z, r24
    6d32:	91 83       	std	Z+1, r25	; 0x01
    6d34:	82 e5       	ldi	r24, 0x52	; 82
    6d36:	92 e5       	ldi	r25, 0x52	; 82
    6d38:	a1 e6       	ldi	r26, 0x61	; 97
    6d3a:	b1 e4       	ldi	r27, 0x41	; 65
    6d3c:	8a ab       	std	Y+50, r24	; 0x32
    6d3e:	9b ab       	std	Y+51, r25	; 0x33
    6d40:	ac ab       	std	Y+52, r26	; 0x34
    6d42:	bd ab       	std	Y+53, r27	; 0x35
    6d44:	82 e7       	ldi	r24, 0x72	; 114
    6d46:	92 e7       	ldi	r25, 0x72	; 114
    6d48:	a1 e4       	ldi	r26, 0x41	; 65
    6d4a:	b1 e6       	ldi	r27, 0x61	; 97
    6d4c:	7a 97       	sbiw	r30, 0x1a	; 26
    6d4e:	80 83       	st	Z, r24
    6d50:	91 83       	std	Z+1, r25	; 0x01
    6d52:	a2 83       	std	Z+2, r26	; 0x02
    6d54:	b3 83       	std	Z+3, r27	; 0x03
    6d56:	8e 85       	ldd	r24, Y+14	; 0x0e
    6d58:	9f 85       	ldd	r25, Y+15	; 0x0f
    6d5a:	a8 89       	ldd	r26, Y+16	; 0x10
    6d5c:	b9 89       	ldd	r27, Y+17	; 0x11
    6d5e:	34 96       	adiw	r30, 0x04	; 4
    6d60:	80 83       	st	Z, r24
    6d62:	91 83       	std	Z+1, r25	; 0x01
    6d64:	a2 83       	std	Z+2, r26	; 0x02
    6d66:	b3 83       	std	Z+3, r27	; 0x03
    6d68:	8a 85       	ldd	r24, Y+10	; 0x0a
    6d6a:	9b 85       	ldd	r25, Y+11	; 0x0b
    6d6c:	ac 85       	ldd	r26, Y+12	; 0x0c
    6d6e:	bd 85       	ldd	r27, Y+13	; 0x0d
    6d70:	34 96       	adiw	r30, 0x04	; 4
    6d72:	80 83       	st	Z, r24
    6d74:	91 83       	std	Z+1, r25	; 0x01
    6d76:	a2 83       	std	Z+2, r26	; 0x02
    6d78:	b3 83       	std	Z+3, r27	; 0x03
    6d7a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    6d7c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    6d7e:	48 a1       	ldd	r20, Y+32	; 0x20
    6d80:	59 a1       	ldd	r21, Y+33	; 0x21
    6d82:	2f 5f       	subi	r18, 0xFF	; 255
    6d84:	3f 4f       	sbci	r19, 0xFF	; 255
    6d86:	4f 4f       	sbci	r20, 0xFF	; 255
    6d88:	5f 4f       	sbci	r21, 0xFF	; 255
    6d8a:	2e a7       	std	Y+46, r18	; 0x2e
    6d8c:	3f a7       	std	Y+47, r19	; 0x2f
    6d8e:	48 ab       	std	Y+48, r20	; 0x30
    6d90:	59 ab       	std	Y+49, r21	; 0x31
    6d92:	01 e0       	ldi	r16, 0x01	; 1
    6d94:	10 e0       	ldi	r17, 0x00	; 0
    6d96:	b7 01       	movw	r22, r14
    6d98:	89 81       	ldd	r24, Y+1	; 0x01
    6d9a:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <disk_write>
    6d9e:	1d 82       	std	Y+5, r1	; 0x05
    6da0:	40 e0       	ldi	r20, 0x00	; 0
    6da2:	50 e0       	ldi	r21, 0x00	; 0
    6da4:	60 e0       	ldi	r22, 0x00	; 0
    6da6:	89 81       	ldd	r24, Y+1	; 0x01
    6da8:	0e 94 7f 47 	call	0x8efe	; 0x8efe <disk_ioctl>
    6dac:	91 e0       	ldi	r25, 0x01	; 1
    6dae:	81 11       	cpse	r24, r1
    6db0:	01 c0       	rjmp	.+2      	; 0x6db4 <sync_fs+0xc8>
    6db2:	90 e0       	ldi	r25, 0x00	; 0
    6db4:	89 2f       	mov	r24, r25
    6db6:	df 91       	pop	r29
    6db8:	cf 91       	pop	r28
    6dba:	1f 91       	pop	r17
    6dbc:	0f 91       	pop	r16
    6dbe:	ff 90       	pop	r15
    6dc0:	ef 90       	pop	r14
    6dc2:	08 95       	ret

00006dc4 <move_window>:
    6dc4:	bf 92       	push	r11
    6dc6:	cf 92       	push	r12
    6dc8:	df 92       	push	r13
    6dca:	ef 92       	push	r14
    6dcc:	ff 92       	push	r15
    6dce:	0f 93       	push	r16
    6dd0:	1f 93       	push	r17
    6dd2:	cf 93       	push	r28
    6dd4:	df 93       	push	r29
    6dd6:	ec 01       	movw	r28, r24
    6dd8:	6a 01       	movw	r12, r20
    6dda:	7b 01       	movw	r14, r22
    6ddc:	8e a5       	ldd	r24, Y+46	; 0x2e
    6dde:	9f a5       	ldd	r25, Y+47	; 0x2f
    6de0:	a8 a9       	ldd	r26, Y+48	; 0x30
    6de2:	b9 a9       	ldd	r27, Y+49	; 0x31
    6de4:	48 17       	cp	r20, r24
    6de6:	59 07       	cpc	r21, r25
    6de8:	6a 07       	cpc	r22, r26
    6dea:	7b 07       	cpc	r23, r27
    6dec:	e1 f0       	breq	.+56     	; 0x6e26 <move_window+0x62>
    6dee:	ce 01       	movw	r24, r28
    6df0:	15 df       	rcall	.-470    	; 0x6c1c <sync_window>
    6df2:	b8 2e       	mov	r11, r24
    6df4:	81 11       	cpse	r24, r1
    6df6:	18 c0       	rjmp	.+48     	; 0x6e28 <move_window+0x64>
    6df8:	01 e0       	ldi	r16, 0x01	; 1
    6dfa:	10 e0       	ldi	r17, 0x00	; 0
    6dfc:	a7 01       	movw	r20, r14
    6dfe:	96 01       	movw	r18, r12
    6e00:	be 01       	movw	r22, r28
    6e02:	6e 5c       	subi	r22, 0xCE	; 206
    6e04:	7f 4f       	sbci	r23, 0xFF	; 255
    6e06:	89 81       	ldd	r24, Y+1	; 0x01
    6e08:	0e 94 c0 46 	call	0x8d80	; 0x8d80 <disk_read>
    6e0c:	88 23       	and	r24, r24
    6e0e:	31 f0       	breq	.+12     	; 0x6e1c <move_window+0x58>
    6e10:	bb 24       	eor	r11, r11
    6e12:	b3 94       	inc	r11
    6e14:	cc 24       	eor	r12, r12
    6e16:	ca 94       	dec	r12
    6e18:	dc 2c       	mov	r13, r12
    6e1a:	76 01       	movw	r14, r12
    6e1c:	ce a6       	std	Y+46, r12	; 0x2e
    6e1e:	df a6       	std	Y+47, r13	; 0x2f
    6e20:	e8 aa       	std	Y+48, r14	; 0x30
    6e22:	f9 aa       	std	Y+49, r15	; 0x31
    6e24:	01 c0       	rjmp	.+2      	; 0x6e28 <move_window+0x64>
    6e26:	b1 2c       	mov	r11, r1
    6e28:	8b 2d       	mov	r24, r11
    6e2a:	df 91       	pop	r29
    6e2c:	cf 91       	pop	r28
    6e2e:	1f 91       	pop	r17
    6e30:	0f 91       	pop	r16
    6e32:	ff 90       	pop	r15
    6e34:	ef 90       	pop	r14
    6e36:	df 90       	pop	r13
    6e38:	cf 90       	pop	r12
    6e3a:	bf 90       	pop	r11
    6e3c:	08 95       	ret

00006e3e <check_fs>:
    6e3e:	0f 93       	push	r16
    6e40:	1f 93       	push	r17
    6e42:	cf 93       	push	r28
    6e44:	df 93       	push	r29
    6e46:	ec 01       	movw	r28, r24
    6e48:	1c 82       	std	Y+4, r1	; 0x04
    6e4a:	0f ef       	ldi	r16, 0xFF	; 255
    6e4c:	1f ef       	ldi	r17, 0xFF	; 255
    6e4e:	98 01       	movw	r18, r16
    6e50:	0e a7       	std	Y+46, r16	; 0x2e
    6e52:	1f a7       	std	Y+47, r17	; 0x2f
    6e54:	28 ab       	std	Y+48, r18	; 0x30
    6e56:	39 ab       	std	Y+49, r19	; 0x31
    6e58:	b5 df       	rcall	.-150    	; 0x6dc4 <move_window>
    6e5a:	81 11       	cpse	r24, r1
    6e5c:	22 c0       	rjmp	.+68     	; 0x6ea2 <check_fs+0x64>
    6e5e:	fe 01       	movw	r30, r28
    6e60:	e0 5d       	subi	r30, 0xD0	; 208
    6e62:	fd 4f       	sbci	r31, 0xFD	; 253
    6e64:	80 81       	ld	r24, Z
    6e66:	91 81       	ldd	r25, Z+1	; 0x01
    6e68:	85 35       	cpi	r24, 0x55	; 85
    6e6a:	9a 4a       	sbci	r25, 0xAA	; 170
    6e6c:	e1 f4       	brne	.+56     	; 0x6ea6 <check_fs+0x68>
    6e6e:	e8 5c       	subi	r30, 0xC8	; 200
    6e70:	f1 40       	sbci	r31, 0x01	; 1
    6e72:	40 81       	ld	r20, Z
    6e74:	51 81       	ldd	r21, Z+1	; 0x01
    6e76:	62 81       	ldd	r22, Z+2	; 0x02
    6e78:	73 81       	ldd	r23, Z+3	; 0x03
    6e7a:	77 27       	eor	r23, r23
    6e7c:	46 34       	cpi	r20, 0x46	; 70
    6e7e:	51 44       	sbci	r21, 0x41	; 65
    6e80:	64 45       	sbci	r22, 0x54	; 84
    6e82:	71 05       	cpc	r23, r1
    6e84:	91 f0       	breq	.+36     	; 0x6eaa <check_fs+0x6c>
    6e86:	cc 57       	subi	r28, 0x7C	; 124
    6e88:	df 4f       	sbci	r29, 0xFF	; 255
    6e8a:	48 81       	ld	r20, Y
    6e8c:	59 81       	ldd	r21, Y+1	; 0x01
    6e8e:	6a 81       	ldd	r22, Y+2	; 0x02
    6e90:	7b 81       	ldd	r23, Y+3	; 0x03
    6e92:	77 27       	eor	r23, r23
    6e94:	81 e0       	ldi	r24, 0x01	; 1
    6e96:	46 34       	cpi	r20, 0x46	; 70
    6e98:	51 44       	sbci	r21, 0x41	; 65
    6e9a:	64 45       	sbci	r22, 0x54	; 84
    6e9c:	71 05       	cpc	r23, r1
    6e9e:	31 f4       	brne	.+12     	; 0x6eac <check_fs+0x6e>
    6ea0:	04 c0       	rjmp	.+8      	; 0x6eaa <check_fs+0x6c>
    6ea2:	83 e0       	ldi	r24, 0x03	; 3
    6ea4:	03 c0       	rjmp	.+6      	; 0x6eac <check_fs+0x6e>
    6ea6:	82 e0       	ldi	r24, 0x02	; 2
    6ea8:	01 c0       	rjmp	.+2      	; 0x6eac <check_fs+0x6e>
    6eaa:	80 e0       	ldi	r24, 0x00	; 0
    6eac:	df 91       	pop	r29
    6eae:	cf 91       	pop	r28
    6eb0:	1f 91       	pop	r17
    6eb2:	0f 91       	pop	r16
    6eb4:	08 95       	ret

00006eb6 <find_volume>:
    6eb6:	2f 92       	push	r2
    6eb8:	3f 92       	push	r3
    6eba:	4f 92       	push	r4
    6ebc:	5f 92       	push	r5
    6ebe:	6f 92       	push	r6
    6ec0:	7f 92       	push	r7
    6ec2:	8f 92       	push	r8
    6ec4:	9f 92       	push	r9
    6ec6:	af 92       	push	r10
    6ec8:	bf 92       	push	r11
    6eca:	cf 92       	push	r12
    6ecc:	df 92       	push	r13
    6ece:	ef 92       	push	r14
    6ed0:	ff 92       	push	r15
    6ed2:	0f 93       	push	r16
    6ed4:	1f 93       	push	r17
    6ed6:	cf 93       	push	r28
    6ed8:	df 93       	push	r29
    6eda:	cd b7       	in	r28, 0x3d	; 61
    6edc:	de b7       	in	r29, 0x3e	; 62
    6ede:	6d 97       	sbiw	r28, 0x1d	; 29
    6ee0:	cd bf       	out	0x3d, r28	; 61
    6ee2:	de bf       	out	0x3e, r29	; 62
    6ee4:	6c 01       	movw	r12, r24
    6ee6:	cb 01       	movw	r24, r22
    6ee8:	b4 2e       	mov	r11, r20
    6eea:	d6 01       	movw	r26, r12
    6eec:	1d 92       	st	X+, r1
    6eee:	1c 92       	st	X, r1
    6ef0:	53 de       	rcall	.-858    	; 0x6b98 <get_ldnumber>
    6ef2:	7c 01       	movw	r14, r24
    6ef4:	97 fd       	sbrc	r25, 7
    6ef6:	23 c2       	rjmp	.+1094   	; 0x733e <find_volume+0x488>
    6ef8:	fc 01       	movw	r30, r24
    6efa:	ee 0f       	add	r30, r30
    6efc:	ff 1f       	adc	r31, r31
    6efe:	e1 59       	subi	r30, 0x91	; 145
    6f00:	f5 4c       	sbci	r31, 0xC5	; 197
    6f02:	00 81       	ld	r16, Z
    6f04:	11 81       	ldd	r17, Z+1	; 0x01
    6f06:	01 15       	cp	r16, r1
    6f08:	11 05       	cpc	r17, r1
    6f0a:	09 f4       	brne	.+2      	; 0x6f0e <find_volume+0x58>
    6f0c:	1a c2       	rjmp	.+1076   	; 0x7342 <find_volume+0x48c>
    6f0e:	f6 01       	movw	r30, r12
    6f10:	00 83       	st	Z, r16
    6f12:	11 83       	std	Z+1, r17	; 0x01
    6f14:	d8 01       	movw	r26, r16
    6f16:	8c 91       	ld	r24, X
    6f18:	88 23       	and	r24, r24
    6f1a:	61 f0       	breq	.+24     	; 0x6f34 <find_volume+0x7e>
    6f1c:	11 96       	adiw	r26, 0x01	; 1
    6f1e:	8c 91       	ld	r24, X
    6f20:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <disk_status>
    6f24:	80 fd       	sbrc	r24, 0
    6f26:	06 c0       	rjmp	.+12     	; 0x6f34 <find_volume+0x7e>
    6f28:	bb 20       	and	r11, r11
    6f2a:	09 f4       	brne	.+2      	; 0x6f2e <find_volume+0x78>
    6f2c:	0c c2       	rjmp	.+1048   	; 0x7346 <find_volume+0x490>
    6f2e:	82 fd       	sbrc	r24, 2
    6f30:	0e c2       	rjmp	.+1052   	; 0x734e <find_volume+0x498>
    6f32:	09 c2       	rjmp	.+1042   	; 0x7346 <find_volume+0x490>
    6f34:	f8 01       	movw	r30, r16
    6f36:	10 82       	st	Z, r1
    6f38:	e1 82       	std	Z+1, r14	; 0x01
    6f3a:	8e 2d       	mov	r24, r14
    6f3c:	0e 94 d3 45 	call	0x8ba6	; 0x8ba6 <disk_initialize>
    6f40:	80 fd       	sbrc	r24, 0
    6f42:	03 c2       	rjmp	.+1030   	; 0x734a <find_volume+0x494>
    6f44:	bb 20       	and	r11, r11
    6f46:	11 f0       	breq	.+4      	; 0x6f4c <find_volume+0x96>
    6f48:	82 fd       	sbrc	r24, 2
    6f4a:	01 c2       	rjmp	.+1026   	; 0x734e <find_volume+0x498>
    6f4c:	40 e0       	ldi	r20, 0x00	; 0
    6f4e:	50 e0       	ldi	r21, 0x00	; 0
    6f50:	ba 01       	movw	r22, r20
    6f52:	c8 01       	movw	r24, r16
    6f54:	74 df       	rcall	.-280    	; 0x6e3e <check_fs>
    6f56:	81 30       	cpi	r24, 0x01	; 1
    6f58:	09 f0       	breq	.+2      	; 0x6f5c <find_volume+0xa6>
    6f5a:	3f c0       	rjmp	.+126    	; 0x6fda <find_volume+0x124>
    6f5c:	fe 01       	movw	r30, r28
    6f5e:	31 96       	adiw	r30, 0x01	; 1
    6f60:	20 e0       	ldi	r18, 0x00	; 0
    6f62:	30 e0       	ldi	r19, 0x00	; 0
    6f64:	c8 01       	movw	r24, r16
    6f66:	82 0f       	add	r24, r18
    6f68:	93 1f       	adc	r25, r19
    6f6a:	dc 01       	movw	r26, r24
    6f6c:	ac 50       	subi	r26, 0x0C	; 12
    6f6e:	be 4f       	sbci	r27, 0xFE	; 254
    6f70:	4c 91       	ld	r20, X
    6f72:	44 23       	and	r20, r20
    6f74:	39 f0       	breq	.+14     	; 0x6f84 <find_volume+0xce>
    6f76:	14 96       	adiw	r26, 0x04	; 4
    6f78:	8d 91       	ld	r24, X+
    6f7a:	9d 91       	ld	r25, X+
    6f7c:	0d 90       	ld	r0, X+
    6f7e:	bc 91       	ld	r27, X
    6f80:	a0 2d       	mov	r26, r0
    6f82:	03 c0       	rjmp	.+6      	; 0x6f8a <find_volume+0xd4>
    6f84:	80 e0       	ldi	r24, 0x00	; 0
    6f86:	90 e0       	ldi	r25, 0x00	; 0
    6f88:	dc 01       	movw	r26, r24
    6f8a:	81 93       	st	Z+, r24
    6f8c:	91 93       	st	Z+, r25
    6f8e:	a1 93       	st	Z+, r26
    6f90:	b1 93       	st	Z+, r27
    6f92:	20 5f       	subi	r18, 0xF0	; 240
    6f94:	3f 4f       	sbci	r19, 0xFF	; 255
    6f96:	20 34       	cpi	r18, 0x40	; 64
    6f98:	31 05       	cpc	r19, r1
    6f9a:	21 f7       	brne	.-56     	; 0x6f64 <find_volume+0xae>
    6f9c:	6e 01       	movw	r12, r28
    6f9e:	f1 e1       	ldi	r31, 0x11	; 17
    6fa0:	cf 0e       	add	r12, r31
    6fa2:	d1 1c       	adc	r13, r1
    6fa4:	9e 01       	movw	r18, r28
    6fa6:	2f 5f       	subi	r18, 0xFF	; 255
    6fa8:	3f 4f       	sbci	r19, 0xFF	; 255
    6faa:	79 01       	movw	r14, r18
    6fac:	d7 01       	movw	r26, r14
    6fae:	4d 90       	ld	r4, X+
    6fb0:	5d 90       	ld	r5, X+
    6fb2:	6d 90       	ld	r6, X+
    6fb4:	7d 90       	ld	r7, X+
    6fb6:	7d 01       	movw	r14, r26
    6fb8:	41 14       	cp	r4, r1
    6fba:	51 04       	cpc	r5, r1
    6fbc:	61 04       	cpc	r6, r1
    6fbe:	71 04       	cpc	r7, r1
    6fc0:	39 f0       	breq	.+14     	; 0x6fd0 <find_volume+0x11a>
    6fc2:	b3 01       	movw	r22, r6
    6fc4:	a2 01       	movw	r20, r4
    6fc6:	c8 01       	movw	r24, r16
    6fc8:	3a df       	rcall	.-396    	; 0x6e3e <check_fs>
    6fca:	81 11       	cpse	r24, r1
    6fcc:	02 c0       	rjmp	.+4      	; 0x6fd2 <find_volume+0x11c>
    6fce:	0f c0       	rjmp	.+30     	; 0x6fee <find_volume+0x138>
    6fd0:	82 e0       	ldi	r24, 0x02	; 2
    6fd2:	ec 14       	cp	r14, r12
    6fd4:	fd 04       	cpc	r15, r13
    6fd6:	51 f7       	brne	.-44     	; 0x6fac <find_volume+0xf6>
    6fd8:	03 c0       	rjmp	.+6      	; 0x6fe0 <find_volume+0x12a>
    6fda:	41 2c       	mov	r4, r1
    6fdc:	51 2c       	mov	r5, r1
    6fde:	32 01       	movw	r6, r4
    6fe0:	83 30       	cpi	r24, 0x03	; 3
    6fe2:	09 f4       	brne	.+2      	; 0x6fe6 <find_volume+0x130>
    6fe4:	b6 c1       	rjmp	.+876    	; 0x7352 <find_volume+0x49c>
    6fe6:	88 23       	and	r24, r24
    6fe8:	11 f0       	breq	.+4      	; 0x6fee <find_volume+0x138>
    6fea:	8d e0       	ldi	r24, 0x0D	; 13
    6fec:	b3 c1       	rjmp	.+870    	; 0x7354 <find_volume+0x49e>
    6fee:	f8 01       	movw	r30, r16
    6ff0:	85 ad       	ldd	r24, Z+61	; 0x3d
    6ff2:	96 ad       	ldd	r25, Z+62	; 0x3e
    6ff4:	81 15       	cp	r24, r1
    6ff6:	92 40       	sbci	r25, 0x02	; 2
    6ff8:	c1 f7       	brne	.-16     	; 0x6fea <find_volume+0x134>
    6ffa:	f8 01       	movw	r30, r16
    6ffc:	e8 5b       	subi	r30, 0xB8	; 184
    6ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    7000:	c0 80       	ld	r12, Z
    7002:	d1 80       	ldd	r13, Z+1	; 0x01
    7004:	e1 2c       	mov	r14, r1
    7006:	f1 2c       	mov	r15, r1
    7008:	c1 14       	cp	r12, r1
    700a:	d1 04       	cpc	r13, r1
    700c:	e1 04       	cpc	r14, r1
    700e:	f1 04       	cpc	r15, r1
    7010:	29 f4       	brne	.+10     	; 0x701c <find_volume+0x166>
    7012:	3e 96       	adiw	r30, 0x0e	; 14
    7014:	c0 80       	ld	r12, Z
    7016:	d1 80       	ldd	r13, Z+1	; 0x01
    7018:	e2 80       	ldd	r14, Z+2	; 0x02
    701a:	f3 80       	ldd	r15, Z+3	; 0x03
    701c:	d8 01       	movw	r26, r16
    701e:	5a 96       	adiw	r26, 0x1a	; 26
    7020:	cd 92       	st	X+, r12
    7022:	dd 92       	st	X+, r13
    7024:	ed 92       	st	X+, r14
    7026:	fc 92       	st	X, r15
    7028:	5d 97       	sbiw	r26, 0x1d	; 29
    702a:	f8 01       	movw	r30, r16
    702c:	ee 5b       	subi	r30, 0xBE	; 190
    702e:	ff 4f       	sbci	r31, 0xFF	; 255
    7030:	a0 81       	ld	r26, Z
    7032:	f8 01       	movw	r30, r16
    7034:	a3 83       	std	Z+3, r26	; 0x03
    7036:	8f ef       	ldi	r24, 0xFF	; 255
    7038:	8a 0f       	add	r24, r26
    703a:	82 30       	cpi	r24, 0x02	; 2
    703c:	b0 f6       	brcc	.-84     	; 0x6fea <find_volume+0x134>
    703e:	f7 ad       	ldd	r31, Z+63	; 0x3f
    7040:	f9 8b       	std	Y+17, r31	; 0x11
    7042:	2f 2f       	mov	r18, r31
    7044:	f8 01       	movw	r30, r16
    7046:	22 83       	std	Z+2, r18	; 0x02
    7048:	22 23       	and	r18, r18
    704a:	79 f2       	breq	.-98     	; 0x6fea <find_volume+0x134>
    704c:	30 e0       	ldi	r19, 0x00	; 0
    704e:	c9 01       	movw	r24, r18
    7050:	01 97       	sbiw	r24, 0x01	; 1
    7052:	82 23       	and	r24, r18
    7054:	93 23       	and	r25, r19
    7056:	89 2b       	or	r24, r25
    7058:	41 f6       	brne	.-112    	; 0x6fea <find_volume+0x134>
    705a:	f8 01       	movw	r30, r16
    705c:	ed 5b       	subi	r30, 0xBD	; 189
    705e:	ff 4f       	sbci	r31, 0xFF	; 255
    7060:	20 80       	ld	r2, Z
    7062:	31 80       	ldd	r3, Z+1	; 0x01
    7064:	f8 01       	movw	r30, r16
    7066:	20 86       	std	Z+8, r2	; 0x08
    7068:	31 86       	std	Z+9, r3	; 0x09
    706a:	c1 01       	movw	r24, r2
    706c:	8f 70       	andi	r24, 0x0F	; 15
    706e:	99 27       	eor	r25, r25
    7070:	89 2b       	or	r24, r25
    7072:	09 f0       	breq	.+2      	; 0x7076 <find_volume+0x1c0>
    7074:	ba cf       	rjmp	.-140    	; 0x6fea <find_volume+0x134>
    7076:	eb 5b       	subi	r30, 0xBB	; 187
    7078:	ff 4f       	sbci	r31, 0xFF	; 255
    707a:	80 80       	ld	r8, Z
    707c:	91 80       	ldd	r9, Z+1	; 0x01
    707e:	a1 2c       	mov	r10, r1
    7080:	b1 2c       	mov	r11, r1
    7082:	81 14       	cp	r8, r1
    7084:	91 04       	cpc	r9, r1
    7086:	a1 04       	cpc	r10, r1
    7088:	b1 04       	cpc	r11, r1
    708a:	29 f4       	brne	.+10     	; 0x7096 <find_volume+0x1e0>
    708c:	3d 96       	adiw	r30, 0x0d	; 13
    708e:	80 80       	ld	r8, Z
    7090:	91 80       	ldd	r9, Z+1	; 0x01
    7092:	a2 80       	ldd	r10, Z+2	; 0x02
    7094:	b3 80       	ldd	r11, Z+3	; 0x03
    7096:	f8 01       	movw	r30, r16
    7098:	e0 5c       	subi	r30, 0xC0	; 192
    709a:	ff 4f       	sbci	r31, 0xFF	; 255
    709c:	01 90       	ld	r0, Z+
    709e:	f0 81       	ld	r31, Z
    70a0:	e0 2d       	mov	r30, r0
    70a2:	30 97       	sbiw	r30, 0x00	; 0
    70a4:	09 f4       	brne	.+2      	; 0x70a8 <find_volume+0x1f2>
    70a6:	a1 cf       	rjmp	.-190    	; 0x6fea <find_volume+0x134>
    70a8:	b0 e0       	ldi	r27, 0x00	; 0
    70aa:	a7 01       	movw	r20, r14
    70ac:	96 01       	movw	r18, r12
    70ae:	0e 94 83 62 	call	0xc506	; 0xc506 <__muluhisi3>
    70b2:	6e 8b       	std	Y+22, r22	; 0x16
    70b4:	7f 8b       	std	Y+23, r23	; 0x17
    70b6:	88 8f       	std	Y+24, r24	; 0x18
    70b8:	99 8f       	std	Y+25, r25	; 0x19
    70ba:	9f 01       	movw	r18, r30
    70bc:	40 e0       	ldi	r20, 0x00	; 0
    70be:	50 e0       	ldi	r21, 0x00	; 0
    70c0:	2a 8f       	std	Y+26, r18	; 0x1a
    70c2:	3b 8f       	std	Y+27, r19	; 0x1b
    70c4:	4c 8f       	std	Y+28, r20	; 0x1c
    70c6:	5d 8f       	std	Y+29, r21	; 0x1d
    70c8:	c1 01       	movw	r24, r2
    70ca:	64 e0       	ldi	r22, 0x04	; 4
    70cc:	96 95       	lsr	r25
    70ce:	87 95       	ror	r24
    70d0:	6a 95       	dec	r22
    70d2:	e1 f7       	brne	.-8      	; 0x70cc <find_volume+0x216>
    70d4:	28 0f       	add	r18, r24
    70d6:	39 1f       	adc	r19, r25
    70d8:	41 1d       	adc	r20, r1
    70da:	51 1d       	adc	r21, r1
    70dc:	8e 89       	ldd	r24, Y+22	; 0x16
    70de:	9f 89       	ldd	r25, Y+23	; 0x17
    70e0:	a8 8d       	ldd	r26, Y+24	; 0x18
    70e2:	b9 8d       	ldd	r27, Y+25	; 0x19
    70e4:	28 0f       	add	r18, r24
    70e6:	39 1f       	adc	r19, r25
    70e8:	4a 1f       	adc	r20, r26
    70ea:	5b 1f       	adc	r21, r27
    70ec:	2a 8b       	std	Y+18, r18	; 0x12
    70ee:	3b 8b       	std	Y+19, r19	; 0x13
    70f0:	4c 8b       	std	Y+20, r20	; 0x14
    70f2:	5d 8b       	std	Y+21, r21	; 0x15
    70f4:	82 16       	cp	r8, r18
    70f6:	93 06       	cpc	r9, r19
    70f8:	a4 06       	cpc	r10, r20
    70fa:	b5 06       	cpc	r11, r21
    70fc:	08 f4       	brcc	.+2      	; 0x7100 <find_volume+0x24a>
    70fe:	75 cf       	rjmp	.-278    	; 0x6fea <find_volume+0x134>
    7100:	c5 01       	movw	r24, r10
    7102:	b4 01       	movw	r22, r8
    7104:	62 1b       	sub	r22, r18
    7106:	73 0b       	sbc	r23, r19
    7108:	84 0b       	sbc	r24, r20
    710a:	95 0b       	sbc	r25, r21
    710c:	e9 89       	ldd	r30, Y+17	; 0x11
    710e:	2e 2f       	mov	r18, r30
    7110:	30 e0       	ldi	r19, 0x00	; 0
    7112:	40 e0       	ldi	r20, 0x00	; 0
    7114:	50 e0       	ldi	r21, 0x00	; 0
    7116:	0e 94 4c 62 	call	0xc498	; 0xc498 <__udivmodsi4>
    711a:	21 15       	cp	r18, r1
    711c:	31 05       	cpc	r19, r1
    711e:	41 05       	cpc	r20, r1
    7120:	51 05       	cpc	r21, r1
    7122:	09 f4       	brne	.+2      	; 0x7126 <find_volume+0x270>
    7124:	62 cf       	rjmp	.-316    	; 0x6fea <find_volume+0x134>
    7126:	26 3f       	cpi	r18, 0xF6	; 246
    7128:	ff e0       	ldi	r31, 0x0F	; 15
    712a:	3f 07       	cpc	r19, r31
    712c:	41 05       	cpc	r20, r1
    712e:	51 05       	cpc	r21, r1
    7130:	48 f0       	brcs	.+18     	; 0x7144 <find_volume+0x28e>
    7132:	26 3f       	cpi	r18, 0xF6	; 246
    7134:	8f ef       	ldi	r24, 0xFF	; 255
    7136:	38 07       	cpc	r19, r24
    7138:	41 05       	cpc	r20, r1
    713a:	51 05       	cpc	r21, r1
    713c:	30 f4       	brcc	.+12     	; 0x714a <find_volume+0x294>
    713e:	92 e0       	ldi	r25, 0x02	; 2
    7140:	99 8b       	std	Y+17, r25	; 0x11
    7142:	05 c0       	rjmp	.+10     	; 0x714e <find_volume+0x298>
    7144:	a1 e0       	ldi	r26, 0x01	; 1
    7146:	a9 8b       	std	Y+17, r26	; 0x11
    7148:	02 c0       	rjmp	.+4      	; 0x714e <find_volume+0x298>
    714a:	b3 e0       	ldi	r27, 0x03	; 3
    714c:	b9 8b       	std	Y+17, r27	; 0x11
    714e:	49 01       	movw	r8, r18
    7150:	5a 01       	movw	r10, r20
    7152:	e2 e0       	ldi	r30, 0x02	; 2
    7154:	8e 0e       	add	r8, r30
    7156:	91 1c       	adc	r9, r1
    7158:	a1 1c       	adc	r10, r1
    715a:	b1 1c       	adc	r11, r1
    715c:	d8 01       	movw	r26, r16
    715e:	56 96       	adiw	r26, 0x16	; 22
    7160:	8d 92       	st	X+, r8
    7162:	9d 92       	st	X+, r9
    7164:	ad 92       	st	X+, r10
    7166:	bc 92       	st	X, r11
    7168:	59 97       	sbiw	r26, 0x19	; 25
    716a:	f8 01       	movw	r30, r16
    716c:	46 8e       	std	Z+30, r4	; 0x1e
    716e:	57 8e       	std	Z+31, r5	; 0x1f
    7170:	60 a2       	std	Z+32, r6	; 0x20
    7172:	71 a2       	std	Z+33, r7	; 0x21
    7174:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7176:	9b 8d       	ldd	r25, Y+27	; 0x1b
    7178:	ac 8d       	ldd	r26, Y+28	; 0x1c
    717a:	bd 8d       	ldd	r27, Y+29	; 0x1d
    717c:	84 0d       	add	r24, r4
    717e:	95 1d       	adc	r25, r5
    7180:	a6 1d       	adc	r26, r6
    7182:	b7 1d       	adc	r27, r7
    7184:	82 a3       	std	Z+34, r24	; 0x22
    7186:	93 a3       	std	Z+35, r25	; 0x23
    7188:	a4 a3       	std	Z+36, r26	; 0x24
    718a:	b5 a3       	std	Z+37, r27	; 0x25
    718c:	4a 89       	ldd	r20, Y+18	; 0x12
    718e:	5b 89       	ldd	r21, Y+19	; 0x13
    7190:	6c 89       	ldd	r22, Y+20	; 0x14
    7192:	7d 89       	ldd	r23, Y+21	; 0x15
    7194:	44 0d       	add	r20, r4
    7196:	55 1d       	adc	r21, r5
    7198:	66 1d       	adc	r22, r6
    719a:	77 1d       	adc	r23, r7
    719c:	42 a7       	std	Z+42, r20	; 0x2a
    719e:	53 a7       	std	Z+43, r21	; 0x2b
    71a0:	64 a7       	std	Z+44, r22	; 0x2c
    71a2:	75 a7       	std	Z+45, r23	; 0x2d
    71a4:	f9 89       	ldd	r31, Y+17	; 0x11
    71a6:	f3 30       	cpi	r31, 0x03	; 3
    71a8:	c9 f4       	brne	.+50     	; 0x71dc <find_volume+0x326>
    71aa:	23 28       	or	r2, r3
    71ac:	09 f0       	breq	.+2      	; 0x71b0 <find_volume+0x2fa>
    71ae:	1d cf       	rjmp	.-454    	; 0x6fea <find_volume+0x134>
    71b0:	f8 01       	movw	r30, r16
    71b2:	e2 5a       	subi	r30, 0xA2	; 162
    71b4:	ff 4f       	sbci	r31, 0xFF	; 255
    71b6:	80 81       	ld	r24, Z
    71b8:	91 81       	ldd	r25, Z+1	; 0x01
    71ba:	a2 81       	ldd	r26, Z+2	; 0x02
    71bc:	b3 81       	ldd	r27, Z+3	; 0x03
    71be:	f8 01       	movw	r30, r16
    71c0:	86 a3       	std	Z+38, r24	; 0x26
    71c2:	97 a3       	std	Z+39, r25	; 0x27
    71c4:	a0 a7       	std	Z+40, r26	; 0x28
    71c6:	b1 a7       	std	Z+41, r27	; 0x29
    71c8:	c5 01       	movw	r24, r10
    71ca:	b4 01       	movw	r22, r8
    71cc:	52 e0       	ldi	r21, 0x02	; 2
    71ce:	66 0f       	add	r22, r22
    71d0:	77 1f       	adc	r23, r23
    71d2:	88 1f       	adc	r24, r24
    71d4:	99 1f       	adc	r25, r25
    71d6:	5a 95       	dec	r21
    71d8:	d1 f7       	brne	.-12     	; 0x71ce <find_volume+0x318>
    71da:	2d c0       	rjmp	.+90     	; 0x7236 <find_volume+0x380>
    71dc:	23 28       	or	r2, r3
    71de:	09 f4       	brne	.+2      	; 0x71e2 <find_volume+0x32c>
    71e0:	04 cf       	rjmp	.-504    	; 0x6fea <find_volume+0x134>
    71e2:	2e 89       	ldd	r18, Y+22	; 0x16
    71e4:	3f 89       	ldd	r19, Y+23	; 0x17
    71e6:	48 8d       	ldd	r20, Y+24	; 0x18
    71e8:	59 8d       	ldd	r21, Y+25	; 0x19
    71ea:	82 0f       	add	r24, r18
    71ec:	93 1f       	adc	r25, r19
    71ee:	a4 1f       	adc	r26, r20
    71f0:	b5 1f       	adc	r27, r21
    71f2:	f8 01       	movw	r30, r16
    71f4:	86 a3       	std	Z+38, r24	; 0x26
    71f6:	97 a3       	std	Z+39, r25	; 0x27
    71f8:	a0 a7       	std	Z+40, r26	; 0x28
    71fa:	b1 a7       	std	Z+41, r27	; 0x29
    71fc:	f9 89       	ldd	r31, Y+17	; 0x11
    71fe:	f2 30       	cpi	r31, 0x02	; 2
    7200:	39 f4       	brne	.+14     	; 0x7210 <find_volume+0x35a>
    7202:	c5 01       	movw	r24, r10
    7204:	b4 01       	movw	r22, r8
    7206:	66 0f       	add	r22, r22
    7208:	77 1f       	adc	r23, r23
    720a:	88 1f       	adc	r24, r24
    720c:	99 1f       	adc	r25, r25
    720e:	13 c0       	rjmp	.+38     	; 0x7236 <find_volume+0x380>
    7210:	a3 e0       	ldi	r26, 0x03	; 3
    7212:	b0 e0       	ldi	r27, 0x00	; 0
    7214:	a5 01       	movw	r20, r10
    7216:	94 01       	movw	r18, r8
    7218:	0e 94 83 62 	call	0xc506	; 0xc506 <__muluhisi3>
    721c:	96 95       	lsr	r25
    721e:	87 95       	ror	r24
    7220:	77 95       	ror	r23
    7222:	67 95       	ror	r22
    7224:	21 e0       	ldi	r18, 0x01	; 1
    7226:	82 22       	and	r8, r18
    7228:	99 24       	eor	r9, r9
    722a:	aa 24       	eor	r10, r10
    722c:	bb 24       	eor	r11, r11
    722e:	68 0d       	add	r22, r8
    7230:	79 1d       	adc	r23, r9
    7232:	8a 1d       	adc	r24, r10
    7234:	9b 1d       	adc	r25, r11
    7236:	dc 01       	movw	r26, r24
    7238:	cb 01       	movw	r24, r22
    723a:	81 50       	subi	r24, 0x01	; 1
    723c:	9e 4f       	sbci	r25, 0xFE	; 254
    723e:	af 4f       	sbci	r26, 0xFF	; 255
    7240:	bf 4f       	sbci	r27, 0xFF	; 255
    7242:	29 e0       	ldi	r18, 0x09	; 9
    7244:	b6 95       	lsr	r27
    7246:	a7 95       	ror	r26
    7248:	97 95       	ror	r25
    724a:	87 95       	ror	r24
    724c:	2a 95       	dec	r18
    724e:	d1 f7       	brne	.-12     	; 0x7244 <find_volume+0x38e>
    7250:	c8 16       	cp	r12, r24
    7252:	d9 06       	cpc	r13, r25
    7254:	ea 06       	cpc	r14, r26
    7256:	fb 06       	cpc	r15, r27
    7258:	08 f4       	brcc	.+2      	; 0x725c <find_volume+0x3a6>
    725a:	c7 ce       	rjmp	.-626    	; 0x6fea <find_volume+0x134>
    725c:	8f ef       	ldi	r24, 0xFF	; 255
    725e:	9f ef       	ldi	r25, 0xFF	; 255
    7260:	dc 01       	movw	r26, r24
    7262:	f8 01       	movw	r30, r16
    7264:	86 87       	std	Z+14, r24	; 0x0e
    7266:	97 87       	std	Z+15, r25	; 0x0f
    7268:	a0 8b       	std	Z+16, r26	; 0x10
    726a:	b1 8b       	std	Z+17, r27	; 0x11
    726c:	82 87       	std	Z+10, r24	; 0x0a
    726e:	93 87       	std	Z+11, r25	; 0x0b
    7270:	a4 87       	std	Z+12, r26	; 0x0c
    7272:	b5 87       	std	Z+13, r27	; 0x0d
    7274:	80 e8       	ldi	r24, 0x80	; 128
    7276:	85 83       	std	Z+5, r24	; 0x05
    7278:	f9 89       	ldd	r31, Y+17	; 0x11
    727a:	f3 30       	cpi	r31, 0x03	; 3
    727c:	09 f0       	breq	.+2      	; 0x7280 <find_volume+0x3ca>
    727e:	48 c0       	rjmp	.+144    	; 0x7310 <find_volume+0x45a>
    7280:	f8 01       	movw	r30, r16
    7282:	ee 59       	subi	r30, 0x9E	; 158
    7284:	ff 4f       	sbci	r31, 0xFF	; 255
    7286:	80 81       	ld	r24, Z
    7288:	91 81       	ldd	r25, Z+1	; 0x01
    728a:	01 97       	sbiw	r24, 0x01	; 1
    728c:	09 f0       	breq	.+2      	; 0x7290 <find_volume+0x3da>
    728e:	40 c0       	rjmp	.+128    	; 0x7310 <find_volume+0x45a>
    7290:	b3 01       	movw	r22, r6
    7292:	a2 01       	movw	r20, r4
    7294:	4f 5f       	subi	r20, 0xFF	; 255
    7296:	5f 4f       	sbci	r21, 0xFF	; 255
    7298:	6f 4f       	sbci	r22, 0xFF	; 255
    729a:	7f 4f       	sbci	r23, 0xFF	; 255
    729c:	c8 01       	movw	r24, r16
    729e:	92 dd       	rcall	.-1244   	; 0x6dc4 <move_window>
    72a0:	81 11       	cpse	r24, r1
    72a2:	36 c0       	rjmp	.+108    	; 0x7310 <find_volume+0x45a>
    72a4:	d8 01       	movw	r26, r16
    72a6:	15 96       	adiw	r26, 0x05	; 5
    72a8:	1c 92       	st	X, r1
    72aa:	f8 01       	movw	r30, r16
    72ac:	e0 5d       	subi	r30, 0xD0	; 208
    72ae:	fd 4f       	sbci	r31, 0xFD	; 253
    72b0:	80 81       	ld	r24, Z
    72b2:	91 81       	ldd	r25, Z+1	; 0x01
    72b4:	85 35       	cpi	r24, 0x55	; 85
    72b6:	9a 4a       	sbci	r25, 0xAA	; 170
    72b8:	59 f5       	brne	.+86     	; 0x7310 <find_volume+0x45a>
    72ba:	f8 01       	movw	r30, r16
    72bc:	82 a9       	ldd	r24, Z+50	; 0x32
    72be:	93 a9       	ldd	r25, Z+51	; 0x33
    72c0:	a4 a9       	ldd	r26, Z+52	; 0x34
    72c2:	b5 a9       	ldd	r27, Z+53	; 0x35
    72c4:	82 35       	cpi	r24, 0x52	; 82
    72c6:	92 45       	sbci	r25, 0x52	; 82
    72c8:	a1 46       	sbci	r26, 0x61	; 97
    72ca:	b1 44       	sbci	r27, 0x41	; 65
    72cc:	09 f5       	brne	.+66     	; 0x7310 <find_volume+0x45a>
    72ce:	f8 01       	movw	r30, r16
    72d0:	ea 5e       	subi	r30, 0xEA	; 234
    72d2:	fd 4f       	sbci	r31, 0xFD	; 253
    72d4:	80 81       	ld	r24, Z
    72d6:	91 81       	ldd	r25, Z+1	; 0x01
    72d8:	a2 81       	ldd	r26, Z+2	; 0x02
    72da:	b3 81       	ldd	r27, Z+3	; 0x03
    72dc:	82 37       	cpi	r24, 0x72	; 114
    72de:	92 47       	sbci	r25, 0x72	; 114
    72e0:	a1 44       	sbci	r26, 0x41	; 65
    72e2:	b1 46       	sbci	r27, 0x61	; 97
    72e4:	a9 f4       	brne	.+42     	; 0x7310 <find_volume+0x45a>
    72e6:	34 96       	adiw	r30, 0x04	; 4
    72e8:	80 81       	ld	r24, Z
    72ea:	91 81       	ldd	r25, Z+1	; 0x01
    72ec:	a2 81       	ldd	r26, Z+2	; 0x02
    72ee:	b3 81       	ldd	r27, Z+3	; 0x03
    72f0:	f8 01       	movw	r30, r16
    72f2:	86 87       	std	Z+14, r24	; 0x0e
    72f4:	97 87       	std	Z+15, r25	; 0x0f
    72f6:	a0 8b       	std	Z+16, r26	; 0x10
    72f8:	b1 8b       	std	Z+17, r27	; 0x11
    72fa:	e2 5e       	subi	r30, 0xE2	; 226
    72fc:	fd 4f       	sbci	r31, 0xFD	; 253
    72fe:	80 81       	ld	r24, Z
    7300:	91 81       	ldd	r25, Z+1	; 0x01
    7302:	a2 81       	ldd	r26, Z+2	; 0x02
    7304:	b3 81       	ldd	r27, Z+3	; 0x03
    7306:	f8 01       	movw	r30, r16
    7308:	82 87       	std	Z+10, r24	; 0x0a
    730a:	93 87       	std	Z+11, r25	; 0x0b
    730c:	a4 87       	std	Z+12, r26	; 0x0c
    730e:	b5 87       	std	Z+13, r27	; 0x0d
    7310:	e9 89       	ldd	r30, Y+17	; 0x11
    7312:	d8 01       	movw	r26, r16
    7314:	ec 93       	st	X, r30
    7316:	80 91 6d 3a 	lds	r24, 0x3A6D
    731a:	90 91 6e 3a 	lds	r25, 0x3A6E
    731e:	01 96       	adiw	r24, 0x01	; 1
    7320:	80 93 6d 3a 	sts	0x3A6D, r24
    7324:	90 93 6e 3a 	sts	0x3A6E, r25
    7328:	16 96       	adiw	r26, 0x06	; 6
    732a:	8d 93       	st	X+, r24
    732c:	9c 93       	st	X, r25
    732e:	17 97       	sbiw	r26, 0x07	; 7
    7330:	52 96       	adiw	r26, 0x12	; 18
    7332:	1d 92       	st	X+, r1
    7334:	1d 92       	st	X+, r1
    7336:	1d 92       	st	X+, r1
    7338:	1c 92       	st	X, r1
    733a:	55 97       	sbiw	r26, 0x15	; 21
    733c:	04 c0       	rjmp	.+8      	; 0x7346 <find_volume+0x490>
    733e:	8b e0       	ldi	r24, 0x0B	; 11
    7340:	09 c0       	rjmp	.+18     	; 0x7354 <find_volume+0x49e>
    7342:	8c e0       	ldi	r24, 0x0C	; 12
    7344:	07 c0       	rjmp	.+14     	; 0x7354 <find_volume+0x49e>
    7346:	80 e0       	ldi	r24, 0x00	; 0
    7348:	05 c0       	rjmp	.+10     	; 0x7354 <find_volume+0x49e>
    734a:	83 e0       	ldi	r24, 0x03	; 3
    734c:	03 c0       	rjmp	.+6      	; 0x7354 <find_volume+0x49e>
    734e:	8a e0       	ldi	r24, 0x0A	; 10
    7350:	01 c0       	rjmp	.+2      	; 0x7354 <find_volume+0x49e>
    7352:	81 e0       	ldi	r24, 0x01	; 1
    7354:	6d 96       	adiw	r28, 0x1d	; 29
    7356:	cd bf       	out	0x3d, r28	; 61
    7358:	de bf       	out	0x3e, r29	; 62
    735a:	df 91       	pop	r29
    735c:	cf 91       	pop	r28
    735e:	1f 91       	pop	r17
    7360:	0f 91       	pop	r16
    7362:	ff 90       	pop	r15
    7364:	ef 90       	pop	r14
    7366:	df 90       	pop	r13
    7368:	cf 90       	pop	r12
    736a:	bf 90       	pop	r11
    736c:	af 90       	pop	r10
    736e:	9f 90       	pop	r9
    7370:	8f 90       	pop	r8
    7372:	7f 90       	pop	r7
    7374:	6f 90       	pop	r6
    7376:	5f 90       	pop	r5
    7378:	4f 90       	pop	r4
    737a:	3f 90       	pop	r3
    737c:	2f 90       	pop	r2
    737e:	08 95       	ret

00007380 <clust2sect>:
    7380:	0f 93       	push	r16
    7382:	1f 93       	push	r17
    7384:	fc 01       	movw	r30, r24
    7386:	42 50       	subi	r20, 0x02	; 2
    7388:	51 09       	sbc	r21, r1
    738a:	61 09       	sbc	r22, r1
    738c:	71 09       	sbc	r23, r1
    738e:	06 89       	ldd	r16, Z+22	; 0x16
    7390:	17 89       	ldd	r17, Z+23	; 0x17
    7392:	20 8d       	ldd	r18, Z+24	; 0x18
    7394:	31 8d       	ldd	r19, Z+25	; 0x19
    7396:	02 50       	subi	r16, 0x02	; 2
    7398:	11 09       	sbc	r17, r1
    739a:	21 09       	sbc	r18, r1
    739c:	31 09       	sbc	r19, r1
    739e:	40 17       	cp	r20, r16
    73a0:	51 07       	cpc	r21, r17
    73a2:	62 07       	cpc	r22, r18
    73a4:	73 07       	cpc	r23, r19
    73a6:	78 f4       	brcc	.+30     	; 0x73c6 <clust2sect+0x46>
    73a8:	a2 81       	ldd	r26, Z+2	; 0x02
    73aa:	b0 e0       	ldi	r27, 0x00	; 0
    73ac:	9a 01       	movw	r18, r20
    73ae:	ab 01       	movw	r20, r22
    73b0:	0e 94 83 62 	call	0xc506	; 0xc506 <__muluhisi3>
    73b4:	02 a5       	ldd	r16, Z+42	; 0x2a
    73b6:	13 a5       	ldd	r17, Z+43	; 0x2b
    73b8:	24 a5       	ldd	r18, Z+44	; 0x2c
    73ba:	35 a5       	ldd	r19, Z+45	; 0x2d
    73bc:	60 0f       	add	r22, r16
    73be:	71 1f       	adc	r23, r17
    73c0:	82 1f       	adc	r24, r18
    73c2:	93 1f       	adc	r25, r19
    73c4:	03 c0       	rjmp	.+6      	; 0x73cc <clust2sect+0x4c>
    73c6:	60 e0       	ldi	r22, 0x00	; 0
    73c8:	70 e0       	ldi	r23, 0x00	; 0
    73ca:	cb 01       	movw	r24, r22
    73cc:	1f 91       	pop	r17
    73ce:	0f 91       	pop	r16
    73d0:	08 95       	ret

000073d2 <get_fat>:
    73d2:	af 92       	push	r10
    73d4:	bf 92       	push	r11
    73d6:	cf 92       	push	r12
    73d8:	df 92       	push	r13
    73da:	ef 92       	push	r14
    73dc:	ff 92       	push	r15
    73de:	0f 93       	push	r16
    73e0:	1f 93       	push	r17
    73e2:	cf 93       	push	r28
    73e4:	df 93       	push	r29
    73e6:	ec 01       	movw	r28, r24
    73e8:	6a 01       	movw	r12, r20
    73ea:	7b 01       	movw	r14, r22
    73ec:	42 30       	cpi	r20, 0x02	; 2
    73ee:	51 05       	cpc	r21, r1
    73f0:	61 05       	cpc	r22, r1
    73f2:	71 05       	cpc	r23, r1
    73f4:	08 f4       	brcc	.+2      	; 0x73f8 <get_fat+0x26>
    73f6:	a2 c0       	rjmp	.+324    	; 0x753c <get_fat+0x16a>
    73f8:	8e 89       	ldd	r24, Y+22	; 0x16
    73fa:	9f 89       	ldd	r25, Y+23	; 0x17
    73fc:	a8 8d       	ldd	r26, Y+24	; 0x18
    73fe:	b9 8d       	ldd	r27, Y+25	; 0x19
    7400:	48 17       	cp	r20, r24
    7402:	59 07       	cpc	r21, r25
    7404:	6a 07       	cpc	r22, r26
    7406:	7b 07       	cpc	r23, r27
    7408:	08 f0       	brcs	.+2      	; 0x740c <get_fat+0x3a>
    740a:	98 c0       	rjmp	.+304    	; 0x753c <get_fat+0x16a>
    740c:	88 81       	ld	r24, Y
    740e:	82 30       	cpi	r24, 0x02	; 2
    7410:	09 f4       	brne	.+2      	; 0x7414 <get_fat+0x42>
    7412:	49 c0       	rjmp	.+146    	; 0x74a6 <get_fat+0xd4>
    7414:	83 30       	cpi	r24, 0x03	; 3
    7416:	09 f4       	brne	.+2      	; 0x741a <get_fat+0x48>
    7418:	68 c0       	rjmp	.+208    	; 0x74ea <get_fat+0x118>
    741a:	81 30       	cpi	r24, 0x01	; 1
    741c:	09 f0       	breq	.+2      	; 0x7420 <get_fat+0x4e>
    741e:	8e c0       	rjmp	.+284    	; 0x753c <get_fat+0x16a>
    7420:	5a 01       	movw	r10, r20
    7422:	b6 94       	lsr	r11
    7424:	a7 94       	ror	r10
    7426:	a4 0e       	add	r10, r20
    7428:	b5 1e       	adc	r11, r21
    742a:	c5 01       	movw	r24, r10
    742c:	89 2f       	mov	r24, r25
    742e:	99 27       	eor	r25, r25
    7430:	86 95       	lsr	r24
    7432:	4a a1       	ldd	r20, Y+34	; 0x22
    7434:	5b a1       	ldd	r21, Y+35	; 0x23
    7436:	6c a1       	ldd	r22, Y+36	; 0x24
    7438:	7d a1       	ldd	r23, Y+37	; 0x25
    743a:	48 0f       	add	r20, r24
    743c:	59 1f       	adc	r21, r25
    743e:	61 1d       	adc	r22, r1
    7440:	71 1d       	adc	r23, r1
    7442:	ce 01       	movw	r24, r28
    7444:	bf dc       	rcall	.-1666   	; 0x6dc4 <move_window>
    7446:	88 23       	and	r24, r24
    7448:	21 f0       	breq	.+8      	; 0x7452 <get_fat+0x80>
    744a:	6f ef       	ldi	r22, 0xFF	; 255
    744c:	7f ef       	ldi	r23, 0xFF	; 255
    744e:	cb 01       	movw	r24, r22
    7450:	79 c0       	rjmp	.+242    	; 0x7544 <get_fat+0x172>
    7452:	85 01       	movw	r16, r10
    7454:	0f 5f       	subi	r16, 0xFF	; 255
    7456:	1f 4f       	sbci	r17, 0xFF	; 255
    7458:	f5 01       	movw	r30, r10
    745a:	f1 70       	andi	r31, 0x01	; 1
    745c:	ec 0f       	add	r30, r28
    745e:	fd 1f       	adc	r31, r29
    7460:	b2 a8       	ldd	r11, Z+50	; 0x32
    7462:	c8 01       	movw	r24, r16
    7464:	89 2f       	mov	r24, r25
    7466:	99 27       	eor	r25, r25
    7468:	86 95       	lsr	r24
    746a:	4a a1       	ldd	r20, Y+34	; 0x22
    746c:	5b a1       	ldd	r21, Y+35	; 0x23
    746e:	6c a1       	ldd	r22, Y+36	; 0x24
    7470:	7d a1       	ldd	r23, Y+37	; 0x25
    7472:	48 0f       	add	r20, r24
    7474:	59 1f       	adc	r21, r25
    7476:	61 1d       	adc	r22, r1
    7478:	71 1d       	adc	r23, r1
    747a:	ce 01       	movw	r24, r28
    747c:	a3 dc       	rcall	.-1722   	; 0x6dc4 <move_window>
    747e:	81 11       	cpse	r24, r1
    7480:	e4 cf       	rjmp	.-56     	; 0x744a <get_fat+0x78>
    7482:	f8 01       	movw	r30, r16
    7484:	f1 70       	andi	r31, 0x01	; 1
    7486:	ec 0f       	add	r30, r28
    7488:	fd 1f       	adc	r31, r29
    748a:	82 a9       	ldd	r24, Z+50	; 0x32
    748c:	6b 2d       	mov	r22, r11
    748e:	70 e0       	ldi	r23, 0x00	; 0
    7490:	78 2b       	or	r23, r24
    7492:	c0 fe       	sbrs	r12, 0
    7494:	06 c0       	rjmp	.+12     	; 0x74a2 <get_fat+0xd0>
    7496:	c4 e0       	ldi	r28, 0x04	; 4
    7498:	76 95       	lsr	r23
    749a:	67 95       	ror	r22
    749c:	ca 95       	dec	r28
    749e:	e1 f7       	brne	.-8      	; 0x7498 <get_fat+0xc6>
    74a0:	21 c0       	rjmp	.+66     	; 0x74e4 <get_fat+0x112>
    74a2:	7f 70       	andi	r23, 0x0F	; 15
    74a4:	1f c0       	rjmp	.+62     	; 0x74e4 <get_fat+0x112>
    74a6:	45 2f       	mov	r20, r21
    74a8:	56 2f       	mov	r21, r22
    74aa:	67 2f       	mov	r22, r23
    74ac:	77 27       	eor	r23, r23
    74ae:	8a a1       	ldd	r24, Y+34	; 0x22
    74b0:	9b a1       	ldd	r25, Y+35	; 0x23
    74b2:	ac a1       	ldd	r26, Y+36	; 0x24
    74b4:	bd a1       	ldd	r27, Y+37	; 0x25
    74b6:	48 0f       	add	r20, r24
    74b8:	59 1f       	adc	r21, r25
    74ba:	6a 1f       	adc	r22, r26
    74bc:	7b 1f       	adc	r23, r27
    74be:	ce 01       	movw	r24, r28
    74c0:	81 dc       	rcall	.-1790   	; 0x6dc4 <move_window>
    74c2:	81 11       	cpse	r24, r1
    74c4:	c2 cf       	rjmp	.-124    	; 0x744a <get_fat+0x78>
    74c6:	cc 0c       	add	r12, r12
    74c8:	dd 1c       	adc	r13, r13
    74ca:	ee 1c       	adc	r14, r14
    74cc:	ff 1c       	adc	r15, r15
    74ce:	e8 94       	clt
    74d0:	c0 f8       	bld	r12, 0
    74d2:	81 e0       	ldi	r24, 0x01	; 1
    74d4:	d8 22       	and	r13, r24
    74d6:	ee 24       	eor	r14, r14
    74d8:	ff 24       	eor	r15, r15
    74da:	fe 01       	movw	r30, r28
    74dc:	ec 0d       	add	r30, r12
    74de:	fd 1d       	adc	r31, r13
    74e0:	62 a9       	ldd	r22, Z+50	; 0x32
    74e2:	73 a9       	ldd	r23, Z+51	; 0x33
    74e4:	80 e0       	ldi	r24, 0x00	; 0
    74e6:	90 e0       	ldi	r25, 0x00	; 0
    74e8:	2d c0       	rjmp	.+90     	; 0x7544 <get_fat+0x172>
    74ea:	f7 e0       	ldi	r31, 0x07	; 7
    74ec:	76 95       	lsr	r23
    74ee:	67 95       	ror	r22
    74f0:	57 95       	ror	r21
    74f2:	47 95       	ror	r20
    74f4:	fa 95       	dec	r31
    74f6:	d1 f7       	brne	.-12     	; 0x74ec <get_fat+0x11a>
    74f8:	8a a1       	ldd	r24, Y+34	; 0x22
    74fa:	9b a1       	ldd	r25, Y+35	; 0x23
    74fc:	ac a1       	ldd	r26, Y+36	; 0x24
    74fe:	bd a1       	ldd	r27, Y+37	; 0x25
    7500:	48 0f       	add	r20, r24
    7502:	59 1f       	adc	r21, r25
    7504:	6a 1f       	adc	r22, r26
    7506:	7b 1f       	adc	r23, r27
    7508:	ce 01       	movw	r24, r28
    750a:	5c dc       	rcall	.-1864   	; 0x6dc4 <move_window>
    750c:	81 11       	cpse	r24, r1
    750e:	9d cf       	rjmp	.-198    	; 0x744a <get_fat+0x78>
    7510:	e2 e0       	ldi	r30, 0x02	; 2
    7512:	cc 0c       	add	r12, r12
    7514:	dd 1c       	adc	r13, r13
    7516:	ee 1c       	adc	r14, r14
    7518:	ff 1c       	adc	r15, r15
    751a:	ea 95       	dec	r30
    751c:	d1 f7       	brne	.-12     	; 0x7512 <get_fat+0x140>
    751e:	8c ef       	ldi	r24, 0xFC	; 252
    7520:	c8 22       	and	r12, r24
    7522:	81 e0       	ldi	r24, 0x01	; 1
    7524:	d8 22       	and	r13, r24
    7526:	ee 24       	eor	r14, r14
    7528:	ff 24       	eor	r15, r15
    752a:	fe 01       	movw	r30, r28
    752c:	ec 0d       	add	r30, r12
    752e:	fd 1d       	adc	r31, r13
    7530:	62 a9       	ldd	r22, Z+50	; 0x32
    7532:	73 a9       	ldd	r23, Z+51	; 0x33
    7534:	84 a9       	ldd	r24, Z+52	; 0x34
    7536:	95 a9       	ldd	r25, Z+53	; 0x35
    7538:	9f 70       	andi	r25, 0x0F	; 15
    753a:	04 c0       	rjmp	.+8      	; 0x7544 <get_fat+0x172>
    753c:	61 e0       	ldi	r22, 0x01	; 1
    753e:	70 e0       	ldi	r23, 0x00	; 0
    7540:	80 e0       	ldi	r24, 0x00	; 0
    7542:	90 e0       	ldi	r25, 0x00	; 0
    7544:	df 91       	pop	r29
    7546:	cf 91       	pop	r28
    7548:	1f 91       	pop	r17
    754a:	0f 91       	pop	r16
    754c:	ff 90       	pop	r15
    754e:	ef 90       	pop	r14
    7550:	df 90       	pop	r13
    7552:	cf 90       	pop	r12
    7554:	bf 90       	pop	r11
    7556:	af 90       	pop	r10
    7558:	08 95       	ret

0000755a <dir_sdi>:
    755a:	af 92       	push	r10
    755c:	bf 92       	push	r11
    755e:	cf 92       	push	r12
    7560:	df 92       	push	r13
    7562:	ef 92       	push	r14
    7564:	ff 92       	push	r15
    7566:	0f 93       	push	r16
    7568:	1f 93       	push	r17
    756a:	cf 93       	push	r28
    756c:	df 93       	push	r29
    756e:	ec 01       	movw	r28, r24
    7570:	8b 01       	movw	r16, r22
    7572:	6c 83       	std	Y+4, r22	; 0x04
    7574:	7d 83       	std	Y+5, r23	; 0x05
    7576:	ce 80       	ldd	r12, Y+6	; 0x06
    7578:	df 80       	ldd	r13, Y+7	; 0x07
    757a:	e8 84       	ldd	r14, Y+8	; 0x08
    757c:	f9 84       	ldd	r15, Y+9	; 0x09
    757e:	81 e0       	ldi	r24, 0x01	; 1
    7580:	c8 16       	cp	r12, r24
    7582:	d1 04       	cpc	r13, r1
    7584:	e1 04       	cpc	r14, r1
    7586:	f1 04       	cpc	r15, r1
    7588:	11 f4       	brne	.+4      	; 0x758e <dir_sdi+0x34>
    758a:	82 e0       	ldi	r24, 0x02	; 2
    758c:	80 c0       	rjmp	.+256    	; 0x768e <dir_sdi+0x134>
    758e:	e8 81       	ld	r30, Y
    7590:	f9 81       	ldd	r31, Y+1	; 0x01
    7592:	86 89       	ldd	r24, Z+22	; 0x16
    7594:	97 89       	ldd	r25, Z+23	; 0x17
    7596:	a0 8d       	ldd	r26, Z+24	; 0x18
    7598:	b1 8d       	ldd	r27, Z+25	; 0x19
    759a:	c8 16       	cp	r12, r24
    759c:	d9 06       	cpc	r13, r25
    759e:	ea 06       	cpc	r14, r26
    75a0:	fb 06       	cpc	r15, r27
    75a2:	98 f7       	brcc	.-26     	; 0x758a <dir_sdi+0x30>
    75a4:	c1 14       	cp	r12, r1
    75a6:	d1 04       	cpc	r13, r1
    75a8:	e1 04       	cpc	r14, r1
    75aa:	f1 04       	cpc	r15, r1
    75ac:	b9 f4       	brne	.+46     	; 0x75dc <dir_sdi+0x82>
    75ae:	80 81       	ld	r24, Z
    75b0:	83 30       	cpi	r24, 0x03	; 3
    75b2:	41 f4       	brne	.+16     	; 0x75c4 <dir_sdi+0x6a>
    75b4:	86 a1       	ldd	r24, Z+38	; 0x26
    75b6:	97 a1       	ldd	r25, Z+39	; 0x27
    75b8:	a0 a5       	ldd	r26, Z+40	; 0x28
    75ba:	b1 a5       	ldd	r27, Z+41	; 0x29
    75bc:	00 97       	sbiw	r24, 0x00	; 0
    75be:	a1 05       	cpc	r26, r1
    75c0:	b1 05       	cpc	r27, r1
    75c2:	51 f4       	brne	.+20     	; 0x75d8 <dir_sdi+0x7e>
    75c4:	80 85       	ldd	r24, Z+8	; 0x08
    75c6:	91 85       	ldd	r25, Z+9	; 0x09
    75c8:	08 17       	cp	r16, r24
    75ca:	19 07       	cpc	r17, r25
    75cc:	f0 f6       	brcc	.-68     	; 0x758a <dir_sdi+0x30>
    75ce:	66 a1       	ldd	r22, Z+38	; 0x26
    75d0:	77 a1       	ldd	r23, Z+39	; 0x27
    75d2:	80 a5       	ldd	r24, Z+40	; 0x28
    75d4:	91 a5       	ldd	r25, Z+41	; 0x29
    75d6:	2f c0       	rjmp	.+94     	; 0x7636 <dir_sdi+0xdc>
    75d8:	6c 01       	movw	r12, r24
    75da:	7d 01       	movw	r14, r26
    75dc:	a2 80       	ldd	r10, Z+2	; 0x02
    75de:	80 e1       	ldi	r24, 0x10	; 16
    75e0:	a8 9e       	mul	r10, r24
    75e2:	50 01       	movw	r10, r0
    75e4:	11 24       	eor	r1, r1
    75e6:	88 81       	ld	r24, Y
    75e8:	99 81       	ldd	r25, Y+1	; 0x01
    75ea:	b7 01       	movw	r22, r14
    75ec:	a6 01       	movw	r20, r12
    75ee:	0a 15       	cp	r16, r10
    75f0:	1b 05       	cpc	r17, r11
    75f2:	00 f1       	brcs	.+64     	; 0x7634 <dir_sdi+0xda>
    75f4:	ee de       	rcall	.-548    	; 0x73d2 <get_fat>
    75f6:	6b 01       	movw	r12, r22
    75f8:	7c 01       	movw	r14, r24
    75fa:	8f ef       	ldi	r24, 0xFF	; 255
    75fc:	c8 16       	cp	r12, r24
    75fe:	d8 06       	cpc	r13, r24
    7600:	e8 06       	cpc	r14, r24
    7602:	f8 06       	cpc	r15, r24
    7604:	09 f4       	brne	.+2      	; 0x7608 <dir_sdi+0xae>
    7606:	42 c0       	rjmp	.+132    	; 0x768c <dir_sdi+0x132>
    7608:	82 e0       	ldi	r24, 0x02	; 2
    760a:	c8 16       	cp	r12, r24
    760c:	d1 04       	cpc	r13, r1
    760e:	e1 04       	cpc	r14, r1
    7610:	f1 04       	cpc	r15, r1
    7612:	08 f4       	brcc	.+2      	; 0x7616 <dir_sdi+0xbc>
    7614:	ba cf       	rjmp	.-140    	; 0x758a <dir_sdi+0x30>
    7616:	e8 81       	ld	r30, Y
    7618:	f9 81       	ldd	r31, Y+1	; 0x01
    761a:	86 89       	ldd	r24, Z+22	; 0x16
    761c:	97 89       	ldd	r25, Z+23	; 0x17
    761e:	a0 8d       	ldd	r26, Z+24	; 0x18
    7620:	b1 8d       	ldd	r27, Z+25	; 0x19
    7622:	c8 16       	cp	r12, r24
    7624:	d9 06       	cpc	r13, r25
    7626:	ea 06       	cpc	r14, r26
    7628:	fb 06       	cpc	r15, r27
    762a:	08 f0       	brcs	.+2      	; 0x762e <dir_sdi+0xd4>
    762c:	ae cf       	rjmp	.-164    	; 0x758a <dir_sdi+0x30>
    762e:	0a 19       	sub	r16, r10
    7630:	1b 09       	sbc	r17, r11
    7632:	d9 cf       	rjmp	.-78     	; 0x75e6 <dir_sdi+0x8c>
    7634:	a5 de       	rcall	.-694    	; 0x7380 <clust2sect>
    7636:	ca 86       	std	Y+10, r12	; 0x0a
    7638:	db 86       	std	Y+11, r13	; 0x0b
    763a:	ec 86       	std	Y+12, r14	; 0x0c
    763c:	fd 86       	std	Y+13, r15	; 0x0d
    763e:	61 15       	cp	r22, r1
    7640:	71 05       	cpc	r23, r1
    7642:	81 05       	cpc	r24, r1
    7644:	91 05       	cpc	r25, r1
    7646:	09 f4       	brne	.+2      	; 0x764a <dir_sdi+0xf0>
    7648:	a0 cf       	rjmp	.-192    	; 0x758a <dir_sdi+0x30>
    764a:	98 01       	movw	r18, r16
    764c:	54 e0       	ldi	r21, 0x04	; 4
    764e:	36 95       	lsr	r19
    7650:	27 95       	ror	r18
    7652:	5a 95       	dec	r21
    7654:	e1 f7       	brne	.-8      	; 0x764e <dir_sdi+0xf4>
    7656:	dc 01       	movw	r26, r24
    7658:	cb 01       	movw	r24, r22
    765a:	82 0f       	add	r24, r18
    765c:	93 1f       	adc	r25, r19
    765e:	a1 1d       	adc	r26, r1
    7660:	b1 1d       	adc	r27, r1
    7662:	8e 87       	std	Y+14, r24	; 0x0e
    7664:	9f 87       	std	Y+15, r25	; 0x0f
    7666:	a8 8b       	std	Y+16, r26	; 0x10
    7668:	b9 8b       	std	Y+17, r27	; 0x11
    766a:	0f 70       	andi	r16, 0x0F	; 15
    766c:	11 27       	eor	r17, r17
    766e:	65 e0       	ldi	r22, 0x05	; 5
    7670:	00 0f       	add	r16, r16
    7672:	11 1f       	adc	r17, r17
    7674:	6a 95       	dec	r22
    7676:	e1 f7       	brne	.-8      	; 0x7670 <dir_sdi+0x116>
    7678:	0e 5c       	subi	r16, 0xCE	; 206
    767a:	1f 4f       	sbci	r17, 0xFF	; 255
    767c:	88 81       	ld	r24, Y
    767e:	99 81       	ldd	r25, Y+1	; 0x01
    7680:	80 0f       	add	r24, r16
    7682:	91 1f       	adc	r25, r17
    7684:	8a 8b       	std	Y+18, r24	; 0x12
    7686:	9b 8b       	std	Y+19, r25	; 0x13
    7688:	80 e0       	ldi	r24, 0x00	; 0
    768a:	01 c0       	rjmp	.+2      	; 0x768e <dir_sdi+0x134>
    768c:	81 e0       	ldi	r24, 0x01	; 1
    768e:	df 91       	pop	r29
    7690:	cf 91       	pop	r28
    7692:	1f 91       	pop	r17
    7694:	0f 91       	pop	r16
    7696:	ff 90       	pop	r15
    7698:	ef 90       	pop	r14
    769a:	df 90       	pop	r13
    769c:	cf 90       	pop	r12
    769e:	bf 90       	pop	r11
    76a0:	af 90       	pop	r10
    76a2:	08 95       	ret

000076a4 <put_fat>:
    76a4:	4f 92       	push	r4
    76a6:	5f 92       	push	r5
    76a8:	6f 92       	push	r6
    76aa:	7f 92       	push	r7
    76ac:	8f 92       	push	r8
    76ae:	9f 92       	push	r9
    76b0:	af 92       	push	r10
    76b2:	bf 92       	push	r11
    76b4:	cf 92       	push	r12
    76b6:	df 92       	push	r13
    76b8:	ef 92       	push	r14
    76ba:	ff 92       	push	r15
    76bc:	0f 93       	push	r16
    76be:	1f 93       	push	r17
    76c0:	cf 93       	push	r28
    76c2:	df 93       	push	r29
    76c4:	ec 01       	movw	r28, r24
    76c6:	6a 01       	movw	r12, r20
    76c8:	7b 01       	movw	r14, r22
    76ca:	28 01       	movw	r4, r16
    76cc:	39 01       	movw	r6, r18
    76ce:	42 30       	cpi	r20, 0x02	; 2
    76d0:	51 05       	cpc	r21, r1
    76d2:	61 05       	cpc	r22, r1
    76d4:	71 05       	cpc	r23, r1
    76d6:	08 f4       	brcc	.+2      	; 0x76da <put_fat+0x36>
    76d8:	c5 c0       	rjmp	.+394    	; 0x7864 <put_fat+0x1c0>
    76da:	8e 89       	ldd	r24, Y+22	; 0x16
    76dc:	9f 89       	ldd	r25, Y+23	; 0x17
    76de:	a8 8d       	ldd	r26, Y+24	; 0x18
    76e0:	b9 8d       	ldd	r27, Y+25	; 0x19
    76e2:	48 17       	cp	r20, r24
    76e4:	59 07       	cpc	r21, r25
    76e6:	6a 07       	cpc	r22, r26
    76e8:	7b 07       	cpc	r23, r27
    76ea:	08 f0       	brcs	.+2      	; 0x76ee <put_fat+0x4a>
    76ec:	bb c0       	rjmp	.+374    	; 0x7864 <put_fat+0x1c0>
    76ee:	88 81       	ld	r24, Y
    76f0:	82 30       	cpi	r24, 0x02	; 2
    76f2:	09 f4       	brne	.+2      	; 0x76f6 <put_fat+0x52>
    76f4:	5f c0       	rjmp	.+190    	; 0x77b4 <put_fat+0x110>
    76f6:	83 30       	cpi	r24, 0x03	; 3
    76f8:	09 f4       	brne	.+2      	; 0x76fc <put_fat+0x58>
    76fa:	7d c0       	rjmp	.+250    	; 0x77f6 <put_fat+0x152>
    76fc:	81 30       	cpi	r24, 0x01	; 1
    76fe:	09 f0       	breq	.+2      	; 0x7702 <put_fat+0x5e>
    7700:	b1 c0       	rjmp	.+354    	; 0x7864 <put_fat+0x1c0>
    7702:	5a 01       	movw	r10, r20
    7704:	b6 94       	lsr	r11
    7706:	a7 94       	ror	r10
    7708:	a4 0e       	add	r10, r20
    770a:	b5 1e       	adc	r11, r21
    770c:	c5 01       	movw	r24, r10
    770e:	89 2f       	mov	r24, r25
    7710:	99 27       	eor	r25, r25
    7712:	86 95       	lsr	r24
    7714:	4a a1       	ldd	r20, Y+34	; 0x22
    7716:	5b a1       	ldd	r21, Y+35	; 0x23
    7718:	6c a1       	ldd	r22, Y+36	; 0x24
    771a:	7d a1       	ldd	r23, Y+37	; 0x25
    771c:	48 0f       	add	r20, r24
    771e:	59 1f       	adc	r21, r25
    7720:	61 1d       	adc	r22, r1
    7722:	71 1d       	adc	r23, r1
    7724:	ce 01       	movw	r24, r28
    7726:	4e db       	rcall	.-2404   	; 0x6dc4 <move_window>
    7728:	81 11       	cpse	r24, r1
    772a:	9d c0       	rjmp	.+314    	; 0x7866 <put_fat+0x1c2>
    772c:	85 01       	movw	r16, r10
    772e:	0f 5f       	subi	r16, 0xFF	; 255
    7730:	1f 4f       	sbci	r17, 0xFF	; 255
    7732:	f5 01       	movw	r30, r10
    7734:	f1 70       	andi	r31, 0x01	; 1
    7736:	ec 0f       	add	r30, r28
    7738:	fd 1f       	adc	r31, r29
    773a:	46 01       	movw	r8, r12
    773c:	57 01       	movw	r10, r14
    773e:	81 e0       	ldi	r24, 0x01	; 1
    7740:	88 22       	and	r8, r24
    7742:	99 24       	eor	r9, r9
    7744:	aa 24       	eor	r10, r10
    7746:	bb 24       	eor	r11, r11
    7748:	c0 fe       	sbrs	r12, 0
    774a:	08 c0       	rjmp	.+16     	; 0x775c <put_fat+0xb8>
    774c:	22 a9       	ldd	r18, Z+50	; 0x32
    774e:	2f 70       	andi	r18, 0x0F	; 15
    7750:	30 e1       	ldi	r19, 0x10	; 16
    7752:	43 9e       	mul	r4, r19
    7754:	c0 01       	movw	r24, r0
    7756:	11 24       	eor	r1, r1
    7758:	28 2b       	or	r18, r24
    775a:	01 c0       	rjmp	.+2      	; 0x775e <put_fat+0xba>
    775c:	24 2d       	mov	r18, r4
    775e:	22 ab       	std	Z+50, r18	; 0x32
    7760:	81 e0       	ldi	r24, 0x01	; 1
    7762:	8c 83       	std	Y+4, r24	; 0x04
    7764:	4a a1       	ldd	r20, Y+34	; 0x22
    7766:	5b a1       	ldd	r21, Y+35	; 0x23
    7768:	6c a1       	ldd	r22, Y+36	; 0x24
    776a:	7d a1       	ldd	r23, Y+37	; 0x25
    776c:	c8 01       	movw	r24, r16
    776e:	89 2f       	mov	r24, r25
    7770:	99 27       	eor	r25, r25
    7772:	86 95       	lsr	r24
    7774:	48 0f       	add	r20, r24
    7776:	59 1f       	adc	r21, r25
    7778:	61 1d       	adc	r22, r1
    777a:	71 1d       	adc	r23, r1
    777c:	ce 01       	movw	r24, r28
    777e:	22 db       	rcall	.-2492   	; 0x6dc4 <move_window>
    7780:	81 11       	cpse	r24, r1
    7782:	71 c0       	rjmp	.+226    	; 0x7866 <put_fat+0x1c2>
    7784:	f8 01       	movw	r30, r16
    7786:	f1 70       	andi	r31, 0x01	; 1
    7788:	ec 0f       	add	r30, r28
    778a:	fd 1f       	adc	r31, r29
    778c:	89 28       	or	r8, r9
    778e:	8a 28       	or	r8, r10
    7790:	8b 28       	or	r8, r11
    7792:	49 f0       	breq	.+18     	; 0x77a6 <put_fat+0x102>
    7794:	b4 e0       	ldi	r27, 0x04	; 4
    7796:	76 94       	lsr	r7
    7798:	67 94       	ror	r6
    779a:	57 94       	ror	r5
    779c:	47 94       	ror	r4
    779e:	ba 95       	dec	r27
    77a0:	d1 f7       	brne	.-12     	; 0x7796 <put_fat+0xf2>
    77a2:	94 2d       	mov	r25, r4
    77a4:	05 c0       	rjmp	.+10     	; 0x77b0 <put_fat+0x10c>
    77a6:	92 a9       	ldd	r25, Z+50	; 0x32
    77a8:	90 7f       	andi	r25, 0xF0	; 240
    77aa:	25 2d       	mov	r18, r5
    77ac:	2f 70       	andi	r18, 0x0F	; 15
    77ae:	92 2b       	or	r25, r18
    77b0:	92 ab       	std	Z+50, r25	; 0x32
    77b2:	55 c0       	rjmp	.+170    	; 0x785e <put_fat+0x1ba>
    77b4:	45 2f       	mov	r20, r21
    77b6:	56 2f       	mov	r21, r22
    77b8:	67 2f       	mov	r22, r23
    77ba:	77 27       	eor	r23, r23
    77bc:	8a a1       	ldd	r24, Y+34	; 0x22
    77be:	9b a1       	ldd	r25, Y+35	; 0x23
    77c0:	ac a1       	ldd	r26, Y+36	; 0x24
    77c2:	bd a1       	ldd	r27, Y+37	; 0x25
    77c4:	48 0f       	add	r20, r24
    77c6:	59 1f       	adc	r21, r25
    77c8:	6a 1f       	adc	r22, r26
    77ca:	7b 1f       	adc	r23, r27
    77cc:	ce 01       	movw	r24, r28
    77ce:	fa da       	rcall	.-2572   	; 0x6dc4 <move_window>
    77d0:	81 11       	cpse	r24, r1
    77d2:	49 c0       	rjmp	.+146    	; 0x7866 <put_fat+0x1c2>
    77d4:	cc 0c       	add	r12, r12
    77d6:	dd 1c       	adc	r13, r13
    77d8:	ee 1c       	adc	r14, r14
    77da:	ff 1c       	adc	r15, r15
    77dc:	e8 94       	clt
    77de:	c0 f8       	bld	r12, 0
    77e0:	91 e0       	ldi	r25, 0x01	; 1
    77e2:	d9 22       	and	r13, r25
    77e4:	ee 24       	eor	r14, r14
    77e6:	ff 24       	eor	r15, r15
    77e8:	f6 01       	movw	r30, r12
    77ea:	f2 96       	adiw	r30, 0x32	; 50
    77ec:	ec 0f       	add	r30, r28
    77ee:	fd 1f       	adc	r31, r29
    77f0:	40 82       	st	Z, r4
    77f2:	51 82       	std	Z+1, r5	; 0x01
    77f4:	34 c0       	rjmp	.+104    	; 0x785e <put_fat+0x1ba>
    77f6:	e7 e0       	ldi	r30, 0x07	; 7
    77f8:	76 95       	lsr	r23
    77fa:	67 95       	ror	r22
    77fc:	57 95       	ror	r21
    77fe:	47 95       	ror	r20
    7800:	ea 95       	dec	r30
    7802:	d1 f7       	brne	.-12     	; 0x77f8 <put_fat+0x154>
    7804:	8a a1       	ldd	r24, Y+34	; 0x22
    7806:	9b a1       	ldd	r25, Y+35	; 0x23
    7808:	ac a1       	ldd	r26, Y+36	; 0x24
    780a:	bd a1       	ldd	r27, Y+37	; 0x25
    780c:	48 0f       	add	r20, r24
    780e:	59 1f       	adc	r21, r25
    7810:	6a 1f       	adc	r22, r26
    7812:	7b 1f       	adc	r23, r27
    7814:	ce 01       	movw	r24, r28
    7816:	d6 da       	rcall	.-2644   	; 0x6dc4 <move_window>
    7818:	81 11       	cpse	r24, r1
    781a:	25 c0       	rjmp	.+74     	; 0x7866 <put_fat+0x1c2>
    781c:	72 e0       	ldi	r23, 0x02	; 2
    781e:	cc 0c       	add	r12, r12
    7820:	dd 1c       	adc	r13, r13
    7822:	ee 1c       	adc	r14, r14
    7824:	ff 1c       	adc	r15, r15
    7826:	7a 95       	dec	r23
    7828:	d1 f7       	brne	.-12     	; 0x781e <put_fat+0x17a>
    782a:	3c ef       	ldi	r19, 0xFC	; 252
    782c:	c3 22       	and	r12, r19
    782e:	31 e0       	ldi	r19, 0x01	; 1
    7830:	d3 22       	and	r13, r19
    7832:	ee 24       	eor	r14, r14
    7834:	ff 24       	eor	r15, r15
    7836:	f6 01       	movw	r30, r12
    7838:	f2 96       	adiw	r30, 0x32	; 50
    783a:	ec 0f       	add	r30, r28
    783c:	fd 1f       	adc	r31, r29
    783e:	40 81       	ld	r20, Z
    7840:	51 81       	ldd	r21, Z+1	; 0x01
    7842:	62 81       	ldd	r22, Z+2	; 0x02
    7844:	73 81       	ldd	r23, Z+3	; 0x03
    7846:	44 27       	eor	r20, r20
    7848:	55 27       	eor	r21, r21
    784a:	66 27       	eor	r22, r22
    784c:	70 7f       	andi	r23, 0xF0	; 240
    784e:	44 29       	or	r20, r4
    7850:	55 29       	or	r21, r5
    7852:	66 29       	or	r22, r6
    7854:	77 29       	or	r23, r7
    7856:	40 83       	st	Z, r20
    7858:	51 83       	std	Z+1, r21	; 0x01
    785a:	62 83       	std	Z+2, r22	; 0x02
    785c:	73 83       	std	Z+3, r23	; 0x03
    785e:	91 e0       	ldi	r25, 0x01	; 1
    7860:	9c 83       	std	Y+4, r25	; 0x04
    7862:	01 c0       	rjmp	.+2      	; 0x7866 <put_fat+0x1c2>
    7864:	82 e0       	ldi	r24, 0x02	; 2
    7866:	df 91       	pop	r29
    7868:	cf 91       	pop	r28
    786a:	1f 91       	pop	r17
    786c:	0f 91       	pop	r16
    786e:	ff 90       	pop	r15
    7870:	ef 90       	pop	r14
    7872:	df 90       	pop	r13
    7874:	cf 90       	pop	r12
    7876:	bf 90       	pop	r11
    7878:	af 90       	pop	r10
    787a:	9f 90       	pop	r9
    787c:	8f 90       	pop	r8
    787e:	7f 90       	pop	r7
    7880:	6f 90       	pop	r6
    7882:	5f 90       	pop	r5
    7884:	4f 90       	pop	r4
    7886:	08 95       	ret

00007888 <create_chain>:
    7888:	4f 92       	push	r4
    788a:	5f 92       	push	r5
    788c:	6f 92       	push	r6
    788e:	7f 92       	push	r7
    7890:	8f 92       	push	r8
    7892:	9f 92       	push	r9
    7894:	af 92       	push	r10
    7896:	bf 92       	push	r11
    7898:	cf 92       	push	r12
    789a:	df 92       	push	r13
    789c:	ef 92       	push	r14
    789e:	ff 92       	push	r15
    78a0:	0f 93       	push	r16
    78a2:	1f 93       	push	r17
    78a4:	cf 93       	push	r28
    78a6:	df 93       	push	r29
    78a8:	ec 01       	movw	r28, r24
    78aa:	2a 01       	movw	r4, r20
    78ac:	3b 01       	movw	r6, r22
    78ae:	41 15       	cp	r20, r1
    78b0:	51 05       	cpc	r21, r1
    78b2:	61 05       	cpc	r22, r1
    78b4:	71 05       	cpc	r23, r1
    78b6:	99 f4       	brne	.+38     	; 0x78de <create_chain+0x56>
    78b8:	8a 84       	ldd	r8, Y+10	; 0x0a
    78ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    78bc:	ac 84       	ldd	r10, Y+12	; 0x0c
    78be:	bd 84       	ldd	r11, Y+13	; 0x0d
    78c0:	81 14       	cp	r8, r1
    78c2:	91 04       	cpc	r9, r1
    78c4:	a1 04       	cpc	r10, r1
    78c6:	b1 04       	cpc	r11, r1
    78c8:	49 f1       	breq	.+82     	; 0x791c <create_chain+0x94>
    78ca:	4e 89       	ldd	r20, Y+22	; 0x16
    78cc:	5f 89       	ldd	r21, Y+23	; 0x17
    78ce:	68 8d       	ldd	r22, Y+24	; 0x18
    78d0:	79 8d       	ldd	r23, Y+25	; 0x19
    78d2:	84 16       	cp	r8, r20
    78d4:	95 06       	cpc	r9, r21
    78d6:	a6 06       	cpc	r10, r22
    78d8:	b7 06       	cpc	r11, r23
    78da:	00 f5       	brcc	.+64     	; 0x791c <create_chain+0x94>
    78dc:	23 c0       	rjmp	.+70     	; 0x7924 <create_chain+0x9c>
    78de:	79 dd       	rcall	.-1294   	; 0x73d2 <get_fat>
    78e0:	62 30       	cpi	r22, 0x02	; 2
    78e2:	71 05       	cpc	r23, r1
    78e4:	81 05       	cpc	r24, r1
    78e6:	91 05       	cpc	r25, r1
    78e8:	08 f4       	brcc	.+2      	; 0x78ec <create_chain+0x64>
    78ea:	92 c0       	rjmp	.+292    	; 0x7a10 <create_chain+0x188>
    78ec:	6f 3f       	cpi	r22, 0xFF	; 255
    78ee:	2f ef       	ldi	r18, 0xFF	; 255
    78f0:	72 07       	cpc	r23, r18
    78f2:	82 07       	cpc	r24, r18
    78f4:	92 07       	cpc	r25, r18
    78f6:	29 f4       	brne	.+10     	; 0x7902 <create_chain+0x7a>
    78f8:	4f ef       	ldi	r20, 0xFF	; 255
    78fa:	3f ef       	ldi	r19, 0xFF	; 255
    78fc:	2f ef       	ldi	r18, 0xFF	; 255
    78fe:	9f ef       	ldi	r25, 0xFF	; 255
    7900:	8c c0       	rjmp	.+280    	; 0x7a1a <create_chain+0x192>
    7902:	ce 88       	ldd	r12, Y+22	; 0x16
    7904:	df 88       	ldd	r13, Y+23	; 0x17
    7906:	e8 8c       	ldd	r14, Y+24	; 0x18
    7908:	f9 8c       	ldd	r15, Y+25	; 0x19
    790a:	6c 15       	cp	r22, r12
    790c:	7d 05       	cpc	r23, r13
    790e:	8e 05       	cpc	r24, r14
    7910:	9f 05       	cpc	r25, r15
    7912:	08 f4       	brcc	.+2      	; 0x7916 <create_chain+0x8e>
    7914:	7f c0       	rjmp	.+254    	; 0x7a14 <create_chain+0x18c>
    7916:	53 01       	movw	r10, r6
    7918:	42 01       	movw	r8, r4
    791a:	04 c0       	rjmp	.+8      	; 0x7924 <create_chain+0x9c>
    791c:	81 2c       	mov	r8, r1
    791e:	91 2c       	mov	r9, r1
    7920:	54 01       	movw	r10, r8
    7922:	83 94       	inc	r8
    7924:	75 01       	movw	r14, r10
    7926:	64 01       	movw	r12, r8
    7928:	8f ef       	ldi	r24, 0xFF	; 255
    792a:	c8 1a       	sub	r12, r24
    792c:	d8 0a       	sbc	r13, r24
    792e:	e8 0a       	sbc	r14, r24
    7930:	f8 0a       	sbc	r15, r24
    7932:	4e 89       	ldd	r20, Y+22	; 0x16
    7934:	5f 89       	ldd	r21, Y+23	; 0x17
    7936:	68 8d       	ldd	r22, Y+24	; 0x18
    7938:	79 8d       	ldd	r23, Y+25	; 0x19
    793a:	c4 16       	cp	r12, r20
    793c:	d5 06       	cpc	r13, r21
    793e:	e6 06       	cpc	r14, r22
    7940:	f7 06       	cpc	r15, r23
    7942:	80 f0       	brcs	.+32     	; 0x7964 <create_chain+0xdc>
    7944:	22 e0       	ldi	r18, 0x02	; 2
    7946:	82 16       	cp	r8, r18
    7948:	91 04       	cpc	r9, r1
    794a:	a1 04       	cpc	r10, r1
    794c:	b1 04       	cpc	r11, r1
    794e:	28 f4       	brcc	.+10     	; 0x795a <create_chain+0xd2>
    7950:	40 e0       	ldi	r20, 0x00	; 0
    7952:	30 e0       	ldi	r19, 0x00	; 0
    7954:	20 e0       	ldi	r18, 0x00	; 0
    7956:	90 e0       	ldi	r25, 0x00	; 0
    7958:	60 c0       	rjmp	.+192    	; 0x7a1a <create_chain+0x192>
    795a:	52 e0       	ldi	r21, 0x02	; 2
    795c:	c5 2e       	mov	r12, r21
    795e:	d1 2c       	mov	r13, r1
    7960:	e1 2c       	mov	r14, r1
    7962:	f1 2c       	mov	r15, r1
    7964:	b7 01       	movw	r22, r14
    7966:	a6 01       	movw	r20, r12
    7968:	ce 01       	movw	r24, r28
    796a:	33 dd       	rcall	.-1434   	; 0x73d2 <get_fat>
    796c:	61 15       	cp	r22, r1
    796e:	71 05       	cpc	r23, r1
    7970:	81 05       	cpc	r24, r1
    7972:	91 05       	cpc	r25, r1
    7974:	99 f0       	breq	.+38     	; 0x799c <create_chain+0x114>
    7976:	6f 3f       	cpi	r22, 0xFF	; 255
    7978:	2f ef       	ldi	r18, 0xFF	; 255
    797a:	72 07       	cpc	r23, r18
    797c:	82 07       	cpc	r24, r18
    797e:	92 07       	cpc	r25, r18
    7980:	09 f4       	brne	.+2      	; 0x7984 <create_chain+0xfc>
    7982:	ba cf       	rjmp	.-140    	; 0x78f8 <create_chain+0x70>
    7984:	61 30       	cpi	r22, 0x01	; 1
    7986:	71 05       	cpc	r23, r1
    7988:	81 05       	cpc	r24, r1
    798a:	91 05       	cpc	r25, r1
    798c:	09 f4       	brne	.+2      	; 0x7990 <create_chain+0x108>
    798e:	40 c0       	rjmp	.+128    	; 0x7a10 <create_chain+0x188>
    7990:	c8 14       	cp	r12, r8
    7992:	d9 04       	cpc	r13, r9
    7994:	ea 04       	cpc	r14, r10
    7996:	fb 04       	cpc	r15, r11
    7998:	39 f6       	brne	.-114    	; 0x7928 <create_chain+0xa0>
    799a:	da cf       	rjmp	.-76     	; 0x7950 <create_chain+0xc8>
    799c:	0f ef       	ldi	r16, 0xFF	; 255
    799e:	1f ef       	ldi	r17, 0xFF	; 255
    79a0:	2f ef       	ldi	r18, 0xFF	; 255
    79a2:	3f e0       	ldi	r19, 0x0F	; 15
    79a4:	b7 01       	movw	r22, r14
    79a6:	a6 01       	movw	r20, r12
    79a8:	ce 01       	movw	r24, r28
    79aa:	7c de       	rcall	.-776    	; 0x76a4 <put_fat>
    79ac:	81 11       	cpse	r24, r1
    79ae:	2d c0       	rjmp	.+90     	; 0x7a0a <create_chain+0x182>
    79b0:	41 14       	cp	r4, r1
    79b2:	51 04       	cpc	r5, r1
    79b4:	61 04       	cpc	r6, r1
    79b6:	71 04       	cpc	r7, r1
    79b8:	d1 f4       	brne	.+52     	; 0x79ee <create_chain+0x166>
    79ba:	ca 86       	std	Y+10, r12	; 0x0a
    79bc:	db 86       	std	Y+11, r13	; 0x0b
    79be:	ec 86       	std	Y+12, r14	; 0x0c
    79c0:	fd 86       	std	Y+13, r15	; 0x0d
    79c2:	4e 85       	ldd	r20, Y+14	; 0x0e
    79c4:	5f 85       	ldd	r21, Y+15	; 0x0f
    79c6:	68 89       	ldd	r22, Y+16	; 0x10
    79c8:	79 89       	ldd	r23, Y+17	; 0x11
    79ca:	4f 3f       	cpi	r20, 0xFF	; 255
    79cc:	8f ef       	ldi	r24, 0xFF	; 255
    79ce:	58 07       	cpc	r21, r24
    79d0:	68 07       	cpc	r22, r24
    79d2:	78 07       	cpc	r23, r24
    79d4:	a9 f0       	breq	.+42     	; 0x7a00 <create_chain+0x178>
    79d6:	41 50       	subi	r20, 0x01	; 1
    79d8:	51 09       	sbc	r21, r1
    79da:	61 09       	sbc	r22, r1
    79dc:	71 09       	sbc	r23, r1
    79de:	4e 87       	std	Y+14, r20	; 0x0e
    79e0:	5f 87       	std	Y+15, r21	; 0x0f
    79e2:	68 8b       	std	Y+16, r22	; 0x10
    79e4:	79 8b       	std	Y+17, r23	; 0x11
    79e6:	8d 81       	ldd	r24, Y+5	; 0x05
    79e8:	81 60       	ori	r24, 0x01	; 1
    79ea:	8d 83       	std	Y+5, r24	; 0x05
    79ec:	09 c0       	rjmp	.+18     	; 0x7a00 <create_chain+0x178>
    79ee:	97 01       	movw	r18, r14
    79f0:	86 01       	movw	r16, r12
    79f2:	b3 01       	movw	r22, r6
    79f4:	a2 01       	movw	r20, r4
    79f6:	ce 01       	movw	r24, r28
    79f8:	55 de       	rcall	.-854    	; 0x76a4 <put_fat>
    79fa:	88 23       	and	r24, r24
    79fc:	f1 f2       	breq	.-68     	; 0x79ba <create_chain+0x132>
    79fe:	05 c0       	rjmp	.+10     	; 0x7a0a <create_chain+0x182>
    7a00:	4c 2d       	mov	r20, r12
    7a02:	3d 2d       	mov	r19, r13
    7a04:	2e 2d       	mov	r18, r14
    7a06:	9f 2d       	mov	r25, r15
    7a08:	08 c0       	rjmp	.+16     	; 0x7a1a <create_chain+0x192>
    7a0a:	81 30       	cpi	r24, 0x01	; 1
    7a0c:	09 f4       	brne	.+2      	; 0x7a10 <create_chain+0x188>
    7a0e:	74 cf       	rjmp	.-280    	; 0x78f8 <create_chain+0x70>
    7a10:	41 e0       	ldi	r20, 0x01	; 1
    7a12:	9f cf       	rjmp	.-194    	; 0x7952 <create_chain+0xca>
    7a14:	46 2f       	mov	r20, r22
    7a16:	37 2f       	mov	r19, r23
    7a18:	28 2f       	mov	r18, r24
    7a1a:	64 2f       	mov	r22, r20
    7a1c:	73 2f       	mov	r23, r19
    7a1e:	82 2f       	mov	r24, r18
    7a20:	df 91       	pop	r29
    7a22:	cf 91       	pop	r28
    7a24:	1f 91       	pop	r17
    7a26:	0f 91       	pop	r16
    7a28:	ff 90       	pop	r15
    7a2a:	ef 90       	pop	r14
    7a2c:	df 90       	pop	r13
    7a2e:	cf 90       	pop	r12
    7a30:	bf 90       	pop	r11
    7a32:	af 90       	pop	r10
    7a34:	9f 90       	pop	r9
    7a36:	8f 90       	pop	r8
    7a38:	7f 90       	pop	r7
    7a3a:	6f 90       	pop	r6
    7a3c:	5f 90       	pop	r5
    7a3e:	4f 90       	pop	r4
    7a40:	08 95       	ret

00007a42 <dir_next>:
    7a42:	7f 92       	push	r7
    7a44:	8f 92       	push	r8
    7a46:	9f 92       	push	r9
    7a48:	af 92       	push	r10
    7a4a:	bf 92       	push	r11
    7a4c:	cf 92       	push	r12
    7a4e:	df 92       	push	r13
    7a50:	ef 92       	push	r14
    7a52:	ff 92       	push	r15
    7a54:	0f 93       	push	r16
    7a56:	1f 93       	push	r17
    7a58:	cf 93       	push	r28
    7a5a:	df 93       	push	r29
    7a5c:	ec 01       	movw	r28, r24
    7a5e:	6b 01       	movw	r12, r22
    7a60:	0c 81       	ldd	r16, Y+4	; 0x04
    7a62:	1d 81       	ldd	r17, Y+5	; 0x05
    7a64:	0f 5f       	subi	r16, 0xFF	; 255
    7a66:	1f 4f       	sbci	r17, 0xFF	; 255
    7a68:	01 15       	cp	r16, r1
    7a6a:	11 05       	cpc	r17, r1
    7a6c:	11 f4       	brne	.+4      	; 0x7a72 <dir_next+0x30>
    7a6e:	84 e0       	ldi	r24, 0x04	; 4
    7a70:	d8 c0       	rjmp	.+432    	; 0x7c22 <dir_next+0x1e0>
    7a72:	8e 85       	ldd	r24, Y+14	; 0x0e
    7a74:	9f 85       	ldd	r25, Y+15	; 0x0f
    7a76:	a8 89       	ldd	r26, Y+16	; 0x10
    7a78:	b9 89       	ldd	r27, Y+17	; 0x11
    7a7a:	00 97       	sbiw	r24, 0x00	; 0
    7a7c:	a1 05       	cpc	r26, r1
    7a7e:	b1 05       	cpc	r27, r1
    7a80:	b1 f3       	breq	.-20     	; 0x7a6e <dir_next+0x2c>
    7a82:	78 01       	movw	r14, r16
    7a84:	2f e0       	ldi	r18, 0x0F	; 15
    7a86:	e2 22       	and	r14, r18
    7a88:	ff 24       	eor	r15, r15
    7a8a:	e1 14       	cp	r14, r1
    7a8c:	f1 04       	cpc	r15, r1
    7a8e:	09 f0       	breq	.+2      	; 0x7a92 <dir_next+0x50>
    7a90:	b5 c0       	rjmp	.+362    	; 0x7bfc <dir_next+0x1ba>
    7a92:	01 96       	adiw	r24, 0x01	; 1
    7a94:	a1 1d       	adc	r26, r1
    7a96:	b1 1d       	adc	r27, r1
    7a98:	8e 87       	std	Y+14, r24	; 0x0e
    7a9a:	9f 87       	std	Y+15, r25	; 0x0f
    7a9c:	a8 8b       	std	Y+16, r26	; 0x10
    7a9e:	b9 8b       	std	Y+17, r27	; 0x11
    7aa0:	4a 85       	ldd	r20, Y+10	; 0x0a
    7aa2:	5b 85       	ldd	r21, Y+11	; 0x0b
    7aa4:	6c 85       	ldd	r22, Y+12	; 0x0c
    7aa6:	7d 85       	ldd	r23, Y+13	; 0x0d
    7aa8:	88 81       	ld	r24, Y
    7aaa:	99 81       	ldd	r25, Y+1	; 0x01
    7aac:	fc 01       	movw	r30, r24
    7aae:	41 15       	cp	r20, r1
    7ab0:	51 05       	cpc	r21, r1
    7ab2:	61 05       	cpc	r22, r1
    7ab4:	71 05       	cpc	r23, r1
    7ab6:	31 f4       	brne	.+12     	; 0x7ac4 <dir_next+0x82>
    7ab8:	80 85       	ldd	r24, Z+8	; 0x08
    7aba:	91 85       	ldd	r25, Z+9	; 0x09
    7abc:	08 17       	cp	r16, r24
    7abe:	19 07       	cpc	r17, r25
    7ac0:	b0 f6       	brcc	.-84     	; 0x7a6e <dir_next+0x2c>
    7ac2:	9c c0       	rjmp	.+312    	; 0x7bfc <dir_next+0x1ba>
    7ac4:	22 81       	ldd	r18, Z+2	; 0x02
    7ac6:	30 e0       	ldi	r19, 0x00	; 0
    7ac8:	21 50       	subi	r18, 0x01	; 1
    7aca:	31 09       	sbc	r19, r1
    7acc:	f8 01       	movw	r30, r16
    7ace:	a4 e0       	ldi	r26, 0x04	; 4
    7ad0:	f6 95       	lsr	r31
    7ad2:	e7 95       	ror	r30
    7ad4:	aa 95       	dec	r26
    7ad6:	e1 f7       	brne	.-8      	; 0x7ad0 <dir_next+0x8e>
    7ad8:	2e 23       	and	r18, r30
    7ada:	3f 23       	and	r19, r31
    7adc:	23 2b       	or	r18, r19
    7ade:	09 f0       	breq	.+2      	; 0x7ae2 <dir_next+0xa0>
    7ae0:	8d c0       	rjmp	.+282    	; 0x7bfc <dir_next+0x1ba>
    7ae2:	77 dc       	rcall	.-1810   	; 0x73d2 <get_fat>
    7ae4:	4b 01       	movw	r8, r22
    7ae6:	5c 01       	movw	r10, r24
    7ae8:	62 30       	cpi	r22, 0x02	; 2
    7aea:	71 05       	cpc	r23, r1
    7aec:	81 05       	cpc	r24, r1
    7aee:	91 05       	cpc	r25, r1
    7af0:	10 f4       	brcc	.+4      	; 0x7af6 <dir_next+0xb4>
    7af2:	82 e0       	ldi	r24, 0x02	; 2
    7af4:	96 c0       	rjmp	.+300    	; 0x7c22 <dir_next+0x1e0>
    7af6:	6f 3f       	cpi	r22, 0xFF	; 255
    7af8:	2f ef       	ldi	r18, 0xFF	; 255
    7afa:	72 07       	cpc	r23, r18
    7afc:	82 07       	cpc	r24, r18
    7afe:	92 07       	cpc	r25, r18
    7b00:	11 f4       	brne	.+4      	; 0x7b06 <dir_next+0xc4>
    7b02:	81 e0       	ldi	r24, 0x01	; 1
    7b04:	8e c0       	rjmp	.+284    	; 0x7c22 <dir_next+0x1e0>
    7b06:	88 81       	ld	r24, Y
    7b08:	99 81       	ldd	r25, Y+1	; 0x01
    7b0a:	fc 01       	movw	r30, r24
    7b0c:	46 89       	ldd	r20, Z+22	; 0x16
    7b0e:	57 89       	ldd	r21, Z+23	; 0x17
    7b10:	60 8d       	ldd	r22, Z+24	; 0x18
    7b12:	71 8d       	ldd	r23, Z+25	; 0x19
    7b14:	84 16       	cp	r8, r20
    7b16:	95 06       	cpc	r9, r21
    7b18:	a6 06       	cpc	r10, r22
    7b1a:	b7 06       	cpc	r11, r23
    7b1c:	08 f4       	brcc	.+2      	; 0x7b20 <dir_next+0xde>
    7b1e:	61 c0       	rjmp	.+194    	; 0x7be2 <dir_next+0x1a0>
    7b20:	cd 28       	or	r12, r13
    7b22:	09 f4       	brne	.+2      	; 0x7b26 <dir_next+0xe4>
    7b24:	a4 cf       	rjmp	.-184    	; 0x7a6e <dir_next+0x2c>
    7b26:	4a 85       	ldd	r20, Y+10	; 0x0a
    7b28:	5b 85       	ldd	r21, Y+11	; 0x0b
    7b2a:	6c 85       	ldd	r22, Y+12	; 0x0c
    7b2c:	7d 85       	ldd	r23, Y+13	; 0x0d
    7b2e:	ac de       	rcall	.-680    	; 0x7888 <create_chain>
    7b30:	4b 01       	movw	r8, r22
    7b32:	5c 01       	movw	r10, r24
    7b34:	61 15       	cp	r22, r1
    7b36:	71 05       	cpc	r23, r1
    7b38:	81 05       	cpc	r24, r1
    7b3a:	91 05       	cpc	r25, r1
    7b3c:	09 f4       	brne	.+2      	; 0x7b40 <dir_next+0xfe>
    7b3e:	70 c0       	rjmp	.+224    	; 0x7c20 <dir_next+0x1de>
    7b40:	61 30       	cpi	r22, 0x01	; 1
    7b42:	71 05       	cpc	r23, r1
    7b44:	81 05       	cpc	r24, r1
    7b46:	91 05       	cpc	r25, r1
    7b48:	a1 f2       	breq	.-88     	; 0x7af2 <dir_next+0xb0>
    7b4a:	6f 3f       	cpi	r22, 0xFF	; 255
    7b4c:	2f ef       	ldi	r18, 0xFF	; 255
    7b4e:	72 07       	cpc	r23, r18
    7b50:	82 07       	cpc	r24, r18
    7b52:	92 07       	cpc	r25, r18
    7b54:	b1 f2       	breq	.-84     	; 0x7b02 <dir_next+0xc0>
    7b56:	88 81       	ld	r24, Y
    7b58:	99 81       	ldd	r25, Y+1	; 0x01
    7b5a:	60 d8       	rcall	.-3904   	; 0x6c1c <sync_window>
    7b5c:	81 11       	cpse	r24, r1
    7b5e:	d1 cf       	rjmp	.-94     	; 0x7b02 <dir_next+0xc0>
    7b60:	88 81       	ld	r24, Y
    7b62:	99 81       	ldd	r25, Y+1	; 0x01
    7b64:	40 e0       	ldi	r20, 0x00	; 0
    7b66:	52 e0       	ldi	r21, 0x02	; 2
    7b68:	60 e0       	ldi	r22, 0x00	; 0
    7b6a:	70 e0       	ldi	r23, 0x00	; 0
    7b6c:	c2 96       	adiw	r24, 0x32	; 50
    7b6e:	0a d8       	rcall	.-4076   	; 0x6b84 <mem_set>
    7b70:	c8 80       	ld	r12, Y
    7b72:	d9 80       	ldd	r13, Y+1	; 0x01
    7b74:	b5 01       	movw	r22, r10
    7b76:	a4 01       	movw	r20, r8
    7b78:	c6 01       	movw	r24, r12
    7b7a:	02 dc       	rcall	.-2044   	; 0x7380 <clust2sect>
    7b7c:	f6 01       	movw	r30, r12
    7b7e:	66 a7       	std	Z+46, r22	; 0x2e
    7b80:	77 a7       	std	Z+47, r23	; 0x2f
    7b82:	80 ab       	std	Z+48, r24	; 0x30
    7b84:	91 ab       	std	Z+49, r25	; 0x31
    7b86:	c1 2c       	mov	r12, r1
    7b88:	d1 2c       	mov	r13, r1
    7b8a:	77 24       	eor	r7, r7
    7b8c:	73 94       	inc	r7
    7b8e:	e8 81       	ld	r30, Y
    7b90:	f9 81       	ldd	r31, Y+1	; 0x01
    7b92:	82 81       	ldd	r24, Z+2	; 0x02
    7b94:	90 e0       	ldi	r25, 0x00	; 0
    7b96:	c8 16       	cp	r12, r24
    7b98:	d9 06       	cpc	r13, r25
    7b9a:	b8 f4       	brcc	.+46     	; 0x7bca <dir_next+0x188>
    7b9c:	74 82       	std	Z+4, r7	; 0x04
    7b9e:	88 81       	ld	r24, Y
    7ba0:	99 81       	ldd	r25, Y+1	; 0x01
    7ba2:	3c d8       	rcall	.-3976   	; 0x6c1c <sync_window>
    7ba4:	81 11       	cpse	r24, r1
    7ba6:	ad cf       	rjmp	.-166    	; 0x7b02 <dir_next+0xc0>
    7ba8:	e8 81       	ld	r30, Y
    7baa:	f9 81       	ldd	r31, Y+1	; 0x01
    7bac:	86 a5       	ldd	r24, Z+46	; 0x2e
    7bae:	97 a5       	ldd	r25, Z+47	; 0x2f
    7bb0:	a0 a9       	ldd	r26, Z+48	; 0x30
    7bb2:	b1 a9       	ldd	r27, Z+49	; 0x31
    7bb4:	01 96       	adiw	r24, 0x01	; 1
    7bb6:	a1 1d       	adc	r26, r1
    7bb8:	b1 1d       	adc	r27, r1
    7bba:	86 a7       	std	Z+46, r24	; 0x2e
    7bbc:	97 a7       	std	Z+47, r25	; 0x2f
    7bbe:	a0 ab       	std	Z+48, r26	; 0x30
    7bc0:	b1 ab       	std	Z+49, r27	; 0x31
    7bc2:	ff ef       	ldi	r31, 0xFF	; 255
    7bc4:	cf 1a       	sub	r12, r31
    7bc6:	df 0a       	sbc	r13, r31
    7bc8:	e2 cf       	rjmp	.-60     	; 0x7b8e <dir_next+0x14c>
    7bca:	86 a5       	ldd	r24, Z+46	; 0x2e
    7bcc:	97 a5       	ldd	r25, Z+47	; 0x2f
    7bce:	a0 a9       	ldd	r26, Z+48	; 0x30
    7bd0:	b1 a9       	ldd	r27, Z+49	; 0x31
    7bd2:	8c 19       	sub	r24, r12
    7bd4:	9d 09       	sbc	r25, r13
    7bd6:	a1 09       	sbc	r26, r1
    7bd8:	b1 09       	sbc	r27, r1
    7bda:	86 a7       	std	Z+46, r24	; 0x2e
    7bdc:	97 a7       	std	Z+47, r25	; 0x2f
    7bde:	a0 ab       	std	Z+48, r26	; 0x30
    7be0:	b1 ab       	std	Z+49, r27	; 0x31
    7be2:	8a 86       	std	Y+10, r8	; 0x0a
    7be4:	9b 86       	std	Y+11, r9	; 0x0b
    7be6:	ac 86       	std	Y+12, r10	; 0x0c
    7be8:	bd 86       	std	Y+13, r11	; 0x0d
    7bea:	b5 01       	movw	r22, r10
    7bec:	a4 01       	movw	r20, r8
    7bee:	88 81       	ld	r24, Y
    7bf0:	99 81       	ldd	r25, Y+1	; 0x01
    7bf2:	c6 db       	rcall	.-2164   	; 0x7380 <clust2sect>
    7bf4:	6e 87       	std	Y+14, r22	; 0x0e
    7bf6:	7f 87       	std	Y+15, r23	; 0x0f
    7bf8:	88 8b       	std	Y+16, r24	; 0x10
    7bfa:	99 8b       	std	Y+17, r25	; 0x11
    7bfc:	0c 83       	std	Y+4, r16	; 0x04
    7bfe:	1d 83       	std	Y+5, r17	; 0x05
    7c00:	75 e0       	ldi	r23, 0x05	; 5
    7c02:	ee 0c       	add	r14, r14
    7c04:	ff 1c       	adc	r15, r15
    7c06:	7a 95       	dec	r23
    7c08:	e1 f7       	brne	.-8      	; 0x7c02 <dir_next+0x1c0>
    7c0a:	22 e3       	ldi	r18, 0x32	; 50
    7c0c:	e2 0e       	add	r14, r18
    7c0e:	f1 1c       	adc	r15, r1
    7c10:	88 81       	ld	r24, Y
    7c12:	99 81       	ldd	r25, Y+1	; 0x01
    7c14:	8e 0d       	add	r24, r14
    7c16:	9f 1d       	adc	r25, r15
    7c18:	8a 8b       	std	Y+18, r24	; 0x12
    7c1a:	9b 8b       	std	Y+19, r25	; 0x13
    7c1c:	80 e0       	ldi	r24, 0x00	; 0
    7c1e:	01 c0       	rjmp	.+2      	; 0x7c22 <dir_next+0x1e0>
    7c20:	87 e0       	ldi	r24, 0x07	; 7
    7c22:	df 91       	pop	r29
    7c24:	cf 91       	pop	r28
    7c26:	1f 91       	pop	r17
    7c28:	0f 91       	pop	r16
    7c2a:	ff 90       	pop	r15
    7c2c:	ef 90       	pop	r14
    7c2e:	df 90       	pop	r13
    7c30:	cf 90       	pop	r12
    7c32:	bf 90       	pop	r11
    7c34:	af 90       	pop	r10
    7c36:	9f 90       	pop	r9
    7c38:	8f 90       	pop	r8
    7c3a:	7f 90       	pop	r7
    7c3c:	08 95       	ret

00007c3e <follow_path>:
    7c3e:	8f 92       	push	r8
    7c40:	9f 92       	push	r9
    7c42:	af 92       	push	r10
    7c44:	bf 92       	push	r11
    7c46:	cf 92       	push	r12
    7c48:	df 92       	push	r13
    7c4a:	ff 92       	push	r15
    7c4c:	0f 93       	push	r16
    7c4e:	1f 93       	push	r17
    7c50:	cf 93       	push	r28
    7c52:	df 93       	push	r29
    7c54:	ec 01       	movw	r28, r24
    7c56:	8b 01       	movw	r16, r22
    7c58:	fb 01       	movw	r30, r22
    7c5a:	80 81       	ld	r24, Z
    7c5c:	8f 32       	cpi	r24, 0x2F	; 47
    7c5e:	11 f0       	breq	.+4      	; 0x7c64 <follow_path+0x26>
    7c60:	8c 35       	cpi	r24, 0x5C	; 92
    7c62:	39 f4       	brne	.+14     	; 0x7c72 <follow_path+0x34>
    7c64:	0f 5f       	subi	r16, 0xFF	; 255
    7c66:	1f 4f       	sbci	r17, 0xFF	; 255
    7c68:	1e 82       	std	Y+6, r1	; 0x06
    7c6a:	1f 82       	std	Y+7, r1	; 0x07
    7c6c:	18 86       	std	Y+8, r1	; 0x08
    7c6e:	19 86       	std	Y+9, r1	; 0x09
    7c70:	0a c0       	rjmp	.+20     	; 0x7c86 <follow_path+0x48>
    7c72:	e8 81       	ld	r30, Y
    7c74:	f9 81       	ldd	r31, Y+1	; 0x01
    7c76:	82 89       	ldd	r24, Z+18	; 0x12
    7c78:	93 89       	ldd	r25, Z+19	; 0x13
    7c7a:	a4 89       	ldd	r26, Z+20	; 0x14
    7c7c:	b5 89       	ldd	r27, Z+21	; 0x15
    7c7e:	8e 83       	std	Y+6, r24	; 0x06
    7c80:	9f 83       	std	Y+7, r25	; 0x07
    7c82:	a8 87       	std	Y+8, r26	; 0x08
    7c84:	b9 87       	std	Y+9, r27	; 0x09
    7c86:	f8 01       	movw	r30, r16
    7c88:	80 81       	ld	r24, Z
    7c8a:	80 32       	cpi	r24, 0x20	; 32
    7c8c:	18 f0       	brcs	.+6      	; 0x7c94 <follow_path+0x56>
    7c8e:	35 e0       	ldi	r19, 0x05	; 5
    7c90:	f3 2e       	mov	r15, r19
    7c92:	09 c0       	rjmp	.+18     	; 0x7ca6 <follow_path+0x68>
    7c94:	60 e0       	ldi	r22, 0x00	; 0
    7c96:	70 e0       	ldi	r23, 0x00	; 0
    7c98:	ce 01       	movw	r24, r28
    7c9a:	5f dc       	rcall	.-1858   	; 0x755a <dir_sdi>
    7c9c:	1a 8a       	std	Y+18, r1	; 0x12
    7c9e:	1b 8a       	std	Y+19, r1	; 0x13
    7ca0:	31 c1       	rjmp	.+610    	; 0x7f04 <follow_path+0x2c6>
    7ca2:	8c 35       	cpi	r24, 0x5C	; 92
    7ca4:	41 f4       	brne	.+16     	; 0x7cb6 <follow_path+0x78>
    7ca6:	58 01       	movw	r10, r16
    7ca8:	f8 01       	movw	r30, r16
    7caa:	80 81       	ld	r24, Z
    7cac:	0f 5f       	subi	r16, 0xFF	; 255
    7cae:	1f 4f       	sbci	r17, 0xFF	; 255
    7cb0:	8f 32       	cpi	r24, 0x2F	; 47
    7cb2:	b9 f7       	brne	.-18     	; 0x7ca2 <follow_path+0x64>
    7cb4:	f8 cf       	rjmp	.-16     	; 0x7ca6 <follow_path+0x68>
    7cb6:	cc 88       	ldd	r12, Y+20	; 0x14
    7cb8:	dd 88       	ldd	r13, Y+21	; 0x15
    7cba:	4b e0       	ldi	r20, 0x0B	; 11
    7cbc:	50 e0       	ldi	r21, 0x00	; 0
    7cbe:	60 e2       	ldi	r22, 0x20	; 32
    7cc0:	70 e0       	ldi	r23, 0x00	; 0
    7cc2:	c6 01       	movw	r24, r12
    7cc4:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <mem_set>
    7cc8:	f5 01       	movw	r30, r10
    7cca:	80 81       	ld	r24, Z
    7ccc:	8e 32       	cpi	r24, 0x2E	; 46
    7cce:	41 f0       	breq	.+16     	; 0x7ce0 <follow_path+0xa2>
    7cd0:	20 e0       	ldi	r18, 0x00	; 0
    7cd2:	30 e0       	ldi	r19, 0x00	; 0
    7cd4:	40 e0       	ldi	r20, 0x00	; 0
    7cd6:	50 e0       	ldi	r21, 0x00	; 0
    7cd8:	88 e0       	ldi	r24, 0x08	; 8
    7cda:	90 e0       	ldi	r25, 0x00	; 0
    7cdc:	b0 e0       	ldi	r27, 0x00	; 0
    7cde:	32 c0       	rjmp	.+100    	; 0x7d44 <follow_path+0x106>
    7ce0:	d5 01       	movw	r26, r10
    7ce2:	f6 01       	movw	r30, r12
    7ce4:	00 e0       	ldi	r16, 0x00	; 0
    7ce6:	10 e0       	ldi	r17, 0x00	; 0
    7ce8:	0f 5f       	subi	r16, 0xFF	; 255
    7cea:	1f 4f       	sbci	r17, 0xFF	; 255
    7cec:	8d 91       	ld	r24, X+
    7cee:	8e 32       	cpi	r24, 0x2E	; 46
    7cf0:	31 f4       	brne	.+12     	; 0x7cfe <follow_path+0xc0>
    7cf2:	03 30       	cpi	r16, 0x03	; 3
    7cf4:	11 05       	cpc	r17, r1
    7cf6:	09 f4       	brne	.+2      	; 0x7cfa <follow_path+0xbc>
    7cf8:	9f c0       	rjmp	.+318    	; 0x7e38 <follow_path+0x1fa>
    7cfa:	81 93       	st	Z+, r24
    7cfc:	f5 cf       	rjmp	.-22     	; 0x7ce8 <follow_path+0xaa>
    7cfe:	8f 32       	cpi	r24, 0x2F	; 47
    7d00:	29 f0       	breq	.+10     	; 0x7d0c <follow_path+0xce>
    7d02:	8c 35       	cpi	r24, 0x5C	; 92
    7d04:	19 f0       	breq	.+6      	; 0x7d0c <follow_path+0xce>
    7d06:	81 32       	cpi	r24, 0x21	; 33
    7d08:	08 f0       	brcs	.+2      	; 0x7d0c <follow_path+0xce>
    7d0a:	96 c0       	rjmp	.+300    	; 0x7e38 <follow_path+0x1fa>
    7d0c:	0a 0d       	add	r16, r10
    7d0e:	1b 1d       	adc	r17, r11
    7d10:	81 32       	cpi	r24, 0x21	; 33
    7d12:	10 f4       	brcc	.+4      	; 0x7d18 <follow_path+0xda>
    7d14:	84 e2       	ldi	r24, 0x24	; 36
    7d16:	01 c0       	rjmp	.+2      	; 0x7d1a <follow_path+0xdc>
    7d18:	80 e2       	ldi	r24, 0x20	; 32
    7d1a:	f6 01       	movw	r30, r12
    7d1c:	83 87       	std	Z+11, r24	; 0x0b
    7d1e:	8e c0       	rjmp	.+284    	; 0x7e3c <follow_path+0x1fe>
    7d20:	af 32       	cpi	r26, 0x2F	; 47
    7d22:	09 f4       	brne	.+2      	; 0x7d26 <follow_path+0xe8>
    7d24:	5c c0       	rjmp	.+184    	; 0x7dde <follow_path+0x1a0>
    7d26:	ac 35       	cpi	r26, 0x5C	; 92
    7d28:	09 f4       	brne	.+2      	; 0x7d2c <follow_path+0xee>
    7d2a:	59 c0       	rjmp	.+178    	; 0x7dde <follow_path+0x1a0>
    7d2c:	ae 32       	cpi	r26, 0x2E	; 46
    7d2e:	a1 f4       	brne	.+40     	; 0x7d58 <follow_path+0x11a>
    7d30:	08 97       	sbiw	r24, 0x08	; 8
    7d32:	09 f0       	breq	.+2      	; 0x7d36 <follow_path+0xf8>
    7d34:	81 c0       	rjmp	.+258    	; 0x7e38 <follow_path+0x1fa>
    7d36:	bb 0f       	add	r27, r27
    7d38:	bb 0f       	add	r27, r27
    7d3a:	28 e0       	ldi	r18, 0x08	; 8
    7d3c:	30 e0       	ldi	r19, 0x00	; 0
    7d3e:	8b e0       	ldi	r24, 0x0B	; 11
    7d40:	90 e0       	ldi	r25, 0x00	; 0
    7d42:	a8 01       	movw	r20, r16
    7d44:	8a 01       	movw	r16, r20
    7d46:	0f 5f       	subi	r16, 0xFF	; 255
    7d48:	1f 4f       	sbci	r17, 0xFF	; 255
    7d4a:	f5 01       	movw	r30, r10
    7d4c:	e4 0f       	add	r30, r20
    7d4e:	f5 1f       	adc	r31, r21
    7d50:	a0 81       	ld	r26, Z
    7d52:	a1 32       	cpi	r26, 0x21	; 33
    7d54:	28 f7       	brcc	.-54     	; 0x7d20 <follow_path+0xe2>
    7d56:	41 c0       	rjmp	.+130    	; 0x7dda <follow_path+0x19c>
    7d58:	28 17       	cp	r18, r24
    7d5a:	39 07       	cpc	r19, r25
    7d5c:	08 f0       	brcs	.+2      	; 0x7d60 <follow_path+0x122>
    7d5e:	6c c0       	rjmp	.+216    	; 0x7e38 <follow_path+0x1fa>
    7d60:	a7 fd       	sbrc	r26, 7
    7d62:	b3 60       	ori	r27, 0x03	; 3
    7d64:	6f e7       	ldi	r22, 0x7F	; 127
    7d66:	6a 0f       	add	r22, r26
    7d68:	6f 31       	cpi	r22, 0x1F	; 31
    7d6a:	20 f0       	brcs	.+8      	; 0x7d74 <follow_path+0x136>
    7d6c:	60 e2       	ldi	r22, 0x20	; 32
    7d6e:	6a 0f       	add	r22, r26
    7d70:	6d 31       	cpi	r22, 0x1D	; 29
    7d72:	38 f5       	brcc	.+78     	; 0x7dc2 <follow_path+0x184>
    7d74:	4e 5f       	subi	r20, 0xFE	; 254
    7d76:	5f 4f       	sbci	r21, 0xFF	; 255
    7d78:	f5 01       	movw	r30, r10
    7d7a:	e0 0f       	add	r30, r16
    7d7c:	f1 1f       	adc	r31, r17
    7d7e:	10 81       	ld	r17, Z
    7d80:	60 ec       	ldi	r22, 0xC0	; 192
    7d82:	61 0f       	add	r22, r17
    7d84:	6f 33       	cpi	r22, 0x3F	; 63
    7d86:	28 f0       	brcs	.+10     	; 0x7d92 <follow_path+0x154>
    7d88:	60 e8       	ldi	r22, 0x80	; 128
    7d8a:	61 0f       	add	r22, r17
    7d8c:	6d 37       	cpi	r22, 0x7D	; 125
    7d8e:	08 f0       	brcs	.+2      	; 0x7d92 <follow_path+0x154>
    7d90:	53 c0       	rjmp	.+166    	; 0x7e38 <follow_path+0x1fa>
    7d92:	bc 01       	movw	r22, r24
    7d94:	61 50       	subi	r22, 0x01	; 1
    7d96:	71 09       	sbc	r23, r1
    7d98:	26 17       	cp	r18, r22
    7d9a:	37 07       	cpc	r19, r23
    7d9c:	08 f0       	brcs	.+2      	; 0x7da0 <follow_path+0x162>
    7d9e:	4c c0       	rjmp	.+152    	; 0x7e38 <follow_path+0x1fa>
    7da0:	49 01       	movw	r8, r18
    7da2:	ff ef       	ldi	r31, 0xFF	; 255
    7da4:	8f 1a       	sub	r8, r31
    7da6:	9f 0a       	sbc	r9, r31
    7da8:	b6 01       	movw	r22, r12
    7daa:	62 0f       	add	r22, r18
    7dac:	73 1f       	adc	r23, r19
    7dae:	fb 01       	movw	r30, r22
    7db0:	a0 83       	st	Z, r26
    7db2:	2e 5f       	subi	r18, 0xFE	; 254
    7db4:	3f 4f       	sbci	r19, 0xFF	; 255
    7db6:	8c 0c       	add	r8, r12
    7db8:	9d 1c       	adc	r9, r13
    7dba:	f4 01       	movw	r30, r8
    7dbc:	10 83       	st	Z, r17
    7dbe:	8a 01       	movw	r16, r20
    7dc0:	c0 cf       	rjmp	.-128    	; 0x7d42 <follow_path+0x104>
    7dc2:	4a 2f       	mov	r20, r26
    7dc4:	50 e0       	ldi	r21, 0x00	; 0
    7dc6:	e5 e7       	ldi	r30, 0x75	; 117
    7dc8:	f8 e2       	ldi	r31, 0x28	; 40
    7dca:	61 91       	ld	r22, Z+
    7dcc:	66 23       	and	r22, r22
    7dce:	09 f1       	breq	.+66     	; 0x7e12 <follow_path+0x1d4>
    7dd0:	70 e0       	ldi	r23, 0x00	; 0
    7dd2:	64 17       	cp	r22, r20
    7dd4:	75 07       	cpc	r23, r21
    7dd6:	c9 f7       	brne	.-14     	; 0x7dca <follow_path+0x18c>
    7dd8:	2f c0       	rjmp	.+94     	; 0x7e38 <follow_path+0x1fa>
    7dda:	44 e0       	ldi	r20, 0x04	; 4
    7ddc:	01 c0       	rjmp	.+2      	; 0x7de0 <follow_path+0x1a2>
    7dde:	40 e0       	ldi	r20, 0x00	; 0
    7de0:	23 2b       	or	r18, r19
    7de2:	51 f1       	breq	.+84     	; 0x7e38 <follow_path+0x1fa>
    7de4:	f6 01       	movw	r30, r12
    7de6:	20 81       	ld	r18, Z
    7de8:	25 3e       	cpi	r18, 0xE5	; 229
    7dea:	09 f4       	brne	.+2      	; 0x7dee <follow_path+0x1b0>
    7dec:	f0 82       	st	Z, r15
    7dee:	08 97       	sbiw	r24, 0x08	; 8
    7df0:	11 f4       	brne	.+4      	; 0x7df6 <follow_path+0x1b8>
    7df2:	bb 0f       	add	r27, r27
    7df4:	bb 0f       	add	r27, r27
    7df6:	8b 2f       	mov	r24, r27
    7df8:	83 70       	andi	r24, 0x03	; 3
    7dfa:	81 30       	cpi	r24, 0x01	; 1
    7dfc:	09 f4       	brne	.+2      	; 0x7e00 <follow_path+0x1c2>
    7dfe:	40 61       	ori	r20, 0x10	; 16
    7e00:	bc 70       	andi	r27, 0x0C	; 12
    7e02:	b4 30       	cpi	r27, 0x04	; 4
    7e04:	09 f4       	brne	.+2      	; 0x7e08 <follow_path+0x1ca>
    7e06:	48 60       	ori	r20, 0x08	; 8
    7e08:	0a 0d       	add	r16, r10
    7e0a:	1b 1d       	adc	r17, r11
    7e0c:	f6 01       	movw	r30, r12
    7e0e:	43 87       	std	Z+11, r20	; 0x0b
    7e10:	15 c0       	rjmp	.+42     	; 0x7e3c <follow_path+0x1fe>
    7e12:	4f eb       	ldi	r20, 0xBF	; 191
    7e14:	4a 0f       	add	r20, r26
    7e16:	4a 31       	cpi	r20, 0x1A	; 26
    7e18:	10 f4       	brcc	.+4      	; 0x7e1e <follow_path+0x1e0>
    7e1a:	b2 60       	ori	r27, 0x02	; 2
    7e1c:	06 c0       	rjmp	.+12     	; 0x7e2a <follow_path+0x1ec>
    7e1e:	4f e9       	ldi	r20, 0x9F	; 159
    7e20:	4a 0f       	add	r20, r26
    7e22:	4a 31       	cpi	r20, 0x1A	; 26
    7e24:	10 f4       	brcc	.+4      	; 0x7e2a <follow_path+0x1ec>
    7e26:	b1 60       	ori	r27, 0x01	; 1
    7e28:	a0 52       	subi	r26, 0x20	; 32
    7e2a:	f6 01       	movw	r30, r12
    7e2c:	e2 0f       	add	r30, r18
    7e2e:	f3 1f       	adc	r31, r19
    7e30:	a0 83       	st	Z, r26
    7e32:	2f 5f       	subi	r18, 0xFF	; 255
    7e34:	3f 4f       	sbci	r19, 0xFF	; 255
    7e36:	85 cf       	rjmp	.-246    	; 0x7d42 <follow_path+0x104>
    7e38:	86 e0       	ldi	r24, 0x06	; 6
    7e3a:	64 c0       	rjmp	.+200    	; 0x7f04 <follow_path+0x2c6>
    7e3c:	60 e0       	ldi	r22, 0x00	; 0
    7e3e:	70 e0       	ldi	r23, 0x00	; 0
    7e40:	ce 01       	movw	r24, r28
    7e42:	8b db       	rcall	.-2282   	; 0x755a <dir_sdi>
    7e44:	81 11       	cpse	r24, r1
    7e46:	24 c0       	rjmp	.+72     	; 0x7e90 <follow_path+0x252>
    7e48:	4e 85       	ldd	r20, Y+14	; 0x0e
    7e4a:	5f 85       	ldd	r21, Y+15	; 0x0f
    7e4c:	68 89       	ldd	r22, Y+16	; 0x10
    7e4e:	79 89       	ldd	r23, Y+17	; 0x11
    7e50:	88 81       	ld	r24, Y
    7e52:	99 81       	ldd	r25, Y+1	; 0x01
    7e54:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <move_window>
    7e58:	81 11       	cpse	r24, r1
    7e5a:	1a c0       	rjmp	.+52     	; 0x7e90 <follow_path+0x252>
    7e5c:	ea 89       	ldd	r30, Y+18	; 0x12
    7e5e:	fb 89       	ldd	r31, Y+19	; 0x13
    7e60:	90 81       	ld	r25, Z
    7e62:	99 23       	and	r25, r25
    7e64:	a1 f0       	breq	.+40     	; 0x7e8e <follow_path+0x250>
    7e66:	93 85       	ldd	r25, Z+11	; 0x0b
    7e68:	93 fd       	sbrc	r25, 3
    7e6a:	0c c0       	rjmp	.+24     	; 0x7e84 <follow_path+0x246>
    7e6c:	ac 89       	ldd	r26, Y+20	; 0x14
    7e6e:	bd 89       	ldd	r27, Y+21	; 0x15
    7e70:	9f 01       	movw	r18, r30
    7e72:	25 5f       	subi	r18, 0xF5	; 245
    7e74:	3f 4f       	sbci	r19, 0xFF	; 255
    7e76:	e2 17       	cp	r30, r18
    7e78:	f3 07       	cpc	r31, r19
    7e7a:	51 f0       	breq	.+20     	; 0x7e90 <follow_path+0x252>
    7e7c:	41 91       	ld	r20, Z+
    7e7e:	9d 91       	ld	r25, X+
    7e80:	49 17       	cp	r20, r25
    7e82:	c9 f3       	breq	.-14     	; 0x7e76 <follow_path+0x238>
    7e84:	60 e0       	ldi	r22, 0x00	; 0
    7e86:	70 e0       	ldi	r23, 0x00	; 0
    7e88:	ce 01       	movw	r24, r28
    7e8a:	db dd       	rcall	.-1098   	; 0x7a42 <dir_next>
    7e8c:	db cf       	rjmp	.-74     	; 0x7e44 <follow_path+0x206>
    7e8e:	84 e0       	ldi	r24, 0x04	; 4
    7e90:	ec 89       	ldd	r30, Y+20	; 0x14
    7e92:	fd 89       	ldd	r31, Y+21	; 0x15
    7e94:	93 85       	ldd	r25, Z+11	; 0x0b
    7e96:	88 23       	and	r24, r24
    7e98:	a1 f0       	breq	.+40     	; 0x7ec2 <follow_path+0x284>
    7e9a:	84 30       	cpi	r24, 0x04	; 4
    7e9c:	99 f5       	brne	.+102    	; 0x7f04 <follow_path+0x2c6>
    7e9e:	29 2f       	mov	r18, r25
    7ea0:	24 70       	andi	r18, 0x04	; 4
    7ea2:	95 ff       	sbrs	r25, 5
    7ea4:	0b c0       	rjmp	.+22     	; 0x7ebc <follow_path+0x27e>
    7ea6:	1e 82       	std	Y+6, r1	; 0x06
    7ea8:	1f 82       	std	Y+7, r1	; 0x07
    7eaa:	18 86       	std	Y+8, r1	; 0x08
    7eac:	19 86       	std	Y+9, r1	; 0x09
    7eae:	1a 8a       	std	Y+18, r1	; 0x12
    7eb0:	1b 8a       	std	Y+19, r1	; 0x13
    7eb2:	22 23       	and	r18, r18
    7eb4:	09 f4       	brne	.+2      	; 0x7eb8 <follow_path+0x27a>
    7eb6:	f7 ce       	rjmp	.-530    	; 0x7ca6 <follow_path+0x68>
    7eb8:	80 e0       	ldi	r24, 0x00	; 0
    7eba:	24 c0       	rjmp	.+72     	; 0x7f04 <follow_path+0x2c6>
    7ebc:	22 23       	and	r18, r18
    7ebe:	09 f1       	breq	.+66     	; 0x7f02 <follow_path+0x2c4>
    7ec0:	21 c0       	rjmp	.+66     	; 0x7f04 <follow_path+0x2c6>
    7ec2:	92 fd       	sbrc	r25, 2
    7ec4:	f9 cf       	rjmp	.-14     	; 0x7eb8 <follow_path+0x27a>
    7ec6:	ea 89       	ldd	r30, Y+18	; 0x12
    7ec8:	fb 89       	ldd	r31, Y+19	; 0x13
    7eca:	83 85       	ldd	r24, Z+11	; 0x0b
    7ecc:	84 ff       	sbrs	r24, 4
    7ece:	19 c0       	rjmp	.+50     	; 0x7f02 <follow_path+0x2c4>
    7ed0:	42 8d       	ldd	r20, Z+26	; 0x1a
    7ed2:	53 8d       	ldd	r21, Z+27	; 0x1b
    7ed4:	60 e0       	ldi	r22, 0x00	; 0
    7ed6:	70 e0       	ldi	r23, 0x00	; 0
    7ed8:	a8 81       	ld	r26, Y
    7eda:	b9 81       	ldd	r27, Y+1	; 0x01
    7edc:	8c 91       	ld	r24, X
    7ede:	83 30       	cpi	r24, 0x03	; 3
    7ee0:	59 f4       	brne	.+22     	; 0x7ef8 <follow_path+0x2ba>
    7ee2:	84 89       	ldd	r24, Z+20	; 0x14
    7ee4:	95 89       	ldd	r25, Z+21	; 0x15
    7ee6:	a0 e0       	ldi	r26, 0x00	; 0
    7ee8:	b0 e0       	ldi	r27, 0x00	; 0
    7eea:	dc 01       	movw	r26, r24
    7eec:	99 27       	eor	r25, r25
    7eee:	88 27       	eor	r24, r24
    7ef0:	48 2b       	or	r20, r24
    7ef2:	59 2b       	or	r21, r25
    7ef4:	6a 2b       	or	r22, r26
    7ef6:	7b 2b       	or	r23, r27
    7ef8:	4e 83       	std	Y+6, r20	; 0x06
    7efa:	5f 83       	std	Y+7, r21	; 0x07
    7efc:	68 87       	std	Y+8, r22	; 0x08
    7efe:	79 87       	std	Y+9, r23	; 0x09
    7f00:	d2 ce       	rjmp	.-604    	; 0x7ca6 <follow_path+0x68>
    7f02:	85 e0       	ldi	r24, 0x05	; 5
    7f04:	df 91       	pop	r29
    7f06:	cf 91       	pop	r28
    7f08:	1f 91       	pop	r17
    7f0a:	0f 91       	pop	r16
    7f0c:	ff 90       	pop	r15
    7f0e:	df 90       	pop	r13
    7f10:	cf 90       	pop	r12
    7f12:	bf 90       	pop	r11
    7f14:	af 90       	pop	r10
    7f16:	9f 90       	pop	r9
    7f18:	8f 90       	pop	r8
    7f1a:	08 95       	ret

00007f1c <dir_alloc.constprop.10>:
    7f1c:	cf 93       	push	r28
    7f1e:	df 93       	push	r29
    7f20:	ec 01       	movw	r28, r24
    7f22:	60 e0       	ldi	r22, 0x00	; 0
    7f24:	70 e0       	ldi	r23, 0x00	; 0
    7f26:	19 db       	rcall	.-2510   	; 0x755a <dir_sdi>
    7f28:	81 11       	cpse	r24, r1
    7f2a:	16 c0       	rjmp	.+44     	; 0x7f58 <dir_alloc.constprop.10+0x3c>
    7f2c:	4e 85       	ldd	r20, Y+14	; 0x0e
    7f2e:	5f 85       	ldd	r21, Y+15	; 0x0f
    7f30:	68 89       	ldd	r22, Y+16	; 0x10
    7f32:	79 89       	ldd	r23, Y+17	; 0x11
    7f34:	88 81       	ld	r24, Y
    7f36:	99 81       	ldd	r25, Y+1	; 0x01
    7f38:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <move_window>
    7f3c:	81 11       	cpse	r24, r1
    7f3e:	0c c0       	rjmp	.+24     	; 0x7f58 <dir_alloc.constprop.10+0x3c>
    7f40:	ea 89       	ldd	r30, Y+18	; 0x12
    7f42:	fb 89       	ldd	r31, Y+19	; 0x13
    7f44:	90 81       	ld	r25, Z
    7f46:	95 3e       	cpi	r25, 0xE5	; 229
    7f48:	51 f0       	breq	.+20     	; 0x7f5e <dir_alloc.constprop.10+0x42>
    7f4a:	99 23       	and	r25, r25
    7f4c:	41 f0       	breq	.+16     	; 0x7f5e <dir_alloc.constprop.10+0x42>
    7f4e:	61 e0       	ldi	r22, 0x01	; 1
    7f50:	70 e0       	ldi	r23, 0x00	; 0
    7f52:	ce 01       	movw	r24, r28
    7f54:	76 dd       	rcall	.-1300   	; 0x7a42 <dir_next>
    7f56:	e8 cf       	rjmp	.-48     	; 0x7f28 <dir_alloc.constprop.10+0xc>
    7f58:	84 30       	cpi	r24, 0x04	; 4
    7f5a:	09 f4       	brne	.+2      	; 0x7f5e <dir_alloc.constprop.10+0x42>
    7f5c:	87 e0       	ldi	r24, 0x07	; 7
    7f5e:	df 91       	pop	r29
    7f60:	cf 91       	pop	r28
    7f62:	08 95       	ret

00007f64 <dir_register>:
    7f64:	1f 93       	push	r17
    7f66:	cf 93       	push	r28
    7f68:	df 93       	push	r29
    7f6a:	ec 01       	movw	r28, r24
    7f6c:	d7 df       	rcall	.-82     	; 0x7f1c <dir_alloc.constprop.10>
    7f6e:	18 2f       	mov	r17, r24
    7f70:	81 11       	cpse	r24, r1
    7f72:	1f c0       	rjmp	.+62     	; 0x7fb2 <dir_register+0x4e>
    7f74:	4e 85       	ldd	r20, Y+14	; 0x0e
    7f76:	5f 85       	ldd	r21, Y+15	; 0x0f
    7f78:	68 89       	ldd	r22, Y+16	; 0x10
    7f7a:	79 89       	ldd	r23, Y+17	; 0x11
    7f7c:	88 81       	ld	r24, Y
    7f7e:	99 81       	ldd	r25, Y+1	; 0x01
    7f80:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <move_window>
    7f84:	18 2f       	mov	r17, r24
    7f86:	81 11       	cpse	r24, r1
    7f88:	14 c0       	rjmp	.+40     	; 0x7fb2 <dir_register+0x4e>
    7f8a:	40 e2       	ldi	r20, 0x20	; 32
    7f8c:	50 e0       	ldi	r21, 0x00	; 0
    7f8e:	60 e0       	ldi	r22, 0x00	; 0
    7f90:	70 e0       	ldi	r23, 0x00	; 0
    7f92:	8a 89       	ldd	r24, Y+18	; 0x12
    7f94:	9b 89       	ldd	r25, Y+19	; 0x13
    7f96:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <mem_set>
    7f9a:	6c 89       	ldd	r22, Y+20	; 0x14
    7f9c:	7d 89       	ldd	r23, Y+21	; 0x15
    7f9e:	4b e0       	ldi	r20, 0x0B	; 11
    7fa0:	50 e0       	ldi	r21, 0x00	; 0
    7fa2:	8a 89       	ldd	r24, Y+18	; 0x12
    7fa4:	9b 89       	ldd	r25, Y+19	; 0x13
    7fa6:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <mem_cpy>
    7faa:	e8 81       	ld	r30, Y
    7fac:	f9 81       	ldd	r31, Y+1	; 0x01
    7fae:	81 e0       	ldi	r24, 0x01	; 1
    7fb0:	84 83       	std	Z+4, r24	; 0x04
    7fb2:	81 2f       	mov	r24, r17
    7fb4:	df 91       	pop	r29
    7fb6:	cf 91       	pop	r28
    7fb8:	1f 91       	pop	r17
    7fba:	08 95       	ret

00007fbc <remove_chain>:
    7fbc:	8f 92       	push	r8
    7fbe:	9f 92       	push	r9
    7fc0:	af 92       	push	r10
    7fc2:	bf 92       	push	r11
    7fc4:	cf 92       	push	r12
    7fc6:	df 92       	push	r13
    7fc8:	ef 92       	push	r14
    7fca:	ff 92       	push	r15
    7fcc:	0f 93       	push	r16
    7fce:	1f 93       	push	r17
    7fd0:	cf 93       	push	r28
    7fd2:	df 93       	push	r29
    7fd4:	ec 01       	movw	r28, r24
    7fd6:	6a 01       	movw	r12, r20
    7fd8:	7b 01       	movw	r14, r22
    7fda:	42 30       	cpi	r20, 0x02	; 2
    7fdc:	51 05       	cpc	r21, r1
    7fde:	61 05       	cpc	r22, r1
    7fe0:	71 05       	cpc	r23, r1
    7fe2:	08 f4       	brcc	.+2      	; 0x7fe6 <remove_chain+0x2a>
    7fe4:	4f c0       	rjmp	.+158    	; 0x8084 <remove_chain+0xc8>
    7fe6:	4e 89       	ldd	r20, Y+22	; 0x16
    7fe8:	5f 89       	ldd	r21, Y+23	; 0x17
    7fea:	68 8d       	ldd	r22, Y+24	; 0x18
    7fec:	79 8d       	ldd	r23, Y+25	; 0x19
    7fee:	c4 16       	cp	r12, r20
    7ff0:	d5 06       	cpc	r13, r21
    7ff2:	e6 06       	cpc	r14, r22
    7ff4:	f7 06       	cpc	r15, r23
    7ff6:	08 f0       	brcs	.+2      	; 0x7ffa <remove_chain+0x3e>
    7ff8:	45 c0       	rjmp	.+138    	; 0x8084 <remove_chain+0xc8>
    7ffa:	4e 89       	ldd	r20, Y+22	; 0x16
    7ffc:	5f 89       	ldd	r21, Y+23	; 0x17
    7ffe:	68 8d       	ldd	r22, Y+24	; 0x18
    8000:	79 8d       	ldd	r23, Y+25	; 0x19
    8002:	c4 16       	cp	r12, r20
    8004:	d5 06       	cpc	r13, r21
    8006:	e6 06       	cpc	r14, r22
    8008:	f7 06       	cpc	r15, r23
    800a:	58 f4       	brcc	.+22     	; 0x8022 <remove_chain+0x66>
    800c:	b7 01       	movw	r22, r14
    800e:	a6 01       	movw	r20, r12
    8010:	ce 01       	movw	r24, r28
    8012:	df d9       	rcall	.-3138   	; 0x73d2 <get_fat>
    8014:	4b 01       	movw	r8, r22
    8016:	5c 01       	movw	r10, r24
    8018:	61 15       	cp	r22, r1
    801a:	71 05       	cpc	r23, r1
    801c:	81 05       	cpc	r24, r1
    801e:	91 05       	cpc	r25, r1
    8020:	11 f4       	brne	.+4      	; 0x8026 <remove_chain+0x6a>
    8022:	80 e0       	ldi	r24, 0x00	; 0
    8024:	30 c0       	rjmp	.+96     	; 0x8086 <remove_chain+0xca>
    8026:	81 e0       	ldi	r24, 0x01	; 1
    8028:	88 16       	cp	r8, r24
    802a:	91 04       	cpc	r9, r1
    802c:	a1 04       	cpc	r10, r1
    802e:	b1 04       	cpc	r11, r1
    8030:	49 f1       	breq	.+82     	; 0x8084 <remove_chain+0xc8>
    8032:	8f ef       	ldi	r24, 0xFF	; 255
    8034:	88 16       	cp	r8, r24
    8036:	98 06       	cpc	r9, r24
    8038:	a8 06       	cpc	r10, r24
    803a:	b8 06       	cpc	r11, r24
    803c:	09 f1       	breq	.+66     	; 0x8080 <remove_chain+0xc4>
    803e:	00 e0       	ldi	r16, 0x00	; 0
    8040:	10 e0       	ldi	r17, 0x00	; 0
    8042:	98 01       	movw	r18, r16
    8044:	b7 01       	movw	r22, r14
    8046:	a6 01       	movw	r20, r12
    8048:	ce 01       	movw	r24, r28
    804a:	2c db       	rcall	.-2472   	; 0x76a4 <put_fat>
    804c:	81 11       	cpse	r24, r1
    804e:	1b c0       	rjmp	.+54     	; 0x8086 <remove_chain+0xca>
    8050:	4e 85       	ldd	r20, Y+14	; 0x0e
    8052:	5f 85       	ldd	r21, Y+15	; 0x0f
    8054:	68 89       	ldd	r22, Y+16	; 0x10
    8056:	79 89       	ldd	r23, Y+17	; 0x11
    8058:	4f 3f       	cpi	r20, 0xFF	; 255
    805a:	8f ef       	ldi	r24, 0xFF	; 255
    805c:	58 07       	cpc	r21, r24
    805e:	68 07       	cpc	r22, r24
    8060:	78 07       	cpc	r23, r24
    8062:	59 f0       	breq	.+22     	; 0x807a <remove_chain+0xbe>
    8064:	4f 5f       	subi	r20, 0xFF	; 255
    8066:	5f 4f       	sbci	r21, 0xFF	; 255
    8068:	6f 4f       	sbci	r22, 0xFF	; 255
    806a:	7f 4f       	sbci	r23, 0xFF	; 255
    806c:	4e 87       	std	Y+14, r20	; 0x0e
    806e:	5f 87       	std	Y+15, r21	; 0x0f
    8070:	68 8b       	std	Y+16, r22	; 0x10
    8072:	79 8b       	std	Y+17, r23	; 0x11
    8074:	8d 81       	ldd	r24, Y+5	; 0x05
    8076:	81 60       	ori	r24, 0x01	; 1
    8078:	8d 83       	std	Y+5, r24	; 0x05
    807a:	75 01       	movw	r14, r10
    807c:	64 01       	movw	r12, r8
    807e:	bd cf       	rjmp	.-134    	; 0x7ffa <remove_chain+0x3e>
    8080:	81 e0       	ldi	r24, 0x01	; 1
    8082:	01 c0       	rjmp	.+2      	; 0x8086 <remove_chain+0xca>
    8084:	82 e0       	ldi	r24, 0x02	; 2
    8086:	df 91       	pop	r29
    8088:	cf 91       	pop	r28
    808a:	1f 91       	pop	r17
    808c:	0f 91       	pop	r16
    808e:	ff 90       	pop	r15
    8090:	ef 90       	pop	r14
    8092:	df 90       	pop	r13
    8094:	cf 90       	pop	r12
    8096:	bf 90       	pop	r11
    8098:	af 90       	pop	r10
    809a:	9f 90       	pop	r9
    809c:	8f 90       	pop	r8
    809e:	08 95       	ret

000080a0 <f_mount>:
    80a0:	cf 93       	push	r28
    80a2:	df 93       	push	r29
    80a4:	cd b7       	in	r28, 0x3d	; 61
    80a6:	de b7       	in	r29, 0x3e	; 62
    80a8:	27 97       	sbiw	r28, 0x07	; 7
    80aa:	cd bf       	out	0x3d, r28	; 61
    80ac:	de bf       	out	0x3e, r29	; 62
    80ae:	8b 83       	std	Y+3, r24	; 0x03
    80b0:	9c 83       	std	Y+4, r25	; 0x04
    80b2:	6d 83       	std	Y+5, r22	; 0x05
    80b4:	7e 83       	std	Y+6, r23	; 0x06
    80b6:	69 83       	std	Y+1, r22	; 0x01
    80b8:	7a 83       	std	Y+2, r23	; 0x02
    80ba:	ce 01       	movw	r24, r28
    80bc:	01 96       	adiw	r24, 0x01	; 1
    80be:	4f 83       	std	Y+7, r20	; 0x07
    80c0:	0e 94 cc 35 	call	0x6b98	; 0x6b98 <get_ldnumber>
    80c4:	4f 81       	ldd	r20, Y+7	; 0x07
    80c6:	97 fd       	sbrc	r25, 7
    80c8:	22 c0       	rjmp	.+68     	; 0x810e <f_mount+0x6e>
    80ca:	88 0f       	add	r24, r24
    80cc:	99 1f       	adc	r25, r25
    80ce:	fc 01       	movw	r30, r24
    80d0:	e1 59       	subi	r30, 0x91	; 145
    80d2:	f5 4c       	sbci	r31, 0xC5	; 197
    80d4:	01 90       	ld	r0, Z+
    80d6:	f0 81       	ld	r31, Z
    80d8:	e0 2d       	mov	r30, r0
    80da:	30 97       	sbiw	r30, 0x00	; 0
    80dc:	09 f0       	breq	.+2      	; 0x80e0 <f_mount+0x40>
    80de:	10 82       	st	Z, r1
    80e0:	eb 81       	ldd	r30, Y+3	; 0x03
    80e2:	fc 81       	ldd	r31, Y+4	; 0x04
    80e4:	30 97       	sbiw	r30, 0x00	; 0
    80e6:	09 f0       	breq	.+2      	; 0x80ea <f_mount+0x4a>
    80e8:	10 82       	st	Z, r1
    80ea:	dc 01       	movw	r26, r24
    80ec:	a1 59       	subi	r26, 0x91	; 145
    80ee:	b5 4c       	sbci	r27, 0xC5	; 197
    80f0:	ed 93       	st	X+, r30
    80f2:	fc 93       	st	X, r31
    80f4:	ef 2b       	or	r30, r31
    80f6:	69 f0       	breq	.+26     	; 0x8112 <f_mount+0x72>
    80f8:	41 30       	cpi	r20, 0x01	; 1
    80fa:	59 f4       	brne	.+22     	; 0x8112 <f_mount+0x72>
    80fc:	40 e0       	ldi	r20, 0x00	; 0
    80fe:	be 01       	movw	r22, r28
    8100:	6b 5f       	subi	r22, 0xFB	; 251
    8102:	7f 4f       	sbci	r23, 0xFF	; 255
    8104:	ce 01       	movw	r24, r28
    8106:	03 96       	adiw	r24, 0x03	; 3
    8108:	0e 94 5b 37 	call	0x6eb6	; 0x6eb6 <find_volume>
    810c:	03 c0       	rjmp	.+6      	; 0x8114 <f_mount+0x74>
    810e:	8b e0       	ldi	r24, 0x0B	; 11
    8110:	01 c0       	rjmp	.+2      	; 0x8114 <f_mount+0x74>
    8112:	80 e0       	ldi	r24, 0x00	; 0
    8114:	27 96       	adiw	r28, 0x07	; 7
    8116:	cd bf       	out	0x3d, r28	; 61
    8118:	de bf       	out	0x3e, r29	; 62
    811a:	df 91       	pop	r29
    811c:	cf 91       	pop	r28
    811e:	08 95       	ret

00008120 <f_open>:
    8120:	4f 92       	push	r4
    8122:	5f 92       	push	r5
    8124:	6f 92       	push	r6
    8126:	7f 92       	push	r7
    8128:	9f 92       	push	r9
    812a:	af 92       	push	r10
    812c:	bf 92       	push	r11
    812e:	cf 92       	push	r12
    8130:	df 92       	push	r13
    8132:	ef 92       	push	r14
    8134:	ff 92       	push	r15
    8136:	0f 93       	push	r16
    8138:	1f 93       	push	r17
    813a:	cf 93       	push	r28
    813c:	df 93       	push	r29
    813e:	cd b7       	in	r28, 0x3d	; 61
    8140:	de b7       	in	r29, 0x3e	; 62
    8142:	a4 97       	sbiw	r28, 0x24	; 36
    8144:	cd bf       	out	0x3d, r28	; 61
    8146:	de bf       	out	0x3e, r29	; 62
    8148:	5c 01       	movw	r10, r24
    814a:	6b a3       	std	Y+35, r22	; 0x23
    814c:	7c a3       	std	Y+36, r23	; 0x24
    814e:	f4 2e       	mov	r15, r20
    8150:	00 97       	sbiw	r24, 0x00	; 0
    8152:	09 f4       	brne	.+2      	; 0x8156 <f_open+0x36>
    8154:	f3 c0       	rjmp	.+486    	; 0x833c <f_open+0x21c>
    8156:	dc 01       	movw	r26, r24
    8158:	1d 92       	st	X+, r1
    815a:	1c 92       	st	X, r1
    815c:	4e 71       	andi	r20, 0x1E	; 30
    815e:	be 01       	movw	r22, r28
    8160:	6d 5d       	subi	r22, 0xDD	; 221
    8162:	7f 4f       	sbci	r23, 0xFF	; 255
    8164:	ce 01       	movw	r24, r28
    8166:	01 96       	adiw	r24, 0x01	; 1
    8168:	0e 94 5b 37 	call	0x6eb6	; 0x6eb6 <find_volume>
    816c:	81 11       	cpse	r24, r1
    816e:	ed c0       	rjmp	.+474    	; 0x834a <f_open+0x22a>
    8170:	ce 01       	movw	r24, r28
    8172:	47 96       	adiw	r24, 0x17	; 23
    8174:	8d 8b       	std	Y+21, r24	; 0x15
    8176:	9e 8b       	std	Y+22, r25	; 0x16
    8178:	6b a1       	ldd	r22, Y+35	; 0x23
    817a:	7c a1       	ldd	r23, Y+36	; 0x24
    817c:	46 97       	sbiw	r24, 0x16	; 22
    817e:	5f dd       	rcall	.-1346   	; 0x7c3e <follow_path>
    8180:	0b 89       	ldd	r16, Y+19	; 0x13
    8182:	1c 89       	ldd	r17, Y+20	; 0x14
    8184:	81 11       	cpse	r24, r1
    8186:	04 c0       	rjmp	.+8      	; 0x8190 <f_open+0x70>
    8188:	01 15       	cp	r16, r1
    818a:	11 05       	cpc	r17, r1
    818c:	09 f4       	brne	.+2      	; 0x8190 <f_open+0x70>
    818e:	86 e0       	ldi	r24, 0x06	; 6
    8190:	bf 2d       	mov	r27, r15
    8192:	bf 71       	andi	r27, 0x1F	; 31
    8194:	9b 2e       	mov	r9, r27
    8196:	9f 2d       	mov	r25, r15
    8198:	9c 71       	andi	r25, 0x1C	; 28
    819a:	09 f4       	brne	.+2      	; 0x819e <f_open+0x7e>
    819c:	71 c0       	rjmp	.+226    	; 0x8280 <f_open+0x160>
    819e:	88 23       	and	r24, r24
    81a0:	69 f0       	breq	.+26     	; 0x81bc <f_open+0x9c>
    81a2:	84 30       	cpi	r24, 0x04	; 4
    81a4:	19 f4       	brne	.+6      	; 0x81ac <f_open+0x8c>
    81a6:	ce 01       	movw	r24, r28
    81a8:	01 96       	adiw	r24, 0x01	; 1
    81aa:	dc de       	rcall	.-584    	; 0x7f64 <dir_register>
    81ac:	e9 2d       	mov	r30, r9
    81ae:	e8 60       	ori	r30, 0x08	; 8
    81b0:	9e 2e       	mov	r9, r30
    81b2:	0b 89       	ldd	r16, Y+19	; 0x13
    81b4:	1c 89       	ldd	r17, Y+20	; 0x14
    81b6:	88 23       	and	r24, r24
    81b8:	49 f0       	breq	.+18     	; 0x81cc <f_open+0xac>
    81ba:	c7 c0       	rjmp	.+398    	; 0x834a <f_open+0x22a>
    81bc:	d8 01       	movw	r26, r16
    81be:	1b 96       	adiw	r26, 0x0b	; 11
    81c0:	8c 91       	ld	r24, X
    81c2:	81 71       	andi	r24, 0x11	; 17
    81c4:	09 f0       	breq	.+2      	; 0x81c8 <f_open+0xa8>
    81c6:	c0 c0       	rjmp	.+384    	; 0x8348 <f_open+0x228>
    81c8:	f2 fc       	sbrc	r15, 2
    81ca:	ba c0       	rjmp	.+372    	; 0x8340 <f_open+0x220>
    81cc:	93 fe       	sbrs	r9, 3
    81ce:	63 c0       	rjmp	.+198    	; 0x8296 <f_open+0x176>
    81d0:	80 e0       	ldi	r24, 0x00	; 0
    81d2:	90 e0       	ldi	r25, 0x00	; 0
    81d4:	a1 e2       	ldi	r26, 0x21	; 33
    81d6:	b6 e4       	ldi	r27, 0x46	; 70
    81d8:	f8 01       	movw	r30, r16
    81da:	86 87       	std	Z+14, r24	; 0x0e
    81dc:	97 87       	std	Z+15, r25	; 0x0f
    81de:	a0 8b       	std	Z+16, r26	; 0x10
    81e0:	b1 8b       	std	Z+17, r27	; 0x11
    81e2:	86 8b       	std	Z+22, r24	; 0x16
    81e4:	97 8b       	std	Z+23, r25	; 0x17
    81e6:	a0 8f       	std	Z+24, r26	; 0x18
    81e8:	b1 8f       	std	Z+25, r27	; 0x19
    81ea:	13 86       	std	Z+11, r1	; 0x0b
    81ec:	d8 01       	movw	r26, r16
    81ee:	14 8e       	std	Z+28, r1	; 0x1c
    81f0:	15 8e       	std	Z+29, r1	; 0x1d
    81f2:	16 8e       	std	Z+30, r1	; 0x1e
    81f4:	17 8e       	std	Z+31, r1	; 0x1f
    81f6:	e9 81       	ldd	r30, Y+1	; 0x01
    81f8:	fa 81       	ldd	r31, Y+2	; 0x02
    81fa:	5a 96       	adiw	r26, 0x1a	; 26
    81fc:	cd 90       	ld	r12, X+
    81fe:	dc 90       	ld	r13, X
    8200:	5b 97       	sbiw	r26, 0x1b	; 27
    8202:	e1 2c       	mov	r14, r1
    8204:	f1 2c       	mov	r15, r1
    8206:	80 81       	ld	r24, Z
    8208:	83 30       	cpi	r24, 0x03	; 3
    820a:	69 f4       	brne	.+26     	; 0x8226 <f_open+0x106>
    820c:	54 96       	adiw	r26, 0x14	; 20
    820e:	4d 91       	ld	r20, X+
    8210:	5c 91       	ld	r21, X
    8212:	55 97       	sbiw	r26, 0x15	; 21
    8214:	60 e0       	ldi	r22, 0x00	; 0
    8216:	70 e0       	ldi	r23, 0x00	; 0
    8218:	ba 01       	movw	r22, r20
    821a:	55 27       	eor	r21, r21
    821c:	44 27       	eor	r20, r20
    821e:	c4 2a       	or	r12, r20
    8220:	d5 2a       	or	r13, r21
    8222:	e6 2a       	or	r14, r22
    8224:	f7 2a       	or	r15, r23
    8226:	d8 01       	movw	r26, r16
    8228:	5a 96       	adiw	r26, 0x1a	; 26
    822a:	1d 92       	st	X+, r1
    822c:	1c 92       	st	X, r1
    822e:	5b 97       	sbiw	r26, 0x1b	; 27
    8230:	54 96       	adiw	r26, 0x14	; 20
    8232:	1d 92       	st	X+, r1
    8234:	1c 92       	st	X, r1
    8236:	55 97       	sbiw	r26, 0x15	; 21
    8238:	81 e0       	ldi	r24, 0x01	; 1
    823a:	84 83       	std	Z+4, r24	; 0x04
    823c:	c1 14       	cp	r12, r1
    823e:	d1 04       	cpc	r13, r1
    8240:	e1 04       	cpc	r14, r1
    8242:	f1 04       	cpc	r15, r1
    8244:	41 f1       	breq	.+80     	; 0x8296 <f_open+0x176>
    8246:	46 a4       	ldd	r4, Z+46	; 0x2e
    8248:	57 a4       	ldd	r5, Z+47	; 0x2f
    824a:	60 a8       	ldd	r6, Z+48	; 0x30
    824c:	71 a8       	ldd	r7, Z+49	; 0x31
    824e:	b7 01       	movw	r22, r14
    8250:	a6 01       	movw	r20, r12
    8252:	cf 01       	movw	r24, r30
    8254:	b3 de       	rcall	.-666    	; 0x7fbc <remove_chain>
    8256:	81 11       	cpse	r24, r1
    8258:	78 c0       	rjmp	.+240    	; 0x834a <f_open+0x22a>
    825a:	89 81       	ldd	r24, Y+1	; 0x01
    825c:	9a 81       	ldd	r25, Y+2	; 0x02
    825e:	b1 e0       	ldi	r27, 0x01	; 1
    8260:	cb 1a       	sub	r12, r27
    8262:	d1 08       	sbc	r13, r1
    8264:	e1 08       	sbc	r14, r1
    8266:	f1 08       	sbc	r15, r1
    8268:	fc 01       	movw	r30, r24
    826a:	c2 86       	std	Z+10, r12	; 0x0a
    826c:	d3 86       	std	Z+11, r13	; 0x0b
    826e:	e4 86       	std	Z+12, r14	; 0x0c
    8270:	f5 86       	std	Z+13, r15	; 0x0d
    8272:	b3 01       	movw	r22, r6
    8274:	a2 01       	movw	r20, r4
    8276:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <move_window>
    827a:	88 23       	and	r24, r24
    827c:	61 f0       	breq	.+24     	; 0x8296 <f_open+0x176>
    827e:	65 c0       	rjmp	.+202    	; 0x834a <f_open+0x22a>
    8280:	81 11       	cpse	r24, r1
    8282:	63 c0       	rjmp	.+198    	; 0x834a <f_open+0x22a>
    8284:	d8 01       	movw	r26, r16
    8286:	1b 96       	adiw	r26, 0x0b	; 11
    8288:	8c 91       	ld	r24, X
    828a:	84 fd       	sbrc	r24, 4
    828c:	5b c0       	rjmp	.+182    	; 0x8344 <f_open+0x224>
    828e:	f1 fe       	sbrs	r15, 1
    8290:	02 c0       	rjmp	.+4      	; 0x8296 <f_open+0x176>
    8292:	80 fd       	sbrc	r24, 0
    8294:	59 c0       	rjmp	.+178    	; 0x8348 <f_open+0x228>
    8296:	93 fe       	sbrs	r9, 3
    8298:	03 c0       	rjmp	.+6      	; 0x82a0 <f_open+0x180>
    829a:	b9 2d       	mov	r27, r9
    829c:	b0 62       	ori	r27, 0x20	; 32
    829e:	9b 2e       	mov	r9, r27
    82a0:	e9 80       	ldd	r14, Y+1	; 0x01
    82a2:	fa 80       	ldd	r15, Y+2	; 0x02
    82a4:	f7 01       	movw	r30, r14
    82a6:	46 a5       	ldd	r20, Z+46	; 0x2e
    82a8:	57 a5       	ldd	r21, Z+47	; 0x2f
    82aa:	60 a9       	ldd	r22, Z+48	; 0x30
    82ac:	71 a9       	ldd	r23, Z+49	; 0x31
    82ae:	d5 01       	movw	r26, r10
    82b0:	5a 96       	adiw	r26, 0x1a	; 26
    82b2:	4d 93       	st	X+, r20
    82b4:	5d 93       	st	X+, r21
    82b6:	6d 93       	st	X+, r22
    82b8:	7c 93       	st	X, r23
    82ba:	5d 97       	sbiw	r26, 0x1d	; 29
    82bc:	5e 96       	adiw	r26, 0x1e	; 30
    82be:	0d 93       	st	X+, r16
    82c0:	1c 93       	st	X, r17
    82c2:	5f 97       	sbiw	r26, 0x1f	; 31
    82c4:	14 96       	adiw	r26, 0x04	; 4
    82c6:	9c 92       	st	X, r9
    82c8:	14 97       	sbiw	r26, 0x04	; 4
    82ca:	15 96       	adiw	r26, 0x05	; 5
    82cc:	1c 92       	st	X, r1
    82ce:	f8 01       	movw	r30, r16
    82d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    82d2:	93 8d       	ldd	r25, Z+27	; 0x1b
    82d4:	a0 e0       	ldi	r26, 0x00	; 0
    82d6:	b0 e0       	ldi	r27, 0x00	; 0
    82d8:	f7 01       	movw	r30, r14
    82da:	20 81       	ld	r18, Z
    82dc:	23 30       	cpi	r18, 0x03	; 3
    82de:	61 f4       	brne	.+24     	; 0x82f8 <f_open+0x1d8>
    82e0:	f8 01       	movw	r30, r16
    82e2:	44 89       	ldd	r20, Z+20	; 0x14
    82e4:	55 89       	ldd	r21, Z+21	; 0x15
    82e6:	60 e0       	ldi	r22, 0x00	; 0
    82e8:	70 e0       	ldi	r23, 0x00	; 0
    82ea:	ba 01       	movw	r22, r20
    82ec:	55 27       	eor	r21, r21
    82ee:	44 27       	eor	r20, r20
    82f0:	84 2b       	or	r24, r20
    82f2:	95 2b       	or	r25, r21
    82f4:	a6 2b       	or	r26, r22
    82f6:	b7 2b       	or	r27, r23
    82f8:	f5 01       	movw	r30, r10
    82fa:	86 87       	std	Z+14, r24	; 0x0e
    82fc:	97 87       	std	Z+15, r25	; 0x0f
    82fe:	a0 8b       	std	Z+16, r26	; 0x10
    8300:	b1 8b       	std	Z+17, r27	; 0x11
    8302:	f8 01       	movw	r30, r16
    8304:	84 8d       	ldd	r24, Z+28	; 0x1c
    8306:	95 8d       	ldd	r25, Z+29	; 0x1d
    8308:	a6 8d       	ldd	r26, Z+30	; 0x1e
    830a:	b7 8d       	ldd	r27, Z+31	; 0x1f
    830c:	f5 01       	movw	r30, r10
    830e:	82 87       	std	Z+10, r24	; 0x0a
    8310:	93 87       	std	Z+11, r25	; 0x0b
    8312:	a4 87       	std	Z+12, r26	; 0x0c
    8314:	b5 87       	std	Z+13, r27	; 0x0d
    8316:	16 82       	std	Z+6, r1	; 0x06
    8318:	17 82       	std	Z+7, r1	; 0x07
    831a:	10 86       	std	Z+8, r1	; 0x08
    831c:	11 86       	std	Z+9, r1	; 0x09
    831e:	16 8a       	std	Z+22, r1	; 0x16
    8320:	17 8a       	std	Z+23, r1	; 0x17
    8322:	10 8e       	std	Z+24, r1	; 0x18
    8324:	11 8e       	std	Z+25, r1	; 0x19
    8326:	e0 82       	st	Z, r14
    8328:	f1 82       	std	Z+1, r15	; 0x01
    832a:	d7 01       	movw	r26, r14
    832c:	16 96       	adiw	r26, 0x06	; 6
    832e:	8d 91       	ld	r24, X+
    8330:	9c 91       	ld	r25, X
    8332:	17 97       	sbiw	r26, 0x07	; 7
    8334:	82 83       	std	Z+2, r24	; 0x02
    8336:	93 83       	std	Z+3, r25	; 0x03
    8338:	80 e0       	ldi	r24, 0x00	; 0
    833a:	07 c0       	rjmp	.+14     	; 0x834a <f_open+0x22a>
    833c:	89 e0       	ldi	r24, 0x09	; 9
    833e:	05 c0       	rjmp	.+10     	; 0x834a <f_open+0x22a>
    8340:	88 e0       	ldi	r24, 0x08	; 8
    8342:	03 c0       	rjmp	.+6      	; 0x834a <f_open+0x22a>
    8344:	84 e0       	ldi	r24, 0x04	; 4
    8346:	01 c0       	rjmp	.+2      	; 0x834a <f_open+0x22a>
    8348:	87 e0       	ldi	r24, 0x07	; 7
    834a:	a4 96       	adiw	r28, 0x24	; 36
    834c:	cd bf       	out	0x3d, r28	; 61
    834e:	de bf       	out	0x3e, r29	; 62
    8350:	df 91       	pop	r29
    8352:	cf 91       	pop	r28
    8354:	1f 91       	pop	r17
    8356:	0f 91       	pop	r16
    8358:	ff 90       	pop	r15
    835a:	ef 90       	pop	r14
    835c:	df 90       	pop	r13
    835e:	cf 90       	pop	r12
    8360:	bf 90       	pop	r11
    8362:	af 90       	pop	r10
    8364:	9f 90       	pop	r9
    8366:	7f 90       	pop	r7
    8368:	6f 90       	pop	r6
    836a:	5f 90       	pop	r5
    836c:	4f 90       	pop	r4
    836e:	08 95       	ret

00008370 <f_read>:
    8370:	2f 92       	push	r2
    8372:	3f 92       	push	r3
    8374:	4f 92       	push	r4
    8376:	5f 92       	push	r5
    8378:	6f 92       	push	r6
    837a:	7f 92       	push	r7
    837c:	8f 92       	push	r8
    837e:	9f 92       	push	r9
    8380:	af 92       	push	r10
    8382:	bf 92       	push	r11
    8384:	cf 92       	push	r12
    8386:	df 92       	push	r13
    8388:	ef 92       	push	r14
    838a:	ff 92       	push	r15
    838c:	0f 93       	push	r16
    838e:	1f 93       	push	r17
    8390:	cf 93       	push	r28
    8392:	df 93       	push	r29
    8394:	ec 01       	movw	r28, r24
    8396:	5b 01       	movw	r10, r22
    8398:	7a 01       	movw	r14, r20
    839a:	19 01       	movw	r2, r18
    839c:	f9 01       	movw	r30, r18
    839e:	10 82       	st	Z, r1
    83a0:	11 82       	std	Z+1, r1	; 0x01
    83a2:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <validate>
    83a6:	81 11       	cpse	r24, r1
    83a8:	05 c1       	rjmp	.+522    	; 0x85b4 <f_read+0x244>
    83aa:	8d 81       	ldd	r24, Y+5	; 0x05
    83ac:	81 11       	cpse	r24, r1
    83ae:	02 c1       	rjmp	.+516    	; 0x85b4 <f_read+0x244>
    83b0:	8c 81       	ldd	r24, Y+4	; 0x04
    83b2:	80 ff       	sbrs	r24, 0
    83b4:	fe c0       	rjmp	.+508    	; 0x85b2 <f_read+0x242>
    83b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    83b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    83ba:	ac 85       	ldd	r26, Y+12	; 0x0c
    83bc:	bd 85       	ldd	r27, Y+13	; 0x0d
    83be:	4e 81       	ldd	r20, Y+6	; 0x06
    83c0:	5f 81       	ldd	r21, Y+7	; 0x07
    83c2:	68 85       	ldd	r22, Y+8	; 0x08
    83c4:	79 85       	ldd	r23, Y+9	; 0x09
    83c6:	84 1b       	sub	r24, r20
    83c8:	95 0b       	sbc	r25, r21
    83ca:	a6 0b       	sbc	r26, r22
    83cc:	b7 0b       	sbc	r27, r23
    83ce:	a7 01       	movw	r20, r14
    83d0:	60 e0       	ldi	r22, 0x00	; 0
    83d2:	70 e0       	ldi	r23, 0x00	; 0
    83d4:	84 17       	cp	r24, r20
    83d6:	95 07       	cpc	r25, r21
    83d8:	a6 07       	cpc	r26, r22
    83da:	b7 07       	cpc	r27, r23
    83dc:	08 f0       	brcs	.+2      	; 0x83e0 <f_read+0x70>
    83de:	74 c0       	rjmp	.+232    	; 0x84c8 <f_read+0x158>
    83e0:	7c 01       	movw	r14, r24
    83e2:	72 c0       	rjmp	.+228    	; 0x84c8 <f_read+0x158>
    83e4:	4e 81       	ldd	r20, Y+6	; 0x06
    83e6:	5f 81       	ldd	r21, Y+7	; 0x07
    83e8:	68 85       	ldd	r22, Y+8	; 0x08
    83ea:	79 85       	ldd	r23, Y+9	; 0x09
    83ec:	db 01       	movw	r26, r22
    83ee:	ca 01       	movw	r24, r20
    83f0:	91 70       	andi	r25, 0x01	; 1
    83f2:	aa 27       	eor	r26, r26
    83f4:	bb 27       	eor	r27, r27
    83f6:	89 2b       	or	r24, r25
    83f8:	8a 2b       	or	r24, r26
    83fa:	8b 2b       	or	r24, r27
    83fc:	09 f0       	breq	.+2      	; 0x8400 <f_read+0x90>
    83fe:	ad c0       	rjmp	.+346    	; 0x855a <f_read+0x1ea>
    8400:	88 81       	ld	r24, Y
    8402:	99 81       	ldd	r25, Y+1	; 0x01
    8404:	fc 01       	movw	r30, r24
    8406:	12 81       	ldd	r17, Z+2	; 0x02
    8408:	11 50       	subi	r17, 0x01	; 1
    840a:	2a 01       	movw	r4, r20
    840c:	3b 01       	movw	r6, r22
    840e:	29 e0       	ldi	r18, 0x09	; 9
    8410:	76 94       	lsr	r7
    8412:	67 94       	ror	r6
    8414:	57 94       	ror	r5
    8416:	47 94       	ror	r4
    8418:	2a 95       	dec	r18
    841a:	d1 f7       	brne	.-12     	; 0x8410 <f_read+0xa0>
    841c:	14 21       	and	r17, r4
    841e:	09 f4       	brne	.+2      	; 0x8422 <f_read+0xb2>
    8420:	58 c0       	rjmp	.+176    	; 0x84d2 <f_read+0x162>
    8422:	88 80       	ld	r8, Y
    8424:	99 80       	ldd	r9, Y+1	; 0x01
    8426:	4a 89       	ldd	r20, Y+18	; 0x12
    8428:	5b 89       	ldd	r21, Y+19	; 0x13
    842a:	6c 89       	ldd	r22, Y+20	; 0x14
    842c:	7d 89       	ldd	r23, Y+21	; 0x15
    842e:	c4 01       	movw	r24, r8
    8430:	0e 94 c0 39 	call	0x7380	; 0x7380 <clust2sect>
    8434:	61 15       	cp	r22, r1
    8436:	71 05       	cpc	r23, r1
    8438:	81 05       	cpc	r24, r1
    843a:	91 05       	cpc	r25, r1
    843c:	09 f4       	brne	.+2      	; 0x8440 <f_read+0xd0>
    843e:	69 c0       	rjmp	.+210    	; 0x8512 <f_read+0x1a2>
    8440:	2b 01       	movw	r4, r22
    8442:	3c 01       	movw	r6, r24
    8444:	41 0e       	add	r4, r17
    8446:	51 1c       	adc	r5, r1
    8448:	61 1c       	adc	r6, r1
    844a:	71 1c       	adc	r7, r1
    844c:	67 01       	movw	r12, r14
    844e:	cd 2c       	mov	r12, r13
    8450:	dd 24       	eor	r13, r13
    8452:	c6 94       	lsr	r12
    8454:	c1 14       	cp	r12, r1
    8456:	d1 04       	cpc	r13, r1
    8458:	09 f4       	brne	.+2      	; 0x845c <f_read+0xec>
    845a:	7b c0       	rjmp	.+246    	; 0x8552 <f_read+0x1e2>
    845c:	f4 01       	movw	r30, r8
    845e:	82 81       	ldd	r24, Z+2	; 0x02
    8460:	21 2f       	mov	r18, r17
    8462:	30 e0       	ldi	r19, 0x00	; 0
    8464:	a6 01       	movw	r20, r12
    8466:	42 0f       	add	r20, r18
    8468:	53 1f       	adc	r21, r19
    846a:	90 e0       	ldi	r25, 0x00	; 0
    846c:	84 17       	cp	r24, r20
    846e:	95 07       	cpc	r25, r21
    8470:	18 f4       	brcc	.+6      	; 0x8478 <f_read+0x108>
    8472:	6c 01       	movw	r12, r24
    8474:	c2 1a       	sub	r12, r18
    8476:	d3 0a       	sbc	r13, r19
    8478:	86 01       	movw	r16, r12
    847a:	a3 01       	movw	r20, r6
    847c:	92 01       	movw	r18, r4
    847e:	b5 01       	movw	r22, r10
    8480:	f4 01       	movw	r30, r8
    8482:	81 81       	ldd	r24, Z+1	; 0x01
    8484:	7d d4       	rcall	.+2298   	; 0x8d80 <disk_read>
    8486:	81 11       	cpse	r24, r1
    8488:	7e c0       	rjmp	.+252    	; 0x8586 <f_read+0x216>
    848a:	e8 81       	ld	r30, Y
    848c:	f9 81       	ldd	r31, Y+1	; 0x01
    848e:	84 81       	ldd	r24, Z+4	; 0x04
    8490:	81 11       	cpse	r24, r1
    8492:	41 c0       	rjmp	.+130    	; 0x8516 <f_read+0x1a6>
    8494:	dc 2c       	mov	r13, r12
    8496:	cc 24       	eor	r12, r12
    8498:	dd 0c       	add	r13, r13
    849a:	ac 0c       	add	r10, r12
    849c:	bd 1c       	adc	r11, r13
    849e:	8e 81       	ldd	r24, Y+6	; 0x06
    84a0:	9f 81       	ldd	r25, Y+7	; 0x07
    84a2:	a8 85       	ldd	r26, Y+8	; 0x08
    84a4:	b9 85       	ldd	r27, Y+9	; 0x09
    84a6:	8c 0d       	add	r24, r12
    84a8:	9d 1d       	adc	r25, r13
    84aa:	a1 1d       	adc	r26, r1
    84ac:	b1 1d       	adc	r27, r1
    84ae:	8e 83       	std	Y+6, r24	; 0x06
    84b0:	9f 83       	std	Y+7, r25	; 0x07
    84b2:	a8 87       	std	Y+8, r26	; 0x08
    84b4:	b9 87       	std	Y+9, r27	; 0x09
    84b6:	f1 01       	movw	r30, r2
    84b8:	80 81       	ld	r24, Z
    84ba:	91 81       	ldd	r25, Z+1	; 0x01
    84bc:	8c 0d       	add	r24, r12
    84be:	9d 1d       	adc	r25, r13
    84c0:	80 83       	st	Z, r24
    84c2:	91 83       	std	Z+1, r25	; 0x01
    84c4:	ec 18       	sub	r14, r12
    84c6:	fd 08       	sbc	r15, r13
    84c8:	e1 14       	cp	r14, r1
    84ca:	f1 04       	cpc	r15, r1
    84cc:	09 f0       	breq	.+2      	; 0x84d0 <f_read+0x160>
    84ce:	8a cf       	rjmp	.-236    	; 0x83e4 <f_read+0x74>
    84d0:	6e c0       	rjmp	.+220    	; 0x85ae <f_read+0x23e>
    84d2:	45 2b       	or	r20, r21
    84d4:	46 2b       	or	r20, r22
    84d6:	47 2b       	or	r20, r23
    84d8:	29 f4       	brne	.+10     	; 0x84e4 <f_read+0x174>
    84da:	6e 85       	ldd	r22, Y+14	; 0x0e
    84dc:	7f 85       	ldd	r23, Y+15	; 0x0f
    84de:	88 89       	ldd	r24, Y+16	; 0x10
    84e0:	99 89       	ldd	r25, Y+17	; 0x11
    84e2:	06 c0       	rjmp	.+12     	; 0x84f0 <f_read+0x180>
    84e4:	4a 89       	ldd	r20, Y+18	; 0x12
    84e6:	5b 89       	ldd	r21, Y+19	; 0x13
    84e8:	6c 89       	ldd	r22, Y+20	; 0x14
    84ea:	7d 89       	ldd	r23, Y+21	; 0x15
    84ec:	0e 94 e9 39 	call	0x73d2	; 0x73d2 <get_fat>
    84f0:	62 30       	cpi	r22, 0x02	; 2
    84f2:	71 05       	cpc	r23, r1
    84f4:	81 05       	cpc	r24, r1
    84f6:	91 05       	cpc	r25, r1
    84f8:	60 f0       	brcs	.+24     	; 0x8512 <f_read+0x1a2>
    84fa:	6f 3f       	cpi	r22, 0xFF	; 255
    84fc:	ff ef       	ldi	r31, 0xFF	; 255
    84fe:	7f 07       	cpc	r23, r31
    8500:	8f 07       	cpc	r24, r31
    8502:	9f 07       	cpc	r25, r31
    8504:	09 f4       	brne	.+2      	; 0x8508 <f_read+0x198>
    8506:	3f c0       	rjmp	.+126    	; 0x8586 <f_read+0x216>
    8508:	6a 8b       	std	Y+18, r22	; 0x12
    850a:	7b 8b       	std	Y+19, r23	; 0x13
    850c:	8c 8b       	std	Y+20, r24	; 0x14
    850e:	9d 8b       	std	Y+21, r25	; 0x15
    8510:	88 cf       	rjmp	.-240    	; 0x8422 <f_read+0xb2>
    8512:	82 e0       	ldi	r24, 0x02	; 2
    8514:	39 c0       	rjmp	.+114    	; 0x8588 <f_read+0x218>
    8516:	86 a5       	ldd	r24, Z+46	; 0x2e
    8518:	97 a5       	ldd	r25, Z+47	; 0x2f
    851a:	a0 a9       	ldd	r26, Z+48	; 0x30
    851c:	b1 a9       	ldd	r27, Z+49	; 0x31
    851e:	84 19       	sub	r24, r4
    8520:	95 09       	sbc	r25, r5
    8522:	a6 09       	sbc	r26, r6
    8524:	b7 09       	sbc	r27, r7
    8526:	a6 01       	movw	r20, r12
    8528:	60 e0       	ldi	r22, 0x00	; 0
    852a:	70 e0       	ldi	r23, 0x00	; 0
    852c:	84 17       	cp	r24, r20
    852e:	95 07       	cpc	r25, r21
    8530:	a6 07       	cpc	r26, r22
    8532:	b7 07       	cpc	r27, r23
    8534:	08 f0       	brcs	.+2      	; 0x8538 <f_read+0x1c8>
    8536:	ae cf       	rjmp	.-164    	; 0x8494 <f_read+0x124>
    8538:	bf 01       	movw	r22, r30
    853a:	6e 5c       	subi	r22, 0xCE	; 206
    853c:	7f 4f       	sbci	r23, 0xFF	; 255
    853e:	98 2f       	mov	r25, r24
    8540:	88 27       	eor	r24, r24
    8542:	99 0f       	add	r25, r25
    8544:	40 e0       	ldi	r20, 0x00	; 0
    8546:	52 e0       	ldi	r21, 0x02	; 2
    8548:	8a 0d       	add	r24, r10
    854a:	9b 1d       	adc	r25, r11
    854c:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <mem_cpy>
    8550:	a1 cf       	rjmp	.-190    	; 0x8494 <f_read+0x124>
    8552:	4e 8a       	std	Y+22, r4	; 0x16
    8554:	5f 8a       	std	Y+23, r5	; 0x17
    8556:	68 8e       	std	Y+24, r6	; 0x18
    8558:	79 8e       	std	Y+25, r7	; 0x19
    855a:	8e 81       	ldd	r24, Y+6	; 0x06
    855c:	9f 81       	ldd	r25, Y+7	; 0x07
    855e:	91 70       	andi	r25, 0x01	; 1
    8560:	20 e0       	ldi	r18, 0x00	; 0
    8562:	32 e0       	ldi	r19, 0x02	; 2
    8564:	28 1b       	sub	r18, r24
    8566:	39 0b       	sbc	r19, r25
    8568:	67 01       	movw	r12, r14
    856a:	2e 15       	cp	r18, r14
    856c:	3f 05       	cpc	r19, r15
    856e:	08 f4       	brcc	.+2      	; 0x8572 <f_read+0x202>
    8570:	69 01       	movw	r12, r18
    8572:	4e 89       	ldd	r20, Y+22	; 0x16
    8574:	5f 89       	ldd	r21, Y+23	; 0x17
    8576:	68 8d       	ldd	r22, Y+24	; 0x18
    8578:	79 8d       	ldd	r23, Y+25	; 0x19
    857a:	88 81       	ld	r24, Y
    857c:	99 81       	ldd	r25, Y+1	; 0x01
    857e:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <move_window>
    8582:	88 23       	and	r24, r24
    8584:	19 f0       	breq	.+6      	; 0x858c <f_read+0x21c>
    8586:	81 e0       	ldi	r24, 0x01	; 1
    8588:	8d 83       	std	Y+5, r24	; 0x05
    858a:	14 c0       	rjmp	.+40     	; 0x85b4 <f_read+0x244>
    858c:	8e 81       	ldd	r24, Y+6	; 0x06
    858e:	9f 81       	ldd	r25, Y+7	; 0x07
    8590:	a8 85       	ldd	r26, Y+8	; 0x08
    8592:	b9 85       	ldd	r27, Y+9	; 0x09
    8594:	91 70       	andi	r25, 0x01	; 1
    8596:	aa 27       	eor	r26, r26
    8598:	bb 27       	eor	r27, r27
    859a:	c2 96       	adiw	r24, 0x32	; 50
    859c:	68 81       	ld	r22, Y
    859e:	79 81       	ldd	r23, Y+1	; 0x01
    85a0:	68 0f       	add	r22, r24
    85a2:	79 1f       	adc	r23, r25
    85a4:	a6 01       	movw	r20, r12
    85a6:	c5 01       	movw	r24, r10
    85a8:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <mem_cpy>
    85ac:	76 cf       	rjmp	.-276    	; 0x849a <f_read+0x12a>
    85ae:	80 e0       	ldi	r24, 0x00	; 0
    85b0:	01 c0       	rjmp	.+2      	; 0x85b4 <f_read+0x244>
    85b2:	87 e0       	ldi	r24, 0x07	; 7
    85b4:	df 91       	pop	r29
    85b6:	cf 91       	pop	r28
    85b8:	1f 91       	pop	r17
    85ba:	0f 91       	pop	r16
    85bc:	ff 90       	pop	r15
    85be:	ef 90       	pop	r14
    85c0:	df 90       	pop	r13
    85c2:	cf 90       	pop	r12
    85c4:	bf 90       	pop	r11
    85c6:	af 90       	pop	r10
    85c8:	9f 90       	pop	r9
    85ca:	8f 90       	pop	r8
    85cc:	7f 90       	pop	r7
    85ce:	6f 90       	pop	r6
    85d0:	5f 90       	pop	r5
    85d2:	4f 90       	pop	r4
    85d4:	3f 90       	pop	r3
    85d6:	2f 90       	pop	r2
    85d8:	08 95       	ret

000085da <f_sync>:
    85da:	cf 93       	push	r28
    85dc:	df 93       	push	r29
    85de:	ec 01       	movw	r28, r24
    85e0:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <validate>
    85e4:	81 11       	cpse	r24, r1
    85e6:	39 c0       	rjmp	.+114    	; 0x865a <f_sync+0x80>
    85e8:	9c 81       	ldd	r25, Y+4	; 0x04
    85ea:	95 ff       	sbrs	r25, 5
    85ec:	36 c0       	rjmp	.+108    	; 0x865a <f_sync+0x80>
    85ee:	4a 8d       	ldd	r20, Y+26	; 0x1a
    85f0:	5b 8d       	ldd	r21, Y+27	; 0x1b
    85f2:	6c 8d       	ldd	r22, Y+28	; 0x1c
    85f4:	7d 8d       	ldd	r23, Y+29	; 0x1d
    85f6:	88 81       	ld	r24, Y
    85f8:	99 81       	ldd	r25, Y+1	; 0x01
    85fa:	0e 94 e2 36 	call	0x6dc4	; 0x6dc4 <move_window>
    85fe:	81 11       	cpse	r24, r1
    8600:	2c c0       	rjmp	.+88     	; 0x865a <f_sync+0x80>
    8602:	ee 8d       	ldd	r30, Y+30	; 0x1e
    8604:	ff 8d       	ldd	r31, Y+31	; 0x1f
    8606:	83 85       	ldd	r24, Z+11	; 0x0b
    8608:	80 62       	ori	r24, 0x20	; 32
    860a:	83 87       	std	Z+11, r24	; 0x0b
    860c:	4a 85       	ldd	r20, Y+10	; 0x0a
    860e:	5b 85       	ldd	r21, Y+11	; 0x0b
    8610:	6c 85       	ldd	r22, Y+12	; 0x0c
    8612:	7d 85       	ldd	r23, Y+13	; 0x0d
    8614:	44 8f       	std	Z+28, r20	; 0x1c
    8616:	55 8f       	std	Z+29, r21	; 0x1d
    8618:	66 8f       	std	Z+30, r22	; 0x1e
    861a:	77 8f       	std	Z+31, r23	; 0x1f
    861c:	4e 85       	ldd	r20, Y+14	; 0x0e
    861e:	5f 85       	ldd	r21, Y+15	; 0x0f
    8620:	68 89       	ldd	r22, Y+16	; 0x10
    8622:	79 89       	ldd	r23, Y+17	; 0x11
    8624:	42 8f       	std	Z+26, r20	; 0x1a
    8626:	53 8f       	std	Z+27, r21	; 0x1b
    8628:	64 8b       	std	Z+20, r22	; 0x14
    862a:	75 8b       	std	Z+21, r23	; 0x15
    862c:	40 e0       	ldi	r20, 0x00	; 0
    862e:	50 e0       	ldi	r21, 0x00	; 0
    8630:	61 e2       	ldi	r22, 0x21	; 33
    8632:	76 e4       	ldi	r23, 0x46	; 70
    8634:	46 8b       	std	Z+22, r20	; 0x16
    8636:	57 8b       	std	Z+23, r21	; 0x17
    8638:	60 8f       	std	Z+24, r22	; 0x18
    863a:	71 8f       	std	Z+25, r23	; 0x19
    863c:	12 8a       	std	Z+18, r1	; 0x12
    863e:	13 8a       	std	Z+19, r1	; 0x13
    8640:	8c 81       	ldd	r24, Y+4	; 0x04
    8642:	8f 7d       	andi	r24, 0xDF	; 223
    8644:	8c 83       	std	Y+4, r24	; 0x04
    8646:	e8 81       	ld	r30, Y
    8648:	f9 81       	ldd	r31, Y+1	; 0x01
    864a:	81 e0       	ldi	r24, 0x01	; 1
    864c:	84 83       	std	Z+4, r24	; 0x04
    864e:	88 81       	ld	r24, Y
    8650:	99 81       	ldd	r25, Y+1	; 0x01
    8652:	df 91       	pop	r29
    8654:	cf 91       	pop	r28
    8656:	0c 94 76 36 	jmp	0x6cec	; 0x6cec <sync_fs>
    865a:	df 91       	pop	r29
    865c:	cf 91       	pop	r28
    865e:	08 95       	ret

00008660 <f_close>:
    8660:	cf 93       	push	r28
    8662:	df 93       	push	r29
    8664:	ec 01       	movw	r28, r24
    8666:	b9 df       	rcall	.-142    	; 0x85da <f_sync>
    8668:	81 11       	cpse	r24, r1
    866a:	07 c0       	rjmp	.+14     	; 0x867a <f_close+0x1a>
    866c:	ce 01       	movw	r24, r28
    866e:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <validate>
    8672:	81 11       	cpse	r24, r1
    8674:	02 c0       	rjmp	.+4      	; 0x867a <f_close+0x1a>
    8676:	18 82       	st	Y, r1
    8678:	19 82       	std	Y+1, r1	; 0x01
    867a:	df 91       	pop	r29
    867c:	cf 91       	pop	r28
    867e:	08 95       	ret

00008680 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    8680:	2f 92       	push	r2
    8682:	3f 92       	push	r3
    8684:	4f 92       	push	r4
    8686:	5f 92       	push	r5
    8688:	6f 92       	push	r6
    868a:	7f 92       	push	r7
    868c:	8f 92       	push	r8
    868e:	9f 92       	push	r9
    8690:	af 92       	push	r10
    8692:	bf 92       	push	r11
    8694:	cf 92       	push	r12
    8696:	df 92       	push	r13
    8698:	ef 92       	push	r14
    869a:	ff 92       	push	r15
    869c:	0f 93       	push	r16
    869e:	1f 93       	push	r17
    86a0:	cf 93       	push	r28
    86a2:	df 93       	push	r29
    86a4:	cd b7       	in	r28, 0x3d	; 61
    86a6:	de b7       	in	r29, 0x3e	; 62
    86a8:	28 97       	sbiw	r28, 0x08	; 8
    86aa:	cd bf       	out	0x3d, r28	; 61
    86ac:	de bf       	out	0x3e, r29	; 62
    86ae:	1c 01       	movw	r2, r24
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
    86b0:	4d 83       	std	Y+5, r20	; 0x05
    86b2:	5e 83       	std	Y+6, r21	; 0x06
    86b4:	6f 83       	std	Y+7, r22	; 0x07
    86b6:	78 87       	std	Y+8, r23	; 0x08
    86b8:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    86bc:	4d 81       	ldd	r20, Y+5	; 0x05
    86be:	5e 81       	ldd	r21, Y+6	; 0x06
    86c0:	6f 81       	ldd	r22, Y+7	; 0x07
    86c2:	78 85       	ldd	r23, Y+8	; 0x08
    86c4:	81 11       	cpse	r24, r1
    86c6:	5f c1       	rjmp	.+702    	; 0x8986 <f_lseek+0x306>
	if (fp->err)						/* Check error */
    86c8:	d1 01       	movw	r26, r2
    86ca:	15 96       	adiw	r26, 0x05	; 5
    86cc:	8c 91       	ld	r24, X
    86ce:	15 97       	sbiw	r26, 0x05	; 5
    86d0:	81 11       	cpse	r24, r1
    86d2:	59 c1       	rjmp	.+690    	; 0x8986 <f_lseek+0x306>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    86d4:	1a 96       	adiw	r26, 0x0a	; 10
    86d6:	cd 90       	ld	r12, X+
    86d8:	dd 90       	ld	r13, X+
    86da:	ed 90       	ld	r14, X+
    86dc:	fc 90       	ld	r15, X
    86de:	1d 97       	sbiw	r26, 0x0d	; 13
    86e0:	c4 16       	cp	r12, r20
    86e2:	d5 06       	cpc	r13, r21
    86e4:	e6 06       	cpc	r14, r22
    86e6:	f7 06       	cpc	r15, r23
    86e8:	18 f0       	brcs	.+6      	; 0x86f0 <f_lseek+0x70>

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    86ea:	6a 01       	movw	r12, r20
    86ec:	7b 01       	movw	r14, r22
    86ee:	04 c0       	rjmp	.+8      	; 0x86f8 <f_lseek+0x78>

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    86f0:	f1 01       	movw	r30, r2
    86f2:	84 81       	ldd	r24, Z+4	; 0x04
    86f4:	81 fd       	sbrc	r24, 1
    86f6:	f9 cf       	rjmp	.-14     	; 0x86ea <f_lseek+0x6a>
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    86f8:	d1 01       	movw	r26, r2
    86fa:	16 96       	adiw	r26, 0x06	; 6
    86fc:	4d 90       	ld	r4, X+
    86fe:	5d 90       	ld	r5, X+
    8700:	6d 90       	ld	r6, X+
    8702:	7c 90       	ld	r7, X
    8704:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    8706:	f1 01       	movw	r30, r2
    8708:	16 82       	std	Z+6, r1	; 0x06
    870a:	17 82       	std	Z+7, r1	; 0x07
    870c:	10 86       	std	Z+8, r1	; 0x08
    870e:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    8710:	c1 14       	cp	r12, r1
    8712:	d1 04       	cpc	r13, r1
    8714:	e1 04       	cpc	r14, r1
    8716:	f1 04       	cpc	r15, r1
    8718:	21 f4       	brne	.+8      	; 0x8722 <f_lseek+0xa2>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    871a:	c1 2c       	mov	r12, r1
    871c:	d1 2c       	mov	r13, r1
    871e:	76 01       	movw	r14, r12
    8720:	05 c1       	rjmp	.+522    	; 0x892c <f_lseek+0x2ac>
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    8722:	00 81       	ld	r16, Z
    8724:	11 81       	ldd	r17, Z+1	; 0x01
    8726:	f8 01       	movw	r30, r16
    8728:	82 80       	ldd	r8, Z+2	; 0x02
    872a:	91 2c       	mov	r9, r1
    872c:	a1 2c       	mov	r10, r1
    872e:	b1 2c       	mov	r11, r1
    8730:	69 e0       	ldi	r22, 0x09	; 9
    8732:	88 0c       	add	r8, r8
    8734:	99 1c       	adc	r9, r9
    8736:	aa 1c       	adc	r10, r10
    8738:	bb 1c       	adc	r11, r11
    873a:	6a 95       	dec	r22
    873c:	d1 f7       	brne	.-12     	; 0x8732 <f_lseek+0xb2>
			if (ifptr > 0 &&
    873e:	41 14       	cp	r4, r1
    8740:	51 04       	cpc	r5, r1
    8742:	61 04       	cpc	r6, r1
    8744:	71 04       	cpc	r7, r1
    8746:	d9 f1       	breq	.+118    	; 0x87be <f_lseek+0x13e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    8748:	f1 e0       	ldi	r31, 0x01	; 1
    874a:	4f 1a       	sub	r4, r31
    874c:	51 08       	sbc	r5, r1
    874e:	61 08       	sbc	r6, r1
    8750:	71 08       	sbc	r7, r1
    8752:	c7 01       	movw	r24, r14
    8754:	b6 01       	movw	r22, r12
    8756:	61 50       	subi	r22, 0x01	; 1
    8758:	71 09       	sbc	r23, r1
    875a:	81 09       	sbc	r24, r1
    875c:	91 09       	sbc	r25, r1
    875e:	a5 01       	movw	r20, r10
    8760:	94 01       	movw	r18, r8
    8762:	0e 94 4c 62 	call	0xc498	; 0xc498 <__udivmodsi4>
    8766:	29 83       	std	Y+1, r18	; 0x01
    8768:	3a 83       	std	Y+2, r19	; 0x02
    876a:	4b 83       	std	Y+3, r20	; 0x03
    876c:	5c 83       	std	Y+4, r21	; 0x04
    876e:	c3 01       	movw	r24, r6
    8770:	b2 01       	movw	r22, r4
    8772:	a5 01       	movw	r20, r10
    8774:	94 01       	movw	r18, r8
    8776:	0e 94 4c 62 	call	0xc498	; 0xc498 <__udivmodsi4>

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    877a:	89 81       	ldd	r24, Y+1	; 0x01
    877c:	9a 81       	ldd	r25, Y+2	; 0x02
    877e:	ab 81       	ldd	r26, Y+3	; 0x03
    8780:	bc 81       	ldd	r27, Y+4	; 0x04
    8782:	82 17       	cp	r24, r18
    8784:	93 07       	cpc	r25, r19
    8786:	a4 07       	cpc	r26, r20
    8788:	b5 07       	cpc	r27, r21
    878a:	c8 f0       	brcs	.+50     	; 0x87be <f_lseek+0x13e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    878c:	88 27       	eor	r24, r24
    878e:	99 27       	eor	r25, r25
    8790:	dc 01       	movw	r26, r24
    8792:	88 19       	sub	r24, r8
    8794:	99 09       	sbc	r25, r9
    8796:	aa 09       	sbc	r26, r10
    8798:	bb 09       	sbc	r27, r11
    879a:	84 21       	and	r24, r4
    879c:	95 21       	and	r25, r5
    879e:	a6 21       	and	r26, r6
    87a0:	b7 21       	and	r27, r7
    87a2:	f1 01       	movw	r30, r2
    87a4:	86 83       	std	Z+6, r24	; 0x06
    87a6:	97 83       	std	Z+7, r25	; 0x07
    87a8:	a0 87       	std	Z+8, r26	; 0x08
    87aa:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    87ac:	c8 1a       	sub	r12, r24
    87ae:	d9 0a       	sbc	r13, r25
    87b0:	ea 0a       	sbc	r14, r26
    87b2:	fb 0a       	sbc	r15, r27
				clst = fp->clust;
    87b4:	42 89       	ldd	r20, Z+18	; 0x12
    87b6:	53 89       	ldd	r21, Z+19	; 0x13
    87b8:	64 89       	ldd	r22, Z+20	; 0x14
    87ba:	75 89       	ldd	r23, Z+21	; 0x15
    87bc:	2c c0       	rjmp	.+88     	; 0x8816 <f_lseek+0x196>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    87be:	d1 01       	movw	r26, r2
    87c0:	1e 96       	adiw	r26, 0x0e	; 14
    87c2:	4d 91       	ld	r20, X+
    87c4:	5d 91       	ld	r21, X+
    87c6:	6d 91       	ld	r22, X+
    87c8:	7c 91       	ld	r23, X
    87ca:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    87cc:	41 15       	cp	r20, r1
    87ce:	51 05       	cpc	r21, r1
    87d0:	61 05       	cpc	r22, r1
    87d2:	71 05       	cpc	r23, r1
    87d4:	c9 f4       	brne	.+50     	; 0x8808 <f_lseek+0x188>
					clst = create_chain(fp->fs, 0);
    87d6:	40 e0       	ldi	r20, 0x00	; 0
    87d8:	50 e0       	ldi	r21, 0x00	; 0
    87da:	ba 01       	movw	r22, r20
    87dc:	c8 01       	movw	r24, r16
    87de:	54 d8       	rcall	.-3928   	; 0x7888 <create_chain>
    87e0:	ab 01       	movw	r20, r22
    87e2:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    87e4:	41 30       	cpi	r20, 0x01	; 1
    87e6:	51 05       	cpc	r21, r1
    87e8:	61 05       	cpc	r22, r1
    87ea:	71 05       	cpc	r23, r1
    87ec:	09 f4       	brne	.+2      	; 0x87f0 <f_lseek+0x170>
    87ee:	63 c0       	rjmp	.+198    	; 0x88b6 <f_lseek+0x236>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    87f0:	4f 3f       	cpi	r20, 0xFF	; 255
    87f2:	ff ef       	ldi	r31, 0xFF	; 255
    87f4:	5f 07       	cpc	r21, r31
    87f6:	6f 07       	cpc	r22, r31
    87f8:	7f 07       	cpc	r23, r31
    87fa:	09 f4       	brne	.+2      	; 0x87fe <f_lseek+0x17e>
    87fc:	5a c0       	rjmp	.+180    	; 0x88b2 <f_lseek+0x232>
					fp->sclust = clst;
    87fe:	f1 01       	movw	r30, r2
    8800:	46 87       	std	Z+14, r20	; 0x0e
    8802:	57 87       	std	Z+15, r21	; 0x0f
    8804:	60 8b       	std	Z+16, r22	; 0x10
    8806:	71 8b       	std	Z+17, r23	; 0x11
				}
#endif
				fp->clust = clst;
    8808:	d1 01       	movw	r26, r2
    880a:	52 96       	adiw	r26, 0x12	; 18
    880c:	4d 93       	st	X+, r20
    880e:	5d 93       	st	X+, r21
    8810:	6d 93       	st	X+, r22
    8812:	7c 93       	st	X, r23
    8814:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
    8816:	41 15       	cp	r20, r1
    8818:	51 05       	cpc	r21, r1
    881a:	61 05       	cpc	r22, r1
    881c:	71 05       	cpc	r23, r1
    881e:	09 f4       	brne	.+2      	; 0x8822 <f_lseek+0x1a2>
    8820:	7c cf       	rjmp	.-264    	; 0x871a <f_lseek+0x9a>
    8822:	2c c0       	rjmp	.+88     	; 0x887c <f_lseek+0x1fc>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    8824:	42 30       	cpi	r20, 0x02	; 2
    8826:	51 05       	cpc	r21, r1
    8828:	61 05       	cpc	r22, r1
    882a:	71 05       	cpc	r23, r1
    882c:	08 f4       	brcc	.+2      	; 0x8830 <f_lseek+0x1b0>
    882e:	43 c0       	rjmp	.+134    	; 0x88b6 <f_lseek+0x236>
    8830:	d1 01       	movw	r26, r2
    8832:	ed 91       	ld	r30, X+
    8834:	fc 91       	ld	r31, X
    8836:	86 89       	ldd	r24, Z+22	; 0x16
    8838:	97 89       	ldd	r25, Z+23	; 0x17
    883a:	a0 8d       	ldd	r26, Z+24	; 0x18
    883c:	b1 8d       	ldd	r27, Z+25	; 0x19
    883e:	48 17       	cp	r20, r24
    8840:	59 07       	cpc	r21, r25
    8842:	6a 07       	cpc	r22, r26
    8844:	7b 07       	cpc	r23, r27
    8846:	b8 f5       	brcc	.+110    	; 0x88b6 <f_lseek+0x236>
					fp->clust = clst;
    8848:	d1 01       	movw	r26, r2
    884a:	52 96       	adiw	r26, 0x12	; 18
    884c:	4d 93       	st	X+, r20
    884e:	5d 93       	st	X+, r21
    8850:	6d 93       	st	X+, r22
    8852:	7c 93       	st	X, r23
    8854:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    8856:	16 96       	adiw	r26, 0x06	; 6
    8858:	8d 91       	ld	r24, X+
    885a:	9d 91       	ld	r25, X+
    885c:	0d 90       	ld	r0, X+
    885e:	bc 91       	ld	r27, X
    8860:	a0 2d       	mov	r26, r0
    8862:	88 0d       	add	r24, r8
    8864:	99 1d       	adc	r25, r9
    8866:	aa 1d       	adc	r26, r10
    8868:	bb 1d       	adc	r27, r11
    886a:	f1 01       	movw	r30, r2
    886c:	86 83       	std	Z+6, r24	; 0x06
    886e:	97 83       	std	Z+7, r25	; 0x07
    8870:	a0 87       	std	Z+8, r26	; 0x08
    8872:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    8874:	c8 18       	sub	r12, r8
    8876:	d9 08       	sbc	r13, r9
    8878:	ea 08       	sbc	r14, r10
    887a:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    887c:	8c 14       	cp	r8, r12
    887e:	9d 04       	cpc	r9, r13
    8880:	ae 04       	cpc	r10, r14
    8882:	bf 04       	cpc	r11, r15
    8884:	18 f5       	brcc	.+70     	; 0x88cc <f_lseek+0x24c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    8886:	f1 01       	movw	r30, r2
    8888:	24 81       	ldd	r18, Z+4	; 0x04
    888a:	80 81       	ld	r24, Z
    888c:	91 81       	ldd	r25, Z+1	; 0x01
    888e:	21 ff       	sbrs	r18, 1
    8890:	16 c0       	rjmp	.+44     	; 0x88be <f_lseek+0x23e>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    8892:	0e 94 44 3c 	call	0x7888	; 0x7888 <create_chain>
    8896:	ab 01       	movw	r20, r22
    8898:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    889a:	41 15       	cp	r20, r1
    889c:	51 05       	cpc	r21, r1
    889e:	61 05       	cpc	r22, r1
    88a0:	71 05       	cpc	r23, r1
    88a2:	91 f0       	breq	.+36     	; 0x88c8 <f_lseek+0x248>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    88a4:	4f 3f       	cpi	r20, 0xFF	; 255
    88a6:	ff ef       	ldi	r31, 0xFF	; 255
    88a8:	5f 07       	cpc	r21, r31
    88aa:	6f 07       	cpc	r22, r31
    88ac:	7f 07       	cpc	r23, r31
    88ae:	09 f0       	breq	.+2      	; 0x88b2 <f_lseek+0x232>
    88b0:	b9 cf       	rjmp	.-142    	; 0x8824 <f_lseek+0x1a4>
    88b2:	81 e0       	ldi	r24, 0x01	; 1
    88b4:	2c c0       	rjmp	.+88     	; 0x890e <f_lseek+0x28e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    88b6:	82 e0       	ldi	r24, 0x02	; 2
    88b8:	f1 01       	movw	r30, r2
    88ba:	85 83       	std	Z+5, r24	; 0x05
    88bc:	64 c0       	rjmp	.+200    	; 0x8986 <f_lseek+0x306>
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    88be:	0e 94 e9 39 	call	0x73d2	; 0x73d2 <get_fat>
    88c2:	ab 01       	movw	r20, r22
    88c4:	bc 01       	movw	r22, r24
    88c6:	ee cf       	rjmp	.-36     	; 0x88a4 <f_lseek+0x224>
    88c8:	75 01       	movw	r14, r10
    88ca:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    88cc:	f1 01       	movw	r30, r2
    88ce:	86 81       	ldd	r24, Z+6	; 0x06
    88d0:	97 81       	ldd	r25, Z+7	; 0x07
    88d2:	a0 85       	ldd	r26, Z+8	; 0x08
    88d4:	b1 85       	ldd	r27, Z+9	; 0x09
    88d6:	8c 0d       	add	r24, r12
    88d8:	9d 1d       	adc	r25, r13
    88da:	ae 1d       	adc	r26, r14
    88dc:	bf 1d       	adc	r27, r15
    88de:	86 83       	std	Z+6, r24	; 0x06
    88e0:	97 83       	std	Z+7, r25	; 0x07
    88e2:	a0 87       	std	Z+8, r26	; 0x08
    88e4:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    88e6:	d7 01       	movw	r26, r14
    88e8:	c6 01       	movw	r24, r12
    88ea:	91 70       	andi	r25, 0x01	; 1
    88ec:	aa 27       	eor	r26, r26
    88ee:	bb 27       	eor	r27, r27
    88f0:	89 2b       	or	r24, r25
    88f2:	8a 2b       	or	r24, r26
    88f4:	8b 2b       	or	r24, r27
    88f6:	09 f4       	brne	.+2      	; 0x88fa <f_lseek+0x27a>
    88f8:	10 cf       	rjmp	.-480    	; 0x871a <f_lseek+0x9a>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    88fa:	80 81       	ld	r24, Z
    88fc:	91 81       	ldd	r25, Z+1	; 0x01
    88fe:	0e 94 c0 39 	call	0x7380	; 0x7380 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    8902:	61 15       	cp	r22, r1
    8904:	71 05       	cpc	r23, r1
    8906:	81 05       	cpc	r24, r1
    8908:	91 05       	cpc	r25, r1
    890a:	29 f4       	brne	.+10     	; 0x8916 <f_lseek+0x296>
    890c:	82 e0       	ldi	r24, 0x02	; 2
    890e:	d1 01       	movw	r26, r2
    8910:	15 96       	adiw	r26, 0x05	; 5
    8912:	8c 93       	st	X, r24
    8914:	38 c0       	rjmp	.+112    	; 0x8986 <f_lseek+0x306>
					nsect += ofs / SS(fp->fs);
    8916:	59 e0       	ldi	r21, 0x09	; 9
    8918:	f6 94       	lsr	r15
    891a:	e7 94       	ror	r14
    891c:	d7 94       	ror	r13
    891e:	c7 94       	ror	r12
    8920:	5a 95       	dec	r21
    8922:	d1 f7       	brne	.-12     	; 0x8918 <f_lseek+0x298>
    8924:	c6 0e       	add	r12, r22
    8926:	d7 1e       	adc	r13, r23
    8928:	e8 1e       	adc	r14, r24
    892a:	f9 1e       	adc	r15, r25
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    892c:	f1 01       	movw	r30, r2
    892e:	86 81       	ldd	r24, Z+6	; 0x06
    8930:	97 81       	ldd	r25, Z+7	; 0x07
    8932:	a0 85       	ldd	r26, Z+8	; 0x08
    8934:	b1 85       	ldd	r27, Z+9	; 0x09
    8936:	ac 01       	movw	r20, r24
    8938:	bd 01       	movw	r22, r26
    893a:	51 70       	andi	r21, 0x01	; 1
    893c:	66 27       	eor	r22, r22
    893e:	77 27       	eor	r23, r23
    8940:	45 2b       	or	r20, r21
    8942:	46 2b       	or	r20, r22
    8944:	47 2b       	or	r20, r23
    8946:	69 f0       	breq	.+26     	; 0x8962 <f_lseek+0x2e2>
    8948:	46 89       	ldd	r20, Z+22	; 0x16
    894a:	57 89       	ldd	r21, Z+23	; 0x17
    894c:	60 8d       	ldd	r22, Z+24	; 0x18
    894e:	71 8d       	ldd	r23, Z+25	; 0x19
    8950:	c4 16       	cp	r12, r20
    8952:	d5 06       	cpc	r13, r21
    8954:	e6 06       	cpc	r14, r22
    8956:	f7 06       	cpc	r15, r23
    8958:	21 f0       	breq	.+8      	; 0x8962 <f_lseek+0x2e2>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    895a:	c6 8a       	std	Z+22, r12	; 0x16
    895c:	d7 8a       	std	Z+23, r13	; 0x17
    895e:	e0 8e       	std	Z+24, r14	; 0x18
    8960:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    8962:	f1 01       	movw	r30, r2
    8964:	42 85       	ldd	r20, Z+10	; 0x0a
    8966:	53 85       	ldd	r21, Z+11	; 0x0b
    8968:	64 85       	ldd	r22, Z+12	; 0x0c
    896a:	75 85       	ldd	r23, Z+13	; 0x0d
    896c:	48 17       	cp	r20, r24
    896e:	59 07       	cpc	r21, r25
    8970:	6a 07       	cpc	r22, r26
    8972:	7b 07       	cpc	r23, r27
    8974:	38 f4       	brcc	.+14     	; 0x8984 <f_lseek+0x304>
			fp->fsize = fp->fptr;
    8976:	82 87       	std	Z+10, r24	; 0x0a
    8978:	93 87       	std	Z+11, r25	; 0x0b
    897a:	a4 87       	std	Z+12, r26	; 0x0c
    897c:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    897e:	84 81       	ldd	r24, Z+4	; 0x04
    8980:	80 62       	ori	r24, 0x20	; 32
    8982:	84 83       	std	Z+4, r24	; 0x04
    8984:	80 e0       	ldi	r24, 0x00	; 0
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    8986:	28 96       	adiw	r28, 0x08	; 8
    8988:	cd bf       	out	0x3d, r28	; 61
    898a:	de bf       	out	0x3e, r29	; 62
    898c:	df 91       	pop	r29
    898e:	cf 91       	pop	r28
    8990:	1f 91       	pop	r17
    8992:	0f 91       	pop	r16
    8994:	ff 90       	pop	r15
    8996:	ef 90       	pop	r14
    8998:	df 90       	pop	r13
    899a:	cf 90       	pop	r12
    899c:	bf 90       	pop	r11
    899e:	af 90       	pop	r10
    89a0:	9f 90       	pop	r9
    89a2:	8f 90       	pop	r8
    89a4:	7f 90       	pop	r7
    89a6:	6f 90       	pop	r6
    89a8:	5f 90       	pop	r5
    89aa:	4f 90       	pop	r4
    89ac:	3f 90       	pop	r3
    89ae:	2f 90       	pop	r2
    89b0:	08 95       	ret

000089b2 <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    89b2:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <spi_wr_rd>

000089b6 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    89b6:	80 e1       	ldi	r24, 0x10	; 16
    89b8:	e0 e4       	ldi	r30, 0x40	; 64
    89ba:	f6 e0       	ldi	r31, 0x06	; 6
    89bc:	85 83       	std	Z+5, r24	; 0x05
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    89be:	8f ef       	ldi	r24, 0xFF	; 255
    89c0:	f8 cf       	rjmp	.-16     	; 0x89b2 <xchg_spi>

000089c2 <power_off>:
}

static
void power_off (void)
{
	TCC0.CTRLA = TC_CLKSEL_OFF_gc;
    89c2:	10 92 00 08 	sts	0x0800, r1
	spi_disable();
    89c6:	0e 94 29 1a 	call	0x3452	; 0x3452 <spi_disable>
	PORTB.OUTSET = PIN1_bm;
    89ca:	82 e0       	ldi	r24, 0x02	; 2
    89cc:	e0 e2       	ldi	r30, 0x20	; 32
    89ce:	f6 e0       	ldi	r31, 0x06	; 6
    89d0:	85 83       	std	Z+5, r24	; 0x05
	PR.PRPC |= 0x01;
    89d2:	e0 e7       	ldi	r30, 0x70	; 112
    89d4:	f0 e0       	ldi	r31, 0x00	; 0
    89d6:	83 81       	ldd	r24, Z+3	; 0x03
    89d8:	81 60       	ori	r24, 0x01	; 1
    89da:	83 83       	std	Z+3, r24	; 0x03
    89dc:	2f ef       	ldi	r18, 0xFF	; 255
    89de:	83 ef       	ldi	r24, 0xF3	; 243
    89e0:	91 e0       	ldi	r25, 0x01	; 1
    89e2:	21 50       	subi	r18, 0x01	; 1
    89e4:	80 40       	sbci	r24, 0x00	; 0
    89e6:	90 40       	sbci	r25, 0x00	; 0
    89e8:	e1 f7       	brne	.-8      	; 0x89e2 <power_off+0x20>
    89ea:	00 c0       	rjmp	.+0      	; 0x89ec <power_off+0x2a>
    89ec:	00 00       	nop
    89ee:	08 95       	ret

000089f0 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    89f0:	cf 92       	push	r12
    89f2:	df 92       	push	r13
    89f4:	ff 92       	push	r15
    89f6:	0f 93       	push	r16
    89f8:	1f 93       	push	r17
    89fa:	cf 93       	push	r28
    89fc:	df 93       	push	r29
    89fe:	1f 92       	push	r1
    8a00:	cd b7       	in	r28, 0x3d	; 61
    8a02:	de b7       	in	r29, 0x3e	; 62
    8a04:	f8 2e       	mov	r15, r24
    8a06:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
    8a08:	84 e1       	ldi	r24, 0x14	; 20
    8a0a:	80 93 75 3a 	sts	0x3A75, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    8a0e:	8f ef       	ldi	r24, 0xFF	; 255
    8a10:	99 83       	std	Y+1, r25	; 0x01
    8a12:	0e 94 40 1a 	call	0x3480	; 0x3480 <spi_wr_rd>


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
    8a16:	99 81       	ldd	r25, Y+1	; 0x01
    8a18:	8f 3f       	cpi	r24, 0xFF	; 255
    8a1a:	29 f4       	brne	.+10     	; 0x8a26 <rcvr_datablock+0x36>
    8a1c:	80 91 75 3a 	lds	r24, 0x3A75
    8a20:	81 11       	cpse	r24, r1
    8a22:	f5 cf       	rjmp	.-22     	; 0x8a0e <rcvr_datablock+0x1e>
    8a24:	1d c0       	rjmp	.+58     	; 0x8a60 <rcvr_datablock+0x70>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    8a26:	8e 3f       	cpi	r24, 0xFE	; 254
    8a28:	d9 f4       	brne	.+54     	; 0x8a60 <rcvr_datablock+0x70>
    8a2a:	cf 2c       	mov	r12, r15
    8a2c:	d9 2e       	mov	r13, r25
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		*p++ = spi_wr_rd(0xff);
    8a2e:	8f ef       	ldi	r24, 0xFF	; 255
    8a30:	0e 94 40 1a 	call	0x3480	; 0x3480 <spi_wr_rd>
    8a34:	f6 01       	movw	r30, r12
    8a36:	80 83       	st	Z, r24
		*p++ = spi_wr_rd(0xff);
    8a38:	8f ef       	ldi	r24, 0xFF	; 255
    8a3a:	0e 94 40 1a 	call	0x3480	; 0x3480 <spi_wr_rd>
    8a3e:	f6 01       	movw	r30, r12
    8a40:	81 83       	std	Z+1, r24	; 0x01
		
	} while (cnt -= 2);
    8a42:	02 50       	subi	r16, 0x02	; 2
    8a44:	11 09       	sbc	r17, r1
    8a46:	f2 e0       	ldi	r31, 0x02	; 2
    8a48:	cf 0e       	add	r12, r31
    8a4a:	d1 1c       	adc	r13, r1
    8a4c:	01 15       	cp	r16, r1
    8a4e:	11 05       	cpc	r17, r1
    8a50:	71 f7       	brne	.-36     	; 0x8a2e <rcvr_datablock+0x3e>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    8a52:	8f ef       	ldi	r24, 0xFF	; 255
    8a54:	ae df       	rcall	.-164    	; 0x89b2 <xchg_spi>
	xchg_spi(0xFF);
    8a56:	8f ef       	ldi	r24, 0xFF	; 255
    8a58:	ac df       	rcall	.-168    	; 0x89b2 <xchg_spi>
    8a5a:	81 e0       	ldi	r24, 0x01	; 1
    8a5c:	90 e0       	ldi	r25, 0x00	; 0
    8a5e:	02 c0       	rjmp	.+4      	; 0x8a64 <rcvr_datablock+0x74>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    8a60:	80 e0       	ldi	r24, 0x00	; 0
    8a62:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    8a64:	0f 90       	pop	r0
    8a66:	df 91       	pop	r29
    8a68:	cf 91       	pop	r28
    8a6a:	1f 91       	pop	r17
    8a6c:	0f 91       	pop	r16
    8a6e:	ff 90       	pop	r15
    8a70:	df 90       	pop	r13
    8a72:	cf 90       	pop	r12
    8a74:	08 95       	ret

00008a76 <wait_ready.constprop.2>:
)
{
	BYTE d;


	Timer2 = wt / 10;
    8a76:	82 e3       	ldi	r24, 0x32	; 50
    8a78:	80 93 74 3a 	sts	0x3A74, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    8a7c:	8f ef       	ldi	r24, 0xFF	; 255
    8a7e:	0e 94 40 1a 	call	0x3480	; 0x3480 <spi_wr_rd>
    8a82:	28 2f       	mov	r18, r24


	Timer2 = wt / 10;
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
    8a84:	8f 3f       	cpi	r24, 0xFF	; 255
    8a86:	21 f0       	breq	.+8      	; 0x8a90 <wait_ready.constprop.2+0x1a>
    8a88:	80 91 74 3a 	lds	r24, 0x3A74
    8a8c:	81 11       	cpse	r24, r1
    8a8e:	f6 cf       	rjmp	.-20     	; 0x8a7c <wait_ready.constprop.2+0x6>

	return (d == 0xFF) ? 1 : 0;
    8a90:	81 e0       	ldi	r24, 0x01	; 1
    8a92:	90 e0       	ldi	r25, 0x00	; 0
    8a94:	2f 3f       	cpi	r18, 0xFF	; 255
    8a96:	11 f0       	breq	.+4      	; 0x8a9c <wait_ready.constprop.2+0x26>
    8a98:	80 e0       	ldi	r24, 0x00	; 0
    8a9a:	90 e0       	ldi	r25, 0x00	; 0
}
    8a9c:	08 95       	ret

00008a9e <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
    8a9e:	cf 93       	push	r28
    8aa0:	df 93       	push	r29
    8aa2:	1f 92       	push	r1
    8aa4:	1f 92       	push	r1
    8aa6:	cd b7       	in	r28, 0x3d	; 61
    8aa8:	de b7       	in	r29, 0x3e	; 62
	CS_LOW();		/* Set CS# low */
    8aaa:	80 e1       	ldi	r24, 0x10	; 16
    8aac:	80 93 46 06 	sts	0x0646, r24
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    8ab0:	8f ef       	ldi	r24, 0xFF	; 255
    8ab2:	7f df       	rcall	.-258    	; 0x89b2 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    8ab4:	e0 df       	rcall	.-64     	; 0x8a76 <wait_ready.constprop.2>
    8ab6:	00 97       	sbiw	r24, 0x00	; 0
    8ab8:	31 f4       	brne	.+12     	; 0x8ac6 <select+0x28>

	deselect();
    8aba:	89 83       	std	Y+1, r24	; 0x01
    8abc:	9a 83       	std	Y+2, r25	; 0x02
    8abe:	7b df       	rcall	.-266    	; 0x89b6 <deselect>
	return 0;	/* Timeout */
    8ac0:	89 81       	ldd	r24, Y+1	; 0x01
    8ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    8ac4:	02 c0       	rjmp	.+4      	; 0x8aca <select+0x2c>
static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    8ac6:	81 e0       	ldi	r24, 0x01	; 1
    8ac8:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
    8aca:	0f 90       	pop	r0
    8acc:	0f 90       	pop	r0
    8ace:	df 91       	pop	r29
    8ad0:	cf 91       	pop	r28
    8ad2:	08 95       	ret

00008ad4 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    8ad4:	ff 92       	push	r15
    8ad6:	0f 93       	push	r16
    8ad8:	1f 93       	push	r17
    8ada:	cf 93       	push	r28
    8adc:	df 93       	push	r29
    8ade:	c8 2f       	mov	r28, r24
    8ae0:	d4 2f       	mov	r29, r20
    8ae2:	15 2f       	mov	r17, r21
    8ae4:	06 2f       	mov	r16, r22
    8ae6:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    8ae8:	87 ff       	sbrs	r24, 7
    8aea:	08 c0       	rjmp	.+16     	; 0x8afc <send_cmd+0x28>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    8aec:	40 e0       	ldi	r20, 0x00	; 0
    8aee:	50 e0       	ldi	r21, 0x00	; 0
    8af0:	ba 01       	movw	r22, r20
    8af2:	87 e3       	ldi	r24, 0x37	; 55
    8af4:	ef df       	rcall	.-34     	; 0x8ad4 <send_cmd>
		if (res > 1) return res;
    8af6:	82 30       	cpi	r24, 0x02	; 2
    8af8:	58 f5       	brcc	.+86     	; 0x8b50 <send_cmd+0x7c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    8afa:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    8afc:	cc 30       	cpi	r28, 0x0C	; 12
    8afe:	71 f4       	brne	.+28     	; 0x8b1c <send_cmd+0x48>
		deselect();
		if (!select()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    8b00:	8c 2f       	mov	r24, r28
    8b02:	80 64       	ori	r24, 0x40	; 64
    8b04:	56 df       	rcall	.-340    	; 0x89b2 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    8b06:	8f 2d       	mov	r24, r15
    8b08:	54 df       	rcall	.-344    	; 0x89b2 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    8b0a:	80 2f       	mov	r24, r16
    8b0c:	52 df       	rcall	.-348    	; 0x89b2 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    8b0e:	81 2f       	mov	r24, r17
    8b10:	50 df       	rcall	.-352    	; 0x89b2 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    8b12:	8d 2f       	mov	r24, r29
    8b14:	4e df       	rcall	.-356    	; 0x89b2 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    8b16:	cc 23       	and	r28, r28
    8b18:	59 f0       	breq	.+22     	; 0x8b30 <send_cmd+0x5c>
    8b1a:	06 c0       	rjmp	.+12     	; 0x8b28 <send_cmd+0x54>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
    8b1c:	4c df       	rcall	.-360    	; 0x89b6 <deselect>
		if (!select()) return 0xFF;
    8b1e:	bf df       	rcall	.-130    	; 0x8a9e <select>
    8b20:	89 2b       	or	r24, r25
    8b22:	71 f7       	brne	.-36     	; 0x8b00 <send_cmd+0x2c>
    8b24:	8f ef       	ldi	r24, 0xFF	; 255
    8b26:	14 c0       	rjmp	.+40     	; 0x8b50 <send_cmd+0x7c>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    8b28:	c8 30       	cpi	r28, 0x08	; 8
    8b2a:	21 f0       	breq	.+8      	; 0x8b34 <send_cmd+0x60>
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
    8b2c:	81 e0       	ldi	r24, 0x01	; 1
    8b2e:	03 c0       	rjmp	.+6      	; 0x8b36 <send_cmd+0x62>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    8b30:	85 e9       	ldi	r24, 0x95	; 149
    8b32:	01 c0       	rjmp	.+2      	; 0x8b36 <send_cmd+0x62>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    8b34:	87 e8       	ldi	r24, 0x87	; 135
	xchg_spi(n);
    8b36:	3d df       	rcall	.-390    	; 0x89b2 <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    8b38:	cc 30       	cpi	r28, 0x0C	; 12
    8b3a:	11 f4       	brne	.+4      	; 0x8b40 <send_cmd+0x6c>
    8b3c:	8f ef       	ldi	r24, 0xFF	; 255
    8b3e:	39 df       	rcall	.-398    	; 0x89b2 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    8b40:	ca e0       	ldi	r28, 0x0A	; 10
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    8b42:	8f ef       	ldi	r24, 0xFF	; 255
    8b44:	0e 94 40 1a 	call	0x3480	; 0x3480 <spi_wr_rd>
	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);
    8b48:	87 ff       	sbrs	r24, 7
    8b4a:	02 c0       	rjmp	.+4      	; 0x8b50 <send_cmd+0x7c>
    8b4c:	c1 50       	subi	r28, 0x01	; 1
    8b4e:	c9 f7       	brne	.-14     	; 0x8b42 <send_cmd+0x6e>

	return res;			/* Return with the response value */
}
    8b50:	df 91       	pop	r29
    8b52:	cf 91       	pop	r28
    8b54:	1f 91       	pop	r17
    8b56:	0f 91       	pop	r16
    8b58:	ff 90       	pop	r15
    8b5a:	08 95       	ret

00008b5c <xmit_datablock.part.1>:
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if	_USE_WRITE
static
int xmit_datablock (
    8b5c:	0f 93       	push	r16
    8b5e:	1f 93       	push	r17
    8b60:	cf 93       	push	r28
    8b62:	df 93       	push	r29
    8b64:	ec 01       	movw	r28, r24
    8b66:	8c 01       	movw	r16, r24
    8b68:	1e 5f       	subi	r17, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	do {
		spi_wr_rd(*p++);
    8b6a:	88 81       	ld	r24, Y
    8b6c:	0e 94 40 1a 	call	0x3480	; 0x3480 <spi_wr_rd>
		spi_wr_rd(*p++);
    8b70:	89 81       	ldd	r24, Y+1	; 0x01
    8b72:	0e 94 40 1a 	call	0x3480	; 0x3480 <spi_wr_rd>
    8b76:	22 96       	adiw	r28, 0x02	; 2
		
	} while (cnt -= 2);
    8b78:	c0 17       	cp	r28, r16
    8b7a:	d1 07       	cpc	r29, r17
    8b7c:	b1 f7       	brne	.-20     	; 0x8b6a <xmit_datablock.part.1+0xe>
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
    8b7e:	8f ef       	ldi	r24, 0xFF	; 255
    8b80:	18 df       	rcall	.-464    	; 0x89b2 <xchg_spi>
		xchg_spi(0xFF);
    8b82:	8f ef       	ldi	r24, 0xFF	; 255
    8b84:	16 df       	rcall	.-468    	; 0x89b2 <xchg_spi>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    8b86:	8f ef       	ldi	r24, 0xFF	; 255
    8b88:	0e 94 40 1a 	call	0x3480	; 0x3480 <spi_wr_rd>
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
		xchg_spi(0xFF);
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
    8b8c:	28 2f       	mov	r18, r24
    8b8e:	2f 71       	andi	r18, 0x1F	; 31
    8b90:	81 e0       	ldi	r24, 0x01	; 1
    8b92:	90 e0       	ldi	r25, 0x00	; 0
    8b94:	25 30       	cpi	r18, 0x05	; 5
    8b96:	11 f0       	breq	.+4      	; 0x8b9c <xmit_datablock.part.1+0x40>
    8b98:	80 e0       	ldi	r24, 0x00	; 0
    8b9a:	90 e0       	ldi	r25, 0x00	; 0
			return 0;
	}

	return 1;
}
    8b9c:	df 91       	pop	r29
    8b9e:	cf 91       	pop	r28
    8ba0:	1f 91       	pop	r17
    8ba2:	0f 91       	pop	r16
    8ba4:	08 95       	ret

00008ba6 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
    8ba6:	ef 92       	push	r14
    8ba8:	ff 92       	push	r15
    8baa:	0f 93       	push	r16
    8bac:	1f 93       	push	r17
    8bae:	cf 93       	push	r28
    8bb0:	df 93       	push	r29
    8bb2:	00 d0       	rcall	.+0      	; 0x8bb4 <disk_initialize+0xe>
    8bb4:	1f 92       	push	r1
    8bb6:	cd b7       	in	r28, 0x3d	; 61
    8bb8:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    8bba:	81 11       	cpse	r24, r1
    8bbc:	cf c0       	rjmp	.+414    	; 0x8d5c <disk_initialize+0x1b6>
	power_off();						/* Turn off the socket power to reset the card */
    8bbe:	01 df       	rcall	.-510    	; 0x89c2 <power_off>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    8bc0:	80 91 23 20 	lds	r24, 0x2023
    8bc4:	81 fd       	sbrc	r24, 1
    8bc6:	c7 c0       	rjmp	.+398    	; 0x8d56 <disk_initialize+0x1b0>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
	PR.PRPC &= ~0x01;
    8bc8:	80 91 73 00 	lds	r24, 0x0073
    8bcc:	8e 7f       	andi	r24, 0xFE	; 254
    8bce:	80 93 73 00 	sts	0x0073, r24
	
	TCC0.CNT = 0;
    8bd2:	10 92 20 08 	sts	0x0820, r1
    8bd6:	10 92 21 08 	sts	0x0821, r1
	TCC0.PER = 1250;
    8bda:	82 ee       	ldi	r24, 0xE2	; 226
    8bdc:	94 e0       	ldi	r25, 0x04	; 4
    8bde:	80 93 26 08 	sts	0x0826, r24
    8be2:	90 93 27 08 	sts	0x0827, r25
	TCC0.CTRLA = TC_CLKSEL_DIV256_gc;
    8be6:	26 e0       	ldi	r18, 0x06	; 6
    8be8:	20 93 00 08 	sts	0x0800, r18
	
	TCC0.CCB = 1250;
    8bec:	80 93 2a 08 	sts	0x082A, r24
    8bf0:	90 93 2b 08 	sts	0x082B, r25
	TCC0.INTCTRLB |= TC_CCBINTLVL_LO_gc;
    8bf4:	80 91 07 08 	lds	r24, 0x0807
    8bf8:	84 60       	ori	r24, 0x04	; 4
    8bfa:	80 93 07 08 	sts	0x0807, r24
	TCC0.CTRLB |= TC0_CCBEN_bm;
    8bfe:	80 91 01 08 	lds	r24, 0x0801
    8c02:	80 62       	ori	r24, 0x20	; 32
    8c04:	80 93 01 08 	sts	0x0801, r24
	
	PORTB.DIRSET = PIN1_bm;
    8c08:	82 e0       	ldi	r24, 0x02	; 2
    8c0a:	80 93 21 06 	sts	0x0621, r24
	PORTB.OUTCLR = PIN1_bm;
    8c0e:	80 93 26 06 	sts	0x0626, r24
    8c12:	2f ef       	ldi	r18, 0xFF	; 255
    8c14:	83 ef       	ldi	r24, 0xF3	; 243
    8c16:	91 e0       	ldi	r25, 0x01	; 1
    8c18:	21 50       	subi	r18, 0x01	; 1
    8c1a:	80 40       	sbci	r24, 0x00	; 0
    8c1c:	90 40       	sbci	r25, 0x00	; 0
    8c1e:	e1 f7       	brne	.-8      	; 0x8c18 <disk_initialize+0x72>
    8c20:	00 c0       	rjmp	.+0      	; 0x8c22 <disk_initialize+0x7c>
    8c22:	00 00       	nop
	_delay_ms(20);
	
	spi_setup();
    8c24:	0e 94 0d 1a 	call	0x341a	; 0x341a <spi_setup>

	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
    8c28:	82 ed       	ldi	r24, 0xD2	; 210
    8c2a:	80 93 c0 08 	sts	0x08C0, r24
    8c2e:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    8c30:	8f ef       	ldi	r24, 0xFF	; 255
    8c32:	bf de       	rcall	.-642    	; 0x89b2 <xchg_spi>
    8c34:	11 50       	subi	r17, 0x01	; 1
    8c36:	e1 f7       	brne	.-8      	; 0x8c30 <disk_initialize+0x8a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    8c38:	40 e0       	ldi	r20, 0x00	; 0
    8c3a:	50 e0       	ldi	r21, 0x00	; 0
    8c3c:	ba 01       	movw	r22, r20
    8c3e:	80 e0       	ldi	r24, 0x00	; 0
    8c40:	49 df       	rcall	.-366    	; 0x8ad4 <send_cmd>
    8c42:	81 30       	cpi	r24, 0x01	; 1
    8c44:	09 f0       	breq	.+2      	; 0x8c48 <disk_initialize+0xa2>
    8c46:	77 c0       	rjmp	.+238    	; 0x8d36 <disk_initialize+0x190>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    8c48:	84 e6       	ldi	r24, 0x64	; 100
    8c4a:	80 93 75 3a 	sts	0x3A75, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    8c4e:	4a ea       	ldi	r20, 0xAA	; 170
    8c50:	51 e0       	ldi	r21, 0x01	; 1
    8c52:	60 e0       	ldi	r22, 0x00	; 0
    8c54:	70 e0       	ldi	r23, 0x00	; 0
    8c56:	88 e0       	ldi	r24, 0x08	; 8
    8c58:	3d df       	rcall	.-390    	; 0x8ad4 <send_cmd>
    8c5a:	81 30       	cpi	r24, 0x01	; 1
    8c5c:	09 f0       	breq	.+2      	; 0x8c60 <disk_initialize+0xba>
    8c5e:	43 c0       	rjmp	.+134    	; 0x8ce6 <disk_initialize+0x140>
    8c60:	7e 01       	movw	r14, r28
    8c62:	e5 e0       	ldi	r30, 0x05	; 5
    8c64:	ee 0e       	add	r14, r30
    8c66:	f1 1c       	adc	r15, r1
    8c68:	8e 01       	movw	r16, r28
    8c6a:	0f 5f       	subi	r16, 0xFF	; 255
    8c6c:	1f 4f       	sbci	r17, 0xFF	; 255
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    8c6e:	8f ef       	ldi	r24, 0xFF	; 255
    8c70:	0e 94 40 1a 	call	0x3480	; 0x3480 <spi_wr_rd>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    8c74:	f8 01       	movw	r30, r16
    8c76:	81 93       	st	Z+, r24
    8c78:	8f 01       	movw	r16, r30
    8c7a:	ee 15       	cp	r30, r14
    8c7c:	ff 05       	cpc	r31, r15
    8c7e:	b9 f7       	brne	.-18     	; 0x8c6e <disk_initialize+0xc8>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    8c80:	8b 81       	ldd	r24, Y+3	; 0x03
    8c82:	81 30       	cpi	r24, 0x01	; 1
    8c84:	09 f0       	breq	.+2      	; 0x8c88 <disk_initialize+0xe2>
    8c86:	57 c0       	rjmp	.+174    	; 0x8d36 <disk_initialize+0x190>
    8c88:	8c 81       	ldd	r24, Y+4	; 0x04
    8c8a:	8a 3a       	cpi	r24, 0xAA	; 170
    8c8c:	09 f0       	breq	.+2      	; 0x8c90 <disk_initialize+0xea>
    8c8e:	53 c0       	rjmp	.+166    	; 0x8d36 <disk_initialize+0x190>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    8c90:	80 91 75 3a 	lds	r24, 0x3A75
    8c94:	81 11       	cpse	r24, r1
    8c96:	06 c0       	rjmp	.+12     	; 0x8ca4 <disk_initialize+0xfe>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    8c98:	80 91 75 3a 	lds	r24, 0x3A75
    8c9c:	88 23       	and	r24, r24
    8c9e:	09 f4       	brne	.+2      	; 0x8ca2 <disk_initialize+0xfc>
    8ca0:	4a c0       	rjmp	.+148    	; 0x8d36 <disk_initialize+0x190>
    8ca2:	09 c0       	rjmp	.+18     	; 0x8cb6 <disk_initialize+0x110>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    8ca4:	40 e0       	ldi	r20, 0x00	; 0
    8ca6:	50 e0       	ldi	r21, 0x00	; 0
    8ca8:	60 e0       	ldi	r22, 0x00	; 0
    8caa:	70 e4       	ldi	r23, 0x40	; 64
    8cac:	89 ea       	ldi	r24, 0xA9	; 169
    8cae:	12 df       	rcall	.-476    	; 0x8ad4 <send_cmd>
    8cb0:	81 11       	cpse	r24, r1
    8cb2:	ee cf       	rjmp	.-36     	; 0x8c90 <disk_initialize+0xea>
    8cb4:	f1 cf       	rjmp	.-30     	; 0x8c98 <disk_initialize+0xf2>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    8cb6:	40 e0       	ldi	r20, 0x00	; 0
    8cb8:	50 e0       	ldi	r21, 0x00	; 0
    8cba:	ba 01       	movw	r22, r20
    8cbc:	8a e3       	ldi	r24, 0x3A	; 58
    8cbe:	0a df       	rcall	.-492    	; 0x8ad4 <send_cmd>
    8cc0:	81 11       	cpse	r24, r1
    8cc2:	39 c0       	rjmp	.+114    	; 0x8d36 <disk_initialize+0x190>
    8cc4:	8e 01       	movw	r16, r28
    8cc6:	0f 5f       	subi	r16, 0xFF	; 255
    8cc8:	1f 4f       	sbci	r17, 0xFF	; 255
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    8cca:	8f ef       	ldi	r24, 0xFF	; 255
    8ccc:	0e 94 40 1a 	call	0x3480	; 0x3480 <spi_wr_rd>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    8cd0:	f8 01       	movw	r30, r16
    8cd2:	81 93       	st	Z+, r24
    8cd4:	8f 01       	movw	r16, r30
    8cd6:	ee 15       	cp	r30, r14
    8cd8:	ff 05       	cpc	r31, r15
    8cda:	b9 f7       	brne	.-18     	; 0x8cca <disk_initialize+0x124>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    8cdc:	89 81       	ldd	r24, Y+1	; 0x01
    8cde:	86 ff       	sbrs	r24, 6
    8ce0:	28 c0       	rjmp	.+80     	; 0x8d32 <disk_initialize+0x18c>
    8ce2:	1c e0       	ldi	r17, 0x0C	; 12
    8ce4:	29 c0       	rjmp	.+82     	; 0x8d38 <disk_initialize+0x192>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    8ce6:	40 e0       	ldi	r20, 0x00	; 0
    8ce8:	50 e0       	ldi	r21, 0x00	; 0
    8cea:	ba 01       	movw	r22, r20
    8cec:	89 ea       	ldi	r24, 0xA9	; 169
    8cee:	f2 de       	rcall	.-540    	; 0x8ad4 <send_cmd>
    8cf0:	82 30       	cpi	r24, 0x02	; 2
    8cf2:	18 f4       	brcc	.+6      	; 0x8cfa <disk_initialize+0x154>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    8cf4:	12 e0       	ldi	r17, 0x02	; 2
    8cf6:	09 ea       	ldi	r16, 0xA9	; 169
    8cf8:	02 c0       	rjmp	.+4      	; 0x8cfe <disk_initialize+0x158>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    8cfa:	11 e0       	ldi	r17, 0x01	; 1
    8cfc:	01 e0       	ldi	r16, 0x01	; 1
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    8cfe:	80 91 75 3a 	lds	r24, 0x3A75
    8d02:	81 11       	cpse	r24, r1
    8d04:	05 c0       	rjmp	.+10     	; 0x8d10 <disk_initialize+0x16a>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    8d06:	80 91 75 3a 	lds	r24, 0x3A75
    8d0a:	88 23       	and	r24, r24
    8d0c:	a1 f0       	breq	.+40     	; 0x8d36 <disk_initialize+0x190>
    8d0e:	08 c0       	rjmp	.+16     	; 0x8d20 <disk_initialize+0x17a>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    8d10:	40 e0       	ldi	r20, 0x00	; 0
    8d12:	50 e0       	ldi	r21, 0x00	; 0
    8d14:	ba 01       	movw	r22, r20
    8d16:	80 2f       	mov	r24, r16
    8d18:	dd de       	rcall	.-582    	; 0x8ad4 <send_cmd>
    8d1a:	81 11       	cpse	r24, r1
    8d1c:	f0 cf       	rjmp	.-32     	; 0x8cfe <disk_initialize+0x158>
    8d1e:	f3 cf       	rjmp	.-26     	; 0x8d06 <disk_initialize+0x160>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    8d20:	40 e0       	ldi	r20, 0x00	; 0
    8d22:	52 e0       	ldi	r21, 0x02	; 2
    8d24:	60 e0       	ldi	r22, 0x00	; 0
    8d26:	70 e0       	ldi	r23, 0x00	; 0
    8d28:	80 e1       	ldi	r24, 0x10	; 16
    8d2a:	d4 de       	rcall	.-600    	; 0x8ad4 <send_cmd>
    8d2c:	81 11       	cpse	r24, r1
    8d2e:	03 c0       	rjmp	.+6      	; 0x8d36 <disk_initialize+0x190>
    8d30:	03 c0       	rjmp	.+6      	; 0x8d38 <disk_initialize+0x192>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    8d32:	14 e0       	ldi	r17, 0x04	; 4
    8d34:	01 c0       	rjmp	.+2      	; 0x8d38 <disk_initialize+0x192>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    8d36:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	CardType = ty;
    8d38:	10 93 73 3a 	sts	0x3A73, r17
	deselect();
    8d3c:	3c de       	rcall	.-904    	; 0x89b6 <deselect>

	if (ty) {			/* Initialization succeded */
    8d3e:	11 23       	and	r17, r17
    8d40:	49 f0       	breq	.+18     	; 0x8d54 <disk_initialize+0x1ae>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    8d42:	80 91 23 20 	lds	r24, 0x2023
    8d46:	8e 7f       	andi	r24, 0xFE	; 254
    8d48:	80 93 23 20 	sts	0x2023, r24
		FCLK_FAST();
    8d4c:	80 ed       	ldi	r24, 0xD0	; 208
    8d4e:	80 93 c0 08 	sts	0x08C0, r24
    8d52:	01 c0       	rjmp	.+2      	; 0x8d56 <disk_initialize+0x1b0>
	} else {			/* Initialization failed */
		power_off();
    8d54:	36 de       	rcall	.-916    	; 0x89c2 <power_off>
	}

	return Stat;
    8d56:	80 91 23 20 	lds	r24, 0x2023
    8d5a:	01 c0       	rjmp	.+2      	; 0x8d5e <disk_initialize+0x1b8>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    8d5c:	81 e0       	ldi	r24, 0x01	; 1
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    8d5e:	24 96       	adiw	r28, 0x04	; 4
    8d60:	cd bf       	out	0x3d, r28	; 61
    8d62:	de bf       	out	0x3e, r29	; 62
    8d64:	df 91       	pop	r29
    8d66:	cf 91       	pop	r28
    8d68:	1f 91       	pop	r17
    8d6a:	0f 91       	pop	r16
    8d6c:	ff 90       	pop	r15
    8d6e:	ef 90       	pop	r14
    8d70:	08 95       	ret

00008d72 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    8d72:	81 11       	cpse	r24, r1
    8d74:	03 c0       	rjmp	.+6      	; 0x8d7c <disk_status+0xa>
	return Stat;
    8d76:	80 91 23 20 	lds	r24, 0x2023
    8d7a:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    8d7c:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    8d7e:	08 95       	ret

00008d80 <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    8d80:	ff 92       	push	r15
    8d82:	0f 93       	push	r16
    8d84:	1f 93       	push	r17
    8d86:	cf 93       	push	r28
    8d88:	df 93       	push	r29
    8d8a:	eb 01       	movw	r28, r22
    8d8c:	ba 01       	movw	r22, r20
    8d8e:	a9 01       	movw	r20, r18
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    8d90:	81 11       	cpse	r24, r1
    8d92:	38 c0       	rjmp	.+112    	; 0x8e04 <disk_read+0x84>
    8d94:	01 15       	cp	r16, r1
    8d96:	11 05       	cpc	r17, r1
    8d98:	a9 f1       	breq	.+106    	; 0x8e04 <disk_read+0x84>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    8d9a:	80 91 23 20 	lds	r24, 0x2023
    8d9e:	80 fd       	sbrc	r24, 0
    8da0:	33 c0       	rjmp	.+102    	; 0x8e08 <disk_read+0x88>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    8da2:	80 91 73 3a 	lds	r24, 0x3A73
    8da6:	83 fd       	sbrc	r24, 3
    8da8:	07 c0       	rjmp	.+14     	; 0x8db8 <disk_read+0x38>
    8daa:	29 e0       	ldi	r18, 0x09	; 9
    8dac:	44 0f       	add	r20, r20
    8dae:	55 1f       	adc	r21, r21
    8db0:	66 1f       	adc	r22, r22
    8db2:	77 1f       	adc	r23, r23
    8db4:	2a 95       	dec	r18
    8db6:	d1 f7       	brne	.-12     	; 0x8dac <disk_read+0x2c>

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    8db8:	02 30       	cpi	r16, 0x02	; 2
    8dba:	11 05       	cpc	r17, r1
    8dbc:	18 f0       	brcs	.+6      	; 0x8dc4 <disk_read+0x44>
    8dbe:	92 e1       	ldi	r25, 0x12	; 18
    8dc0:	f9 2e       	mov	r15, r25
    8dc2:	02 c0       	rjmp	.+4      	; 0x8dc8 <disk_read+0x48>
    8dc4:	81 e1       	ldi	r24, 0x11	; 17
    8dc6:	f8 2e       	mov	r15, r24
	if (send_cmd(cmd, sector) == 0) {
    8dc8:	8f 2d       	mov	r24, r15
    8dca:	84 de       	rcall	.-760    	; 0x8ad4 <send_cmd>
    8dcc:	81 11       	cpse	r24, r1
    8dce:	14 c0       	rjmp	.+40     	; 0x8df8 <disk_read+0x78>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    8dd0:	60 e0       	ldi	r22, 0x00	; 0
    8dd2:	72 e0       	ldi	r23, 0x02	; 2
    8dd4:	ce 01       	movw	r24, r28
    8dd6:	0c de       	rcall	.-1000   	; 0x89f0 <rcvr_datablock>
    8dd8:	89 2b       	or	r24, r25
    8dda:	31 f0       	breq	.+12     	; 0x8de8 <disk_read+0x68>
			buff += 512;
    8ddc:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    8dde:	01 50       	subi	r16, 0x01	; 1
    8de0:	11 09       	sbc	r17, r1
    8de2:	01 15       	cp	r16, r1
    8de4:	11 05       	cpc	r17, r1
    8de6:	a1 f7       	brne	.-24     	; 0x8dd0 <disk_read+0x50>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    8de8:	82 e1       	ldi	r24, 0x12	; 18
    8dea:	f8 12       	cpse	r15, r24
    8dec:	05 c0       	rjmp	.+10     	; 0x8df8 <disk_read+0x78>
    8dee:	40 e0       	ldi	r20, 0x00	; 0
    8df0:	50 e0       	ldi	r21, 0x00	; 0
    8df2:	ba 01       	movw	r22, r20
    8df4:	8c e0       	ldi	r24, 0x0C	; 12
    8df6:	6e de       	rcall	.-804    	; 0x8ad4 <send_cmd>
	}
	deselect();
    8df8:	de dd       	rcall	.-1092   	; 0x89b6 <deselect>

	return count ? RES_ERROR : RES_OK;
    8dfa:	81 e0       	ldi	r24, 0x01	; 1
    8dfc:	01 2b       	or	r16, r17
    8dfe:	29 f4       	brne	.+10     	; 0x8e0a <disk_read+0x8a>
    8e00:	80 e0       	ldi	r24, 0x00	; 0
    8e02:	03 c0       	rjmp	.+6      	; 0x8e0a <disk_read+0x8a>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    8e04:	84 e0       	ldi	r24, 0x04	; 4
    8e06:	01 c0       	rjmp	.+2      	; 0x8e0a <disk_read+0x8a>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    8e08:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    8e0a:	df 91       	pop	r29
    8e0c:	cf 91       	pop	r28
    8e0e:	1f 91       	pop	r17
    8e10:	0f 91       	pop	r16
    8e12:	ff 90       	pop	r15
    8e14:	08 95       	ret

00008e16 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    8e16:	cf 92       	push	r12
    8e18:	df 92       	push	r13
    8e1a:	ef 92       	push	r14
    8e1c:	ff 92       	push	r15
    8e1e:	0f 93       	push	r16
    8e20:	1f 93       	push	r17
    8e22:	cf 93       	push	r28
    8e24:	df 93       	push	r29
    8e26:	eb 01       	movw	r28, r22
    8e28:	69 01       	movw	r12, r18
    8e2a:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    8e2c:	81 11       	cpse	r24, r1
    8e2e:	59 c0       	rjmp	.+178    	; 0x8ee2 <disk_write+0xcc>
    8e30:	01 15       	cp	r16, r1
    8e32:	11 05       	cpc	r17, r1
    8e34:	09 f4       	brne	.+2      	; 0x8e38 <disk_write+0x22>
    8e36:	55 c0       	rjmp	.+170    	; 0x8ee2 <disk_write+0xcc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    8e38:	80 91 23 20 	lds	r24, 0x2023
    8e3c:	80 fd       	sbrc	r24, 0
    8e3e:	53 c0       	rjmp	.+166    	; 0x8ee6 <disk_write+0xd0>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    8e40:	80 91 23 20 	lds	r24, 0x2023
    8e44:	82 fd       	sbrc	r24, 2
    8e46:	51 c0       	rjmp	.+162    	; 0x8eea <disk_write+0xd4>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    8e48:	80 91 73 3a 	lds	r24, 0x3A73
    8e4c:	83 fd       	sbrc	r24, 3
    8e4e:	07 c0       	rjmp	.+14     	; 0x8e5e <disk_write+0x48>
    8e50:	39 e0       	ldi	r19, 0x09	; 9
    8e52:	cc 0c       	add	r12, r12
    8e54:	dd 1c       	adc	r13, r13
    8e56:	ee 1c       	adc	r14, r14
    8e58:	ff 1c       	adc	r15, r15
    8e5a:	3a 95       	dec	r19
    8e5c:	d1 f7       	brne	.-12     	; 0x8e52 <disk_write+0x3c>

	if (count == 1) {	/* Single block write */
    8e5e:	01 30       	cpi	r16, 0x01	; 1
    8e60:	11 05       	cpc	r17, r1
    8e62:	c1 f4       	brne	.+48     	; 0x8e94 <disk_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    8e64:	b7 01       	movw	r22, r14
    8e66:	a6 01       	movw	r20, r12
    8e68:	88 e1       	ldi	r24, 0x18	; 24
    8e6a:	34 de       	rcall	.-920    	; 0x8ad4 <send_cmd>
    8e6c:	88 23       	and	r24, r24
    8e6e:	19 f0       	breq	.+6      	; 0x8e76 <disk_write+0x60>
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    8e70:	01 e0       	ldi	r16, 0x01	; 1
    8e72:	10 e0       	ldi	r17, 0x00	; 0
    8e74:	30 c0       	rjmp	.+96     	; 0x8ed6 <disk_write+0xc0>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    8e76:	ff dd       	rcall	.-1026   	; 0x8a76 <wait_ready.constprop.2>
    8e78:	89 2b       	or	r24, r25
    8e7a:	d1 f3       	breq	.-12     	; 0x8e70 <disk_write+0x5a>

	xchg_spi(token);					/* Xmit data token */
    8e7c:	8e ef       	ldi	r24, 0xFE	; 254
    8e7e:	99 dd       	rcall	.-1230   	; 0x89b2 <xchg_spi>
    8e80:	ce 01       	movw	r24, r28
    8e82:	6c de       	rcall	.-808    	; 0x8b5c <xmit_datablock.part.1>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
    8e84:	31 e0       	ldi	r19, 0x01	; 1
    8e86:	20 e0       	ldi	r18, 0x00	; 0
    8e88:	89 2b       	or	r24, r25
    8e8a:	09 f0       	breq	.+2      	; 0x8e8e <disk_write+0x78>
    8e8c:	30 e0       	ldi	r19, 0x00	; 0
    8e8e:	03 2f       	mov	r16, r19
    8e90:	12 2f       	mov	r17, r18
    8e92:	21 c0       	rjmp	.+66     	; 0x8ed6 <disk_write+0xc0>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    8e94:	86 70       	andi	r24, 0x06	; 6
    8e96:	29 f0       	breq	.+10     	; 0x8ea2 <disk_write+0x8c>
    8e98:	a8 01       	movw	r20, r16
    8e9a:	60 e0       	ldi	r22, 0x00	; 0
    8e9c:	70 e0       	ldi	r23, 0x00	; 0
    8e9e:	87 e9       	ldi	r24, 0x97	; 151
    8ea0:	19 de       	rcall	.-974    	; 0x8ad4 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    8ea2:	b7 01       	movw	r22, r14
    8ea4:	a6 01       	movw	r20, r12
    8ea6:	89 e1       	ldi	r24, 0x19	; 25
    8ea8:	15 de       	rcall	.-982    	; 0x8ad4 <send_cmd>
    8eaa:	81 11       	cpse	r24, r1
    8eac:	14 c0       	rjmp	.+40     	; 0x8ed6 <disk_write+0xc0>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    8eae:	e3 dd       	rcall	.-1082   	; 0x8a76 <wait_ready.constprop.2>
    8eb0:	89 2b       	or	r24, r25
    8eb2:	61 f0       	breq	.+24     	; 0x8ecc <disk_write+0xb6>

	xchg_spi(token);					/* Xmit data token */
    8eb4:	8c ef       	ldi	r24, 0xFC	; 252
    8eb6:	7d dd       	rcall	.-1286   	; 0x89b2 <xchg_spi>
    8eb8:	ce 01       	movw	r24, r28
    8eba:	50 de       	rcall	.-864    	; 0x8b5c <xmit_datablock.part.1>
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    8ebc:	89 2b       	or	r24, r25
    8ebe:	31 f0       	breq	.+12     	; 0x8ecc <disk_write+0xb6>
				buff += 512;
    8ec0:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    8ec2:	01 50       	subi	r16, 0x01	; 1
    8ec4:	11 09       	sbc	r17, r1
    8ec6:	01 15       	cp	r16, r1
    8ec8:	11 05       	cpc	r17, r1
    8eca:	89 f7       	brne	.-30     	; 0x8eae <disk_write+0x98>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    8ecc:	d4 dd       	rcall	.-1112   	; 0x8a76 <wait_ready.constprop.2>
    8ece:	89 2b       	or	r24, r25
    8ed0:	79 f2       	breq	.-98     	; 0x8e70 <disk_write+0x5a>

	xchg_spi(token);					/* Xmit data token */
    8ed2:	8d ef       	ldi	r24, 0xFD	; 253
    8ed4:	6e dd       	rcall	.-1316   	; 0x89b2 <xchg_spi>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
				count = 1;
		}
	}
	deselect();
    8ed6:	6f dd       	rcall	.-1314   	; 0x89b6 <deselect>

	return count ? RES_ERROR : RES_OK;
    8ed8:	81 e0       	ldi	r24, 0x01	; 1
    8eda:	01 2b       	or	r16, r17
    8edc:	39 f4       	brne	.+14     	; 0x8eec <disk_write+0xd6>
    8ede:	80 e0       	ldi	r24, 0x00	; 0
    8ee0:	05 c0       	rjmp	.+10     	; 0x8eec <disk_write+0xd6>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    8ee2:	84 e0       	ldi	r24, 0x04	; 4
    8ee4:	03 c0       	rjmp	.+6      	; 0x8eec <disk_write+0xd6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    8ee6:	83 e0       	ldi	r24, 0x03	; 3
    8ee8:	01 c0       	rjmp	.+2      	; 0x8eec <disk_write+0xd6>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    8eea:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    8eec:	df 91       	pop	r29
    8eee:	cf 91       	pop	r28
    8ef0:	1f 91       	pop	r17
    8ef2:	0f 91       	pop	r16
    8ef4:	ff 90       	pop	r15
    8ef6:	ef 90       	pop	r14
    8ef8:	df 90       	pop	r13
    8efa:	cf 90       	pop	r12
    8efc:	08 95       	ret

00008efe <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    8efe:	ef 92       	push	r14
    8f00:	ff 92       	push	r15
    8f02:	0f 93       	push	r16
    8f04:	1f 93       	push	r17
    8f06:	cf 93       	push	r28
    8f08:	df 93       	push	r29
    8f0a:	cd b7       	in	r28, 0x3d	; 61
    8f0c:	de b7       	in	r29, 0x3e	; 62
    8f0e:	60 97       	sbiw	r28, 0x10	; 16
    8f10:	cd bf       	out	0x3d, r28	; 61
    8f12:	de bf       	out	0x3e, r29	; 62
    8f14:	7a 01       	movw	r14, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    8f16:	81 11       	cpse	r24, r1
    8f18:	46 c1       	rjmp	.+652    	; 0x91a6 <disk_ioctl+0x2a8>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    8f1a:	80 91 23 20 	lds	r24, 0x2023
    8f1e:	80 fd       	sbrc	r24, 0
    8f20:	44 c1       	rjmp	.+648    	; 0x91aa <disk_ioctl+0x2ac>

	switch (cmd) {
    8f22:	62 33       	cpi	r22, 0x32	; 50
    8f24:	09 f4       	brne	.+2      	; 0x8f28 <disk_ioctl+0x2a>
    8f26:	00 c1       	rjmp	.+512    	; 0x9128 <disk_ioctl+0x22a>
    8f28:	80 f4       	brcc	.+32     	; 0x8f4a <disk_ioctl+0x4c>
    8f2a:	61 30       	cpi	r22, 0x01	; 1
    8f2c:	e1 f0       	breq	.+56     	; 0x8f66 <disk_ioctl+0x68>
    8f2e:	c8 f0       	brcs	.+50     	; 0x8f62 <disk_ioctl+0x64>
    8f30:	63 30       	cpi	r22, 0x03	; 3
    8f32:	09 f4       	brne	.+2      	; 0x8f36 <disk_ioctl+0x38>
    8f34:	7e c0       	rjmp	.+252    	; 0x9032 <disk_ioctl+0x134>
    8f36:	67 30       	cpi	r22, 0x07	; 7
    8f38:	09 f0       	breq	.+2      	; 0x8f3c <disk_ioctl+0x3e>
    8f3a:	2f c1       	rjmp	.+606    	; 0x919a <disk_ioctl+0x29c>
				res = RES_OK;
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
    8f3c:	42 dd       	rcall	.-1404   	; 0x89c2 <power_off>
		Stat |= STA_NOINIT;
    8f3e:	80 91 23 20 	lds	r24, 0x2023
    8f42:	81 60       	ori	r24, 0x01	; 1
    8f44:	80 93 23 20 	sts	0x2023, r24
    8f48:	2a c1       	rjmp	.+596    	; 0x919e <disk_ioctl+0x2a0>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
    8f4a:	64 33       	cpi	r22, 0x34	; 52
    8f4c:	09 f4       	brne	.+2      	; 0x8f50 <disk_ioctl+0x52>
    8f4e:	f6 c0       	rjmp	.+492    	; 0x913c <disk_ioctl+0x23e>
    8f50:	08 f4       	brcc	.+2      	; 0x8f54 <disk_ioctl+0x56>
    8f52:	ef c0       	rjmp	.+478    	; 0x9132 <disk_ioctl+0x234>
    8f54:	65 33       	cpi	r22, 0x35	; 53
    8f56:	09 f4       	brne	.+2      	; 0x8f5a <disk_ioctl+0x5c>
    8f58:	00 c1       	rjmp	.+512    	; 0x915a <disk_ioctl+0x25c>
    8f5a:	66 33       	cpi	r22, 0x36	; 54
    8f5c:	09 f4       	brne	.+2      	; 0x8f60 <disk_ioctl+0x62>
    8f5e:	11 c1       	rjmp	.+546    	; 0x9182 <disk_ioctl+0x284>
    8f60:	1c c1       	rjmp	.+568    	; 0x919a <disk_ioctl+0x29c>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    8f62:	9d dd       	rcall	.-1222   	; 0x8a9e <select>
    8f64:	f6 c0       	rjmp	.+492    	; 0x9152 <disk_ioctl+0x254>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    8f66:	40 e0       	ldi	r20, 0x00	; 0
    8f68:	50 e0       	ldi	r21, 0x00	; 0
    8f6a:	ba 01       	movw	r22, r20
    8f6c:	89 e0       	ldi	r24, 0x09	; 9
    8f6e:	b2 dd       	rcall	.-1180   	; 0x8ad4 <send_cmd>
    8f70:	88 23       	and	r24, r24
    8f72:	11 f0       	breq	.+4      	; 0x8f78 <disk_ioctl+0x7a>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    8f74:	11 e0       	ldi	r17, 0x01	; 1
    8f76:	14 c1       	rjmp	.+552    	; 0x91a0 <disk_ioctl+0x2a2>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    8f78:	60 e1       	ldi	r22, 0x10	; 16
    8f7a:	70 e0       	ldi	r23, 0x00	; 0
    8f7c:	ce 01       	movw	r24, r28
    8f7e:	01 96       	adiw	r24, 0x01	; 1
    8f80:	37 dd       	rcall	.-1426   	; 0x89f0 <rcvr_datablock>
    8f82:	89 2b       	or	r24, r25
    8f84:	b9 f3       	breq	.-18     	; 0x8f74 <disk_ioctl+0x76>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    8f86:	99 81       	ldd	r25, Y+1	; 0x01
    8f88:	92 95       	swap	r25
    8f8a:	96 95       	lsr	r25
    8f8c:	96 95       	lsr	r25
    8f8e:	93 70       	andi	r25, 0x03	; 3
    8f90:	08 85       	ldd	r16, Y+8	; 0x08
    8f92:	49 85       	ldd	r20, Y+9	; 0x09
    8f94:	5a 85       	ldd	r21, Y+10	; 0x0a
    8f96:	91 30       	cpi	r25, 0x01	; 1
    8f98:	11 f5       	brne	.+68     	; 0x8fde <disk_ioctl+0xe0>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    8f9a:	0f 73       	andi	r16, 0x3F	; 63
    8f9c:	10 e0       	ldi	r17, 0x00	; 0
    8f9e:	20 e0       	ldi	r18, 0x00	; 0
    8fa0:	30 e0       	ldi	r19, 0x00	; 0
    8fa2:	98 01       	movw	r18, r16
    8fa4:	11 27       	eor	r17, r17
    8fa6:	00 27       	eor	r16, r16
    8fa8:	0f 5f       	subi	r16, 0xFF	; 255
    8faa:	1f 4f       	sbci	r17, 0xFF	; 255
    8fac:	2f 4f       	sbci	r18, 0xFF	; 255
    8fae:	3f 4f       	sbci	r19, 0xFF	; 255
    8fb0:	84 2f       	mov	r24, r20
    8fb2:	90 e0       	ldi	r25, 0x00	; 0
    8fb4:	98 2f       	mov	r25, r24
    8fb6:	88 27       	eor	r24, r24
    8fb8:	85 0f       	add	r24, r21
    8fba:	91 1d       	adc	r25, r1
    8fbc:	08 0f       	add	r16, r24
    8fbe:	19 1f       	adc	r17, r25
    8fc0:	21 1d       	adc	r18, r1
    8fc2:	31 1d       	adc	r19, r1
				*(DWORD*)buff = csize << 10;
    8fc4:	aa e0       	ldi	r26, 0x0A	; 10
    8fc6:	00 0f       	add	r16, r16
    8fc8:	11 1f       	adc	r17, r17
    8fca:	22 1f       	adc	r18, r18
    8fcc:	33 1f       	adc	r19, r19
    8fce:	aa 95       	dec	r26
    8fd0:	d1 f7       	brne	.-12     	; 0x8fc6 <disk_ioctl+0xc8>
    8fd2:	f7 01       	movw	r30, r14
    8fd4:	00 83       	st	Z, r16
    8fd6:	11 83       	std	Z+1, r17	; 0x01
    8fd8:	22 83       	std	Z+2, r18	; 0x02
    8fda:	33 83       	std	Z+3, r19	; 0x03
    8fdc:	e0 c0       	rjmp	.+448    	; 0x919e <disk_ioctl+0x2a0>
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    8fde:	42 95       	swap	r20
    8fe0:	46 95       	lsr	r20
    8fe2:	46 95       	lsr	r20
    8fe4:	43 70       	andi	r20, 0x03	; 3
    8fe6:	f4 e0       	ldi	r31, 0x04	; 4
    8fe8:	0f 9f       	mul	r16, r31
    8fea:	c0 01       	movw	r24, r0
    8fec:	11 24       	eor	r1, r1
    8fee:	84 0f       	add	r24, r20
    8ff0:	91 1d       	adc	r25, r1
    8ff2:	01 96       	adiw	r24, 0x01	; 1
    8ff4:	2f 81       	ldd	r18, Y+7	; 0x07
    8ff6:	23 70       	andi	r18, 0x03	; 3
    8ff8:	30 e0       	ldi	r19, 0x00	; 0
    8ffa:	32 2f       	mov	r19, r18
    8ffc:	22 27       	eor	r18, r18
    8ffe:	33 0f       	add	r19, r19
    9000:	33 0f       	add	r19, r19
    9002:	82 0f       	add	r24, r18
    9004:	93 1f       	adc	r25, r19
    9006:	a0 e0       	ldi	r26, 0x00	; 0
    9008:	b0 e0       	ldi	r27, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    900a:	2e 81       	ldd	r18, Y+6	; 0x06
    900c:	2f 70       	andi	r18, 0x0F	; 15
    900e:	4b 85       	ldd	r20, Y+11	; 0x0b
    9010:	44 1f       	adc	r20, r20
    9012:	44 27       	eor	r20, r20
    9014:	44 1f       	adc	r20, r20
    9016:	24 0f       	add	r18, r20
    9018:	35 2f       	mov	r19, r21
    901a:	33 70       	andi	r19, 0x03	; 3
    901c:	33 0f       	add	r19, r19
    901e:	23 0f       	add	r18, r19
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    9020:	27 50       	subi	r18, 0x07	; 7
    9022:	04 c0       	rjmp	.+8      	; 0x902c <disk_ioctl+0x12e>
    9024:	88 0f       	add	r24, r24
    9026:	99 1f       	adc	r25, r25
    9028:	aa 1f       	adc	r26, r26
    902a:	bb 1f       	adc	r27, r27
    902c:	2a 95       	dec	r18
    902e:	d2 f7       	brpl	.-12     	; 0x9024 <disk_ioctl+0x126>
    9030:	75 c0       	rjmp	.+234    	; 0x911c <disk_ioctl+0x21e>
			res = RES_OK;
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    9032:	80 91 73 3a 	lds	r24, 0x3A73
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    9036:	40 e0       	ldi	r20, 0x00	; 0
    9038:	50 e0       	ldi	r21, 0x00	; 0
    903a:	ba 01       	movw	r22, r20
			res = RES_OK;
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    903c:	82 ff       	sbrs	r24, 2
    903e:	27 c0       	rjmp	.+78     	; 0x908e <disk_ioctl+0x190>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    9040:	8d e8       	ldi	r24, 0x8D	; 141
    9042:	48 dd       	rcall	.-1392   	; 0x8ad4 <send_cmd>
    9044:	81 11       	cpse	r24, r1
    9046:	96 cf       	rjmp	.-212    	; 0x8f74 <disk_ioctl+0x76>
				xchg_spi(0xFF);
    9048:	8f ef       	ldi	r24, 0xFF	; 255
    904a:	b3 dc       	rcall	.-1690   	; 0x89b2 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    904c:	60 e1       	ldi	r22, 0x10	; 16
    904e:	70 e0       	ldi	r23, 0x00	; 0
    9050:	ce 01       	movw	r24, r28
    9052:	01 96       	adiw	r24, 0x01	; 1
    9054:	cd dc       	rcall	.-1638   	; 0x89f0 <rcvr_datablock>
    9056:	89 2b       	or	r24, r25
    9058:	09 f4       	brne	.+2      	; 0x905c <disk_ioctl+0x15e>
    905a:	8c cf       	rjmp	.-232    	; 0x8f74 <disk_ioctl+0x76>
    905c:	10 e3       	ldi	r17, 0x30	; 48
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    905e:	8f ef       	ldi	r24, 0xFF	; 255
    9060:	a8 dc       	rcall	.-1712   	; 0x89b2 <xchg_spi>
    9062:	11 50       	subi	r17, 0x01	; 1
    9064:	e1 f7       	brne	.-8      	; 0x905e <disk_ioctl+0x160>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    9066:	2b 85       	ldd	r18, Y+11	; 0x0b
    9068:	22 95       	swap	r18
    906a:	2f 70       	andi	r18, 0x0F	; 15
    906c:	80 e1       	ldi	r24, 0x10	; 16
    906e:	90 e0       	ldi	r25, 0x00	; 0
    9070:	a0 e0       	ldi	r26, 0x00	; 0
    9072:	b0 e0       	ldi	r27, 0x00	; 0
    9074:	04 c0       	rjmp	.+8      	; 0x907e <disk_ioctl+0x180>
    9076:	88 0f       	add	r24, r24
    9078:	99 1f       	adc	r25, r25
    907a:	aa 1f       	adc	r26, r26
    907c:	bb 1f       	adc	r27, r27
    907e:	2a 95       	dec	r18
    9080:	d2 f7       	brpl	.-12     	; 0x9076 <disk_ioctl+0x178>
    9082:	f7 01       	movw	r30, r14
    9084:	80 83       	st	Z, r24
    9086:	91 83       	std	Z+1, r25	; 0x01
    9088:	a2 83       	std	Z+2, r26	; 0x02
    908a:	b3 83       	std	Z+3, r27	; 0x03
    908c:	89 c0       	rjmp	.+274    	; 0x91a0 <disk_ioctl+0x2a2>
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    908e:	89 e0       	ldi	r24, 0x09	; 9
    9090:	21 dd       	rcall	.-1470   	; 0x8ad4 <send_cmd>
    9092:	81 11       	cpse	r24, r1
    9094:	6f cf       	rjmp	.-290    	; 0x8f74 <disk_ioctl+0x76>
    9096:	60 e1       	ldi	r22, 0x10	; 16
    9098:	70 e0       	ldi	r23, 0x00	; 0
    909a:	ce 01       	movw	r24, r28
    909c:	01 96       	adiw	r24, 0x01	; 1
    909e:	a8 dc       	rcall	.-1712   	; 0x89f0 <rcvr_datablock>
    90a0:	89 2b       	or	r24, r25
    90a2:	09 f4       	brne	.+2      	; 0x90a6 <disk_ioctl+0x1a8>
    90a4:	67 cf       	rjmp	.-306    	; 0x8f74 <disk_ioctl+0x76>
				if (CardType & CT_SD1) {	/* SDv1 */
    90a6:	90 91 73 3a 	lds	r25, 0x3A73
    90aa:	2b 85       	ldd	r18, Y+11	; 0x0b
    90ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    90ae:	91 ff       	sbrs	r25, 1
    90b0:	16 c0       	rjmp	.+44     	; 0x90de <disk_ioctl+0x1e0>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    90b2:	88 1f       	adc	r24, r24
    90b4:	88 27       	eor	r24, r24
    90b6:	88 1f       	adc	r24, r24
    90b8:	90 e0       	ldi	r25, 0x00	; 0
    90ba:	01 96       	adiw	r24, 0x01	; 1
    90bc:	2f 73       	andi	r18, 0x3F	; 63
    90be:	82 0f       	add	r24, r18
    90c0:	91 1d       	adc	r25, r1
    90c2:	82 0f       	add	r24, r18
    90c4:	91 1d       	adc	r25, r1
    90c6:	2e 85       	ldd	r18, Y+14	; 0x0e
    90c8:	22 95       	swap	r18
    90ca:	26 95       	lsr	r18
    90cc:	26 95       	lsr	r18
    90ce:	23 70       	andi	r18, 0x03	; 3
    90d0:	21 50       	subi	r18, 0x01	; 1
    90d2:	02 c0       	rjmp	.+4      	; 0x90d8 <disk_ioctl+0x1da>
    90d4:	88 0f       	add	r24, r24
    90d6:	99 1f       	adc	r25, r25
    90d8:	2a 95       	dec	r18
    90da:	e2 f7       	brpl	.-8      	; 0x90d4 <disk_ioctl+0x1d6>
    90dc:	1d c0       	rjmp	.+58     	; 0x9118 <disk_ioctl+0x21a>
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    90de:	98 2f       	mov	r25, r24
    90e0:	93 70       	andi	r25, 0x03	; 3
    90e2:	82 95       	swap	r24
    90e4:	86 95       	lsr	r24
    90e6:	87 70       	andi	r24, 0x07	; 7
    90e8:	48 2f       	mov	r20, r24
    90ea:	50 e0       	ldi	r21, 0x00	; 0
    90ec:	f8 e0       	ldi	r31, 0x08	; 8
    90ee:	9f 9f       	mul	r25, r31
    90f0:	40 0d       	add	r20, r0
    90f2:	51 1d       	adc	r21, r1
    90f4:	11 24       	eor	r1, r1
    90f6:	4f 5f       	subi	r20, 0xFF	; 255
    90f8:	5f 4f       	sbci	r21, 0xFF	; 255
    90fa:	2c 77       	andi	r18, 0x7C	; 124
    90fc:	30 e0       	ldi	r19, 0x00	; 0
    90fe:	35 95       	asr	r19
    9100:	27 95       	ror	r18
    9102:	35 95       	asr	r19
    9104:	27 95       	ror	r18
    9106:	2f 5f       	subi	r18, 0xFF	; 255
    9108:	3f 4f       	sbci	r19, 0xFF	; 255
    910a:	42 9f       	mul	r20, r18
    910c:	c0 01       	movw	r24, r0
    910e:	43 9f       	mul	r20, r19
    9110:	90 0d       	add	r25, r0
    9112:	52 9f       	mul	r21, r18
    9114:	90 0d       	add	r25, r0
    9116:	11 24       	eor	r1, r1
    9118:	a0 e0       	ldi	r26, 0x00	; 0
    911a:	b0 e0       	ldi	r27, 0x00	; 0
    911c:	f7 01       	movw	r30, r14
    911e:	80 83       	st	Z, r24
    9120:	91 83       	std	Z+1, r25	; 0x01
    9122:	a2 83       	std	Z+2, r26	; 0x02
    9124:	b3 83       	std	Z+3, r27	; 0x03
    9126:	3b c0       	rjmp	.+118    	; 0x919e <disk_ioctl+0x2a0>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    9128:	80 91 73 3a 	lds	r24, 0x3A73
    912c:	fa 01       	movw	r30, r20
    912e:	80 83       	st	Z, r24
    9130:	36 c0       	rjmp	.+108    	; 0x919e <disk_ioctl+0x2a0>
		res = RES_OK;
		break;

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    9132:	40 e0       	ldi	r20, 0x00	; 0
    9134:	50 e0       	ldi	r21, 0x00	; 0
    9136:	ba 01       	movw	r22, r20
    9138:	89 e0       	ldi	r24, 0x09	; 9
    913a:	04 c0       	rjmp	.+8      	; 0x9144 <disk_ioctl+0x246>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    913c:	40 e0       	ldi	r20, 0x00	; 0
    913e:	50 e0       	ldi	r21, 0x00	; 0
    9140:	ba 01       	movw	r22, r20
    9142:	8a e0       	ldi	r24, 0x0A	; 10
    9144:	c7 dc       	rcall	.-1650   	; 0x8ad4 <send_cmd>
    9146:	81 11       	cpse	r24, r1
    9148:	15 cf       	rjmp	.-470    	; 0x8f74 <disk_ioctl+0x76>
			&& rcvr_datablock(ptr, 16))
    914a:	60 e1       	ldi	r22, 0x10	; 16
    914c:	70 e0       	ldi	r23, 0x00	; 0
    914e:	c7 01       	movw	r24, r14
    9150:	4f dc       	rcall	.-1890   	; 0x89f0 <rcvr_datablock>
    9152:	11 e0       	ldi	r17, 0x01	; 1
    9154:	89 2b       	or	r24, r25
    9156:	21 f1       	breq	.+72     	; 0x91a0 <disk_ioctl+0x2a2>
    9158:	22 c0       	rjmp	.+68     	; 0x919e <disk_ioctl+0x2a0>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    915a:	40 e0       	ldi	r20, 0x00	; 0
    915c:	50 e0       	ldi	r21, 0x00	; 0
    915e:	ba 01       	movw	r22, r20
    9160:	8a e3       	ldi	r24, 0x3A	; 58
    9162:	b8 dc       	rcall	.-1680   	; 0x8ad4 <send_cmd>
    9164:	81 11       	cpse	r24, r1
    9166:	06 cf       	rjmp	.-500    	; 0x8f74 <disk_ioctl+0x76>
    9168:	87 01       	movw	r16, r14
    916a:	0c 5f       	subi	r16, 0xFC	; 252
    916c:	1f 4f       	sbci	r17, 0xFF	; 255
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    916e:	8f ef       	ldi	r24, 0xFF	; 255
    9170:	0e 94 40 1a 	call	0x3480	; 0x3480 <spi_wr_rd>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    9174:	f7 01       	movw	r30, r14
    9176:	81 93       	st	Z+, r24
    9178:	7f 01       	movw	r14, r30
    917a:	e0 17       	cp	r30, r16
    917c:	f1 07       	cpc	r31, r17
    917e:	b9 f7       	brne	.-18     	; 0x916e <disk_ioctl+0x270>
    9180:	0e c0       	rjmp	.+28     	; 0x919e <disk_ioctl+0x2a0>
			res = RES_OK;
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    9182:	40 e0       	ldi	r20, 0x00	; 0
    9184:	50 e0       	ldi	r21, 0x00	; 0
    9186:	ba 01       	movw	r22, r20
    9188:	8d e8       	ldi	r24, 0x8D	; 141
    918a:	a4 dc       	rcall	.-1720   	; 0x8ad4 <send_cmd>
    918c:	81 11       	cpse	r24, r1
    918e:	f2 ce       	rjmp	.-540    	; 0x8f74 <disk_ioctl+0x76>
			xchg_spi(0xFF);
    9190:	8f ef       	ldi	r24, 0xFF	; 255
    9192:	0f dc       	rcall	.-2018   	; 0x89b2 <xchg_spi>
			if (rcvr_datablock(ptr, 64))
    9194:	60 e4       	ldi	r22, 0x40	; 64
    9196:	70 e0       	ldi	r23, 0x00	; 0
    9198:	da cf       	rjmp	.-76     	; 0x914e <disk_ioctl+0x250>
		Stat |= STA_NOINIT;
		res = RES_OK;
		break;

	default:
		res = RES_PARERR;
    919a:	14 e0       	ldi	r17, 0x04	; 4
    919c:	01 c0       	rjmp	.+2      	; 0x91a0 <disk_ioctl+0x2a2>
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
			res = RES_OK;
    919e:	10 e0       	ldi	r17, 0x00	; 0

	default:
		res = RES_PARERR;
	}

	deselect();
    91a0:	0a dc       	rcall	.-2028   	; 0x89b6 <deselect>

	return res;
    91a2:	81 2f       	mov	r24, r17
    91a4:	03 c0       	rjmp	.+6      	; 0x91ac <disk_ioctl+0x2ae>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    91a6:	84 e0       	ldi	r24, 0x04	; 4
    91a8:	01 c0       	rjmp	.+2      	; 0x91ac <disk_ioctl+0x2ae>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    91aa:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    91ac:	60 96       	adiw	r28, 0x10	; 16
    91ae:	cd bf       	out	0x3d, r28	; 61
    91b0:	de bf       	out	0x3e, r29	; 62
    91b2:	df 91       	pop	r29
    91b4:	cf 91       	pop	r28
    91b6:	1f 91       	pop	r17
    91b8:	0f 91       	pop	r16
    91ba:	ff 90       	pop	r15
    91bc:	ef 90       	pop	r14
    91be:	08 95       	ret

000091c0 <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
    91c0:	80 91 75 3a 	lds	r24, 0x3A75
	if (n) Timer1 = --n;
    91c4:	88 23       	and	r24, r24
    91c6:	19 f0       	breq	.+6      	; 0x91ce <disk_timerproc+0xe>
    91c8:	81 50       	subi	r24, 0x01	; 1
    91ca:	80 93 75 3a 	sts	0x3A75, r24
	n = Timer2;
    91ce:	80 91 74 3a 	lds	r24, 0x3A74
	if (n) Timer2 = --n;
    91d2:	88 23       	and	r24, r24
    91d4:	19 f0       	breq	.+6      	; 0x91dc <disk_timerproc+0x1c>
    91d6:	81 50       	subi	r24, 0x01	; 1
    91d8:	80 93 74 3a 	sts	0x3A74, r24

	s = Stat;
    91dc:	80 91 23 20 	lds	r24, 0x2023
	if (MMC_WP)				/* Write protected */
		s |= STA_PROTECT;
	else					/* Write enabled */
		s &= ~STA_PROTECT;

	if (MMC_CD)				/* Card inserted */
    91e0:	90 91 48 06 	lds	r25, 0x0648
    91e4:	93 fd       	sbrc	r25, 3
    91e6:	02 c0       	rjmp	.+4      	; 0x91ec <disk_timerproc+0x2c>
		s &= ~STA_NODISK;
    91e8:	89 7f       	andi	r24, 0xF9	; 249
    91ea:	02 c0       	rjmp	.+4      	; 0x91f0 <disk_timerproc+0x30>
	s = Stat;

	if (MMC_WP)				/* Write protected */
		s |= STA_PROTECT;
	else					/* Write enabled */
		s &= ~STA_PROTECT;
    91ec:	8b 7f       	andi	r24, 0xFB	; 251

	if (MMC_CD)				/* Card inserted */
		s &= ~STA_NODISK;
	else					/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);
    91ee:	83 60       	ori	r24, 0x03	; 3

	Stat = s;				/* Update MMC status */
    91f0:	80 93 23 20 	sts	0x2023, r24
    91f4:	08 95       	ret

000091f6 <__vector_17>:
}

ISR(TCC0_CCB_vect) {
    91f6:	1f 92       	push	r1
    91f8:	0f 92       	push	r0
    91fa:	0f b6       	in	r0, 0x3f	; 63
    91fc:	0f 92       	push	r0
    91fe:	11 24       	eor	r1, r1
    9200:	08 b6       	in	r0, 0x38	; 56
    9202:	0f 92       	push	r0
    9204:	18 be       	out	0x38, r1	; 56
    9206:	09 b6       	in	r0, 0x39	; 57
    9208:	0f 92       	push	r0
    920a:	19 be       	out	0x39, r1	; 57
    920c:	0b b6       	in	r0, 0x3b	; 59
    920e:	0f 92       	push	r0
    9210:	1b be       	out	0x3b, r1	; 59
    9212:	2f 93       	push	r18
    9214:	3f 93       	push	r19
    9216:	4f 93       	push	r20
    9218:	5f 93       	push	r21
    921a:	6f 93       	push	r22
    921c:	7f 93       	push	r23
    921e:	8f 93       	push	r24
    9220:	9f 93       	push	r25
    9222:	af 93       	push	r26
    9224:	bf 93       	push	r27
    9226:	ef 93       	push	r30
    9228:	ff 93       	push	r31
	disk_timerproc();
    922a:	ca df       	rcall	.-108    	; 0x91c0 <disk_timerproc>
}
    922c:	ff 91       	pop	r31
    922e:	ef 91       	pop	r30
    9230:	bf 91       	pop	r27
    9232:	af 91       	pop	r26
    9234:	9f 91       	pop	r25
    9236:	8f 91       	pop	r24
    9238:	7f 91       	pop	r23
    923a:	6f 91       	pop	r22
    923c:	5f 91       	pop	r21
    923e:	4f 91       	pop	r20
    9240:	3f 91       	pop	r19
    9242:	2f 91       	pop	r18
    9244:	0f 90       	pop	r0
    9246:	0b be       	out	0x3b, r0	; 59
    9248:	0f 90       	pop	r0
    924a:	09 be       	out	0x39, r0	; 57
    924c:	0f 90       	pop	r0
    924e:	08 be       	out	0x38, r0	; 56
    9250:	0f 90       	pop	r0
    9252:	0f be       	out	0x3f, r0	; 63
    9254:	0f 90       	pop	r0
    9256:	1f 90       	pop	r1
    9258:	18 95       	reti

0000925a <__vector_14>:

#define SOUND_VOLUME 2
#define SOUND_OFFSET 2048

ISR(TCC0_OVF_vect)
{
    925a:	1f 92       	push	r1
    925c:	0f 92       	push	r0
    925e:	0f b6       	in	r0, 0x3f	; 63
    9260:	0f 92       	push	r0
    9262:	11 24       	eor	r1, r1
    9264:	08 b6       	in	r0, 0x38	; 56
    9266:	0f 92       	push	r0
    9268:	18 be       	out	0x38, r1	; 56
    926a:	09 b6       	in	r0, 0x39	; 57
    926c:	0f 92       	push	r0
    926e:	19 be       	out	0x39, r1	; 57
    9270:	0b b6       	in	r0, 0x3b	; 59
    9272:	0f 92       	push	r0
    9274:	1b be       	out	0x3b, r1	; 59
    9276:	2f 93       	push	r18
    9278:	3f 93       	push	r19
    927a:	4f 93       	push	r20
    927c:	5f 93       	push	r21
    927e:	8f 93       	push	r24
    9280:	9f 93       	push	r25
    9282:	af 93       	push	r26
    9284:	bf 93       	push	r27
    9286:	ef 93       	push	r30
    9288:	ff 93       	push	r31
	WAVFIFO *fcb = WavFifo;	/* Pointer to FIFO controls */
    928a:	e0 91 76 3a 	lds	r30, 0x3A76
    928e:	f0 91 77 3a 	lds	r31, 0x3A77
	UINT ri, ct;
	BYTE *buff, l, r;

	if (!fcb) return;
    9292:	30 97       	sbiw	r30, 0x00	; 0
    9294:	09 f4       	brne	.+2      	; 0x9298 <__vector_14+0x3e>
    9296:	4d c0       	rjmp	.+154    	; 0x9332 <__vector_14+0xd8>
	ct = fcb->ct; ri = fcb->ri;
    9298:	86 81       	ldd	r24, Z+6	; 0x06
    929a:	97 81       	ldd	r25, Z+7	; 0x07
    929c:	22 81       	ldd	r18, Z+2	; 0x02
    929e:	33 81       	ldd	r19, Z+3	; 0x03
	buff = fcb->buff + ri;
    92a0:	a0 85       	ldd	r26, Z+8	; 0x08
    92a2:	b1 85       	ldd	r27, Z+9	; 0x09
    92a4:	a2 0f       	add	r26, r18
    92a6:	b3 1f       	adc	r27, r19

	switch (fcb->mode) {
    92a8:	40 81       	ld	r20, Z
    92aa:	51 81       	ldd	r21, Z+1	; 0x01
    92ac:	41 30       	cpi	r20, 0x01	; 1
    92ae:	51 05       	cpc	r21, r1
    92b0:	61 f0       	breq	.+24     	; 0x92ca <__vector_14+0x70>
    92b2:	20 f0       	brcs	.+8      	; 0x92bc <__vector_14+0x62>
    92b4:	42 30       	cpi	r20, 0x02	; 2
    92b6:	51 05       	cpc	r21, r1
    92b8:	69 f0       	breq	.+26     	; 0x92d4 <__vector_14+0x7a>
    92ba:	16 c0       	rjmp	.+44     	; 0x92e8 <__vector_14+0x8e>
		case 0:		/* Mono, 8bit */
			if (ct < 1) return;
    92bc:	00 97       	sbiw	r24, 0x00	; 0
    92be:	c9 f1       	breq	.+114    	; 0x9332 <__vector_14+0xd8>
			l = r = buff[0];
    92c0:	4c 91       	ld	r20, X
			ct -= 1; ri += 1;
    92c2:	01 97       	sbiw	r24, 0x01	; 1
    92c4:	2f 5f       	subi	r18, 0xFF	; 255
    92c6:	3f 4f       	sbci	r19, 0xFF	; 255
			break;
    92c8:	17 c0       	rjmp	.+46     	; 0x92f8 <__vector_14+0x9e>
		case 1:		/* Stereo, 8bit */
			if (ct < 2) return;
    92ca:	82 30       	cpi	r24, 0x02	; 2
    92cc:	91 05       	cpc	r25, r1
    92ce:	88 f1       	brcs	.+98     	; 0x9332 <__vector_14+0xd8>
			l = buff[0]; r = buff[1];
    92d0:	4c 91       	ld	r20, X
    92d2:	06 c0       	rjmp	.+12     	; 0x92e0 <__vector_14+0x86>
			ct -= 2; ri += 2;
			break;
		case 2:		/* Mono, 16bit */
			if (ct < 2) return;
    92d4:	82 30       	cpi	r24, 0x02	; 2
    92d6:	91 05       	cpc	r25, r1
    92d8:	60 f1       	brcs	.+88     	; 0x9332 <__vector_14+0xd8>
			l = r = buff[1] + 128;
    92da:	11 96       	adiw	r26, 0x01	; 1
    92dc:	4c 91       	ld	r20, X
    92de:	40 58       	subi	r20, 0x80	; 128
			ct -= 2; ri += 2;
    92e0:	02 97       	sbiw	r24, 0x02	; 2
    92e2:	2e 5f       	subi	r18, 0xFE	; 254
    92e4:	3f 4f       	sbci	r19, 0xFF	; 255
			break;
    92e6:	08 c0       	rjmp	.+16     	; 0x92f8 <__vector_14+0x9e>
		default:	/* Stereo, 16bit */
			if (ct < 4) return;
    92e8:	84 30       	cpi	r24, 0x04	; 4
    92ea:	91 05       	cpc	r25, r1
    92ec:	10 f1       	brcs	.+68     	; 0x9332 <__vector_14+0xd8>
			l = buff[1]; r = buff[3];
    92ee:	11 96       	adiw	r26, 0x01	; 1
    92f0:	4c 91       	ld	r20, X
			ct -= 4; ri += 4;
    92f2:	04 97       	sbiw	r24, 0x04	; 4
    92f4:	2c 5f       	subi	r18, 0xFC	; 252
    92f6:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	fcb->ct = ct;
    92f8:	86 83       	std	Z+6, r24	; 0x06
    92fa:	97 83       	std	Z+7, r25	; 0x07
	fcb->ri = ri & (fcb->sz_buff - 1);
    92fc:	82 85       	ldd	r24, Z+10	; 0x0a
    92fe:	93 85       	ldd	r25, Z+11	; 0x0b
    9300:	01 97       	sbiw	r24, 0x01	; 1
    9302:	82 23       	and	r24, r18
    9304:	93 23       	and	r25, r19
    9306:	82 83       	std	Z+2, r24	; 0x02
    9308:	93 83       	std	Z+3, r25	; 0x03
	
	dac_ch0_write(SOUND_OFFSET+(l*SOUND_VOLUME));
    930a:	24 2f       	mov	r18, r20
    930c:	30 e0       	ldi	r19, 0x00	; 0
    930e:	c9 01       	movw	r24, r18
    9310:	9c 5f       	subi	r25, 0xFC	; 252
    9312:	88 0f       	add	r24, r24
    9314:	99 1f       	adc	r25, r25
void dac_speaker_off(void);
void dac_setup(bool dual_channel);
void dac_disable(void);

static inline void dac_ch0_write(uint16_t data) {
	DACB.CH0DATA = data;
    9316:	80 93 38 03 	sts	0x0338, r24
    931a:	90 93 39 03 	sts	0x0339, r25
	dac_ch1_write(SOUND_OFFSET-(l*SOUND_VOLUME));
    931e:	80 e0       	ldi	r24, 0x00	; 0
    9320:	94 e0       	ldi	r25, 0x04	; 4
    9322:	82 1b       	sub	r24, r18
    9324:	93 0b       	sbc	r25, r19
    9326:	88 0f       	add	r24, r24
    9328:	99 1f       	adc	r25, r25
}

static inline void dac_ch1_write(uint16_t data) {
	DACB.CH1DATA = data;
    932a:	80 93 3a 03 	sts	0x033A, r24
    932e:	90 93 3b 03 	sts	0x033B, r25
}
    9332:	ff 91       	pop	r31
    9334:	ef 91       	pop	r30
    9336:	bf 91       	pop	r27
    9338:	af 91       	pop	r26
    933a:	9f 91       	pop	r25
    933c:	8f 91       	pop	r24
    933e:	5f 91       	pop	r21
    9340:	4f 91       	pop	r20
    9342:	3f 91       	pop	r19
    9344:	2f 91       	pop	r18
    9346:	0f 90       	pop	r0
    9348:	0b be       	out	0x3b, r0	; 59
    934a:	0f 90       	pop	r0
    934c:	09 be       	out	0x39, r0	; 57
    934e:	0f 90       	pop	r0
    9350:	08 be       	out	0x38, r0	; 56
    9352:	0f 90       	pop	r0
    9354:	0f be       	out	0x3f, r0	; 63
    9356:	0f 90       	pop	r0
    9358:	1f 90       	pop	r1
    935a:	18 95       	reti

0000935c <sound_start>:

int sound_start (
	WAVFIFO* fcb,	/* Pointer to the sound FIFO control structure */
	DWORD fs		/* Sampling frequency [Hz] */
)
{
    935c:	fc 01       	movw	r30, r24
	if (fs < 8000 || fs > 44100) return 0;	/* Check fs range */
    935e:	40 54       	subi	r20, 0x40	; 64
    9360:	5f 41       	sbci	r21, 0x1F	; 31
    9362:	61 09       	sbc	r22, r1
    9364:	71 09       	sbc	r23, r1
    9366:	45 30       	cpi	r20, 0x05	; 5
    9368:	5d 48       	sbci	r21, 0x8D	; 141
    936a:	61 05       	cpc	r22, r1
    936c:	71 05       	cpc	r23, r1
    936e:	28 f5       	brcc	.+74     	; 0x93ba <sound_start+0x5e>

	fcb->ri = 0; fcb->wi = 0; fcb->ct = 0;	/* Flush FIFO */
    9370:	12 82       	std	Z+2, r1	; 0x02
    9372:	13 82       	std	Z+3, r1	; 0x03
    9374:	14 82       	std	Z+4, r1	; 0x04
    9376:	15 82       	std	Z+5, r1	; 0x05
    9378:	16 82       	std	Z+6, r1	; 0x06
    937a:	17 82       	std	Z+7, r1	; 0x07
	WavFifo = fcb;			/* Register FIFO control structure */
    937c:	e0 93 76 3a 	sts	0x3A76, r30
    9380:	f0 93 77 3a 	sts	0x3A77, r31
	
	dac_setup(true);
    9384:	81 e0       	ldi	r24, 0x01	; 1
    9386:	0e 94 ed 08 	call	0x11da	; 0x11da <dac_setup>
	
	//Disable power reduction for TCC0 
	PR.PRPC &= ~0x01;
    938a:	80 91 73 00 	lds	r24, 0x0073
    938e:	8e 7f       	andi	r24, 0xFE	; 254
    9390:	80 93 73 00 	sts	0x0073, r24
	
	TCC0.CNT = 0;
    9394:	10 92 20 08 	sts	0x0820, r1
    9398:	10 92 21 08 	sts	0x0821, r1
	TCC0.PER = (F_CPU / 44100 - 1);
    939c:	84 ed       	ldi	r24, 0xD4	; 212
    939e:	92 e0       	ldi	r25, 0x02	; 2
    93a0:	80 93 26 08 	sts	0x0826, r24
    93a4:	90 93 27 08 	sts	0x0827, r25
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
    93a8:	81 e0       	ldi	r24, 0x01	; 1
    93aa:	80 93 00 08 	sts	0x0800, r24
	TCC0.INTCTRLA = TC_OVFINTLVL_HI_gc;
    93ae:	83 e0       	ldi	r24, 0x03	; 3
    93b0:	80 93 06 08 	sts	0x0806, r24
	
	return 1;
    93b4:	81 e0       	ldi	r24, 0x01	; 1
    93b6:	90 e0       	ldi	r25, 0x00	; 0
    93b8:	08 95       	ret
int sound_start (
	WAVFIFO* fcb,	/* Pointer to the sound FIFO control structure */
	DWORD fs		/* Sampling frequency [Hz] */
)
{
	if (fs < 8000 || fs > 44100) return 0;	/* Check fs range */
    93ba:	80 e0       	ldi	r24, 0x00	; 0
    93bc:	90 e0       	ldi	r25, 0x00	; 0
	TCC0.PER = (F_CPU / 44100 - 1);
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
	TCC0.INTCTRLA = TC_OVFINTLVL_HI_gc;
	
	return 1;
}
    93be:	08 95       	ret

000093c0 <sound_stop>:
/*-----------------------------------------------------*/
/* Disable sound output                                */

void sound_stop (void)
{
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    93c0:	e0 e0       	ldi	r30, 0x00	; 0
    93c2:	f8 e0       	ldi	r31, 0x08	; 8
    93c4:	16 82       	std	Z+6, r1	; 0x06
	dac_disable();
    93c6:	0e 94 41 09 	call	0x1282	; 0x1282 <dac_disable>
	
	//Enable power reduction for TCC0 
	PR.PRPC |= 0x01;
    93ca:	e0 e7       	ldi	r30, 0x70	; 112
    93cc:	f0 e0       	ldi	r31, 0x00	; 0
    93ce:	83 81       	ldd	r24, Z+3	; 0x03
    93d0:	81 60       	ori	r24, 0x01	; 1
    93d2:	83 83       	std	Z+3, r24	; 0x03

	WavFifo = 0;		/* Unregister FIFO control structure */
    93d4:	10 92 76 3a 	sts	0x3A76, r1
    93d8:	10 92 77 3a 	sts	0x3A77, r1
    93dc:	08 95       	ret

000093de <load_wav>:
FIL *fp,			/* Pointer to the open file object to play */
const char *title,	/* Title (file name, etc...) */
void *work,			/* Pointer to working buffer (must be-4 byte aligned) */
UINT sz_work		/* Size of working buffer (must be power of 2) */
)
{
    93de:	2f 92       	push	r2
    93e0:	3f 92       	push	r3
    93e2:	4f 92       	push	r4
    93e4:	5f 92       	push	r5
    93e6:	6f 92       	push	r6
    93e8:	7f 92       	push	r7
    93ea:	8f 92       	push	r8
    93ec:	9f 92       	push	r9
    93ee:	af 92       	push	r10
    93f0:	bf 92       	push	r11
    93f2:	cf 92       	push	r12
    93f4:	df 92       	push	r13
    93f6:	ef 92       	push	r14
    93f8:	ff 92       	push	r15
    93fa:	0f 93       	push	r16
    93fc:	1f 93       	push	r17
    93fe:	cf 93       	push	r28
    9400:	df 93       	push	r29
    9402:	cd b7       	in	r28, 0x3d	; 61
    9404:	de b7       	in	r29, 0x3e	; 62
    9406:	c4 56       	subi	r28, 0x64	; 100
    9408:	d1 09       	sbc	r29, r1
    940a:	cd bf       	out	0x3d, r28	; 61
    940c:	de bf       	out	0x3e, r29	; 62
    940e:	8c 01       	movw	r16, r24
    9410:	1a 01       	movw	r2, r20
    9412:	a5 96       	adiw	r28, 0x25	; 37
    9414:	2e af       	std	Y+62, r18	; 0x3e
    9416:	3f af       	std	Y+63, r19	; 0x3f
    9418:	a5 97       	sbiw	r28, 0x25	; 37


	//xprintf(PSTR("%s\n"), title);	/* Put title */

	/* Is it a WAV file? */
	if (f_read(fp, buff, 12, &br) || br != 12) return -1;
    941a:	7e 01       	movw	r14, r28
    941c:	2d e4       	ldi	r18, 0x4D	; 77
    941e:	e2 0e       	add	r14, r18
    9420:	f1 1c       	adc	r15, r1
    9422:	97 01       	movw	r18, r14
    9424:	4c e0       	ldi	r20, 0x0C	; 12
    9426:	50 e0       	ldi	r21, 0x00	; 0
    9428:	b1 01       	movw	r22, r2
    942a:	0e 94 b8 41 	call	0x8370	; 0x8370 <f_read>
    942e:	81 11       	cpse	r24, r1
    9430:	64 c2       	rjmp	.+1224   	; 0x98fa <load_wav+0x51c>
    9432:	d7 01       	movw	r26, r14
    9434:	8d 91       	ld	r24, X+
    9436:	9c 91       	ld	r25, X
    9438:	0c 97       	sbiw	r24, 0x0c	; 12
    943a:	09 f0       	breq	.+2      	; 0x943e <load_wav+0x60>
    943c:	5e c2       	rjmp	.+1212   	; 0x98fa <load_wav+0x51c>
	if (LD_DWORD(&buff[0]) != FCC('R','I','F','F')) return -1;
    943e:	f1 01       	movw	r30, r2
    9440:	80 81       	ld	r24, Z
    9442:	91 81       	ldd	r25, Z+1	; 0x01
    9444:	a2 81       	ldd	r26, Z+2	; 0x02
    9446:	b3 81       	ldd	r27, Z+3	; 0x03
    9448:	82 35       	cpi	r24, 0x52	; 82
    944a:	99 44       	sbci	r25, 0x49	; 73
    944c:	a6 44       	sbci	r26, 0x46	; 70
    944e:	b6 44       	sbci	r27, 0x46	; 70
    9450:	09 f0       	breq	.+2      	; 0x9454 <load_wav+0x76>
    9452:	53 c2       	rjmp	.+1190   	; 0x98fa <load_wav+0x51c>
	if (LD_DWORD(&buff[8]) != FCC('W','A','V','E')) return -1;
    9454:	f1 01       	movw	r30, r2
    9456:	80 85       	ldd	r24, Z+8	; 0x08
    9458:	91 85       	ldd	r25, Z+9	; 0x09
    945a:	a2 85       	ldd	r26, Z+10	; 0x0a
    945c:	b3 85       	ldd	r27, Z+11	; 0x0b
    945e:	87 35       	cpi	r24, 0x57	; 87
    9460:	91 44       	sbci	r25, 0x41	; 65
    9462:	a6 45       	sbci	r26, 0x56	; 86
    9464:	b5 44       	sbci	r27, 0x45	; 69
    9466:	09 f0       	breq	.+2      	; 0x946a <load_wav+0x8c>
    9468:	48 c2       	rjmp	.+1168   	; 0x98fa <load_wav+0x51c>
	eof = LD_DWORD(&buff[4]) + 8;
    946a:	d1 01       	movw	r26, r2
    946c:	14 96       	adiw	r26, 0x04	; 4
    946e:	2d 91       	ld	r18, X+
    9470:	3d 91       	ld	r19, X+
    9472:	4d 91       	ld	r20, X+
    9474:	5c 91       	ld	r21, X
    9476:	17 97       	sbiw	r26, 0x07	; 7
    9478:	28 5f       	subi	r18, 0xF8	; 248
    947a:	3f 4f       	sbci	r19, 0xFF	; 255
    947c:	4f 4f       	sbci	r20, 0xFF	; 255
    947e:	5f 4f       	sbci	r21, 0xFF	; 255
    9480:	a3 96       	adiw	r28, 0x23	; 35
    9482:	2c af       	std	Y+60, r18	; 0x3c
    9484:	3d af       	std	Y+61, r19	; 0x3d
    9486:	4e af       	std	Y+62, r20	; 0x3e
    9488:	5f af       	std	Y+63, r21	; 0x3f
    948a:	a3 97       	sbiw	r28, 0x23	; 35

	/* Analyze the RIFF-WAVE header and get properties */
	nam[0] = art[0] = 0;
    948c:	19 82       	std	Y+1, r1	; 0x01
    948e:	19 a2       	std	Y+33, r1	; 0x21
	md = fsmp = wsmp = offw = szwav = 0;
    9490:	6f 96       	adiw	r28, 0x1f	; 31
    9492:	1c ae       	std	Y+60, r1	; 0x3c
    9494:	1d ae       	std	Y+61, r1	; 0x3d
    9496:	1e ae       	std	Y+62, r1	; 0x3e
    9498:	1f ae       	std	Y+63, r1	; 0x3f
    949a:	6f 97       	sbiw	r28, 0x1f	; 31
    949c:	41 2c       	mov	r4, r1
    949e:	51 2c       	mov	r5, r1
    94a0:	32 01       	movw	r6, r4
    94a2:	6b 96       	adiw	r28, 0x1b	; 27
    94a4:	1c ae       	std	Y+60, r1	; 0x3c
    94a6:	1d ae       	std	Y+61, r1	; 0x3d
    94a8:	1e ae       	std	Y+62, r1	; 0x3e
    94aa:	1f ae       	std	Y+63, r1	; 0x3f
    94ac:	6b 97       	sbiw	r28, 0x1b	; 27
    94ae:	65 96       	adiw	r28, 0x15	; 21
    94b0:	1e ae       	std	Y+62, r1	; 0x3e
    94b2:	1f ae       	std	Y+63, r1	; 0x3f
    94b4:	65 97       	sbiw	r28, 0x15	; 21
					if (f_read(fp, buff, 8, &br) || br != 8) return -1;
					ssz = (LD_DWORD(&buff[4]) + 1) & ~1;
					p = 0;
					switch (LD_DWORD(buff)) {
						case FCC('I','N','A','M'):		/* INAM sub-chunk */
						p = nam; break;
    94b6:	fe 01       	movw	r30, r28
    94b8:	b1 96       	adiw	r30, 0x21	; 33
    94ba:	61 96       	adiw	r28, 0x11	; 17
    94bc:	ee af       	std	Y+62, r30	; 0x3e
    94be:	ff af       	std	Y+63, r31	; 0x3f
    94c0:	61 97       	sbiw	r28, 0x11	; 17
						case FCC('I','A','R','T'):		/* IART sub-cnunk */
						p = art; break;
    94c2:	9e 01       	movw	r18, r28
    94c4:	2f 5f       	subi	r18, 0xFF	; 255
    94c6:	3f 4f       	sbci	r19, 0xFF	; 255
    94c8:	63 96       	adiw	r28, 0x13	; 19
    94ca:	2e af       	std	Y+62, r18	; 0x3e
    94cc:	3f af       	std	Y+63, r19	; 0x3f
    94ce:	63 97       	sbiw	r28, 0x13	; 19
	eof = LD_DWORD(&buff[4]) + 8;

	/* Analyze the RIFF-WAVE header and get properties */
	nam[0] = art[0] = 0;
	md = fsmp = wsmp = offw = szwav = 0;
	while (f_tell(fp) < eof) {
    94d0:	f8 01       	movw	r30, r16
    94d2:	86 81       	ldd	r24, Z+6	; 0x06
    94d4:	97 81       	ldd	r25, Z+7	; 0x07
    94d6:	a0 85       	ldd	r26, Z+8	; 0x08
    94d8:	b1 85       	ldd	r27, Z+9	; 0x09
    94da:	a3 96       	adiw	r28, 0x23	; 35
    94dc:	2c ad       	ldd	r18, Y+60	; 0x3c
    94de:	3d ad       	ldd	r19, Y+61	; 0x3d
    94e0:	4e ad       	ldd	r20, Y+62	; 0x3e
    94e2:	5f ad       	ldd	r21, Y+63	; 0x3f
    94e4:	a3 97       	sbiw	r28, 0x23	; 35
    94e6:	82 17       	cp	r24, r18
    94e8:	93 07       	cpc	r25, r19
    94ea:	a4 07       	cpc	r26, r20
    94ec:	b5 07       	cpc	r27, r21
    94ee:	08 f0       	brcs	.+2      	; 0x94f2 <load_wav+0x114>
    94f0:	48 c1       	rjmp	.+656    	; 0x9782 <load_wav+0x3a4>
		if (f_read(fp, buff, 8, &br) || br != 8) return -1;
    94f2:	9e 01       	movw	r18, r28
    94f4:	23 5b       	subi	r18, 0xB3	; 179
    94f6:	3f 4f       	sbci	r19, 0xFF	; 255
    94f8:	48 e0       	ldi	r20, 0x08	; 8
    94fa:	50 e0       	ldi	r21, 0x00	; 0
    94fc:	b1 01       	movw	r22, r2
    94fe:	c8 01       	movw	r24, r16
    9500:	0e 94 b8 41 	call	0x8370	; 0x8370 <f_read>
    9504:	81 11       	cpse	r24, r1
    9506:	f9 c1       	rjmp	.+1010   	; 0x98fa <load_wav+0x51c>
    9508:	2f 96       	adiw	r28, 0x0f	; 15
    950a:	8e ad       	ldd	r24, Y+62	; 0x3e
    950c:	9f ad       	ldd	r25, Y+63	; 0x3f
    950e:	2f 97       	sbiw	r28, 0x0f	; 15
    9510:	08 97       	sbiw	r24, 0x08	; 8
    9512:	09 f0       	breq	.+2      	; 0x9516 <load_wav+0x138>
    9514:	f2 c1       	rjmp	.+996    	; 0x98fa <load_wav+0x51c>
		sz = (LD_DWORD(&buff[4]) + 1) & ~1;
    9516:	d1 01       	movw	r26, r2
    9518:	14 96       	adiw	r26, 0x04	; 4
    951a:	8d 90       	ld	r8, X+
    951c:	9d 90       	ld	r9, X+
    951e:	ad 90       	ld	r10, X+
    9520:	bc 90       	ld	r11, X
    9522:	17 97       	sbiw	r26, 0x07	; 7
    9524:	bf ef       	ldi	r27, 0xFF	; 255
    9526:	8b 1a       	sub	r8, r27
    9528:	9b 0a       	sbc	r9, r27
    952a:	ab 0a       	sbc	r10, r27
    952c:	bb 0a       	sbc	r11, r27
    952e:	e8 94       	clt
    9530:	80 f8       	bld	r8, 0
		switch (LD_DWORD(&buff[0])) {
    9532:	f1 01       	movw	r30, r2
    9534:	80 81       	ld	r24, Z
    9536:	91 81       	ldd	r25, Z+1	; 0x01
    9538:	a2 81       	ldd	r26, Z+2	; 0x02
    953a:	b3 81       	ldd	r27, Z+3	; 0x03
    953c:	8c 34       	cpi	r24, 0x4C	; 76
    953e:	f9 e4       	ldi	r31, 0x49	; 73
    9540:	9f 07       	cpc	r25, r31
    9542:	f3 e5       	ldi	r31, 0x53	; 83
    9544:	af 07       	cpc	r26, r31
    9546:	f4 e5       	ldi	r31, 0x54	; 84
    9548:	bf 07       	cpc	r27, r31
    954a:	09 f4       	brne	.+2      	; 0x954e <load_wav+0x170>
    954c:	8d c0       	rjmp	.+282    	; 0x9668 <load_wav+0x28a>
    954e:	30 f4       	brcc	.+12     	; 0x955c <load_wav+0x17e>
    9550:	86 36       	cpi	r24, 0x66	; 102
    9552:	9d 46       	sbci	r25, 0x6D	; 109
    9554:	a4 47       	sbci	r26, 0x74	; 116
    9556:	b0 42       	sbci	r27, 0x20	; 32
    9558:	e1 f0       	breq	.+56     	; 0x9592 <load_wav+0x1b4>
    955a:	cf c1       	rjmp	.+926    	; 0x98fa <load_wav+0x51c>
    955c:	84 36       	cpi	r24, 0x64	; 100
    955e:	41 e6       	ldi	r20, 0x61	; 97
    9560:	94 07       	cpc	r25, r20
    9562:	44 e7       	ldi	r20, 0x74	; 116
    9564:	a4 07       	cpc	r26, r20
    9566:	41 e6       	ldi	r20, 0x61	; 97
    9568:	b4 07       	cpc	r27, r20
    956a:	09 f4       	brne	.+2      	; 0x956e <load_wav+0x190>
    956c:	65 c0       	rjmp	.+202    	; 0x9638 <load_wav+0x25a>
    956e:	86 36       	cpi	r24, 0x66	; 102
    9570:	91 46       	sbci	r25, 0x61	; 97
    9572:	a3 46       	sbci	r26, 0x63	; 99
    9574:	b4 47       	sbci	r27, 0x74	; 116
    9576:	09 f0       	breq	.+2      	; 0x957a <load_wav+0x19c>
    9578:	c0 c1       	rjmp	.+896    	; 0x98fa <load_wav+0x51c>
			}
			fsmp = LD_DWORD(&buff[4]);		/* Sampling rate */
			break;

			case FCC('f','a','c','t') :
			f_lseek(fp, f_tell(fp) + sz);
    957a:	f8 01       	movw	r30, r16
    957c:	46 81       	ldd	r20, Z+6	; 0x06
    957e:	57 81       	ldd	r21, Z+7	; 0x07
    9580:	60 85       	ldd	r22, Z+8	; 0x08
    9582:	71 85       	ldd	r23, Z+9	; 0x09
    9584:	48 0d       	add	r20, r8
    9586:	59 1d       	adc	r21, r9
    9588:	6a 1d       	adc	r22, r10
    958a:	7b 1d       	adc	r23, r11
    958c:	c8 01       	movw	r24, r16
    958e:	78 d8       	rcall	.-3856   	; 0x8680 <f_lseek>
			break;
    9590:	9f cf       	rjmp	.-194    	; 0x94d0 <load_wav+0xf2>
	while (f_tell(fp) < eof) {
		if (f_read(fp, buff, 8, &br) || br != 8) return -1;
		sz = (LD_DWORD(&buff[4]) + 1) & ~1;
		switch (LD_DWORD(&buff[0])) {
			case FCC('f','m','t',' ') :
			if (sz > 1000 || sz < 16 || f_read(fp, buff, sz, &br) || sz != br) return -1;
    9592:	d5 01       	movw	r26, r10
    9594:	c4 01       	movw	r24, r8
    9596:	40 97       	sbiw	r24, 0x10	; 16
    9598:	a1 09       	sbc	r26, r1
    959a:	b1 09       	sbc	r27, r1
    959c:	89 3d       	cpi	r24, 0xD9	; 217
    959e:	93 40       	sbci	r25, 0x03	; 3
    95a0:	a1 05       	cpc	r26, r1
    95a2:	b1 05       	cpc	r27, r1
    95a4:	08 f0       	brcs	.+2      	; 0x95a8 <load_wav+0x1ca>
    95a6:	a9 c1       	rjmp	.+850    	; 0x98fa <load_wav+0x51c>
    95a8:	9e 01       	movw	r18, r28
    95aa:	23 5b       	subi	r18, 0xB3	; 179
    95ac:	3f 4f       	sbci	r19, 0xFF	; 255
    95ae:	a4 01       	movw	r20, r8
    95b0:	b1 01       	movw	r22, r2
    95b2:	c8 01       	movw	r24, r16
    95b4:	0e 94 b8 41 	call	0x8370	; 0x8370 <f_read>
    95b8:	81 11       	cpse	r24, r1
    95ba:	9f c1       	rjmp	.+830    	; 0x98fa <load_wav+0x51c>
    95bc:	2f 96       	adiw	r28, 0x0f	; 15
    95be:	8e ad       	ldd	r24, Y+62	; 0x3e
    95c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    95c2:	2f 97       	sbiw	r28, 0x0f	; 15
    95c4:	a0 e0       	ldi	r26, 0x00	; 0
    95c6:	b0 e0       	ldi	r27, 0x00	; 0
    95c8:	88 16       	cp	r8, r24
    95ca:	99 06       	cpc	r9, r25
    95cc:	aa 06       	cpc	r10, r26
    95ce:	bb 06       	cpc	r11, r27
    95d0:	09 f0       	breq	.+2      	; 0x95d4 <load_wav+0x1f6>
    95d2:	93 c1       	rjmp	.+806    	; 0x98fa <load_wav+0x51c>
			if (LD_WORD(&buff[0]) != 0x1) return -1;	/* Check if LPCM */
    95d4:	d1 01       	movw	r26, r2
    95d6:	8d 91       	ld	r24, X+
    95d8:	9c 91       	ld	r25, X
    95da:	11 97       	sbiw	r26, 0x01	; 1
    95dc:	01 97       	sbiw	r24, 0x01	; 1
    95de:	09 f0       	breq	.+2      	; 0x95e2 <load_wav+0x204>
    95e0:	8c c1       	rjmp	.+792    	; 0x98fa <load_wav+0x51c>
			if (LD_WORD(&buff[2]) == 2) {	/* Channels (1 or 2) */
    95e2:	31 e0       	ldi	r19, 0x01	; 1
    95e4:	20 e0       	ldi	r18, 0x00	; 0
    95e6:	12 96       	adiw	r26, 0x02	; 2
    95e8:	8d 91       	ld	r24, X+
    95ea:	9c 91       	ld	r25, X
    95ec:	13 97       	sbiw	r26, 0x03	; 3
    95ee:	02 97       	sbiw	r24, 0x02	; 2
    95f0:	09 f0       	breq	.+2      	; 0x95f4 <load_wav+0x216>
    95f2:	30 e0       	ldi	r19, 0x00	; 0
				md = 1; wsmp = 2;
    95f4:	64 96       	adiw	r28, 0x14	; 20
    95f6:	3f af       	std	Y+63, r19	; 0x3f
    95f8:	64 97       	sbiw	r28, 0x14	; 20
    95fa:	65 96       	adiw	r28, 0x15	; 21
    95fc:	2f af       	std	Y+63, r18	; 0x3f
    95fe:	65 97       	sbiw	r28, 0x15	; 21
				} else {
				md = 0; wsmp = 1;
			}
			if (LD_WORD(&buff[14]) == 16) {	/* Resolution (8 or 16) */
    9600:	f1 01       	movw	r30, r2
    9602:	86 85       	ldd	r24, Z+14	; 0x0e
    9604:	97 85       	ldd	r25, Z+15	; 0x0f
    9606:	40 97       	sbiw	r24, 0x10	; 16
    9608:	49 f4       	brne	.+18     	; 0x961c <load_wav+0x23e>
				md |= 2; wsmp *= 2;
    960a:	65 96       	adiw	r28, 0x15	; 21
    960c:	2e ad       	ldd	r18, Y+62	; 0x3e
    960e:	3f ad       	ldd	r19, Y+63	; 0x3f
    9610:	65 97       	sbiw	r28, 0x15	; 21
    9612:	22 60       	ori	r18, 0x02	; 2
    9614:	65 96       	adiw	r28, 0x15	; 21
    9616:	2e af       	std	Y+62, r18	; 0x3e
    9618:	3f af       	std	Y+63, r19	; 0x3f
    961a:	65 97       	sbiw	r28, 0x15	; 21
			}
			fsmp = LD_DWORD(&buff[4]);		/* Sampling rate */
    961c:	d1 01       	movw	r26, r2
    961e:	14 96       	adiw	r26, 0x04	; 4
    9620:	8d 91       	ld	r24, X+
    9622:	9d 91       	ld	r25, X+
    9624:	0d 90       	ld	r0, X+
    9626:	bc 91       	ld	r27, X
    9628:	a0 2d       	mov	r26, r0
    962a:	6f 96       	adiw	r28, 0x1f	; 31
    962c:	8c af       	std	Y+60, r24	; 0x3c
    962e:	9d af       	std	Y+61, r25	; 0x3d
    9630:	ae af       	std	Y+62, r26	; 0x3e
    9632:	bf af       	std	Y+63, r27	; 0x3f
    9634:	6f 97       	sbiw	r28, 0x1f	; 31
			break;
    9636:	4c cf       	rjmp	.-360    	; 0x94d0 <load_wav+0xf2>
			case FCC('f','a','c','t') :
			f_lseek(fp, f_tell(fp) + sz);
			break;

			case FCC('d','a','t','a') :
			offw = f_tell(fp);	/* Wave data start offset */
    9638:	d8 01       	movw	r26, r16
    963a:	16 96       	adiw	r26, 0x06	; 6
    963c:	2d 91       	ld	r18, X+
    963e:	3d 91       	ld	r19, X+
    9640:	4d 91       	ld	r20, X+
    9642:	5c 91       	ld	r21, X
    9644:	19 97       	sbiw	r26, 0x09	; 9
    9646:	6b 96       	adiw	r28, 0x1b	; 27
    9648:	2c af       	std	Y+60, r18	; 0x3c
    964a:	3d af       	std	Y+61, r19	; 0x3d
    964c:	4e af       	std	Y+62, r20	; 0x3e
    964e:	5f af       	std	Y+63, r21	; 0x3f
    9650:	6b 97       	sbiw	r28, 0x1b	; 27
			szwav = sz;			/* Wave data length [byte] */
			f_lseek(fp, f_tell(fp) + sz);
    9652:	ba 01       	movw	r22, r20
    9654:	a9 01       	movw	r20, r18
    9656:	48 0d       	add	r20, r8
    9658:	59 1d       	adc	r21, r9
    965a:	6a 1d       	adc	r22, r10
    965c:	7b 1d       	adc	r23, r11
    965e:	c8 01       	movw	r24, r16
    9660:	0f d8       	rcall	.-4066   	; 0x8680 <f_lseek>
	/* Analyze the RIFF-WAVE header and get properties */
	nam[0] = art[0] = 0;
	md = fsmp = wsmp = offw = szwav = 0;
	while (f_tell(fp) < eof) {
		if (f_read(fp, buff, 8, &br) || br != 8) return -1;
		sz = (LD_DWORD(&buff[4]) + 1) & ~1;
    9662:	24 01       	movw	r4, r8
    9664:	35 01       	movw	r6, r10

			case FCC('d','a','t','a') :
			offw = f_tell(fp);	/* Wave data start offset */
			szwav = sz;			/* Wave data length [byte] */
			f_lseek(fp, f_tell(fp) + sz);
			break;
    9666:	34 cf       	rjmp	.-408    	; 0x94d0 <load_wav+0xf2>

			case FCC('L','I','S','T'):
			sz += f_tell(fp);
    9668:	f8 01       	movw	r30, r16
    966a:	c6 80       	ldd	r12, Z+6	; 0x06
    966c:	d7 80       	ldd	r13, Z+7	; 0x07
    966e:	e0 84       	ldd	r14, Z+8	; 0x08
    9670:	f1 84       	ldd	r15, Z+9	; 0x09
    9672:	c8 0c       	add	r12, r8
    9674:	d9 1c       	adc	r13, r9
    9676:	ea 1c       	adc	r14, r10
    9678:	fb 1c       	adc	r15, r11
			if (f_read(fp, buff, 4, &br) || br != 4) return -1;
    967a:	9e 01       	movw	r18, r28
    967c:	23 5b       	subi	r18, 0xB3	; 179
    967e:	3f 4f       	sbci	r19, 0xFF	; 255
    9680:	44 e0       	ldi	r20, 0x04	; 4
    9682:	50 e0       	ldi	r21, 0x00	; 0
    9684:	b1 01       	movw	r22, r2
    9686:	c8 01       	movw	r24, r16
    9688:	0e 94 b8 41 	call	0x8370	; 0x8370 <f_read>
    968c:	81 11       	cpse	r24, r1
    968e:	35 c1       	rjmp	.+618    	; 0x98fa <load_wav+0x51c>
    9690:	2f 96       	adiw	r28, 0x0f	; 15
    9692:	8e ad       	ldd	r24, Y+62	; 0x3e
    9694:	9f ad       	ldd	r25, Y+63	; 0x3f
    9696:	2f 97       	sbiw	r28, 0x0f	; 15
    9698:	04 97       	sbiw	r24, 0x04	; 4
    969a:	09 f0       	breq	.+2      	; 0x969e <load_wav+0x2c0>
    969c:	2e c1       	rjmp	.+604    	; 0x98fa <load_wav+0x51c>
			if (LD_DWORD(buff) == FCC('I','N','F','O')) {	/* LIST/INFO chunk */
    969e:	f1 01       	movw	r30, r2
    96a0:	80 81       	ld	r24, Z
    96a2:	91 81       	ldd	r25, Z+1	; 0x01
    96a4:	a2 81       	ldd	r26, Z+2	; 0x02
    96a6:	b3 81       	ldd	r27, Z+3	; 0x03
    96a8:	89 34       	cpi	r24, 0x49	; 73
    96aa:	9e 44       	sbci	r25, 0x4E	; 78
    96ac:	a6 44       	sbci	r26, 0x46	; 70
    96ae:	bf 44       	sbci	r27, 0x4F	; 79
    96b0:	09 f0       	breq	.+2      	; 0x96b4 <load_wav+0x2d6>
    96b2:	5e c0       	rjmp	.+188    	; 0x9770 <load_wav+0x392>
				while (f_tell(fp) < sz) {
    96b4:	f8 01       	movw	r30, r16
    96b6:	86 81       	ldd	r24, Z+6	; 0x06
    96b8:	97 81       	ldd	r25, Z+7	; 0x07
    96ba:	a0 85       	ldd	r26, Z+8	; 0x08
    96bc:	b1 85       	ldd	r27, Z+9	; 0x09
    96be:	8c 15       	cp	r24, r12
    96c0:	9d 05       	cpc	r25, r13
    96c2:	ae 05       	cpc	r26, r14
    96c4:	bf 05       	cpc	r27, r15
    96c6:	08 f0       	brcs	.+2      	; 0x96ca <load_wav+0x2ec>
    96c8:	03 cf       	rjmp	.-506    	; 0x94d0 <load_wav+0xf2>
					if (f_read(fp, buff, 8, &br) || br != 8) return -1;
    96ca:	9e 01       	movw	r18, r28
    96cc:	23 5b       	subi	r18, 0xB3	; 179
    96ce:	3f 4f       	sbci	r19, 0xFF	; 255
    96d0:	48 e0       	ldi	r20, 0x08	; 8
    96d2:	50 e0       	ldi	r21, 0x00	; 0
    96d4:	b1 01       	movw	r22, r2
    96d6:	c8 01       	movw	r24, r16
    96d8:	0e 94 b8 41 	call	0x8370	; 0x8370 <f_read>
    96dc:	81 11       	cpse	r24, r1
    96de:	0d c1       	rjmp	.+538    	; 0x98fa <load_wav+0x51c>
    96e0:	2f 96       	adiw	r28, 0x0f	; 15
    96e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    96e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    96e6:	2f 97       	sbiw	r28, 0x0f	; 15
    96e8:	08 97       	sbiw	r24, 0x08	; 8
    96ea:	09 f0       	breq	.+2      	; 0x96ee <load_wav+0x310>
    96ec:	06 c1       	rjmp	.+524    	; 0x98fa <load_wav+0x51c>
					ssz = (LD_DWORD(&buff[4]) + 1) & ~1;
    96ee:	d1 01       	movw	r26, r2
    96f0:	14 96       	adiw	r26, 0x04	; 4
    96f2:	8d 90       	ld	r8, X+
    96f4:	9d 90       	ld	r9, X+
    96f6:	ad 90       	ld	r10, X+
    96f8:	bc 90       	ld	r11, X
    96fa:	17 97       	sbiw	r26, 0x07	; 7
    96fc:	bf ef       	ldi	r27, 0xFF	; 255
    96fe:	8b 1a       	sub	r8, r27
    9700:	9b 0a       	sbc	r9, r27
    9702:	ab 0a       	sbc	r10, r27
    9704:	bb 0a       	sbc	r11, r27
    9706:	e8 94       	clt
    9708:	80 f8       	bld	r8, 0
					p = 0;
					switch (LD_DWORD(buff)) {
    970a:	f1 01       	movw	r30, r2
    970c:	80 81       	ld	r24, Z
    970e:	91 81       	ldd	r25, Z+1	; 0x01
    9710:	a2 81       	ldd	r26, Z+2	; 0x02
    9712:	b3 81       	ldd	r27, Z+3	; 0x03
    9714:	89 34       	cpi	r24, 0x49	; 73
    9716:	fe e4       	ldi	r31, 0x4E	; 78
    9718:	9f 07       	cpc	r25, r31
    971a:	f1 e4       	ldi	r31, 0x41	; 65
    971c:	af 07       	cpc	r26, r31
    971e:	fd e4       	ldi	r31, 0x4D	; 77
    9720:	bf 07       	cpc	r27, r31
    9722:	39 f0       	breq	.+14     	; 0x9732 <load_wav+0x354>
    9724:	89 34       	cpi	r24, 0x49	; 73
    9726:	91 44       	sbci	r25, 0x41	; 65
    9728:	a2 45       	sbci	r26, 0x52	; 82
    972a:	b4 45       	sbci	r27, 0x54	; 84
    972c:	09 f4       	brne	.+2      	; 0x9730 <load_wav+0x352>
    972e:	e8 c0       	rjmp	.+464    	; 0x9900 <load_wav+0x522>
    9730:	0d c0       	rjmp	.+26     	; 0x974c <load_wav+0x36e>
						case FCC('I','N','A','M'):		/* INAM sub-chunk */
						p = nam; break;
    9732:	60 96       	adiw	r28, 0x10	; 16
    9734:	6f ad       	ldd	r22, Y+63	; 0x3f
    9736:	60 97       	sbiw	r28, 0x10	; 16
    9738:	61 96       	adiw	r28, 0x11	; 17
    973a:	7f ad       	ldd	r23, Y+63	; 0x3f
    973c:	61 97       	sbiw	r28, 0x11	; 17
						case FCC('I','A','R','T'):		/* IART sub-cnunk */
						p = art; break;
					}
					if (p && ssz <= NBSIZE) {
    973e:	31 e2       	ldi	r19, 0x21	; 33
    9740:	83 16       	cp	r8, r19
    9742:	91 04       	cpc	r9, r1
    9744:	a1 04       	cpc	r10, r1
    9746:	b1 04       	cpc	r11, r1
    9748:	08 f4       	brcc	.+2      	; 0x974c <load_wav+0x36e>
    974a:	ce c0       	rjmp	.+412    	; 0x98e8 <load_wav+0x50a>
						if (f_read(fp, p, ssz, &br) || br != ssz) return -1;
						} else {
						if (f_lseek(fp, f_tell(fp) + ssz)) return -1;
    974c:	d8 01       	movw	r26, r16
    974e:	16 96       	adiw	r26, 0x06	; 6
    9750:	4d 91       	ld	r20, X+
    9752:	5d 91       	ld	r21, X+
    9754:	6d 91       	ld	r22, X+
    9756:	7c 91       	ld	r23, X
    9758:	19 97       	sbiw	r26, 0x09	; 9
    975a:	48 0d       	add	r20, r8
    975c:	59 1d       	adc	r21, r9
    975e:	6a 1d       	adc	r22, r10
    9760:	7b 1d       	adc	r23, r11
    9762:	c8 01       	movw	r24, r16
    9764:	0e 94 40 43 	call	0x8680	; 0x8680 <f_lseek>
    9768:	88 23       	and	r24, r24
    976a:	09 f4       	brne	.+2      	; 0x976e <load_wav+0x390>
    976c:	a3 cf       	rjmp	.-186    	; 0x96b4 <load_wav+0x2d6>
    976e:	c5 c0       	rjmp	.+394    	; 0x98fa <load_wav+0x51c>
					}
				}
				} else {
				if (f_lseek(fp, sz)) return -1;	/* Skip unknown sub-chunk type */
    9770:	b7 01       	movw	r22, r14
    9772:	a6 01       	movw	r20, r12
    9774:	c8 01       	movw	r24, r16
    9776:	0e 94 40 43 	call	0x8680	; 0x8680 <f_lseek>
    977a:	88 23       	and	r24, r24
    977c:	09 f4       	brne	.+2      	; 0x9780 <load_wav+0x3a2>
    977e:	a8 ce       	rjmp	.-688    	; 0x94d0 <load_wav+0xf2>
    9780:	bc c0       	rjmp	.+376    	; 0x98fa <load_wav+0x51c>

			default :	/* Unknown chunk */
			return -1;
		}
	}
	if (!szwav || !fsmp) return -1;		/* Check if valid WAV file */
    9782:	41 14       	cp	r4, r1
    9784:	51 04       	cpc	r5, r1
    9786:	61 04       	cpc	r6, r1
    9788:	71 04       	cpc	r7, r1
    978a:	09 f4       	brne	.+2      	; 0x978e <load_wav+0x3b0>
    978c:	b6 c0       	rjmp	.+364    	; 0x98fa <load_wav+0x51c>
    978e:	6f 96       	adiw	r28, 0x1f	; 31
    9790:	8c ad       	ldd	r24, Y+60	; 0x3c
    9792:	9d ad       	ldd	r25, Y+61	; 0x3d
    9794:	ae ad       	ldd	r26, Y+62	; 0x3e
    9796:	bf ad       	ldd	r27, Y+63	; 0x3f
    9798:	6f 97       	sbiw	r28, 0x1f	; 31
    979a:	89 2b       	or	r24, r25
    979c:	8a 2b       	or	r24, r26
    979e:	8b 2b       	or	r24, r27
    97a0:	09 f4       	brne	.+2      	; 0x97a4 <load_wav+0x3c6>
    97a2:	ab c0       	rjmp	.+342    	; 0x98fa <load_wav+0x51c>
	if (f_lseek(fp, offw)) return -1;	/* Seek to top of wav data */
    97a4:	6b 96       	adiw	r28, 0x1b	; 27
    97a6:	4c ad       	ldd	r20, Y+60	; 0x3c
    97a8:	5d ad       	ldd	r21, Y+61	; 0x3d
    97aa:	6e ad       	ldd	r22, Y+62	; 0x3e
    97ac:	7f ad       	ldd	r23, Y+63	; 0x3f
    97ae:	6b 97       	sbiw	r28, 0x1b	; 27
    97b0:	c8 01       	movw	r24, r16
    97b2:	0e 94 40 43 	call	0x8680	; 0x8680 <f_lseek>
    97b6:	81 11       	cpse	r24, r1
    97b8:	a0 c0       	rjmp	.+320    	; 0x98fa <load_wav+0x51c>

	//xprintf(PSTR("IART=%s\nINAM=%s\n"), art, nam);
	//xprintf(PSTR("Sample=%u.%ukHz/%ubit/%S\nLength=%u:%02u\n"), (UINT)(fsmp / 1000), (UINT)(fsmp / 100) % 10, (md & 2) ? 16 : 8, (md & 1) ? PSTR("st") : PSTR("mo"), tc / 60, tc % 60);

	/* Initialize stream parameters and start sound streming */
	fcb.mode = md;
    97ba:	65 96       	adiw	r28, 0x15	; 21
    97bc:	ae ad       	ldd	r26, Y+62	; 0x3e
    97be:	bf ad       	ldd	r27, Y+63	; 0x3f
    97c0:	65 97       	sbiw	r28, 0x15	; 21
    97c2:	23 96       	adiw	r28, 0x03	; 3
    97c4:	ae af       	std	Y+62, r26	; 0x3e
    97c6:	bf af       	std	Y+63, r27	; 0x3f
    97c8:	23 97       	sbiw	r28, 0x03	; 3
	fcb.buff = buff;
    97ca:	2b 96       	adiw	r28, 0x0b	; 11
    97cc:	2e ae       	std	Y+62, r2	; 0x3e
    97ce:	3f ae       	std	Y+63, r3	; 0x3f
    97d0:	2b 97       	sbiw	r28, 0x0b	; 11
	fcb.sz_buff = sz_work;
    97d2:	a5 96       	adiw	r28, 0x25	; 37
    97d4:	ee ad       	ldd	r30, Y+62	; 0x3e
    97d6:	ff ad       	ldd	r31, Y+63	; 0x3f
    97d8:	a5 97       	sbiw	r28, 0x25	; 37
    97da:	2d 96       	adiw	r28, 0x0d	; 13
    97dc:	ee af       	std	Y+62, r30	; 0x3e
    97de:	ff af       	std	Y+63, r31	; 0x3f
    97e0:	2d 97       	sbiw	r28, 0x0d	; 13
	if (!sound_start(&fcb, fsmp)) return -1;
    97e2:	6f 96       	adiw	r28, 0x1f	; 31
    97e4:	4c ad       	ldd	r20, Y+60	; 0x3c
    97e6:	5d ad       	ldd	r21, Y+61	; 0x3d
    97e8:	6e ad       	ldd	r22, Y+62	; 0x3e
    97ea:	7f ad       	ldd	r23, Y+63	; 0x3f
    97ec:	6f 97       	sbiw	r28, 0x1f	; 31
    97ee:	ce 01       	movw	r24, r28
    97f0:	8f 5b       	subi	r24, 0xBF	; 191
    97f2:	9f 4f       	sbci	r25, 0xFF	; 255
    97f4:	b3 dd       	rcall	.-1178   	; 0x935c <sound_start>
    97f6:	89 2b       	or	r24, r25
    97f8:	09 f4       	brne	.+2      	; 0x97fc <load_wav+0x41e>
    97fa:	7f c0       	rjmp	.+254    	; 0x98fa <load_wav+0x51c>

	k = 0; wi = 0;
	while (szwav || fcb.ct >= 4) {
		if (szwav && fcb.ct <= sz_work / 2) {	/* Refill FIFO when it gets half empty */
    97fc:	a5 96       	adiw	r28, 0x25	; 37
    97fe:	ce ac       	ldd	r12, Y+62	; 0x3e
    9800:	df ac       	ldd	r13, Y+63	; 0x3f
    9802:	a5 97       	sbiw	r28, 0x25	; 37
    9804:	d6 94       	lsr	r13
    9806:	c7 94       	ror	r12
			btr = (szwav >= sz_work / 2) ? sz_work / 2 : szwav;
    9808:	96 01       	movw	r18, r12
    980a:	40 e0       	ldi	r20, 0x00	; 0
    980c:	50 e0       	ldi	r21, 0x00	; 0
    980e:	67 96       	adiw	r28, 0x17	; 23
    9810:	2c af       	std	Y+60, r18	; 0x3c
    9812:	3d af       	std	Y+61, r19	; 0x3d
    9814:	4e af       	std	Y+62, r20	; 0x3e
    9816:	5f af       	std	Y+63, r21	; 0x3f
    9818:	67 97       	sbiw	r28, 0x17	; 23
    981a:	e1 2c       	mov	r14, r1
    981c:	f1 2c       	mov	r15, r1
			f_read(fp, &buff[wi], btr, &br);
			if (br != btr) break;
			szwav -= br;
			wi = (wi + br) & (sz_work - 1);
    981e:	a5 96       	adiw	r28, 0x25	; 37
    9820:	ae ac       	ldd	r10, Y+62	; 0x3e
    9822:	bf ac       	ldd	r11, Y+63	; 0x3f
    9824:	a5 97       	sbiw	r28, 0x25	; 37
    9826:	31 e0       	ldi	r19, 0x01	; 1
    9828:	a3 1a       	sub	r10, r19
    982a:	b1 08       	sbc	r11, r1
	fcb.sz_buff = sz_work;
	if (!sound_start(&fcb, fsmp)) return -1;

	k = 0; wi = 0;
	while (szwav || fcb.ct >= 4) {
		if (szwav && fcb.ct <= sz_work / 2) {	/* Refill FIFO when it gets half empty */
    982c:	29 96       	adiw	r28, 0x09	; 9
    982e:	8e ad       	ldd	r24, Y+62	; 0x3e
    9830:	9f ad       	ldd	r25, Y+63	; 0x3f
    9832:	29 97       	sbiw	r28, 0x09	; 9
	fcb.buff = buff;
	fcb.sz_buff = sz_work;
	if (!sound_start(&fcb, fsmp)) return -1;

	k = 0; wi = 0;
	while (szwav || fcb.ct >= 4) {
    9834:	41 14       	cp	r4, r1
    9836:	51 04       	cpc	r5, r1
    9838:	61 04       	cpc	r6, r1
    983a:	71 04       	cpc	r7, r1
    983c:	09 f4       	brne	.+2      	; 0x9840 <load_wav+0x462>
    983e:	4e c0       	rjmp	.+156    	; 0x98dc <load_wav+0x4fe>
		if (szwav && fcb.ct <= sz_work / 2) {	/* Refill FIFO when it gets half empty */
    9840:	c8 16       	cp	r12, r24
    9842:	d9 06       	cpc	r13, r25
    9844:	08 f4       	brcc	.+2      	; 0x9848 <load_wav+0x46a>
    9846:	3f c0       	rjmp	.+126    	; 0x98c6 <load_wav+0x4e8>
			btr = (szwav >= sz_work / 2) ? sz_work / 2 : szwav;
    9848:	94 2d       	mov	r25, r4
    984a:	85 2d       	mov	r24, r5
    984c:	67 96       	adiw	r28, 0x17	; 23
    984e:	2c ad       	ldd	r18, Y+60	; 0x3c
    9850:	3d ad       	ldd	r19, Y+61	; 0x3d
    9852:	4e ad       	ldd	r20, Y+62	; 0x3e
    9854:	5f ad       	ldd	r21, Y+63	; 0x3f
    9856:	67 97       	sbiw	r28, 0x17	; 23
    9858:	24 15       	cp	r18, r4
    985a:	35 05       	cpc	r19, r5
    985c:	46 05       	cpc	r20, r6
    985e:	57 05       	cpc	r21, r7
    9860:	30 f4       	brcc	.+12     	; 0x986e <load_wav+0x490>
    9862:	64 96       	adiw	r28, 0x14	; 20
    9864:	9f ad       	ldd	r25, Y+63	; 0x3f
    9866:	64 97       	sbiw	r28, 0x14	; 20
    9868:	65 96       	adiw	r28, 0x15	; 21
    986a:	8f ad       	ldd	r24, Y+63	; 0x3f
    986c:	65 97       	sbiw	r28, 0x15	; 21
    986e:	89 2e       	mov	r8, r25
    9870:	98 2e       	mov	r9, r24
			f_read(fp, &buff[wi], btr, &br);
    9872:	9e 01       	movw	r18, r28
    9874:	23 5b       	subi	r18, 0xB3	; 179
    9876:	3f 4f       	sbci	r19, 0xFF	; 255
    9878:	49 2f       	mov	r20, r25
    987a:	58 2f       	mov	r21, r24
    987c:	b1 01       	movw	r22, r2
    987e:	6e 0d       	add	r22, r14
    9880:	7f 1d       	adc	r23, r15
    9882:	c8 01       	movw	r24, r16
    9884:	0e 94 b8 41 	call	0x8370	; 0x8370 <f_read>
			if (br != btr) break;
    9888:	2f 96       	adiw	r28, 0x0f	; 15
    988a:	8e ad       	ldd	r24, Y+62	; 0x3e
    988c:	9f ad       	ldd	r25, Y+63	; 0x3f
    988e:	2f 97       	sbiw	r28, 0x0f	; 15
    9890:	88 15       	cp	r24, r8
    9892:	99 05       	cpc	r25, r9
    9894:	29 f5       	brne	.+74     	; 0x98e0 <load_wav+0x502>
			szwav -= br;
    9896:	48 1a       	sub	r4, r24
    9898:	59 0a       	sbc	r5, r25
    989a:	61 08       	sbc	r6, r1
    989c:	71 08       	sbc	r7, r1
			wi = (wi + br) & (sz_work - 1);
    989e:	e8 0e       	add	r14, r24
    98a0:	f9 1e       	adc	r15, r25
    98a2:	ea 20       	and	r14, r10
    98a4:	fb 20       	and	r15, r11
			cli();
    98a6:	f8 94       	cli
			fcb.ct += br;
    98a8:	29 96       	adiw	r28, 0x09	; 9
    98aa:	8e ad       	ldd	r24, Y+62	; 0x3e
    98ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    98ae:	29 97       	sbiw	r28, 0x09	; 9
    98b0:	2f 96       	adiw	r28, 0x0f	; 15
    98b2:	2e ad       	ldd	r18, Y+62	; 0x3e
    98b4:	3f ad       	ldd	r19, Y+63	; 0x3f
    98b6:	2f 97       	sbiw	r28, 0x0f	; 15
    98b8:	82 0f       	add	r24, r18
    98ba:	93 1f       	adc	r25, r19
    98bc:	29 96       	adiw	r28, 0x09	; 9
    98be:	8e af       	std	Y+62, r24	; 0x3e
    98c0:	9f af       	std	Y+63, r25	; 0x3f
    98c2:	29 97       	sbiw	r28, 0x09	; 9
			sei();
    98c4:	78 94       	sei
		//if (uart_test()) {		/* Exit if a command arrived */
		//	k = uart_getc();
		//	break;
		//}
		
		if (btn_check_press() == BTN2)
    98c6:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <btn_check_press>
    98ca:	82 30       	cpi	r24, 0x02	; 2
    98cc:	11 f4       	brne	.+4      	; 0x98d2 <load_wav+0x4f4>
		{
			sound_stop();
    98ce:	78 dd       	rcall	.-1296   	; 0x93c0 <sound_stop>
			break;
    98d0:	07 c0       	rjmp	.+14     	; 0x98e0 <load_wav+0x502>
		}
		
		t = (f_tell(fp) - offw - fcb.ct) / fsmp / wsmp;	/* Refresh time display every 1 sec */
    98d2:	29 96       	adiw	r28, 0x09	; 9
    98d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    98d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    98d8:	29 97       	sbiw	r28, 0x09	; 9
    98da:	a8 cf       	rjmp	.-176    	; 0x982c <load_wav+0x44e>
	fcb.buff = buff;
	fcb.sz_buff = sz_work;
	if (!sound_start(&fcb, fsmp)) return -1;

	k = 0; wi = 0;
	while (szwav || fcb.ct >= 4) {
    98dc:	04 97       	sbiw	r24, 0x04	; 4
    98de:	98 f7       	brcc	.-26     	; 0x98c6 <load_wav+0x4e8>
			tc = t;
			//xprintf(PSTR("\rTime=%u:%02u"), tc / 60, tc % 60);
		}
	}

	sound_stop();	/* Stop sound output */
    98e0:	6f dd       	rcall	.-1314   	; 0x93c0 <sound_stop>

	//xputc('\n');
	return k;	/* Terminated due to -1:error, 0:eot, >0:key code */
    98e2:	80 e0       	ldi	r24, 0x00	; 0
    98e4:	90 e0       	ldi	r25, 0x00	; 0
    98e6:	20 c0       	rjmp	.+64     	; 0x9928 <load_wav+0x54a>
						p = nam; break;
						case FCC('I','A','R','T'):		/* IART sub-cnunk */
						p = art; break;
					}
					if (p && ssz <= NBSIZE) {
						if (f_read(fp, p, ssz, &br) || br != ssz) return -1;
    98e8:	9e 01       	movw	r18, r28
    98ea:	23 5b       	subi	r18, 0xB3	; 179
    98ec:	3f 4f       	sbci	r19, 0xFF	; 255
    98ee:	a4 01       	movw	r20, r8
    98f0:	c8 01       	movw	r24, r16
    98f2:	0e 94 b8 41 	call	0x8370	; 0x8370 <f_read>
    98f6:	88 23       	and	r24, r24
    98f8:	51 f0       	breq	.+20     	; 0x990e <load_wav+0x530>
				if (f_lseek(fp, sz)) return -1;	/* Skip unknown sub-chunk type */
			}
			break;

			default :	/* Unknown chunk */
			return -1;
    98fa:	8f ef       	ldi	r24, 0xFF	; 255
    98fc:	9f ef       	ldi	r25, 0xFF	; 255
    98fe:	14 c0       	rjmp	.+40     	; 0x9928 <load_wav+0x54a>
					p = 0;
					switch (LD_DWORD(buff)) {
						case FCC('I','N','A','M'):		/* INAM sub-chunk */
						p = nam; break;
						case FCC('I','A','R','T'):		/* IART sub-cnunk */
						p = art; break;
    9900:	62 96       	adiw	r28, 0x12	; 18
    9902:	6f ad       	ldd	r22, Y+63	; 0x3f
    9904:	62 97       	sbiw	r28, 0x12	; 18
    9906:	63 96       	adiw	r28, 0x13	; 19
    9908:	7f ad       	ldd	r23, Y+63	; 0x3f
    990a:	63 97       	sbiw	r28, 0x13	; 19
    990c:	18 cf       	rjmp	.-464    	; 0x973e <load_wav+0x360>
					}
					if (p && ssz <= NBSIZE) {
						if (f_read(fp, p, ssz, &br) || br != ssz) return -1;
    990e:	2f 96       	adiw	r28, 0x0f	; 15
    9910:	8e ad       	ldd	r24, Y+62	; 0x3e
    9912:	9f ad       	ldd	r25, Y+63	; 0x3f
    9914:	2f 97       	sbiw	r28, 0x0f	; 15
    9916:	a0 e0       	ldi	r26, 0x00	; 0
    9918:	b0 e0       	ldi	r27, 0x00	; 0
    991a:	88 15       	cp	r24, r8
    991c:	99 05       	cpc	r25, r9
    991e:	aa 05       	cpc	r26, r10
    9920:	bb 05       	cpc	r27, r11
    9922:	09 f4       	brne	.+2      	; 0x9926 <load_wav+0x548>
    9924:	c7 ce       	rjmp	.-626    	; 0x96b4 <load_wav+0x2d6>
    9926:	e9 cf       	rjmp	.-46     	; 0x98fa <load_wav+0x51c>

	sound_stop();	/* Stop sound output */

	//xputc('\n');
	return k;	/* Terminated due to -1:error, 0:eot, >0:key code */
}
    9928:	cc 59       	subi	r28, 0x9C	; 156
    992a:	df 4f       	sbci	r29, 0xFF	; 255
    992c:	cd bf       	out	0x3d, r28	; 61
    992e:	de bf       	out	0x3e, r29	; 62
    9930:	df 91       	pop	r29
    9932:	cf 91       	pop	r28
    9934:	1f 91       	pop	r17
    9936:	0f 91       	pop	r16
    9938:	ff 90       	pop	r15
    993a:	ef 90       	pop	r14
    993c:	df 90       	pop	r13
    993e:	cf 90       	pop	r12
    9940:	bf 90       	pop	r11
    9942:	af 90       	pop	r10
    9944:	9f 90       	pop	r9
    9946:	8f 90       	pop	r8
    9948:	7f 90       	pop	r7
    994a:	6f 90       	pop	r6
    994c:	5f 90       	pop	r5
    994e:	4f 90       	pop	r4
    9950:	3f 90       	pop	r3
    9952:	2f 90       	pop	r2
    9954:	08 95       	ret

00009956 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
jsmnerr_t jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
    9956:	2f 92       	push	r2
    9958:	3f 92       	push	r3
    995a:	5f 92       	push	r5
    995c:	6f 92       	push	r6
    995e:	7f 92       	push	r7
    9960:	8f 92       	push	r8
    9962:	9f 92       	push	r9
    9964:	bf 92       	push	r11
    9966:	cf 92       	push	r12
    9968:	df 92       	push	r13
    996a:	ef 92       	push	r14
    996c:	ff 92       	push	r15
    996e:	0f 93       	push	r16
    9970:	1f 93       	push	r17
    9972:	cf 93       	push	r28
    9974:	df 93       	push	r29
    9976:	00 d0       	rcall	.+0      	; 0x9978 <jsmn_parse+0x22>
    9978:	00 d0       	rcall	.+0      	; 0x997a <jsmn_parse+0x24>
    997a:	cd b7       	in	r28, 0x3d	; 61
    997c:	de b7       	in	r29, 0x3e	; 62
    997e:	8d 83       	std	Y+5, r24	; 0x05
    9980:	9e 83       	std	Y+6, r25	; 0x06
    9982:	1a 01       	movw	r2, r20
    9984:	38 01       	movw	r6, r16
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;
    9986:	80 e0       	ldi	r24, 0x00	; 0
    9988:	90 e0       	ldi	r25, 0x00	; 0
			case ':':
				parser->toksuper = parser->toknext - 1;
				break;
			case ',':
				if (tokens != NULL &&
						tokens[parser->toksuper].type != JSMN_ARRAY &&
    998a:	47 e0       	ldi	r20, 0x07	; 7
    998c:	b4 2e       	mov	r11, r20
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
    998e:	0f ef       	ldi	r16, 0xFF	; 255
    9990:	1f ef       	ldi	r17, 0xFF	; 255
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    9992:	53 e0       	ldi	r21, 0x03	; 3
    9994:	55 2e       	mov	r5, r21
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    9996:	ad 81       	ldd	r26, Y+5	; 0x05
    9998:	be 81       	ldd	r27, Y+6	; 0x06
    999a:	0d 90       	ld	r0, X+
    999c:	bc 91       	ld	r27, X
    999e:	a0 2d       	mov	r26, r0
    99a0:	ab 83       	std	Y+3, r26	; 0x03
    99a2:	bc 83       	std	Y+4, r27	; 0x04
    99a4:	a2 15       	cp	r26, r2
    99a6:	b3 05       	cpc	r27, r3
    99a8:	90 f0       	brcs	.+36     	; 0x99ce <jsmn_parse+0x78>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
    99aa:	ad 81       	ldd	r26, Y+5	; 0x05
    99ac:	be 81       	ldd	r27, Y+6	; 0x06
    99ae:	12 96       	adiw	r26, 0x02	; 2
    99b0:	ed 91       	ld	r30, X+
    99b2:	fc 91       	ld	r31, X
    99b4:	13 97       	sbiw	r26, 0x03	; 3
    99b6:	bf 01       	movw	r22, r30
    99b8:	61 50       	subi	r22, 0x01	; 1
    99ba:	71 09       	sbc	r23, r1
    99bc:	a7 e0       	ldi	r26, 0x07	; 7
    99be:	ae 9f       	mul	r26, r30
    99c0:	a0 01       	movw	r20, r0
    99c2:	af 9f       	mul	r26, r31
    99c4:	50 0d       	add	r21, r0
    99c6:	11 24       	eor	r1, r1
    99c8:	42 0f       	add	r20, r18
    99ca:	53 1f       	adc	r21, r19
    99cc:	93 c2       	rjmp	.+1318   	; 0x9ef4 <jsmn_parse+0x59e>
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    99ce:	eb 81       	ldd	r30, Y+3	; 0x03
    99d0:	fc 81       	ldd	r31, Y+4	; 0x04
    99d2:	e6 0f       	add	r30, r22
    99d4:	f7 1f       	adc	r31, r23
    99d6:	40 81       	ld	r20, Z
    99d8:	44 23       	and	r20, r20
    99da:	39 f3       	breq	.-50     	; 0x99aa <jsmn_parse+0x54>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
    99dc:	4c 32       	cpi	r20, 0x2C	; 44
    99de:	09 f4       	brne	.+2      	; 0x99e2 <jsmn_parse+0x8c>
    99e0:	a2 c1       	rjmp	.+836    	; 0x9d26 <jsmn_parse+0x3d0>
    99e2:	c8 f4       	brcc	.+50     	; 0x9a16 <jsmn_parse+0xc0>
    99e4:	4d 30       	cpi	r20, 0x0D	; 13
    99e6:	09 f4       	brne	.+2      	; 0x99ea <jsmn_parse+0x94>
    99e8:	72 c2       	rjmp	.+1252   	; 0x9ece <jsmn_parse+0x578>
    99ea:	28 f4       	brcc	.+10     	; 0x99f6 <jsmn_parse+0xa0>
    99ec:	49 50       	subi	r20, 0x09	; 9
    99ee:	42 30       	cpi	r20, 0x02	; 2
    99f0:	08 f4       	brcc	.+2      	; 0x99f4 <jsmn_parse+0x9e>
    99f2:	6d c2       	rjmp	.+1242   	; 0x9ece <jsmn_parse+0x578>
    99f4:	00 c2       	rjmp	.+1024   	; 0x9df6 <jsmn_parse+0x4a0>
    99f6:	40 32       	cpi	r20, 0x20	; 32
    99f8:	09 f4       	brne	.+2      	; 0x99fc <jsmn_parse+0xa6>
    99fa:	69 c2       	rjmp	.+1234   	; 0x9ece <jsmn_parse+0x578>
    99fc:	42 32       	cpi	r20, 0x22	; 34
    99fe:	09 f0       	breq	.+2      	; 0x9a02 <jsmn_parse+0xac>
    9a00:	fa c1       	rjmp	.+1012   	; 0x9df6 <jsmn_parse+0x4a0>
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *token;

	int start = parser->pos;

	parser->pos++;
    9a02:	8b 80       	ldd	r8, Y+3	; 0x03
    9a04:	9c 80       	ldd	r9, Y+4	; 0x04
    9a06:	ff ef       	ldi	r31, 0xFF	; 255
    9a08:	8f 1a       	sub	r8, r31
    9a0a:	9f 0a       	sbc	r9, r31
    9a0c:	ad 81       	ldd	r26, Y+5	; 0x05
    9a0e:	be 81       	ldd	r27, Y+6	; 0x06
    9a10:	8d 92       	st	X+, r8
    9a12:	9c 92       	st	X, r9
    9a14:	ce c0       	rjmp	.+412    	; 0x9bb2 <jsmn_parse+0x25c>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
    9a16:	4d 35       	cpi	r20, 0x5D	; 93
    9a18:	09 f4       	brne	.+2      	; 0x9a1c <jsmn_parse+0xc6>
    9a1a:	5f c0       	rjmp	.+190    	; 0x9ada <jsmn_parse+0x184>
    9a1c:	30 f4       	brcc	.+12     	; 0x9a2a <jsmn_parse+0xd4>
    9a1e:	4a 33       	cpi	r20, 0x3A	; 58
    9a20:	09 f4       	brne	.+2      	; 0x9a24 <jsmn_parse+0xce>
    9a22:	79 c1       	rjmp	.+754    	; 0x9d16 <jsmn_parse+0x3c0>
    9a24:	4b 35       	cpi	r20, 0x5B	; 91
    9a26:	39 f0       	breq	.+14     	; 0x9a36 <jsmn_parse+0xe0>
    9a28:	e6 c1       	rjmp	.+972    	; 0x9df6 <jsmn_parse+0x4a0>
    9a2a:	4b 37       	cpi	r20, 0x7B	; 123
    9a2c:	21 f0       	breq	.+8      	; 0x9a36 <jsmn_parse+0xe0>
    9a2e:	4d 37       	cpi	r20, 0x7D	; 125
    9a30:	09 f4       	brne	.+2      	; 0x9a34 <jsmn_parse+0xde>
    9a32:	53 c0       	rjmp	.+166    	; 0x9ada <jsmn_parse+0x184>
    9a34:	e0 c1       	rjmp	.+960    	; 0x9df6 <jsmn_parse+0x4a0>
			case '{': case '[':
				count++;
    9a36:	01 96       	adiw	r24, 0x01	; 1
				if (tokens == NULL) {
    9a38:	21 15       	cp	r18, r1
    9a3a:	31 05       	cpc	r19, r1
    9a3c:	09 f4       	brne	.+2      	; 0x9a40 <jsmn_parse+0xea>
    9a3e:	47 c2       	rjmp	.+1166   	; 0x9ece <jsmn_parse+0x578>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    9a40:	ad 81       	ldd	r26, Y+5	; 0x05
    9a42:	be 81       	ldd	r27, Y+6	; 0x06
    9a44:	12 96       	adiw	r26, 0x02	; 2
    9a46:	8d 90       	ld	r8, X+
    9a48:	9c 90       	ld	r9, X
    9a4a:	13 97       	sbiw	r26, 0x03	; 3
    9a4c:	86 14       	cp	r8, r6
    9a4e:	97 04       	cpc	r9, r7
    9a50:	08 f0       	brcs	.+2      	; 0x9a54 <jsmn_parse+0xfe>
    9a52:	cf c0       	rjmp	.+414    	; 0x9bf2 <jsmn_parse+0x29c>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    9a54:	f4 01       	movw	r30, r8
    9a56:	31 96       	adiw	r30, 0x01	; 1
    9a58:	ad 81       	ldd	r26, Y+5	; 0x05
    9a5a:	be 81       	ldd	r27, Y+6	; 0x06
    9a5c:	12 96       	adiw	r26, 0x02	; 2
    9a5e:	ed 93       	st	X+, r30
    9a60:	fc 93       	st	X, r31
    9a62:	13 97       	sbiw	r26, 0x03	; 3
    9a64:	b8 9c       	mul	r11, r8
    9a66:	f0 01       	movw	r30, r0
    9a68:	b9 9c       	mul	r11, r9
    9a6a:	f0 0d       	add	r31, r0
    9a6c:	11 24       	eor	r1, r1
    9a6e:	e2 0f       	add	r30, r18
    9a70:	f3 1f       	adc	r31, r19
    9a72:	e9 83       	std	Y+1, r30	; 0x01
    9a74:	fa 83       	std	Y+2, r31	; 0x02
	tok->start = tok->end = -1;
    9a76:	03 83       	std	Z+3, r16	; 0x03
    9a78:	14 83       	std	Z+4, r17	; 0x04
    9a7a:	01 83       	std	Z+1, r16	; 0x01
    9a7c:	12 83       	std	Z+2, r17	; 0x02
	tok->size = 0;
    9a7e:	15 82       	std	Z+5, r1	; 0x05
    9a80:	16 82       	std	Z+6, r1	; 0x06
				count++;
				if (tokens == NULL) {
					break;
				}
				token = jsmn_alloc_token(parser, tokens, num_tokens);
				if (token == NULL)
    9a82:	ef 2b       	or	r30, r31
    9a84:	09 f4       	brne	.+2      	; 0x9a88 <jsmn_parse+0x132>
    9a86:	b5 c0       	rjmp	.+362    	; 0x9bf2 <jsmn_parse+0x29c>
					return JSMN_ERROR_NOMEM;
				if (parser->toksuper != -1) {
    9a88:	14 96       	adiw	r26, 0x04	; 4
    9a8a:	ed 90       	ld	r14, X+
    9a8c:	fc 90       	ld	r15, X
    9a8e:	15 97       	sbiw	r26, 0x05	; 5
    9a90:	ff ef       	ldi	r31, 0xFF	; 255
    9a92:	ef 16       	cp	r14, r31
    9a94:	ff 06       	cpc	r15, r31
    9a96:	91 f0       	breq	.+36     	; 0x9abc <jsmn_parse+0x166>
					tokens[parser->toksuper].size++;
    9a98:	be 9c       	mul	r11, r14
    9a9a:	60 01       	movw	r12, r0
    9a9c:	bf 9c       	mul	r11, r15
    9a9e:	d0 0c       	add	r13, r0
    9aa0:	11 24       	eor	r1, r1
    9aa2:	c2 0e       	add	r12, r18
    9aa4:	d3 1e       	adc	r13, r19
    9aa6:	d6 01       	movw	r26, r12
    9aa8:	15 96       	adiw	r26, 0x05	; 5
    9aaa:	ed 90       	ld	r14, X+
    9aac:	fc 90       	ld	r15, X
    9aae:	16 97       	sbiw	r26, 0x06	; 6
    9ab0:	bf ef       	ldi	r27, 0xFF	; 255
    9ab2:	eb 1a       	sub	r14, r27
    9ab4:	fb 0a       	sbc	r15, r27
    9ab6:	f6 01       	movw	r30, r12
    9ab8:	e5 82       	std	Z+5, r14	; 0x05
    9aba:	f6 82       	std	Z+6, r15	; 0x06
#ifdef JSMN_PARENT_LINKS
					token->parent = parser->toksuper;
#endif
				}
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
    9abc:	4b 37       	cpi	r20, 0x7B	; 123
    9abe:	11 f4       	brne	.+4      	; 0x9ac4 <jsmn_parse+0x16e>
    9ac0:	41 e0       	ldi	r20, 0x01	; 1
    9ac2:	01 c0       	rjmp	.+2      	; 0x9ac6 <jsmn_parse+0x170>
    9ac4:	42 e0       	ldi	r20, 0x02	; 2
    9ac6:	a9 81       	ldd	r26, Y+1	; 0x01
    9ac8:	ba 81       	ldd	r27, Y+2	; 0x02
    9aca:	4c 93       	st	X, r20
				token->start = parser->pos;
    9acc:	eb 81       	ldd	r30, Y+3	; 0x03
    9ace:	fc 81       	ldd	r31, Y+4	; 0x04
    9ad0:	11 96       	adiw	r26, 0x01	; 1
    9ad2:	ed 93       	st	X+, r30
    9ad4:	fc 93       	st	X, r31
    9ad6:	12 97       	sbiw	r26, 0x02	; 2
    9ad8:	6b c1       	rjmp	.+726    	; 0x9db0 <jsmn_parse+0x45a>
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
    9ada:	21 15       	cp	r18, r1
    9adc:	31 05       	cpc	r19, r1
    9ade:	09 f4       	brne	.+2      	; 0x9ae2 <jsmn_parse+0x18c>
    9ae0:	f6 c1       	rjmp	.+1004   	; 0x9ece <jsmn_parse+0x578>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
    9ae2:	4d 37       	cpi	r20, 0x7D	; 125
    9ae4:	11 f4       	brne	.+4      	; 0x9aea <jsmn_parse+0x194>
    9ae6:	41 e0       	ldi	r20, 0x01	; 1
    9ae8:	01 c0       	rjmp	.+2      	; 0x9aec <jsmn_parse+0x196>
    9aea:	42 e0       	ldi	r20, 0x02	; 2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
    9aec:	ed 81       	ldd	r30, Y+5	; 0x05
    9aee:	fe 81       	ldd	r31, Y+6	; 0x06
    9af0:	c2 80       	ldd	r12, Z+2	; 0x02
    9af2:	d3 80       	ldd	r13, Z+3	; 0x03
    9af4:	76 01       	movw	r14, r12
    9af6:	f1 e0       	ldi	r31, 0x01	; 1
    9af8:	ef 1a       	sub	r14, r31
    9afa:	f1 08       	sbc	r15, r1
    9afc:	bc 9c       	mul	r11, r12
    9afe:	f0 01       	movw	r30, r0
    9b00:	bd 9c       	mul	r11, r13
    9b02:	f0 0d       	add	r31, r0
    9b04:	11 24       	eor	r1, r1
    9b06:	37 97       	sbiw	r30, 0x07	; 7
    9b08:	e2 0f       	add	r30, r18
    9b0a:	f3 1f       	adc	r31, r19
    9b0c:	f7 fc       	sbrc	r15, 7
    9b0e:	1f c0       	rjmp	.+62     	; 0x9b4e <jsmn_parse+0x1f8>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
    9b10:	c1 80       	ldd	r12, Z+1	; 0x01
    9b12:	d2 80       	ldd	r13, Z+2	; 0x02
    9b14:	cd 20       	and	r12, r13
    9b16:	c0 94       	com	r12
    9b18:	a9 f0       	breq	.+42     	; 0x9b44 <jsmn_parse+0x1ee>
    9b1a:	c3 80       	ldd	r12, Z+3	; 0x03
    9b1c:	d4 80       	ldd	r13, Z+4	; 0x04
    9b1e:	af ef       	ldi	r26, 0xFF	; 255
    9b20:	ca 16       	cp	r12, r26
    9b22:	da 06       	cpc	r13, r26
    9b24:	79 f4       	brne	.+30     	; 0x9b44 <jsmn_parse+0x1ee>
						if (token->type != type) {
    9b26:	90 80       	ld	r9, Z
    9b28:	94 12       	cpse	r9, r20
    9b2a:	ee c1       	rjmp	.+988    	; 0x9f08 <jsmn_parse+0x5b2>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
    9b2c:	ad 81       	ldd	r26, Y+5	; 0x05
    9b2e:	be 81       	ldd	r27, Y+6	; 0x06
    9b30:	14 96       	adiw	r26, 0x04	; 4
    9b32:	cd 92       	st	X+, r12
    9b34:	dc 92       	st	X, r13
    9b36:	15 97       	sbiw	r26, 0x05	; 5
						token->end = parser->pos + 1;
    9b38:	ab 81       	ldd	r26, Y+3	; 0x03
    9b3a:	bc 81       	ldd	r27, Y+4	; 0x04
    9b3c:	11 96       	adiw	r26, 0x01	; 1
    9b3e:	a3 83       	std	Z+3, r26	; 0x03
    9b40:	b4 83       	std	Z+4, r27	; 0x04
    9b42:	0a c0       	rjmp	.+20     	; 0x9b58 <jsmn_parse+0x202>
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
    9b44:	b1 e0       	ldi	r27, 0x01	; 1
    9b46:	eb 1a       	sub	r14, r27
    9b48:	f1 08       	sbc	r15, r1
    9b4a:	37 97       	sbiw	r30, 0x07	; 7
    9b4c:	df cf       	rjmp	.-66     	; 0x9b0c <jsmn_parse+0x1b6>
						token->end = parser->pos + 1;
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
    9b4e:	ef ef       	ldi	r30, 0xFF	; 255
    9b50:	ee 16       	cp	r14, r30
    9b52:	fe 06       	cpc	r15, r30
    9b54:	09 f4       	brne	.+2      	; 0x9b58 <jsmn_parse+0x202>
    9b56:	d8 c1       	rjmp	.+944    	; 0x9f08 <jsmn_parse+0x5b2>
    9b58:	be 9c       	mul	r11, r14
    9b5a:	d0 01       	movw	r26, r0
    9b5c:	bf 9c       	mul	r11, r15
    9b5e:	b0 0d       	add	r27, r0
    9b60:	11 24       	eor	r1, r1
    9b62:	a2 0f       	add	r26, r18
    9b64:	b3 1f       	adc	r27, r19
				for (; i >= 0; i--) {
    9b66:	f7 fc       	sbrc	r15, 7
    9b68:	b2 c1       	rjmp	.+868    	; 0x9ece <jsmn_parse+0x578>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
    9b6a:	11 96       	adiw	r26, 0x01	; 1
    9b6c:	ed 91       	ld	r30, X+
    9b6e:	fc 91       	ld	r31, X
    9b70:	12 97       	sbiw	r26, 0x02	; 2
    9b72:	31 96       	adiw	r30, 0x01	; 1
    9b74:	69 f0       	breq	.+26     	; 0x9b90 <jsmn_parse+0x23a>
    9b76:	13 96       	adiw	r26, 0x03	; 3
    9b78:	ed 91       	ld	r30, X+
    9b7a:	fc 91       	ld	r31, X
    9b7c:	14 97       	sbiw	r26, 0x04	; 4
    9b7e:	31 96       	adiw	r30, 0x01	; 1
    9b80:	39 f4       	brne	.+14     	; 0x9b90 <jsmn_parse+0x23a>
						parser->toksuper = i;
    9b82:	ad 81       	ldd	r26, Y+5	; 0x05
    9b84:	be 81       	ldd	r27, Y+6	; 0x06
    9b86:	14 96       	adiw	r26, 0x04	; 4
    9b88:	ed 92       	st	X+, r14
    9b8a:	fc 92       	st	X, r15
    9b8c:	15 97       	sbiw	r26, 0x05	; 5
						break;
    9b8e:	9f c1       	rjmp	.+830    	; 0x9ece <jsmn_parse+0x578>
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
				for (; i >= 0; i--) {
    9b90:	e1 e0       	ldi	r30, 0x01	; 1
    9b92:	ee 1a       	sub	r14, r30
    9b94:	f1 08       	sbc	r15, r1
    9b96:	17 97       	sbiw	r26, 0x07	; 7
    9b98:	e6 cf       	rjmp	.-52     	; 0x9b66 <jsmn_parse+0x210>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
    9b9a:	4c 35       	cpi	r20, 0x5C	; 92
    9b9c:	09 f4       	brne	.+2      	; 0x9ba0 <jsmn_parse+0x24a>
    9b9e:	50 c0       	rjmp	.+160    	; 0x9c40 <jsmn_parse+0x2ea>
	int start = parser->pos;

	parser->pos++;

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    9ba0:	ad 81       	ldd	r26, Y+5	; 0x05
    9ba2:	be 81       	ldd	r27, Y+6	; 0x06
    9ba4:	4d 91       	ld	r20, X+
    9ba6:	5c 91       	ld	r21, X
    9ba8:	11 97       	sbiw	r26, 0x01	; 1
    9baa:	4f 5f       	subi	r20, 0xFF	; 255
    9bac:	5f 4f       	sbci	r21, 0xFF	; 255
    9bae:	4d 93       	st	X+, r20
    9bb0:	5c 93       	st	X, r21
    9bb2:	ed 81       	ldd	r30, Y+5	; 0x05
    9bb4:	fe 81       	ldd	r31, Y+6	; 0x06
    9bb6:	e0 80       	ld	r14, Z
    9bb8:	f1 80       	ldd	r15, Z+1	; 0x01
    9bba:	e2 14       	cp	r14, r2
    9bbc:	f3 04       	cpc	r15, r3
    9bbe:	d8 f4       	brcc	.+54     	; 0x9bf6 <jsmn_parse+0x2a0>
    9bc0:	fb 01       	movw	r30, r22
    9bc2:	ee 0d       	add	r30, r14
    9bc4:	ff 1d       	adc	r31, r15
    9bc6:	40 81       	ld	r20, Z
    9bc8:	44 23       	and	r20, r20
    9bca:	a9 f0       	breq	.+42     	; 0x9bf6 <jsmn_parse+0x2a0>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
    9bcc:	42 32       	cpi	r20, 0x22	; 34
    9bce:	29 f7       	brne	.-54     	; 0x9b9a <jsmn_parse+0x244>
			if (tokens == NULL) {
    9bd0:	21 15       	cp	r18, r1
    9bd2:	31 05       	cpc	r19, r1
    9bd4:	09 f4       	brne	.+2      	; 0x9bd8 <jsmn_parse+0x282>
    9bd6:	5c c1       	rjmp	.+696    	; 0x9e90 <jsmn_parse+0x53a>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    9bd8:	ed 81       	ldd	r30, Y+5	; 0x05
    9bda:	fe 81       	ldd	r31, Y+6	; 0x06
    9bdc:	c2 80       	ldd	r12, Z+2	; 0x02
    9bde:	d3 80       	ldd	r13, Z+3	; 0x03
    9be0:	c6 14       	cp	r12, r6
    9be2:	d7 04       	cpc	r13, r7
    9be4:	78 f0       	brcs	.+30     	; 0x9c04 <jsmn_parse+0x2ae>
			if (tokens == NULL) {
				return 0;
			}
			token = jsmn_alloc_token(parser, tokens, num_tokens);
			if (token == NULL) {
				parser->pos = start;
    9be6:	eb 81       	ldd	r30, Y+3	; 0x03
    9be8:	fc 81       	ldd	r31, Y+4	; 0x04
    9bea:	ad 81       	ldd	r26, Y+5	; 0x05
    9bec:	be 81       	ldd	r27, Y+6	; 0x06
    9bee:	ed 93       	st	X+, r30
    9bf0:	fc 93       	st	X, r31
				return JSMN_ERROR_NOMEM;
    9bf2:	8f ef       	ldi	r24, 0xFF	; 255
    9bf4:	8c c1       	rjmp	.+792    	; 0x9f0e <jsmn_parse+0x5b8>
					parser->pos = start;
					return JSMN_ERROR_INVAL;
			}
		}
	}
	parser->pos = start;
    9bf6:	eb 81       	ldd	r30, Y+3	; 0x03
    9bf8:	fc 81       	ldd	r31, Y+4	; 0x04
    9bfa:	ad 81       	ldd	r26, Y+5	; 0x05
    9bfc:	be 81       	ldd	r27, Y+6	; 0x06
    9bfe:	ed 93       	st	X+, r30
    9c00:	fc 93       	st	X, r31
    9c02:	84 c1       	rjmp	.+776    	; 0x9f0c <jsmn_parse+0x5b6>
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    9c04:	a6 01       	movw	r20, r12
    9c06:	4f 5f       	subi	r20, 0xFF	; 255
    9c08:	5f 4f       	sbci	r21, 0xFF	; 255
    9c0a:	ad 81       	ldd	r26, Y+5	; 0x05
    9c0c:	be 81       	ldd	r27, Y+6	; 0x06
    9c0e:	12 96       	adiw	r26, 0x02	; 2
    9c10:	4d 93       	st	X+, r20
    9c12:	5c 93       	st	X, r21
    9c14:	13 97       	sbiw	r26, 0x03	; 3
    9c16:	bc 9c       	mul	r11, r12
    9c18:	f0 01       	movw	r30, r0
    9c1a:	bd 9c       	mul	r11, r13
    9c1c:	f0 0d       	add	r31, r0
    9c1e:	11 24       	eor	r1, r1
    9c20:	e2 0f       	add	r30, r18
    9c22:	f3 1f       	adc	r31, r19
	tok->start = tok->end = -1;
    9c24:	03 83       	std	Z+3, r16	; 0x03
    9c26:	14 83       	std	Z+4, r17	; 0x04
    9c28:	01 83       	std	Z+1, r16	; 0x01
    9c2a:	12 83       	std	Z+2, r17	; 0x02
	tok->size = 0;
    9c2c:	15 82       	std	Z+5, r1	; 0x05
    9c2e:	16 82       	std	Z+6, r1	; 0x06
		if (c == '\"') {
			if (tokens == NULL) {
				return 0;
			}
			token = jsmn_alloc_token(parser, tokens, num_tokens);
			if (token == NULL) {
    9c30:	30 97       	sbiw	r30, 0x00	; 0
    9c32:	c9 f2       	breq	.-78     	; 0x9be6 <jsmn_parse+0x290>
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    9c34:	50 82       	st	Z, r5
	token->start = start;
    9c36:	81 82       	std	Z+1, r8	; 0x01
    9c38:	92 82       	std	Z+2, r9	; 0x02
	token->end = end;
    9c3a:	e3 82       	std	Z+3, r14	; 0x03
    9c3c:	f4 82       	std	Z+4, r15	; 0x04
    9c3e:	28 c1       	rjmp	.+592    	; 0x9e90 <jsmn_parse+0x53a>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
    9c40:	a7 01       	movw	r20, r14
    9c42:	4f 5f       	subi	r20, 0xFF	; 255
    9c44:	5f 4f       	sbci	r21, 0xFF	; 255
    9c46:	42 15       	cp	r20, r2
    9c48:	53 05       	cpc	r21, r3
    9c4a:	08 f0       	brcs	.+2      	; 0x9c4e <jsmn_parse+0x2f8>
    9c4c:	a9 cf       	rjmp	.-174    	; 0x9ba0 <jsmn_parse+0x24a>
			int i;
			parser->pos++;
    9c4e:	ed 81       	ldd	r30, Y+5	; 0x05
    9c50:	fe 81       	ldd	r31, Y+6	; 0x06
    9c52:	40 83       	st	Z, r20
    9c54:	51 83       	std	Z+1, r21	; 0x01
			switch (js[parser->pos]) {
    9c56:	46 0f       	add	r20, r22
    9c58:	57 1f       	adc	r21, r23
    9c5a:	da 01       	movw	r26, r20
    9c5c:	4c 91       	ld	r20, X
    9c5e:	46 36       	cpi	r20, 0x66	; 102
    9c60:	09 f4       	brne	.+2      	; 0x9c64 <jsmn_parse+0x30e>
    9c62:	9e cf       	rjmp	.-196    	; 0x9ba0 <jsmn_parse+0x24a>
    9c64:	78 f4       	brcc	.+30     	; 0x9c84 <jsmn_parse+0x32e>
    9c66:	4f 32       	cpi	r20, 0x2F	; 47
    9c68:	09 f4       	brne	.+2      	; 0x9c6c <jsmn_parse+0x316>
    9c6a:	9a cf       	rjmp	.-204    	; 0x9ba0 <jsmn_parse+0x24a>
    9c6c:	20 f4       	brcc	.+8      	; 0x9c76 <jsmn_parse+0x320>
    9c6e:	42 32       	cpi	r20, 0x22	; 34
    9c70:	09 f0       	breq	.+2      	; 0x9c74 <jsmn_parse+0x31e>
    9c72:	a5 c0       	rjmp	.+330    	; 0x9dbe <jsmn_parse+0x468>
    9c74:	95 cf       	rjmp	.-214    	; 0x9ba0 <jsmn_parse+0x24a>
    9c76:	4c 35       	cpi	r20, 0x5C	; 92
    9c78:	09 f4       	brne	.+2      	; 0x9c7c <jsmn_parse+0x326>
    9c7a:	92 cf       	rjmp	.-220    	; 0x9ba0 <jsmn_parse+0x24a>
    9c7c:	42 36       	cpi	r20, 0x62	; 98
    9c7e:	09 f0       	breq	.+2      	; 0x9c82 <jsmn_parse+0x32c>
    9c80:	9e c0       	rjmp	.+316    	; 0x9dbe <jsmn_parse+0x468>
    9c82:	8e cf       	rjmp	.-228    	; 0x9ba0 <jsmn_parse+0x24a>
    9c84:	42 37       	cpi	r20, 0x72	; 114
    9c86:	09 f4       	brne	.+2      	; 0x9c8a <jsmn_parse+0x334>
    9c88:	8b cf       	rjmp	.-234    	; 0x9ba0 <jsmn_parse+0x24a>
    9c8a:	20 f4       	brcc	.+8      	; 0x9c94 <jsmn_parse+0x33e>
    9c8c:	4e 36       	cpi	r20, 0x6E	; 110
    9c8e:	09 f0       	breq	.+2      	; 0x9c92 <jsmn_parse+0x33c>
    9c90:	96 c0       	rjmp	.+300    	; 0x9dbe <jsmn_parse+0x468>
    9c92:	86 cf       	rjmp	.-244    	; 0x9ba0 <jsmn_parse+0x24a>
    9c94:	44 37       	cpi	r20, 0x74	; 116
    9c96:	09 f4       	brne	.+2      	; 0x9c9a <jsmn_parse+0x344>
    9c98:	83 cf       	rjmp	.-250    	; 0x9ba0 <jsmn_parse+0x24a>
    9c9a:	45 37       	cpi	r20, 0x75	; 117
    9c9c:	09 f0       	breq	.+2      	; 0x9ca0 <jsmn_parse+0x34a>
    9c9e:	8f c0       	rjmp	.+286    	; 0x9dbe <jsmn_parse+0x468>
				case '\"': case '/' : case '\\' : case 'b' :
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
    9ca0:	b2 e0       	ldi	r27, 0x02	; 2
    9ca2:	eb 0e       	add	r14, r27
    9ca4:	f1 1c       	adc	r15, r1
    9ca6:	ed 81       	ldd	r30, Y+5	; 0x05
    9ca8:	fe 81       	ldd	r31, Y+6	; 0x06
    9caa:	e0 82       	st	Z, r14
    9cac:	f1 82       	std	Z+1, r15	; 0x01
    9cae:	44 e0       	ldi	r20, 0x04	; 4
    9cb0:	50 e0       	ldi	r21, 0x00	; 0
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
    9cb2:	ad 81       	ldd	r26, Y+5	; 0x05
    9cb4:	be 81       	ldd	r27, Y+6	; 0x06
    9cb6:	cd 90       	ld	r12, X+
    9cb8:	dc 90       	ld	r13, X
    9cba:	c2 14       	cp	r12, r2
    9cbc:	d3 04       	cpc	r13, r3
    9cbe:	48 f0       	brcs	.+18     	; 0x9cd2 <jsmn_parse+0x37c>
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
					}
					parser->pos--;
    9cc0:	ed 81       	ldd	r30, Y+5	; 0x05
    9cc2:	fe 81       	ldd	r31, Y+6	; 0x06
    9cc4:	40 81       	ld	r20, Z
    9cc6:	51 81       	ldd	r21, Z+1	; 0x01
    9cc8:	41 50       	subi	r20, 0x01	; 1
    9cca:	51 09       	sbc	r21, r1
    9ccc:	40 83       	st	Z, r20
    9cce:	51 83       	std	Z+1, r21	; 0x01
    9cd0:	67 cf       	rjmp	.-306    	; 0x9ba0 <jsmn_parse+0x24a>
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
    9cd2:	fb 01       	movw	r30, r22
    9cd4:	ec 0d       	add	r30, r12
    9cd6:	fd 1d       	adc	r31, r13
    9cd8:	e0 81       	ld	r30, Z
    9cda:	ee 23       	and	r30, r30
    9cdc:	89 f3       	breq	.-30     	; 0x9cc0 <jsmn_parse+0x36a>
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
    9cde:	f0 ed       	ldi	r31, 0xD0	; 208
    9ce0:	fe 0f       	add	r31, r30
    9ce2:	fa 30       	cpi	r31, 0x0A	; 10
    9ce4:	58 f0       	brcs	.+22     	; 0x9cfc <jsmn_parse+0x3a6>
    9ce6:	ef 7d       	andi	r30, 0xDF	; 223
    9ce8:	e1 54       	subi	r30, 0x41	; 65
    9cea:	e6 30       	cpi	r30, 0x06	; 6
    9cec:	38 f0       	brcs	.+14     	; 0x9cfc <jsmn_parse+0x3a6>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
    9cee:	eb 81       	ldd	r30, Y+3	; 0x03
    9cf0:	fc 81       	ldd	r31, Y+4	; 0x04
    9cf2:	ad 81       	ldd	r26, Y+5	; 0x05
    9cf4:	be 81       	ldd	r27, Y+6	; 0x06
    9cf6:	ed 93       	st	X+, r30
    9cf8:	fc 93       	st	X, r31
    9cfa:	06 c1       	rjmp	.+524    	; 0x9f08 <jsmn_parse+0x5b2>
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
    9cfc:	ff ef       	ldi	r31, 0xFF	; 255
    9cfe:	cf 1a       	sub	r12, r31
    9d00:	df 0a       	sbc	r13, r31
    9d02:	ad 81       	ldd	r26, Y+5	; 0x05
    9d04:	be 81       	ldd	r27, Y+6	; 0x06
    9d06:	cd 92       	st	X+, r12
    9d08:	dc 92       	st	X, r13
    9d0a:	41 50       	subi	r20, 0x01	; 1
    9d0c:	51 09       	sbc	r21, r1
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
    9d0e:	41 15       	cp	r20, r1
    9d10:	51 05       	cpc	r21, r1
    9d12:	79 f6       	brne	.-98     	; 0x9cb2 <jsmn_parse+0x35c>
    9d14:	d5 cf       	rjmp	.-86     	; 0x9cc0 <jsmn_parse+0x36a>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
    9d16:	ed 81       	ldd	r30, Y+5	; 0x05
    9d18:	fe 81       	ldd	r31, Y+6	; 0x06
    9d1a:	a2 81       	ldd	r26, Z+2	; 0x02
    9d1c:	b3 81       	ldd	r27, Z+3	; 0x03
    9d1e:	11 97       	sbiw	r26, 0x01	; 1
    9d20:	a4 83       	std	Z+4, r26	; 0x04
    9d22:	b5 83       	std	Z+5, r27	; 0x05
				break;
    9d24:	d4 c0       	rjmp	.+424    	; 0x9ece <jsmn_parse+0x578>
			case ',':
				if (tokens != NULL &&
    9d26:	21 15       	cp	r18, r1
    9d28:	31 05       	cpc	r19, r1
    9d2a:	09 f4       	brne	.+2      	; 0x9d2e <jsmn_parse+0x3d8>
    9d2c:	d0 c0       	rjmp	.+416    	; 0x9ece <jsmn_parse+0x578>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
    9d2e:	ad 81       	ldd	r26, Y+5	; 0x05
    9d30:	be 81       	ldd	r27, Y+6	; 0x06
    9d32:	14 96       	adiw	r26, 0x04	; 4
    9d34:	4d 91       	ld	r20, X+
    9d36:	5c 91       	ld	r21, X
    9d38:	15 97       	sbiw	r26, 0x05	; 5
    9d3a:	b4 9e       	mul	r11, r20
    9d3c:	d0 01       	movw	r26, r0
    9d3e:	b5 9e       	mul	r11, r21
    9d40:	b0 0d       	add	r27, r0
    9d42:	11 24       	eor	r1, r1
    9d44:	a2 0f       	add	r26, r18
    9d46:	b3 1f       	adc	r27, r19
    9d48:	ac 91       	ld	r26, X
    9d4a:	a1 50       	subi	r26, 0x01	; 1
    9d4c:	a2 30       	cpi	r26, 0x02	; 2
    9d4e:	08 f4       	brcc	.+2      	; 0x9d52 <jsmn_parse+0x3fc>
    9d50:	be c0       	rjmp	.+380    	; 0x9ece <jsmn_parse+0x578>
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
    9d52:	ed 81       	ldd	r30, Y+5	; 0x05
    9d54:	fe 81       	ldd	r31, Y+6	; 0x06
    9d56:	e2 80       	ldd	r14, Z+2	; 0x02
    9d58:	f3 80       	ldd	r15, Z+3	; 0x03
    9d5a:	47 01       	movw	r8, r14
    9d5c:	f1 e0       	ldi	r31, 0x01	; 1
    9d5e:	8f 1a       	sub	r8, r31
    9d60:	91 08       	sbc	r9, r1
    9d62:	be 9c       	mul	r11, r14
    9d64:	d0 01       	movw	r26, r0
    9d66:	bf 9c       	mul	r11, r15
    9d68:	b0 0d       	add	r27, r0
    9d6a:	11 24       	eor	r1, r1
    9d6c:	a2 0f       	add	r26, r18
    9d6e:	b3 1f       	adc	r27, r19
    9d70:	04 c0       	rjmp	.+8      	; 0x9d7a <jsmn_parse+0x424>
    9d72:	b1 e0       	ldi	r27, 0x01	; 1
    9d74:	8b 1a       	sub	r8, r27
    9d76:	91 08       	sbc	r9, r1
    9d78:	d6 01       	movw	r26, r12
    9d7a:	97 fc       	sbrc	r9, 7
    9d7c:	a8 c0       	rjmp	.+336    	; 0x9ece <jsmn_parse+0x578>
    9d7e:	6d 01       	movw	r12, r26
    9d80:	47 e0       	ldi	r20, 0x07	; 7
    9d82:	c4 1a       	sub	r12, r20
    9d84:	d1 08       	sbc	r13, r1
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
    9d86:	f6 01       	movw	r30, r12
    9d88:	40 81       	ld	r20, Z
    9d8a:	41 50       	subi	r20, 0x01	; 1
    9d8c:	42 30       	cpi	r20, 0x02	; 2
    9d8e:	88 f7       	brcc	.-30     	; 0x9d72 <jsmn_parse+0x41c>
    9d90:	7d 01       	movw	r14, r26
    9d92:	f6 e0       	ldi	r31, 0x06	; 6
    9d94:	ef 1a       	sub	r14, r31
    9d96:	f1 08       	sbc	r15, r1
							if (tokens[i].start != -1 && tokens[i].end == -1) {
    9d98:	f7 01       	movw	r30, r14
    9d9a:	e0 80       	ld	r14, Z
    9d9c:	f1 80       	ldd	r15, Z+1	; 0x01
    9d9e:	ef 20       	and	r14, r15
    9da0:	e0 94       	com	r14
    9da2:	39 f3       	breq	.-50     	; 0x9d72 <jsmn_parse+0x41c>
    9da4:	14 97       	sbiw	r26, 0x04	; 4
    9da6:	0d 90       	ld	r0, X+
    9da8:	bc 91       	ld	r27, X
    9daa:	a0 2d       	mov	r26, r0
    9dac:	11 96       	adiw	r26, 0x01	; 1
    9dae:	09 f7       	brne	.-62     	; 0x9d72 <jsmn_parse+0x41c>
								parser->toksuper = i;
    9db0:	ad 81       	ldd	r26, Y+5	; 0x05
    9db2:	be 81       	ldd	r27, Y+6	; 0x06
    9db4:	14 96       	adiw	r26, 0x04	; 4
    9db6:	8d 92       	st	X+, r8
    9db8:	9c 92       	st	X, r9
    9dba:	15 97       	sbiw	r26, 0x05	; 5
								break;
    9dbc:	88 c0       	rjmp	.+272    	; 0x9ece <jsmn_parse+0x578>
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
			parser->pos = start;
    9dbe:	eb 80       	ldd	r14, Y+3	; 0x03
    9dc0:	fc 80       	ldd	r15, Y+4	; 0x04
    9dc2:	ed 81       	ldd	r30, Y+5	; 0x05
    9dc4:	fe 81       	ldd	r31, Y+6	; 0x06
    9dc6:	e0 82       	st	Z, r14
    9dc8:	f1 82       	std	Z+1, r15	; 0x01
    9dca:	9e c0       	rjmp	.+316    	; 0x9f08 <jsmn_parse+0x5b2>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    9dcc:	fb 01       	movw	r30, r22
    9dce:	ee 0d       	add	r30, r14
    9dd0:	ff 1d       	adc	r31, r15
    9dd2:	40 81       	ld	r20, Z
    9dd4:	44 23       	and	r20, r20
    9dd6:	31 f1       	breq	.+76     	; 0x9e24 <jsmn_parse+0x4ce>
		switch (js[parser->pos]) {
    9dd8:	40 32       	cpi	r20, 0x20	; 32
    9dda:	21 f1       	breq	.+72     	; 0x9e24 <jsmn_parse+0x4ce>
    9ddc:	c8 f4       	brcc	.+50     	; 0x9e10 <jsmn_parse+0x4ba>
    9dde:	49 30       	cpi	r20, 0x09	; 9
    9de0:	90 f4       	brcc	.+36     	; 0x9e06 <jsmn_parse+0x4b0>
#endif
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
    9de2:	40 52       	subi	r20, 0x20	; 32
    9de4:	4f 35       	cpi	r20, 0x5F	; 95
    9de6:	58 f7       	brcc	.-42     	; 0x9dbe <jsmn_parse+0x468>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    9de8:	4f ef       	ldi	r20, 0xFF	; 255
    9dea:	e4 1a       	sub	r14, r20
    9dec:	f4 0a       	sbc	r15, r20
    9dee:	ad 81       	ldd	r26, Y+5	; 0x05
    9df0:	be 81       	ldd	r27, Y+6	; 0x06
    9df2:	ed 92       	st	X+, r14
    9df4:	fc 92       	st	X, r15
    9df6:	ed 81       	ldd	r30, Y+5	; 0x05
    9df8:	fe 81       	ldd	r31, Y+6	; 0x06
    9dfa:	e0 80       	ld	r14, Z
    9dfc:	f1 80       	ldd	r15, Z+1	; 0x01
    9dfe:	e2 14       	cp	r14, r2
    9e00:	f3 04       	cpc	r15, r3
    9e02:	20 f3       	brcs	.-56     	; 0x9dcc <jsmn_parse+0x476>
    9e04:	0f c0       	rjmp	.+30     	; 0x9e24 <jsmn_parse+0x4ce>
		switch (js[parser->pos]) {
    9e06:	4b 30       	cpi	r20, 0x0B	; 11
    9e08:	68 f0       	brcs	.+26     	; 0x9e24 <jsmn_parse+0x4ce>
    9e0a:	4d 30       	cpi	r20, 0x0D	; 13
    9e0c:	51 f7       	brne	.-44     	; 0x9de2 <jsmn_parse+0x48c>
    9e0e:	0a c0       	rjmp	.+20     	; 0x9e24 <jsmn_parse+0x4ce>
    9e10:	4a 33       	cpi	r20, 0x3A	; 58
    9e12:	41 f0       	breq	.+16     	; 0x9e24 <jsmn_parse+0x4ce>
    9e14:	18 f4       	brcc	.+6      	; 0x9e1c <jsmn_parse+0x4c6>
    9e16:	4c 32       	cpi	r20, 0x2C	; 44
    9e18:	21 f7       	brne	.-56     	; 0x9de2 <jsmn_parse+0x48c>
    9e1a:	04 c0       	rjmp	.+8      	; 0x9e24 <jsmn_parse+0x4ce>
    9e1c:	4d 35       	cpi	r20, 0x5D	; 93
    9e1e:	11 f0       	breq	.+4      	; 0x9e24 <jsmn_parse+0x4ce>
    9e20:	4d 37       	cpi	r20, 0x7D	; 125
    9e22:	f9 f6       	brne	.-66     	; 0x9de2 <jsmn_parse+0x48c>
	parser->pos = start;
	return JSMN_ERROR_PART;
#endif

found:
	if (tokens == NULL) {
    9e24:	21 15       	cp	r18, r1
    9e26:	31 05       	cpc	r19, r1
    9e28:	31 f4       	brne	.+12     	; 0x9e36 <jsmn_parse+0x4e0>
		parser->pos--;
    9e2a:	f1 e0       	ldi	r31, 0x01	; 1
    9e2c:	ef 1a       	sub	r14, r31
    9e2e:	f1 08       	sbc	r15, r1
    9e30:	ad 81       	ldd	r26, Y+5	; 0x05
    9e32:	be 81       	ldd	r27, Y+6	; 0x06
    9e34:	2b c0       	rjmp	.+86     	; 0x9e8c <jsmn_parse+0x536>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    9e36:	ed 81       	ldd	r30, Y+5	; 0x05
    9e38:	fe 81       	ldd	r31, Y+6	; 0x06
    9e3a:	c2 80       	ldd	r12, Z+2	; 0x02
    9e3c:	d3 80       	ldd	r13, Z+3	; 0x03
    9e3e:	c6 14       	cp	r12, r6
    9e40:	d7 04       	cpc	r13, r7
    9e42:	08 f0       	brcs	.+2      	; 0x9e46 <jsmn_parse+0x4f0>
    9e44:	d0 ce       	rjmp	.-608    	; 0x9be6 <jsmn_parse+0x290>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    9e46:	a6 01       	movw	r20, r12
    9e48:	4f 5f       	subi	r20, 0xFF	; 255
    9e4a:	5f 4f       	sbci	r21, 0xFF	; 255
    9e4c:	ad 81       	ldd	r26, Y+5	; 0x05
    9e4e:	be 81       	ldd	r27, Y+6	; 0x06
    9e50:	12 96       	adiw	r26, 0x02	; 2
    9e52:	4d 93       	st	X+, r20
    9e54:	5c 93       	st	X, r21
    9e56:	13 97       	sbiw	r26, 0x03	; 3
    9e58:	bc 9c       	mul	r11, r12
    9e5a:	f0 01       	movw	r30, r0
    9e5c:	bd 9c       	mul	r11, r13
    9e5e:	f0 0d       	add	r31, r0
    9e60:	11 24       	eor	r1, r1
    9e62:	e2 0f       	add	r30, r18
    9e64:	f3 1f       	adc	r31, r19
	tok->start = tok->end = -1;
    9e66:	03 83       	std	Z+3, r16	; 0x03
    9e68:	14 83       	std	Z+4, r17	; 0x04
    9e6a:	01 83       	std	Z+1, r16	; 0x01
    9e6c:	12 83       	std	Z+2, r17	; 0x02
	tok->size = 0;
    9e6e:	15 82       	std	Z+5, r1	; 0x05
    9e70:	16 82       	std	Z+6, r1	; 0x06
	if (tokens == NULL) {
		parser->pos--;
		return 0;
	}
	token = jsmn_alloc_token(parser, tokens, num_tokens);
	if (token == NULL) {
    9e72:	30 97       	sbiw	r30, 0x00	; 0
    9e74:	09 f4       	brne	.+2      	; 0x9e78 <jsmn_parse+0x522>
    9e76:	b7 ce       	rjmp	.-658    	; 0x9be6 <jsmn_parse+0x290>
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    9e78:	10 82       	st	Z, r1
	token->start = start;
    9e7a:	4b 81       	ldd	r20, Y+3	; 0x03
    9e7c:	5c 81       	ldd	r21, Y+4	; 0x04
    9e7e:	41 83       	std	Z+1, r20	; 0x01
    9e80:	52 83       	std	Z+2, r21	; 0x02
	token->end = end;
    9e82:	e3 82       	std	Z+3, r14	; 0x03
    9e84:	f4 82       	std	Z+4, r15	; 0x04
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
#ifdef JSMN_PARENT_LINKS
	token->parent = parser->toksuper;
#endif
	parser->pos--;
    9e86:	51 e0       	ldi	r21, 0x01	; 1
    9e88:	e5 1a       	sub	r14, r21
    9e8a:	f1 08       	sbc	r15, r1
    9e8c:	ed 92       	st	X+, r14
    9e8e:	fc 92       	st	X, r15
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
    9e90:	01 96       	adiw	r24, 0x01	; 1
				if (parser->toksuper != -1 && tokens != NULL)
    9e92:	ad 81       	ldd	r26, Y+5	; 0x05
    9e94:	be 81       	ldd	r27, Y+6	; 0x06
    9e96:	14 96       	adiw	r26, 0x04	; 4
    9e98:	ed 91       	ld	r30, X+
    9e9a:	fc 91       	ld	r31, X
    9e9c:	15 97       	sbiw	r26, 0x05	; 5
    9e9e:	ef 3f       	cpi	r30, 0xFF	; 255
    9ea0:	bf ef       	ldi	r27, 0xFF	; 255
    9ea2:	fb 07       	cpc	r31, r27
    9ea4:	a1 f0       	breq	.+40     	; 0x9ece <jsmn_parse+0x578>
    9ea6:	21 15       	cp	r18, r1
    9ea8:	31 05       	cpc	r19, r1
    9eaa:	89 f0       	breq	.+34     	; 0x9ece <jsmn_parse+0x578>
					tokens[parser->toksuper].size++;
    9eac:	be 9e       	mul	r11, r30
    9eae:	d0 01       	movw	r26, r0
    9eb0:	bf 9e       	mul	r11, r31
    9eb2:	b0 0d       	add	r27, r0
    9eb4:	11 24       	eor	r1, r1
    9eb6:	a2 0f       	add	r26, r18
    9eb8:	b3 1f       	adc	r27, r19
    9eba:	15 96       	adiw	r26, 0x05	; 5
    9ebc:	4d 91       	ld	r20, X+
    9ebe:	5c 91       	ld	r21, X
    9ec0:	16 97       	sbiw	r26, 0x06	; 6
    9ec2:	4f 5f       	subi	r20, 0xFF	; 255
    9ec4:	5f 4f       	sbci	r21, 0xFF	; 255
    9ec6:	15 96       	adiw	r26, 0x05	; 5
    9ec8:	4d 93       	st	X+, r20
    9eca:	5c 93       	st	X, r21
    9ecc:	16 97       	sbiw	r26, 0x06	; 6
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    9ece:	ed 81       	ldd	r30, Y+5	; 0x05
    9ed0:	fe 81       	ldd	r31, Y+6	; 0x06
    9ed2:	a0 81       	ld	r26, Z
    9ed4:	b1 81       	ldd	r27, Z+1	; 0x01
    9ed6:	11 96       	adiw	r26, 0x01	; 1
    9ed8:	a0 83       	st	Z, r26
    9eda:	b1 83       	std	Z+1, r27	; 0x01
    9edc:	5c cd       	rjmp	.-1352   	; 0x9996 <jsmn_parse+0x40>
    9ede:	fa 01       	movw	r30, r20
    9ee0:	36 97       	sbiw	r30, 0x06	; 6
		}
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
		/* Unmatched opened object or array */
		if (tokens[i].start != -1 && tokens[i].end == -1) {
    9ee2:	20 81       	ld	r18, Z
    9ee4:	31 81       	ldd	r19, Z+1	; 0x01
    9ee6:	2f 3f       	cpi	r18, 0xFF	; 255
    9ee8:	3f 4f       	sbci	r19, 0xFF	; 255
    9eea:	39 f4       	brne	.+14     	; 0x9efa <jsmn_parse+0x5a4>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
    9eec:	61 50       	subi	r22, 0x01	; 1
    9eee:	71 09       	sbc	r23, r1
    9ef0:	47 50       	subi	r20, 0x07	; 7
    9ef2:	51 09       	sbc	r21, r1
    9ef4:	77 ff       	sbrs	r23, 7
    9ef6:	f3 cf       	rjmp	.-26     	; 0x9ede <jsmn_parse+0x588>
    9ef8:	0a c0       	rjmp	.+20     	; 0x9f0e <jsmn_parse+0x5b8>
    9efa:	32 96       	adiw	r30, 0x02	; 2
		/* Unmatched opened object or array */
		if (tokens[i].start != -1 && tokens[i].end == -1) {
    9efc:	20 81       	ld	r18, Z
    9efe:	31 81       	ldd	r19, Z+1	; 0x01
    9f00:	2f 3f       	cpi	r18, 0xFF	; 255
    9f02:	3f 4f       	sbci	r19, 0xFF	; 255
    9f04:	99 f7       	brne	.-26     	; 0x9eec <jsmn_parse+0x596>
    9f06:	02 c0       	rjmp	.+4      	; 0x9f0c <jsmn_parse+0x5b6>
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
						if (token->type != type) {
							return JSMN_ERROR_INVAL;
    9f08:	8e ef       	ldi	r24, 0xFE	; 254
    9f0a:	01 c0       	rjmp	.+2      	; 0x9f0e <jsmn_parse+0x5b8>
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
		/* Unmatched opened object or array */
		if (tokens[i].start != -1 && tokens[i].end == -1) {
			return JSMN_ERROR_PART;
    9f0c:	8d ef       	ldi	r24, 0xFD	; 253
		}
	}

	return count;
}
    9f0e:	26 96       	adiw	r28, 0x06	; 6
    9f10:	cd bf       	out	0x3d, r28	; 61
    9f12:	de bf       	out	0x3e, r29	; 62
    9f14:	df 91       	pop	r29
    9f16:	cf 91       	pop	r28
    9f18:	1f 91       	pop	r17
    9f1a:	0f 91       	pop	r16
    9f1c:	ff 90       	pop	r15
    9f1e:	ef 90       	pop	r14
    9f20:	df 90       	pop	r13
    9f22:	cf 90       	pop	r12
    9f24:	bf 90       	pop	r11
    9f26:	9f 90       	pop	r9
    9f28:	8f 90       	pop	r8
    9f2a:	7f 90       	pop	r7
    9f2c:	6f 90       	pop	r6
    9f2e:	5f 90       	pop	r5
    9f30:	3f 90       	pop	r3
    9f32:	2f 90       	pop	r2
    9f34:	08 95       	ret

00009f36 <jsmn_init>:

/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
    9f36:	fc 01       	movw	r30, r24
	parser->pos = 0;
    9f38:	10 82       	st	Z, r1
    9f3a:	11 82       	std	Z+1, r1	; 0x01
	parser->toknext = 0;
    9f3c:	12 82       	std	Z+2, r1	; 0x02
    9f3e:	13 82       	std	Z+3, r1	; 0x03
	parser->toksuper = -1;
    9f40:	8f ef       	ldi	r24, 0xFF	; 255
    9f42:	9f ef       	ldi	r25, 0xFF	; 255
    9f44:	84 83       	std	Z+4, r24	; 0x04
    9f46:	95 83       	std	Z+5, r25	; 0x05
    9f48:	08 95       	ret

00009f4a <json_get_token>:

#include "json_functions.h"

#define JSON_TOKENS 20

void json_get_token(jsmntok_t *tokens, char *js, char *buffer, uint8_t buffer_size, uint8_t i) {
    9f4a:	af 92       	push	r10
    9f4c:	bf 92       	push	r11
    9f4e:	cf 92       	push	r12
    9f50:	df 92       	push	r13
    9f52:	ef 92       	push	r14
    9f54:	ff 92       	push	r15
    9f56:	0f 93       	push	r16
    9f58:	1f 93       	push	r17
    9f5a:	cf 93       	push	r28
    9f5c:	df 93       	push	r29
    9f5e:	cd b7       	in	r28, 0x3d	; 61
    9f60:	de b7       	in	r29, 0x3e	; 62
    9f62:	6a 01       	movw	r12, r20
		memcpy( keyString, &js[ key.start ], len );
		keyString[ len ] = '\0';
		
		strcpy(buffer,keyString);
	}
}
    9f64:	ad b6       	in	r10, 0x3d	; 61
    9f66:	be b6       	in	r11, 0x3e	; 62

void json_get_token(jsmntok_t *tokens, char *js, char *buffer, uint8_t buffer_size, uint8_t i) {
	int len;
	jsmntok_t key;

	key = tokens[i];
    9f68:	dc 01       	movw	r26, r24
    9f6a:	37 e0       	ldi	r19, 0x07	; 7
    9f6c:	03 9f       	mul	r16, r19
    9f6e:	a0 0d       	add	r26, r0
    9f70:	b1 1d       	adc	r27, r1
    9f72:	11 24       	eor	r1, r1
    9f74:	11 96       	adiw	r26, 0x01	; 1
    9f76:	ed 91       	ld	r30, X+
    9f78:	fc 91       	ld	r31, X
    9f7a:	12 97       	sbiw	r26, 0x02	; 2
	len = key.end - key.start;
    9f7c:	13 96       	adiw	r26, 0x03	; 3
    9f7e:	0d 91       	ld	r16, X+
    9f80:	1c 91       	ld	r17, X
    9f82:	14 97       	sbiw	r26, 0x04	; 4
    9f84:	0e 1b       	sub	r16, r30
    9f86:	1f 0b       	sbc	r17, r31
	char keyString[ len+1 ];
    9f88:	c8 01       	movw	r24, r16
    9f8a:	01 96       	adiw	r24, 0x01	; 1
    9f8c:	4d b7       	in	r20, 0x3d	; 61
    9f8e:	5e b7       	in	r21, 0x3e	; 62
    9f90:	48 1b       	sub	r20, r24
    9f92:	59 0b       	sbc	r21, r25
    9f94:	4d bf       	out	0x3d, r20	; 61
    9f96:	5e bf       	out	0x3e, r21	; 62
    9f98:	8d b7       	in	r24, 0x3d	; 61
    9f9a:	9e b7       	in	r25, 0x3e	; 62
    9f9c:	01 96       	adiw	r24, 0x01	; 1
    9f9e:	7c 01       	movw	r14, r24
	if (len < buffer_size) {
    9fa0:	30 e0       	ldi	r19, 0x00	; 0
    9fa2:	02 17       	cp	r16, r18
    9fa4:	13 07       	cpc	r17, r19
    9fa6:	6c f4       	brge	.+26     	; 0x9fc2 <json_get_token+0x78>
		memcpy( keyString, &js[ key.start ], len );
    9fa8:	6e 0f       	add	r22, r30
    9faa:	7f 1f       	adc	r23, r31
    9fac:	a8 01       	movw	r20, r16
    9fae:	0e 94 c9 64 	call	0xc992	; 0xc992 <memcpy>
		keyString[ len ] = '\0';
    9fb2:	f7 01       	movw	r30, r14
    9fb4:	e0 0f       	add	r30, r16
    9fb6:	f1 1f       	adc	r31, r17
    9fb8:	10 82       	st	Z, r1
		
		strcpy(buffer,keyString);
    9fba:	b7 01       	movw	r22, r14
    9fbc:	c6 01       	movw	r24, r12
    9fbe:	0e 94 f8 64 	call	0xc9f0	; 0xc9f0 <strcpy>
	}
}
    9fc2:	ad be       	out	0x3d, r10	; 61
    9fc4:	be be       	out	0x3e, r11	; 62
    9fc6:	df 91       	pop	r29
    9fc8:	cf 91       	pop	r28
    9fca:	1f 91       	pop	r17
    9fcc:	0f 91       	pop	r16
    9fce:	ff 90       	pop	r15
    9fd0:	ef 90       	pop	r14
    9fd2:	df 90       	pop	r13
    9fd4:	cf 90       	pop	r12
    9fd6:	bf 90       	pop	r11
    9fd8:	af 90       	pop	r10
    9fda:	08 95       	ret

00009fdc <itoa_simple>:
	printf("Data successfully sent as client!\r\n");
}

/* Called when error returned trying to sent data */
void ESP8266_Callback_ClientConnectionDataSentError(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
	printf("Error while sending data on connection %d!\r\n", Connection->Number);
    9fdc:	8f 92       	push	r8
    9fde:	9f 92       	push	r9
    9fe0:	af 92       	push	r10
    9fe2:	bf 92       	push	r11
    9fe4:	cf 92       	push	r12
    9fe6:	df 92       	push	r13
    9fe8:	ef 92       	push	r14
    9fea:	ff 92       	push	r15
    9fec:	0f 93       	push	r16
    9fee:	1f 93       	push	r17
    9ff0:	cf 93       	push	r28
    9ff2:	df 93       	push	r29
    9ff4:	8c 01       	movw	r16, r24
    9ff6:	77 fd       	sbrc	r23, 7
    9ff8:	04 c0       	rjmp	.+8      	; 0xa002 <itoa_simple+0x26>
    9ffa:	cb 01       	movw	r24, r22
    9ffc:	ba 01       	movw	r22, r20
    9ffe:	e8 01       	movw	r28, r16
    a000:	0e c0       	rjmp	.+28     	; 0xa01e <itoa_simple+0x42>
    a002:	6a 01       	movw	r12, r20
    a004:	7b 01       	movw	r14, r22
    a006:	66 27       	eor	r22, r22
    a008:	77 27       	eor	r23, r23
    a00a:	cb 01       	movw	r24, r22
    a00c:	6c 19       	sub	r22, r12
    a00e:	7d 09       	sbc	r23, r13
    a010:	8e 09       	sbc	r24, r14
    a012:	9f 09       	sbc	r25, r15
    a014:	e8 01       	movw	r28, r16
    a016:	21 96       	adiw	r28, 0x01	; 1
    a018:	2d e2       	ldi	r18, 0x2D	; 45
    a01a:	f8 01       	movw	r30, r16
    a01c:	20 83       	st	Z, r18
    a01e:	6e 01       	movw	r12, r28
    a020:	2a e0       	ldi	r18, 0x0A	; 10
    a022:	82 2e       	mov	r8, r18
    a024:	91 2c       	mov	r9, r1
    a026:	a1 2c       	mov	r10, r1
    a028:	b1 2c       	mov	r11, r1
    a02a:	76 01       	movw	r14, r12
    a02c:	ff ef       	ldi	r31, 0xFF	; 255
    a02e:	ef 1a       	sub	r14, r31
    a030:	ff 0a       	sbc	r15, r31
    a032:	a5 01       	movw	r20, r10
    a034:	94 01       	movw	r18, r8
    a036:	0e 94 4c 62 	call	0xc498	; 0xc498 <__udivmodsi4>
    a03a:	60 5d       	subi	r22, 0xD0	; 208
    a03c:	f6 01       	movw	r30, r12
    a03e:	60 83       	st	Z, r22
    a040:	b9 01       	movw	r22, r18
    a042:	ca 01       	movw	r24, r20
    a044:	61 15       	cp	r22, r1
    a046:	71 05       	cpc	r23, r1
    a048:	81 05       	cpc	r24, r1
    a04a:	91 05       	cpc	r25, r1
    a04c:	11 f0       	breq	.+4      	; 0xa052 <itoa_simple+0x76>
    a04e:	67 01       	movw	r12, r14
    a050:	ec cf       	rjmp	.-40     	; 0xa02a <itoa_simple+0x4e>
    a052:	d7 01       	movw	r26, r14
    a054:	ac 1b       	sub	r26, r28
    a056:	bd 0b       	sbc	r27, r29
    a058:	cd 01       	movw	r24, r26
    a05a:	01 97       	sbiw	r24, 0x01	; 1
    a05c:	ac 0f       	add	r26, r28
    a05e:	bd 1f       	adc	r27, r29
    a060:	fe 01       	movw	r30, r28
    a062:	9f 01       	movw	r18, r30
    a064:	2c 1b       	sub	r18, r28
    a066:	3d 0b       	sbc	r19, r29
    a068:	28 17       	cp	r18, r24
    a06a:	39 07       	cpc	r19, r25
    a06c:	34 f4       	brge	.+12     	; 0xa07a <itoa_simple+0x9e>
    a06e:	20 81       	ld	r18, Z
    a070:	3e 91       	ld	r19, -X
    a072:	31 93       	st	Z+, r19
    a074:	2c 93       	st	X, r18
    a076:	01 97       	sbiw	r24, 0x01	; 1
    a078:	f4 cf       	rjmp	.-24     	; 0xa062 <itoa_simple+0x86>
    a07a:	c7 01       	movw	r24, r14
    a07c:	80 1b       	sub	r24, r16
    a07e:	91 0b       	sbc	r25, r17
    a080:	df 91       	pop	r29
    a082:	cf 91       	pop	r28
    a084:	1f 91       	pop	r17
    a086:	0f 91       	pop	r16
    a088:	ff 90       	pop	r15
    a08a:	ef 90       	pop	r14
    a08c:	df 90       	pop	r13
    a08e:	cf 90       	pop	r12
    a090:	bf 90       	pop	r11
    a092:	af 90       	pop	r10
    a094:	9f 90       	pop	r9
    a096:	8f 90       	pop	r8
    a098:	08 95       	ret

0000a09a <play_sound>:
    a09a:	cf 93       	push	r28
    a09c:	df 93       	push	r29
    a09e:	cd b7       	in	r28, 0x3d	; 61
    a0a0:	de b7       	in	r29, 0x3e	; 62
    a0a2:	c3 55       	subi	r28, 0x53	; 83
    a0a4:	d2 40       	sbci	r29, 0x02	; 2
    a0a6:	cd bf       	out	0x3d, r28	; 61
    a0a8:	de bf       	out	0x3e, r29	; 62
    a0aa:	40 e0       	ldi	r20, 0x00	; 0
    a0ac:	67 ee       	ldi	r22, 0xE7	; 231
    a0ae:	70 e2       	ldi	r23, 0x20	; 32
    a0b0:	ce 01       	movw	r24, r28
    a0b2:	01 96       	adiw	r24, 0x01	; 1
    a0b4:	0e 94 50 40 	call	0x80a0	; 0x80a0 <f_mount>
    a0b8:	41 e0       	ldi	r20, 0x01	; 1
    a0ba:	68 ec       	ldi	r22, 0xC8	; 200
    a0bc:	78 e2       	ldi	r23, 0x28	; 40
    a0be:	ce 01       	movw	r24, r28
    a0c0:	8d 5c       	subi	r24, 0xCD	; 205
    a0c2:	9d 4f       	sbci	r25, 0xFD	; 253
    a0c4:	0e 94 90 40 	call	0x8120	; 0x8120 <f_open>
    a0c8:	81 11       	cpse	r24, r1
    a0ca:	10 c0       	rjmp	.+32     	; 0xa0ec <play_sound+0x52>
    a0cc:	21 e0       	ldi	r18, 0x01	; 1
    a0ce:	30 e0       	ldi	r19, 0x00	; 0
    a0d0:	ae 01       	movw	r20, r28
    a0d2:	4d 5a       	subi	r20, 0xAD	; 173
    a0d4:	5d 4f       	sbci	r21, 0xFD	; 253
    a0d6:	65 ed       	ldi	r22, 0xD5	; 213
    a0d8:	78 e2       	ldi	r23, 0x28	; 40
    a0da:	ce 01       	movw	r24, r28
    a0dc:	8d 5c       	subi	r24, 0xCD	; 205
    a0de:	9d 4f       	sbci	r25, 0xFD	; 253
    a0e0:	7e d9       	rcall	.-3332   	; 0x93de <load_wav>
    a0e2:	ce 01       	movw	r24, r28
    a0e4:	8d 5c       	subi	r24, 0xCD	; 205
    a0e6:	9d 4f       	sbci	r25, 0xFD	; 253
    a0e8:	0e 94 30 43 	call	0x8660	; 0x8660 <f_close>
    a0ec:	cd 5a       	subi	r28, 0xAD	; 173
    a0ee:	dd 4f       	sbci	r29, 0xFD	; 253
    a0f0:	cd bf       	out	0x3d, r28	; 61
    a0f2:	de bf       	out	0x3e, r29	; 62
    a0f4:	df 91       	pop	r29
    a0f6:	cf 91       	pop	r28
    a0f8:	08 95       	ret

0000a0fa <start_loading>:
    a0fa:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <display_clear_screen>
    a0fe:	e0 e7       	ldi	r30, 0x70	; 112
    a100:	f0 e0       	ldi	r31, 0x00	; 0
    a102:	83 81       	ldd	r24, Z+3	; 0x03
    a104:	8e 7f       	andi	r24, 0xFE	; 254
    a106:	83 83       	std	Z+3, r24	; 0x03
    a108:	e0 e0       	ldi	r30, 0x00	; 0
    a10a:	f8 e0       	ldi	r31, 0x08	; 8
    a10c:	10 a2       	std	Z+32, r1	; 0x20
    a10e:	11 a2       	std	Z+33, r1	; 0x21
    a110:	85 e3       	ldi	r24, 0x35	; 53
    a112:	9c e0       	ldi	r25, 0x0C	; 12
    a114:	86 a3       	std	Z+38, r24	; 0x26
    a116:	97 a3       	std	Z+39, r25	; 0x27
    a118:	27 e0       	ldi	r18, 0x07	; 7
    a11a:	20 83       	st	Z, r18
    a11c:	80 a7       	std	Z+40, r24	; 0x28
    a11e:	91 a7       	std	Z+41, r25	; 0x29
    a120:	87 81       	ldd	r24, Z+7	; 0x07
    a122:	81 60       	ori	r24, 0x01	; 1
    a124:	87 83       	std	Z+7, r24	; 0x07
    a126:	81 81       	ldd	r24, Z+1	; 0x01
    a128:	80 61       	ori	r24, 0x10	; 16
    a12a:	81 83       	std	Z+1, r24	; 0x01
    a12c:	08 95       	ret

0000a12e <stop_loading>:
    a12e:	e0 e0       	ldi	r30, 0x00	; 0
    a130:	f8 e0       	ldi	r31, 0x08	; 8
    a132:	10 82       	st	Z, r1
    a134:	87 81       	ldd	r24, Z+7	; 0x07
    a136:	8e 7f       	andi	r24, 0xFE	; 254
    a138:	87 83       	std	Z+7, r24	; 0x07
    a13a:	81 81       	ldd	r24, Z+1	; 0x01
    a13c:	8f 7e       	andi	r24, 0xEF	; 239
    a13e:	81 83       	std	Z+1, r24	; 0x01
    a140:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <display_clear_screen>
    a144:	e0 e7       	ldi	r30, 0x70	; 112
    a146:	f0 e0       	ldi	r31, 0x00	; 0
    a148:	83 81       	ldd	r24, Z+3	; 0x03
    a14a:	81 60       	ori	r24, 0x01	; 1
    a14c:	83 83       	std	Z+3, r24	; 0x03
    a14e:	08 95       	ret

0000a150 <get_internet_variables>:
    a150:	2f 92       	push	r2
    a152:	3f 92       	push	r3
    a154:	4f 92       	push	r4
    a156:	5f 92       	push	r5
    a158:	6f 92       	push	r6
    a15a:	7f 92       	push	r7
    a15c:	8f 92       	push	r8
    a15e:	9f 92       	push	r9
    a160:	af 92       	push	r10
    a162:	bf 92       	push	r11
    a164:	cf 92       	push	r12
    a166:	df 92       	push	r13
    a168:	ef 92       	push	r14
    a16a:	ff 92       	push	r15
    a16c:	0f 93       	push	r16
    a16e:	1f 93       	push	r17
    a170:	cf 93       	push	r28
    a172:	df 93       	push	r29
    a174:	cd b7       	in	r28, 0x3d	; 61
    a176:	de b7       	in	r29, 0x3e	; 62
    a178:	c1 58       	subi	r28, 0x81	; 129
    a17a:	d1 09       	sbc	r29, r1
    a17c:	cd bf       	out	0x3d, r28	; 61
    a17e:	de bf       	out	0x3e, r29	; 62
    a180:	d8 2e       	mov	r13, r24
    a182:	cf 57       	subi	r28, 0x7F	; 127
    a184:	df 4f       	sbci	r29, 0xFF	; 255
    a186:	68 83       	st	Y, r22
    a188:	c1 58       	subi	r28, 0x81	; 129
    a18a:	d0 40       	sbci	r29, 0x00	; 0
    a18c:	49 ee       	ldi	r20, 0xE9	; 233
    a18e:	5a e3       	ldi	r21, 0x3A	; 58
    a190:	62 e0       	ldi	r22, 0x02	; 2
    a192:	7b e3       	ldi	r23, 0x3B	; 59
    a194:	8b e1       	ldi	r24, 0x1B	; 27
    a196:	9c e3       	ldi	r25, 0x3C	; 60
    a198:	0e 94 33 34 	call	0x6866	; 0x6866 <ESP8266_WifiConnect>
    a19c:	8b e1       	ldi	r24, 0x1B	; 27
    a19e:	9c e3       	ldi	r25, 0x3C	; 60
    a1a0:	0e 94 91 31 	call	0x6322	; 0x6322 <ESP8266_WaitReady>
    a1a4:	8b e1       	ldi	r24, 0x1B	; 27
    a1a6:	9c e3       	ldi	r25, 0x3C	; 60
    a1a8:	0e 94 7a 2e 	call	0x5cf4	; 0x5cf4 <ESP8266_Update>
    a1ac:	00 e0       	ldi	r16, 0x00	; 0
    a1ae:	10 e0       	ldi	r17, 0x00	; 0
    a1b0:	20 e5       	ldi	r18, 0x50	; 80
    a1b2:	30 e0       	ldi	r19, 0x00	; 0
    a1b4:	4a ee       	ldi	r20, 0xEA	; 234
    a1b6:	58 e2       	ldi	r21, 0x28	; 40
    a1b8:	ba 01       	movw	r22, r20
    a1ba:	8b e1       	ldi	r24, 0x1B	; 27
    a1bc:	9c e3       	ldi	r25, 0x3C	; 60
    a1be:	0e 94 78 34 	call	0x68f0	; 0x68f0 <ESP8266_StartClientConnectionTCP>
    a1c2:	81 11       	cpse	r24, r1
    a1c4:	57 c1       	rjmp	.+686    	; 0xa474 <get_internet_variables+0x324>
    a1c6:	e0 91 46 3d 	lds	r30, 0x3D46
    a1ca:	f0 91 47 3d 	lds	r31, 0x3D47
    a1ce:	cf 57       	subi	r28, 0x7F	; 127
    a1d0:	df 4f       	sbci	r29, 0xFF	; 255
    a1d2:	28 81       	ld	r18, Y
    a1d4:	c1 58       	subi	r28, 0x81	; 129
    a1d6:	d0 40       	sbci	r29, 0x00	; 0
    a1d8:	22 23       	and	r18, r18
    a1da:	19 f0       	breq	.+6      	; 0xa1e2 <get_internet_variables+0x92>
    a1dc:	6d ef       	ldi	r22, 0xFD	; 253
    a1de:	78 e2       	ldi	r23, 0x28	; 40
    a1e0:	02 c0       	rjmp	.+4      	; 0xa1e6 <get_internet_variables+0x96>
    a1e2:	6f e1       	ldi	r22, 0x1F	; 31
    a1e4:	79 e2       	ldi	r23, 0x29	; 41
    a1e6:	84 89       	ldd	r24, Z+20	; 0x14
    a1e8:	95 89       	ldd	r25, Z+21	; 0x15
    a1ea:	0e 94 f8 64 	call	0xc9f0	; 0xc9f0 <strcpy>
    a1ee:	e0 91 46 3d 	lds	r30, 0x3D46
    a1f2:	f0 91 47 3d 	lds	r31, 0x3D47
    a1f6:	6c e3       	ldi	r22, 0x3C	; 60
    a1f8:	79 e2       	ldi	r23, 0x29	; 41
    a1fa:	84 89       	ldd	r24, Z+20	; 0x14
    a1fc:	95 89       	ldd	r25, Z+21	; 0x15
    a1fe:	0e 94 d9 64 	call	0xc9b2	; 0xc9b2 <strcat>
    a202:	e0 91 46 3d 	lds	r30, 0x3D46
    a206:	f0 91 47 3d 	lds	r31, 0x3D47
    a20a:	67 e5       	ldi	r22, 0x57	; 87
    a20c:	79 e2       	ldi	r23, 0x29	; 41
    a20e:	84 89       	ldd	r24, Z+20	; 0x14
    a210:	95 89       	ldd	r25, Z+21	; 0x15
    a212:	0e 94 d9 64 	call	0xc9b2	; 0xc9b2 <strcat>
    a216:	e0 91 46 3d 	lds	r30, 0x3D46
    a21a:	f0 91 47 3d 	lds	r31, 0x3D47
    a21e:	65 ee       	ldi	r22, 0xE5	; 229
    a220:	70 e2       	ldi	r23, 0x20	; 32
    a222:	84 89       	ldd	r24, Z+20	; 0x14
    a224:	95 89       	ldd	r25, Z+21	; 0x15
    a226:	0e 94 d9 64 	call	0xc9b2	; 0xc9b2 <strcat>
    a22a:	81 e0       	ldi	r24, 0x01	; 1
    a22c:	80 93 1a 3c 	sts	0x3C1A, r24
    a230:	80 91 1a 3c 	lds	r24, 0x3C1A
    a234:	88 23       	and	r24, r24
    a236:	29 f0       	breq	.+10     	; 0xa242 <get_internet_variables+0xf2>
    a238:	8b e1       	ldi	r24, 0x1B	; 27
    a23a:	9c e3       	ldi	r25, 0x3C	; 60
    a23c:	0e 94 7a 2e 	call	0x5cf4	; 0x5cf4 <ESP8266_Update>
    a240:	f7 cf       	rjmp	.-18     	; 0xa230 <get_internet_variables+0xe0>
    a242:	e0 91 46 3d 	lds	r30, 0x3D46
    a246:	f0 91 47 3d 	lds	r31, 0x3D47
    a24a:	6b e7       	ldi	r22, 0x7B	; 123
    a24c:	70 e0       	ldi	r23, 0x00	; 0
    a24e:	84 89       	ldd	r24, Z+20	; 0x14
    a250:	95 89       	ldd	r25, Z+21	; 0x15
    a252:	0e 94 e4 64 	call	0xc9c8	; 0xc9c8 <strchr>
    a256:	7c 01       	movw	r14, r24
    a258:	ce 01       	movw	r24, r28
    a25a:	81 59       	subi	r24, 0x91	; 145
    a25c:	9f 4f       	sbci	r25, 0xFF	; 255
    a25e:	6b de       	rcall	.-810    	; 0x9f36 <jsmn_init>
    a260:	d7 01       	movw	r26, r14
    a262:	0d 90       	ld	r0, X+
    a264:	00 20       	and	r0, r0
    a266:	e9 f7       	brne	.-6      	; 0xa262 <get_internet_variables+0x112>
    a268:	ad 01       	movw	r20, r26
    a26a:	41 50       	subi	r20, 0x01	; 1
    a26c:	51 09       	sbc	r21, r1
    a26e:	4e 19       	sub	r20, r14
    a270:	5f 09       	sbc	r21, r15
    a272:	06 e4       	ldi	r16, 0x46	; 70
    a274:	10 e0       	ldi	r17, 0x00	; 0
    a276:	9e 01       	movw	r18, r28
    a278:	2f 5f       	subi	r18, 0xFF	; 255
    a27a:	3f 4f       	sbci	r19, 0xFF	; 255
    a27c:	b7 01       	movw	r22, r14
    a27e:	ce 01       	movw	r24, r28
    a280:	81 59       	subi	r24, 0x91	; 145
    a282:	9f 4f       	sbci	r25, 0xFF	; 255
    a284:	68 db       	rcall	.-2352   	; 0x9956 <jsmn_parse>
    a286:	87 fd       	sbrc	r24, 7
    a288:	f5 c0       	rjmp	.+490    	; 0xa474 <get_internet_variables+0x324>
    a28a:	dd 20       	and	r13, r13
    a28c:	09 f4       	brne	.+2      	; 0xa290 <get_internet_variables+0x140>
    a28e:	79 c0       	rjmp	.+242    	; 0xa382 <get_internet_variables+0x232>
    a290:	6e 01       	movw	r12, r28
    a292:	b7 e4       	ldi	r27, 0x47	; 71
    a294:	cb 0e       	add	r12, r27
    a296:	d1 1c       	adc	r13, r1
    a298:	02 e0       	ldi	r16, 0x02	; 2
    a29a:	2e e1       	ldi	r18, 0x1E	; 30
    a29c:	a6 01       	movw	r20, r12
    a29e:	b7 01       	movw	r22, r14
    a2a0:	ce 01       	movw	r24, r28
    a2a2:	01 96       	adiw	r24, 0x01	; 1
    a2a4:	52 de       	rcall	.-860    	; 0x9f4a <json_get_token>
    a2a6:	c6 01       	movw	r24, r12
    a2a8:	0e 94 ab 65 	call	0xcb56	; 0xcb56 <puts>
    a2ac:	3e 01       	movw	r6, r28
    a2ae:	e5 e7       	ldi	r30, 0x75	; 117
    a2b0:	6e 0e       	add	r6, r30
    a2b2:	71 1c       	adc	r7, r1
    a2b4:	7f 92       	push	r7
    a2b6:	6f 92       	push	r6
    a2b8:	1e 01       	movw	r2, r28
    a2ba:	f7 e7       	ldi	r31, 0x77	; 119
    a2bc:	2f 0e       	add	r2, r31
    a2be:	31 1c       	adc	r3, r1
    a2c0:	3f 92       	push	r3
    a2c2:	2f 92       	push	r2
    a2c4:	2e 01       	movw	r4, r28
    a2c6:	29 e7       	ldi	r18, 0x79	; 121
    a2c8:	42 0e       	add	r4, r18
    a2ca:	51 1c       	adc	r5, r1
    a2cc:	5f 92       	push	r5
    a2ce:	4f 92       	push	r4
    a2d0:	ce 01       	movw	r24, r28
    a2d2:	8b 59       	subi	r24, 0x9B	; 155
    a2d4:	9f 4f       	sbci	r25, 0xFF	; 255
    a2d6:	9f 93       	push	r25
    a2d8:	8f 93       	push	r24
    a2da:	5e 01       	movw	r10, r28
    a2dc:	3b e7       	ldi	r19, 0x7B	; 123
    a2de:	a3 0e       	add	r10, r19
    a2e0:	b1 1c       	adc	r11, r1
    a2e2:	bf 92       	push	r11
    a2e4:	af 92       	push	r10
    a2e6:	4e 01       	movw	r8, r28
    a2e8:	8d e7       	ldi	r24, 0x7D	; 125
    a2ea:	88 0e       	add	r8, r24
    a2ec:	91 1c       	adc	r9, r1
    a2ee:	9f 92       	push	r9
    a2f0:	8f 92       	push	r8
    a2f2:	8e 01       	movw	r16, r28
    a2f4:	01 58       	subi	r16, 0x81	; 129
    a2f6:	1f 4f       	sbci	r17, 0xFF	; 255
    a2f8:	1f 93       	push	r17
    a2fa:	0f 93       	push	r16
    a2fc:	8b e6       	ldi	r24, 0x6B	; 107
    a2fe:	99 e2       	ldi	r25, 0x29	; 41
    a300:	9f 93       	push	r25
    a302:	8f 93       	push	r24
    a304:	df 92       	push	r13
    a306:	cf 92       	push	r12
    a308:	0e 94 00 66 	call	0xcc00	; 0xcc00 <sscanf>
    a30c:	cd bf       	out	0x3d, r28	; 61
    a30e:	de bf       	out	0x3e, r29	; 62
    a310:	07 97       	sbiw	r24, 0x07	; 7
    a312:	09 f0       	breq	.+2      	; 0xa316 <get_internet_variables+0x1c6>
    a314:	af c0       	rjmp	.+350    	; 0xa474 <get_internet_variables+0x324>
    a316:	f8 01       	movw	r30, r16
    a318:	80 81       	ld	r24, Z
    a31a:	91 81       	ldd	r25, Z+1	; 0x01
    a31c:	80 93 25 3b 	sts	0x3B25, r24
    a320:	90 93 26 3b 	sts	0x3B26, r25
    a324:	d4 01       	movw	r26, r8
    a326:	8c 91       	ld	r24, X
    a328:	80 93 24 3b 	sts	0x3B24, r24
    a32c:	f5 01       	movw	r30, r10
    a32e:	80 81       	ld	r24, Z
    a330:	80 93 21 3b 	sts	0x3B21, r24
    a334:	d2 01       	movw	r26, r4
    a336:	8c 91       	ld	r24, X
    a338:	80 93 20 3b 	sts	0x3B20, r24
    a33c:	f1 01       	movw	r30, r2
    a33e:	80 81       	ld	r24, Z
    a340:	80 93 1f 3b 	sts	0x3B1F, r24
    a344:	d3 01       	movw	r26, r6
    a346:	8c 91       	ld	r24, X
    a348:	11 96       	adiw	r26, 0x01	; 1
    a34a:	9c 91       	ld	r25, X
    a34c:	80 93 1e 3b 	sts	0x3B1E, r24
    a350:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <rtc_update_seconds>
    a354:	f8 01       	movw	r30, r16
    a356:	40 81       	ld	r20, Z
    a358:	51 81       	ldd	r21, Z+1	; 0x01
    a35a:	d4 01       	movw	r26, r8
    a35c:	6c 91       	ld	r22, X
    a35e:	f5 01       	movw	r30, r10
    a360:	80 81       	ld	r24, Z
    a362:	0e 94 af 5b 	call	0xb75e	; 0xb75e <time_get_weekday>
    a366:	80 93 22 3b 	sts	0x3B22, r24
    a36a:	40 91 25 3b 	lds	r20, 0x3B25
    a36e:	50 91 26 3b 	lds	r21, 0x3B26
    a372:	60 91 24 3b 	lds	r22, 0x3B24
    a376:	80 91 21 3b 	lds	r24, 0x3B21
    a37a:	0e 94 14 5c 	call	0xb828	; 0xb828 <time_get_weeknumber>
    a37e:	80 93 23 3b 	sts	0x3B23, r24
    a382:	cf 57       	subi	r28, 0x7F	; 127
    a384:	df 4f       	sbci	r29, 0xFF	; 255
    a386:	f8 81       	ld	r31, Y
    a388:	c1 58       	subi	r28, 0x81	; 129
    a38a:	d0 40       	sbci	r29, 0x00	; 0
    a38c:	ff 23       	and	r31, r31
    a38e:	09 f4       	brne	.+2      	; 0xa392 <get_internet_variables+0x242>
    a390:	6f c0       	rjmp	.+222    	; 0xa470 <get_internet_variables+0x320>
    a392:	6e 01       	movw	r12, r28
    a394:	27 e4       	ldi	r18, 0x47	; 71
    a396:	c2 0e       	add	r12, r18
    a398:	d1 1c       	adc	r13, r1
    a39a:	06 e0       	ldi	r16, 0x06	; 6
    a39c:	2e e1       	ldi	r18, 0x1E	; 30
    a39e:	a6 01       	movw	r20, r12
    a3a0:	b7 01       	movw	r22, r14
    a3a2:	ce 01       	movw	r24, r28
    a3a4:	01 96       	adiw	r24, 0x01	; 1
    a3a6:	d1 dd       	rcall	.-1118   	; 0x9f4a <json_get_token>
    a3a8:	c6 01       	movw	r24, r12
    a3aa:	0e 94 ab 65 	call	0xcb56	; 0xcb56 <puts>
    a3ae:	f6 01       	movw	r30, r12
    a3b0:	01 90       	ld	r0, Z+
    a3b2:	00 20       	and	r0, r0
    a3b4:	e9 f7       	brne	.-6      	; 0xa3b0 <get_internet_variables+0x260>
    a3b6:	31 97       	sbiw	r30, 0x01	; 1
    a3b8:	ec 19       	sub	r30, r12
    a3ba:	fd 09       	sbc	r31, r13
    a3bc:	34 97       	sbiw	r30, 0x04	; 4
    a3be:	08 f0       	brcs	.+2      	; 0xa3c2 <get_internet_variables+0x272>
    a3c0:	59 c0       	rjmp	.+178    	; 0xa474 <get_internet_variables+0x324>
    a3c2:	10 92 a5 3a 	sts	0x3AA5, r1
    a3c6:	10 92 a6 3a 	sts	0x3AA6, r1
    a3ca:	10 92 a7 3a 	sts	0x3AA7, r1
    a3ce:	d6 01       	movw	r26, r12
    a3d0:	0d 90       	ld	r0, X+
    a3d2:	00 20       	and	r0, r0
    a3d4:	e9 f7       	brne	.-6      	; 0xa3d0 <get_internet_variables+0x280>
    a3d6:	ad 01       	movw	r20, r26
    a3d8:	41 50       	subi	r20, 0x01	; 1
    a3da:	51 09       	sbc	r21, r1
    a3dc:	4c 19       	sub	r20, r12
    a3de:	5d 09       	sbc	r21, r13
    a3e0:	b6 01       	movw	r22, r12
    a3e2:	85 ea       	ldi	r24, 0xA5	; 165
    a3e4:	9a e3       	ldi	r25, 0x3A	; 58
    a3e6:	0e 94 0d 65 	call	0xca1a	; 0xca1a <strncpy>
    a3ea:	08 e0       	ldi	r16, 0x08	; 8
    a3ec:	2e e1       	ldi	r18, 0x1E	; 30
    a3ee:	a6 01       	movw	r20, r12
    a3f0:	b7 01       	movw	r22, r14
    a3f2:	ce 01       	movw	r24, r28
    a3f4:	01 96       	adiw	r24, 0x01	; 1
    a3f6:	a9 dd       	rcall	.-1198   	; 0x9f4a <json_get_token>
    a3f8:	c6 01       	movw	r24, r12
    a3fa:	0e 94 ab 65 	call	0xcb56	; 0xcb56 <puts>
    a3fe:	f6 01       	movw	r30, r12
    a400:	01 90       	ld	r0, Z+
    a402:	00 20       	and	r0, r0
    a404:	e9 f7       	brne	.-6      	; 0xa400 <get_internet_variables+0x2b0>
    a406:	31 97       	sbiw	r30, 0x01	; 1
    a408:	ec 19       	sub	r30, r12
    a40a:	fd 09       	sbc	r31, r13
    a40c:	b8 97       	sbiw	r30, 0x28	; 40
    a40e:	90 f5       	brcc	.+100    	; 0xa474 <get_internet_variables+0x324>
    a410:	88 e2       	ldi	r24, 0x28	; 40
    a412:	e8 ea       	ldi	r30, 0xA8	; 168
    a414:	fa e3       	ldi	r31, 0x3A	; 58
    a416:	df 01       	movw	r26, r30
    a418:	1d 92       	st	X+, r1
    a41a:	8a 95       	dec	r24
    a41c:	e9 f7       	brne	.-6      	; 0xa418 <get_internet_variables+0x2c8>
    a41e:	f6 01       	movw	r30, r12
    a420:	01 90       	ld	r0, Z+
    a422:	00 20       	and	r0, r0
    a424:	e9 f7       	brne	.-6      	; 0xa420 <get_internet_variables+0x2d0>
    a426:	af 01       	movw	r20, r30
    a428:	41 50       	subi	r20, 0x01	; 1
    a42a:	51 09       	sbc	r21, r1
    a42c:	4c 19       	sub	r20, r12
    a42e:	5d 09       	sbc	r21, r13
    a430:	b6 01       	movw	r22, r12
    a432:	88 ea       	ldi	r24, 0xA8	; 168
    a434:	9a e3       	ldi	r25, 0x3A	; 58
    a436:	0e 94 0d 65 	call	0xca1a	; 0xca1a <strncpy>
    a43a:	02 e0       	ldi	r16, 0x02	; 2
    a43c:	2e e1       	ldi	r18, 0x1E	; 30
    a43e:	a6 01       	movw	r20, r12
    a440:	b7 01       	movw	r22, r14
    a442:	ce 01       	movw	r24, r28
    a444:	01 96       	adiw	r24, 0x01	; 1
    a446:	81 dd       	rcall	.-1278   	; 0x9f4a <json_get_token>
    a448:	c6 01       	movw	r24, r12
    a44a:	0e 94 ab 65 	call	0xcb56	; 0xcb56 <puts>
    a44e:	d6 01       	movw	r26, r12
    a450:	0d 90       	ld	r0, X+
    a452:	00 20       	and	r0, r0
    a454:	e9 f7       	brne	.-6      	; 0xa450 <get_internet_variables+0x300>
    a456:	ad 01       	movw	r20, r26
    a458:	41 50       	subi	r20, 0x01	; 1
    a45a:	51 09       	sbc	r21, r1
    a45c:	4c 19       	sub	r20, r12
    a45e:	5d 09       	sbc	r21, r13
    a460:	49 31       	cpi	r20, 0x19	; 25
    a462:	51 05       	cpc	r21, r1
    a464:	38 f4       	brcc	.+14     	; 0xa474 <get_internet_variables+0x324>
    a466:	b6 01       	movw	r22, r12
    a468:	80 ed       	ldi	r24, 0xD0	; 208
    a46a:	9a e3       	ldi	r25, 0x3A	; 58
    a46c:	0e 94 0d 65 	call	0xca1a	; 0xca1a <strncpy>
    a470:	81 e0       	ldi	r24, 0x01	; 1
    a472:	01 c0       	rjmp	.+2      	; 0xa476 <get_internet_variables+0x326>
    a474:	80 e0       	ldi	r24, 0x00	; 0
    a476:	cf 57       	subi	r28, 0x7F	; 127
    a478:	df 4f       	sbci	r29, 0xFF	; 255
    a47a:	cd bf       	out	0x3d, r28	; 61
    a47c:	de bf       	out	0x3e, r29	; 62
    a47e:	df 91       	pop	r29
    a480:	cf 91       	pop	r28
    a482:	1f 91       	pop	r17
    a484:	0f 91       	pop	r16
    a486:	ff 90       	pop	r15
    a488:	ef 90       	pop	r14
    a48a:	df 90       	pop	r13
    a48c:	cf 90       	pop	r12
    a48e:	bf 90       	pop	r11
    a490:	af 90       	pop	r10
    a492:	9f 90       	pop	r9
    a494:	8f 90       	pop	r8
    a496:	7f 90       	pop	r7
    a498:	6f 90       	pop	r6
    a49a:	5f 90       	pop	r5
    a49c:	4f 90       	pop	r4
    a49e:	3f 90       	pop	r3
    a4a0:	2f 90       	pop	r2
    a4a2:	08 95       	ret

0000a4a4 <menu_esp8266_setup>:
    a4a4:	0e 94 87 28 	call	0x510e	; 0x510e <ESP8266_On>
    a4a8:	0e 94 a2 28 	call	0x5144	; 0x5144 <ESP8266_TimerStart>
    a4ac:	40 e0       	ldi	r20, 0x00	; 0
    a4ae:	52 ec       	ldi	r21, 0xC2	; 194
    a4b0:	61 e0       	ldi	r22, 0x01	; 1
    a4b2:	70 e0       	ldi	r23, 0x00	; 0
    a4b4:	8b e1       	ldi	r24, 0x1B	; 27
    a4b6:	9c e3       	ldi	r25, 0x3C	; 60
    a4b8:	0e 94 12 33 	call	0x6624	; 0x6624 <ESP8266_Init>
    a4bc:	81 11       	cpse	r24, r1
    a4be:	04 c0       	rjmp	.+8      	; 0xa4c8 <menu_esp8266_setup+0x24>
    a4c0:	0e 94 ba 28 	call	0x5174	; 0x5174 <ESP8266_TimerStop>
    a4c4:	0c 94 99 28 	jmp	0x5132	; 0x5132 <ESP8266_Off>
    a4c8:	08 95       	ret

0000a4ca <menu_draw_temperature_frame>:
    a4ca:	0f 93       	push	r16
    a4cc:	01 e0       	ldi	r16, 0x01	; 1
    a4ce:	21 e0       	ldi	r18, 0x01	; 1
    a4d0:	30 e0       	ldi	r19, 0x00	; 0
    a4d2:	44 e5       	ldi	r20, 0x54	; 84
    a4d4:	6a e0       	ldi	r22, 0x0A	; 10
    a4d6:	70 e0       	ldi	r23, 0x00	; 0
    a4d8:	81 e0       	ldi	r24, 0x01	; 1
    a4da:	90 e0       	ldi	r25, 0x00	; 0
    a4dc:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a4e0:	21 e0       	ldi	r18, 0x01	; 1
    a4e2:	30 e0       	ldi	r19, 0x00	; 0
    a4e4:	45 e4       	ldi	r20, 0x45	; 69
    a4e6:	6a e0       	ldi	r22, 0x0A	; 10
    a4e8:	70 e0       	ldi	r23, 0x00	; 0
    a4ea:	85 e0       	ldi	r24, 0x05	; 5
    a4ec:	90 e0       	ldi	r25, 0x00	; 0
    a4ee:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a4f2:	21 e0       	ldi	r18, 0x01	; 1
    a4f4:	30 e0       	ldi	r19, 0x00	; 0
    a4f6:	4d e4       	ldi	r20, 0x4D	; 77
    a4f8:	6a e0       	ldi	r22, 0x0A	; 10
    a4fa:	70 e0       	ldi	r23, 0x00	; 0
    a4fc:	89 e0       	ldi	r24, 0x09	; 9
    a4fe:	90 e0       	ldi	r25, 0x00	; 0
    a500:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a504:	21 e0       	ldi	r18, 0x01	; 1
    a506:	30 e0       	ldi	r19, 0x00	; 0
    a508:	40 e5       	ldi	r20, 0x50	; 80
    a50a:	6a e0       	ldi	r22, 0x0A	; 10
    a50c:	70 e0       	ldi	r23, 0x00	; 0
    a50e:	8d e0       	ldi	r24, 0x0D	; 13
    a510:	90 e0       	ldi	r25, 0x00	; 0
    a512:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a516:	e5 ea       	ldi	r30, 0xA5	; 165
    a518:	fa e3       	ldi	r31, 0x3A	; 58
    a51a:	01 90       	ld	r0, Z+
    a51c:	00 20       	and	r0, r0
    a51e:	e9 f7       	brne	.-6      	; 0xa51a <menu_draw_temperature_frame+0x50>
    a520:	e6 5a       	subi	r30, 0xA6	; 166
    a522:	fa 43       	sbci	r31, 0x3A	; 58
    a524:	32 97       	sbiw	r30, 0x02	; 2
    a526:	90 f4       	brcc	.+36     	; 0xa54c <menu_draw_temperature_frame+0x82>
    a528:	21 e0       	ldi	r18, 0x01	; 1
    a52a:	30 e0       	ldi	r19, 0x00	; 0
    a52c:	40 91 a5 3a 	lds	r20, 0x3AA5
    a530:	63 e0       	ldi	r22, 0x03	; 3
    a532:	70 e0       	ldi	r23, 0x00	; 0
    a534:	85 e0       	ldi	r24, 0x05	; 5
    a536:	90 e0       	ldi	r25, 0x00	; 0
    a538:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a53c:	21 e0       	ldi	r18, 0x01	; 1
    a53e:	30 e0       	ldi	r19, 0x00	; 0
    a540:	43 e4       	ldi	r20, 0x43	; 67
    a542:	63 e0       	ldi	r22, 0x03	; 3
    a544:	70 e0       	ldi	r23, 0x00	; 0
    a546:	89 e0       	ldi	r24, 0x09	; 9
    a548:	90 e0       	ldi	r25, 0x00	; 0
    a54a:	1c c0       	rjmp	.+56     	; 0xa584 <menu_draw_temperature_frame+0xba>
    a54c:	01 e0       	ldi	r16, 0x01	; 1
    a54e:	21 e0       	ldi	r18, 0x01	; 1
    a550:	30 e0       	ldi	r19, 0x00	; 0
    a552:	40 91 a5 3a 	lds	r20, 0x3AA5
    a556:	63 e0       	ldi	r22, 0x03	; 3
    a558:	70 e0       	ldi	r23, 0x00	; 0
    a55a:	83 e0       	ldi	r24, 0x03	; 3
    a55c:	90 e0       	ldi	r25, 0x00	; 0
    a55e:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a562:	21 e0       	ldi	r18, 0x01	; 1
    a564:	30 e0       	ldi	r19, 0x00	; 0
    a566:	40 91 a6 3a 	lds	r20, 0x3AA6
    a56a:	63 e0       	ldi	r22, 0x03	; 3
    a56c:	70 e0       	ldi	r23, 0x00	; 0
    a56e:	87 e0       	ldi	r24, 0x07	; 7
    a570:	90 e0       	ldi	r25, 0x00	; 0
    a572:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a576:	21 e0       	ldi	r18, 0x01	; 1
    a578:	30 e0       	ldi	r19, 0x00	; 0
    a57a:	43 e4       	ldi	r20, 0x43	; 67
    a57c:	63 e0       	ldi	r22, 0x03	; 3
    a57e:	70 e0       	ldi	r23, 0x00	; 0
    a580:	8b e0       	ldi	r24, 0x0B	; 11
    a582:	90 e0       	ldi	r25, 0x00	; 0
    a584:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a588:	0f 91       	pop	r16
    a58a:	08 95       	ret

0000a58c <menu_draw_date_frame>:
    a58c:	0f 93       	push	r16
    a58e:	cf 93       	push	r28
    a590:	df 93       	push	r29
    a592:	1f 92       	push	r1
    a594:	1f 92       	push	r1
    a596:	cd b7       	in	r28, 0x3d	; 61
    a598:	de b7       	in	r29, 0x3e	; 62
    a59a:	01 e0       	ldi	r16, 0x01	; 1
    a59c:	21 e0       	ldi	r18, 0x01	; 1
    a59e:	30 e0       	ldi	r19, 0x00	; 0
    a5a0:	44 e4       	ldi	r20, 0x44	; 68
    a5a2:	6a e0       	ldi	r22, 0x0A	; 10
    a5a4:	70 e0       	ldi	r23, 0x00	; 0
    a5a6:	81 e0       	ldi	r24, 0x01	; 1
    a5a8:	90 e0       	ldi	r25, 0x00	; 0
    a5aa:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a5ae:	21 e0       	ldi	r18, 0x01	; 1
    a5b0:	30 e0       	ldi	r19, 0x00	; 0
    a5b2:	41 e4       	ldi	r20, 0x41	; 65
    a5b4:	6a e0       	ldi	r22, 0x0A	; 10
    a5b6:	70 e0       	ldi	r23, 0x00	; 0
    a5b8:	85 e0       	ldi	r24, 0x05	; 5
    a5ba:	90 e0       	ldi	r25, 0x00	; 0
    a5bc:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a5c0:	21 e0       	ldi	r18, 0x01	; 1
    a5c2:	30 e0       	ldi	r19, 0x00	; 0
    a5c4:	44 e5       	ldi	r20, 0x54	; 84
    a5c6:	6a e0       	ldi	r22, 0x0A	; 10
    a5c8:	70 e0       	ldi	r23, 0x00	; 0
    a5ca:	89 e0       	ldi	r24, 0x09	; 9
    a5cc:	90 e0       	ldi	r25, 0x00	; 0
    a5ce:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a5d2:	21 e0       	ldi	r18, 0x01	; 1
    a5d4:	30 e0       	ldi	r19, 0x00	; 0
    a5d6:	45 e4       	ldi	r20, 0x45	; 69
    a5d8:	6a e0       	ldi	r22, 0x0A	; 10
    a5da:	70 e0       	ldi	r23, 0x00	; 0
    a5dc:	8d e0       	ldi	r24, 0x0D	; 13
    a5de:	90 e0       	ldi	r25, 0x00	; 0
    a5e0:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a5e4:	40 91 21 3b 	lds	r20, 0x3B21
    a5e8:	50 e0       	ldi	r21, 0x00	; 0
    a5ea:	60 e0       	ldi	r22, 0x00	; 0
    a5ec:	70 e0       	ldi	r23, 0x00	; 0
    a5ee:	ce 01       	movw	r24, r28
    a5f0:	01 96       	adiw	r24, 0x01	; 1
    a5f2:	f4 dc       	rcall	.-1560   	; 0x9fdc <itoa_simple>
    a5f4:	80 91 21 3b 	lds	r24, 0x3B21
    a5f8:	8a 30       	cpi	r24, 0x0A	; 10
    a5fa:	20 f4       	brcc	.+8      	; 0xa604 <menu_draw_date_frame+0x78>
    a5fc:	89 81       	ldd	r24, Y+1	; 0x01
    a5fe:	90 e3       	ldi	r25, 0x30	; 48
    a600:	99 83       	std	Y+1, r25	; 0x01
    a602:	8a 83       	std	Y+2, r24	; 0x02
    a604:	01 e0       	ldi	r16, 0x01	; 1
    a606:	21 e0       	ldi	r18, 0x01	; 1
    a608:	30 e0       	ldi	r19, 0x00	; 0
    a60a:	49 81       	ldd	r20, Y+1	; 0x01
    a60c:	63 e0       	ldi	r22, 0x03	; 3
    a60e:	70 e0       	ldi	r23, 0x00	; 0
    a610:	81 e0       	ldi	r24, 0x01	; 1
    a612:	90 e0       	ldi	r25, 0x00	; 0
    a614:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a618:	21 e0       	ldi	r18, 0x01	; 1
    a61a:	30 e0       	ldi	r19, 0x00	; 0
    a61c:	4a 81       	ldd	r20, Y+2	; 0x02
    a61e:	63 e0       	ldi	r22, 0x03	; 3
    a620:	70 e0       	ldi	r23, 0x00	; 0
    a622:	84 e0       	ldi	r24, 0x04	; 4
    a624:	90 e0       	ldi	r25, 0x00	; 0
    a626:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a62a:	21 e0       	ldi	r18, 0x01	; 1
    a62c:	30 e0       	ldi	r19, 0x00	; 0
    a62e:	4e e2       	ldi	r20, 0x2E	; 46
    a630:	63 e0       	ldi	r22, 0x03	; 3
    a632:	70 e0       	ldi	r23, 0x00	; 0
    a634:	87 e0       	ldi	r24, 0x07	; 7
    a636:	90 e0       	ldi	r25, 0x00	; 0
    a638:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a63c:	40 91 24 3b 	lds	r20, 0x3B24
    a640:	50 e0       	ldi	r21, 0x00	; 0
    a642:	60 e0       	ldi	r22, 0x00	; 0
    a644:	70 e0       	ldi	r23, 0x00	; 0
    a646:	ce 01       	movw	r24, r28
    a648:	01 96       	adiw	r24, 0x01	; 1
    a64a:	c8 dc       	rcall	.-1648   	; 0x9fdc <itoa_simple>
    a64c:	80 91 24 3b 	lds	r24, 0x3B24
    a650:	8a 30       	cpi	r24, 0x0A	; 10
    a652:	20 f4       	brcc	.+8      	; 0xa65c <menu_draw_date_frame+0xd0>
    a654:	89 81       	ldd	r24, Y+1	; 0x01
    a656:	90 e3       	ldi	r25, 0x30	; 48
    a658:	99 83       	std	Y+1, r25	; 0x01
    a65a:	8a 83       	std	Y+2, r24	; 0x02
    a65c:	01 e0       	ldi	r16, 0x01	; 1
    a65e:	21 e0       	ldi	r18, 0x01	; 1
    a660:	30 e0       	ldi	r19, 0x00	; 0
    a662:	49 81       	ldd	r20, Y+1	; 0x01
    a664:	63 e0       	ldi	r22, 0x03	; 3
    a666:	70 e0       	ldi	r23, 0x00	; 0
    a668:	8a e0       	ldi	r24, 0x0A	; 10
    a66a:	90 e0       	ldi	r25, 0x00	; 0
    a66c:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a670:	21 e0       	ldi	r18, 0x01	; 1
    a672:	30 e0       	ldi	r19, 0x00	; 0
    a674:	4a 81       	ldd	r20, Y+2	; 0x02
    a676:	63 e0       	ldi	r22, 0x03	; 3
    a678:	70 e0       	ldi	r23, 0x00	; 0
    a67a:	8d e0       	ldi	r24, 0x0D	; 13
    a67c:	90 e0       	ldi	r25, 0x00	; 0
    a67e:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a682:	0f 90       	pop	r0
    a684:	0f 90       	pop	r0
    a686:	df 91       	pop	r29
    a688:	cf 91       	pop	r28
    a68a:	0f 91       	pop	r16
    a68c:	08 95       	ret

0000a68e <menu_draw_week_frame>:
    a68e:	0f 93       	push	r16
    a690:	cf 93       	push	r28
    a692:	df 93       	push	r29
    a694:	1f 92       	push	r1
    a696:	1f 92       	push	r1
    a698:	cd b7       	in	r28, 0x3d	; 61
    a69a:	de b7       	in	r29, 0x3e	; 62
    a69c:	01 e0       	ldi	r16, 0x01	; 1
    a69e:	21 e0       	ldi	r18, 0x01	; 1
    a6a0:	30 e0       	ldi	r19, 0x00	; 0
    a6a2:	47 e5       	ldi	r20, 0x57	; 87
    a6a4:	6a e0       	ldi	r22, 0x0A	; 10
    a6a6:	70 e0       	ldi	r23, 0x00	; 0
    a6a8:	81 e0       	ldi	r24, 0x01	; 1
    a6aa:	90 e0       	ldi	r25, 0x00	; 0
    a6ac:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a6b0:	21 e0       	ldi	r18, 0x01	; 1
    a6b2:	30 e0       	ldi	r19, 0x00	; 0
    a6b4:	45 e4       	ldi	r20, 0x45	; 69
    a6b6:	6a e0       	ldi	r22, 0x0A	; 10
    a6b8:	70 e0       	ldi	r23, 0x00	; 0
    a6ba:	85 e0       	ldi	r24, 0x05	; 5
    a6bc:	90 e0       	ldi	r25, 0x00	; 0
    a6be:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a6c2:	21 e0       	ldi	r18, 0x01	; 1
    a6c4:	30 e0       	ldi	r19, 0x00	; 0
    a6c6:	45 e4       	ldi	r20, 0x45	; 69
    a6c8:	6a e0       	ldi	r22, 0x0A	; 10
    a6ca:	70 e0       	ldi	r23, 0x00	; 0
    a6cc:	89 e0       	ldi	r24, 0x09	; 9
    a6ce:	90 e0       	ldi	r25, 0x00	; 0
    a6d0:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a6d4:	21 e0       	ldi	r18, 0x01	; 1
    a6d6:	30 e0       	ldi	r19, 0x00	; 0
    a6d8:	4b e4       	ldi	r20, 0x4B	; 75
    a6da:	6a e0       	ldi	r22, 0x0A	; 10
    a6dc:	70 e0       	ldi	r23, 0x00	; 0
    a6de:	8d e0       	ldi	r24, 0x0D	; 13
    a6e0:	90 e0       	ldi	r25, 0x00	; 0
    a6e2:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a6e6:	40 91 23 3b 	lds	r20, 0x3B23
    a6ea:	50 e0       	ldi	r21, 0x00	; 0
    a6ec:	60 e0       	ldi	r22, 0x00	; 0
    a6ee:	70 e0       	ldi	r23, 0x00	; 0
    a6f0:	ce 01       	movw	r24, r28
    a6f2:	01 96       	adiw	r24, 0x01	; 1
    a6f4:	73 dc       	rcall	.-1818   	; 0x9fdc <itoa_simple>
    a6f6:	80 91 23 3b 	lds	r24, 0x3B23
    a6fa:	8a 30       	cpi	r24, 0x0A	; 10
    a6fc:	20 f4       	brcc	.+8      	; 0xa706 <menu_draw_week_frame+0x78>
    a6fe:	89 81       	ldd	r24, Y+1	; 0x01
    a700:	90 e3       	ldi	r25, 0x30	; 48
    a702:	99 83       	std	Y+1, r25	; 0x01
    a704:	8a 83       	std	Y+2, r24	; 0x02
    a706:	01 e0       	ldi	r16, 0x01	; 1
    a708:	21 e0       	ldi	r18, 0x01	; 1
    a70a:	30 e0       	ldi	r19, 0x00	; 0
    a70c:	49 81       	ldd	r20, Y+1	; 0x01
    a70e:	63 e0       	ldi	r22, 0x03	; 3
    a710:	70 e0       	ldi	r23, 0x00	; 0
    a712:	85 e0       	ldi	r24, 0x05	; 5
    a714:	90 e0       	ldi	r25, 0x00	; 0
    a716:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a71a:	21 e0       	ldi	r18, 0x01	; 1
    a71c:	30 e0       	ldi	r19, 0x00	; 0
    a71e:	4a 81       	ldd	r20, Y+2	; 0x02
    a720:	63 e0       	ldi	r22, 0x03	; 3
    a722:	70 e0       	ldi	r23, 0x00	; 0
    a724:	89 e0       	ldi	r24, 0x09	; 9
    a726:	90 e0       	ldi	r25, 0x00	; 0
    a728:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a72c:	0f 90       	pop	r0
    a72e:	0f 90       	pop	r0
    a730:	df 91       	pop	r29
    a732:	cf 91       	pop	r28
    a734:	0f 91       	pop	r16
    a736:	08 95       	ret

0000a738 <menu_draw_weekday_frame>:
    a738:	0f 93       	push	r16
    a73a:	cf 93       	push	r28
    a73c:	df 93       	push	r29
    a73e:	00 d0       	rcall	.+0      	; 0xa740 <menu_draw_weekday_frame+0x8>
    a740:	cd b7       	in	r28, 0x3d	; 61
    a742:	de b7       	in	r29, 0x3e	; 62
    a744:	01 e0       	ldi	r16, 0x01	; 1
    a746:	21 e0       	ldi	r18, 0x01	; 1
    a748:	30 e0       	ldi	r19, 0x00	; 0
    a74a:	47 e5       	ldi	r20, 0x57	; 87
    a74c:	6a e0       	ldi	r22, 0x0A	; 10
    a74e:	70 e0       	ldi	r23, 0x00	; 0
    a750:	81 e0       	ldi	r24, 0x01	; 1
    a752:	90 e0       	ldi	r25, 0x00	; 0
    a754:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a758:	21 e0       	ldi	r18, 0x01	; 1
    a75a:	30 e0       	ldi	r19, 0x00	; 0
    a75c:	44 e4       	ldi	r20, 0x44	; 68
    a75e:	6a e0       	ldi	r22, 0x0A	; 10
    a760:	70 e0       	ldi	r23, 0x00	; 0
    a762:	85 e0       	ldi	r24, 0x05	; 5
    a764:	90 e0       	ldi	r25, 0x00	; 0
    a766:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a76a:	21 e0       	ldi	r18, 0x01	; 1
    a76c:	30 e0       	ldi	r19, 0x00	; 0
    a76e:	41 e4       	ldi	r20, 0x41	; 65
    a770:	6a e0       	ldi	r22, 0x0A	; 10
    a772:	70 e0       	ldi	r23, 0x00	; 0
    a774:	89 e0       	ldi	r24, 0x09	; 9
    a776:	90 e0       	ldi	r25, 0x00	; 0
    a778:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a77c:	21 e0       	ldi	r18, 0x01	; 1
    a77e:	30 e0       	ldi	r19, 0x00	; 0
    a780:	49 e5       	ldi	r20, 0x59	; 89
    a782:	6a e0       	ldi	r22, 0x0A	; 10
    a784:	70 e0       	ldi	r23, 0x00	; 0
    a786:	8d e0       	ldi	r24, 0x0D	; 13
    a788:	90 e0       	ldi	r25, 0x00	; 0
    a78a:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a78e:	80 91 22 3b 	lds	r24, 0x3B22
    a792:	c7 d7       	rcall	.+3982   	; 0xb722 <time_get_day_name>
    a794:	43 e0       	ldi	r20, 0x03	; 3
    a796:	50 e0       	ldi	r21, 0x00	; 0
    a798:	bc 01       	movw	r22, r24
    a79a:	ce 01       	movw	r24, r28
    a79c:	01 96       	adiw	r24, 0x01	; 1
    a79e:	0e 94 0d 65 	call	0xca1a	; 0xca1a <strncpy>
    a7a2:	21 e0       	ldi	r18, 0x01	; 1
    a7a4:	30 e0       	ldi	r19, 0x00	; 0
    a7a6:	49 81       	ldd	r20, Y+1	; 0x01
    a7a8:	63 e0       	ldi	r22, 0x03	; 3
    a7aa:	70 e0       	ldi	r23, 0x00	; 0
    a7ac:	83 e0       	ldi	r24, 0x03	; 3
    a7ae:	90 e0       	ldi	r25, 0x00	; 0
    a7b0:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a7b4:	21 e0       	ldi	r18, 0x01	; 1
    a7b6:	30 e0       	ldi	r19, 0x00	; 0
    a7b8:	4a 81       	ldd	r20, Y+2	; 0x02
    a7ba:	63 e0       	ldi	r22, 0x03	; 3
    a7bc:	70 e0       	ldi	r23, 0x00	; 0
    a7be:	87 e0       	ldi	r24, 0x07	; 7
    a7c0:	90 e0       	ldi	r25, 0x00	; 0
    a7c2:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a7c6:	21 e0       	ldi	r18, 0x01	; 1
    a7c8:	30 e0       	ldi	r19, 0x00	; 0
    a7ca:	4b 81       	ldd	r20, Y+3	; 0x03
    a7cc:	63 e0       	ldi	r22, 0x03	; 3
    a7ce:	70 e0       	ldi	r23, 0x00	; 0
    a7d0:	8b e0       	ldi	r24, 0x0B	; 11
    a7d2:	90 e0       	ldi	r25, 0x00	; 0
    a7d4:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a7d8:	23 96       	adiw	r28, 0x03	; 3
    a7da:	cd bf       	out	0x3d, r28	; 61
    a7dc:	de bf       	out	0x3e, r29	; 62
    a7de:	df 91       	pop	r29
    a7e0:	cf 91       	pop	r28
    a7e2:	0f 91       	pop	r16
    a7e4:	08 95       	ret

0000a7e6 <menu_draw_battery_frame>:
    a7e6:	0f 93       	push	r16
    a7e8:	cf 93       	push	r28
    a7ea:	df 93       	push	r29
    a7ec:	cd b7       	in	r28, 0x3d	; 61
    a7ee:	de b7       	in	r29, 0x3e	; 62
    a7f0:	25 97       	sbiw	r28, 0x05	; 5
    a7f2:	cd bf       	out	0x3d, r28	; 61
    a7f4:	de bf       	out	0x3e, r29	; 62
    a7f6:	01 e0       	ldi	r16, 0x01	; 1
    a7f8:	21 e0       	ldi	r18, 0x01	; 1
    a7fa:	30 e0       	ldi	r19, 0x00	; 0
    a7fc:	42 e4       	ldi	r20, 0x42	; 66
    a7fe:	6a e0       	ldi	r22, 0x0A	; 10
    a800:	70 e0       	ldi	r23, 0x00	; 0
    a802:	81 e0       	ldi	r24, 0x01	; 1
    a804:	90 e0       	ldi	r25, 0x00	; 0
    a806:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a80a:	21 e0       	ldi	r18, 0x01	; 1
    a80c:	30 e0       	ldi	r19, 0x00	; 0
    a80e:	41 e4       	ldi	r20, 0x41	; 65
    a810:	6a e0       	ldi	r22, 0x0A	; 10
    a812:	70 e0       	ldi	r23, 0x00	; 0
    a814:	85 e0       	ldi	r24, 0x05	; 5
    a816:	90 e0       	ldi	r25, 0x00	; 0
    a818:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a81c:	21 e0       	ldi	r18, 0x01	; 1
    a81e:	30 e0       	ldi	r19, 0x00	; 0
    a820:	44 e5       	ldi	r20, 0x54	; 84
    a822:	6a e0       	ldi	r22, 0x0A	; 10
    a824:	70 e0       	ldi	r23, 0x00	; 0
    a826:	89 e0       	ldi	r24, 0x09	; 9
    a828:	90 e0       	ldi	r25, 0x00	; 0
    a82a:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a82e:	21 e0       	ldi	r18, 0x01	; 1
    a830:	30 e0       	ldi	r19, 0x00	; 0
    a832:	44 e5       	ldi	r20, 0x54	; 84
    a834:	6a e0       	ldi	r22, 0x0A	; 10
    a836:	70 e0       	ldi	r23, 0x00	; 0
    a838:	8d e0       	ldi	r24, 0x0D	; 13
    a83a:	90 e0       	ldi	r25, 0x00	; 0
    a83c:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a840:	80 91 08 06 	lds	r24, 0x0608
    a844:	83 ff       	sbrs	r24, 3
    a846:	16 c0       	rjmp	.+44     	; 0xa874 <menu_draw_battery_frame+0x8e>
    a848:	21 e0       	ldi	r18, 0x01	; 1
    a84a:	30 e0       	ldi	r19, 0x00	; 0
    a84c:	45 e5       	ldi	r20, 0x55	; 85
    a84e:	63 e0       	ldi	r22, 0x03	; 3
    a850:	70 e0       	ldi	r23, 0x00	; 0
    a852:	83 e0       	ldi	r24, 0x03	; 3
    a854:	90 e0       	ldi	r25, 0x00	; 0
    a856:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a85a:	21 e0       	ldi	r18, 0x01	; 1
    a85c:	30 e0       	ldi	r19, 0x00	; 0
    a85e:	43 e5       	ldi	r20, 0x53	; 83
    a860:	63 e0       	ldi	r22, 0x03	; 3
    a862:	70 e0       	ldi	r23, 0x00	; 0
    a864:	87 e0       	ldi	r24, 0x07	; 7
    a866:	90 e0       	ldi	r25, 0x00	; 0
    a868:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a86c:	21 e0       	ldi	r18, 0x01	; 1
    a86e:	30 e0       	ldi	r19, 0x00	; 0
    a870:	42 e4       	ldi	r20, 0x42	; 66
    a872:	1f c0       	rjmp	.+62     	; 0xa8b2 <menu_draw_battery_frame+0xcc>
    a874:	0e 94 80 08 	call	0x1100	; 0x1100 <adc_get_battery_percentage>
    a878:	48 2f       	mov	r20, r24
    a87a:	50 e0       	ldi	r21, 0x00	; 0
    a87c:	60 e0       	ldi	r22, 0x00	; 0
    a87e:	70 e0       	ldi	r23, 0x00	; 0
    a880:	ce 01       	movw	r24, r28
    a882:	01 96       	adiw	r24, 0x01	; 1
    a884:	ab db       	rcall	.-2218   	; 0x9fdc <itoa_simple>
    a886:	01 e0       	ldi	r16, 0x01	; 1
    a888:	21 e0       	ldi	r18, 0x01	; 1
    a88a:	30 e0       	ldi	r19, 0x00	; 0
    a88c:	49 81       	ldd	r20, Y+1	; 0x01
    a88e:	63 e0       	ldi	r22, 0x03	; 3
    a890:	70 e0       	ldi	r23, 0x00	; 0
    a892:	83 e0       	ldi	r24, 0x03	; 3
    a894:	90 e0       	ldi	r25, 0x00	; 0
    a896:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a89a:	21 e0       	ldi	r18, 0x01	; 1
    a89c:	30 e0       	ldi	r19, 0x00	; 0
    a89e:	4a 81       	ldd	r20, Y+2	; 0x02
    a8a0:	63 e0       	ldi	r22, 0x03	; 3
    a8a2:	70 e0       	ldi	r23, 0x00	; 0
    a8a4:	87 e0       	ldi	r24, 0x07	; 7
    a8a6:	90 e0       	ldi	r25, 0x00	; 0
    a8a8:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a8ac:	21 e0       	ldi	r18, 0x01	; 1
    a8ae:	30 e0       	ldi	r19, 0x00	; 0
    a8b0:	45 e2       	ldi	r20, 0x25	; 37
    a8b2:	63 e0       	ldi	r22, 0x03	; 3
    a8b4:	70 e0       	ldi	r23, 0x00	; 0
    a8b6:	8b e0       	ldi	r24, 0x0B	; 11
    a8b8:	90 e0       	ldi	r25, 0x00	; 0
    a8ba:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <display_draw_small_char>
    a8be:	25 96       	adiw	r28, 0x05	; 5
    a8c0:	cd bf       	out	0x3d, r28	; 61
    a8c2:	de bf       	out	0x3e, r29	; 62
    a8c4:	df 91       	pop	r29
    a8c6:	cf 91       	pop	r28
    a8c8:	0f 91       	pop	r16
    a8ca:	08 95       	ret

0000a8cc <menu_draw_config_frame>:
    a8cc:	80 e8       	ldi	r24, 0x80	; 128
    a8ce:	99 e2       	ldi	r25, 0x29	; 41
    a8d0:	0c 94 5a 20 	jmp	0x40b4	; 0x40b4 <display_draw_four_letter_word>

0000a8d4 <menu_set_env_variables>:
    a8d4:	ef 92       	push	r14
    a8d6:	ff 92       	push	r15
    a8d8:	0f 93       	push	r16
    a8da:	1f 93       	push	r17
    a8dc:	cf 93       	push	r28
    a8de:	df 93       	push	r29
    a8e0:	49 e1       	ldi	r20, 0x19	; 25
    a8e2:	50 e0       	ldi	r21, 0x00	; 0
    a8e4:	65 e8       	ldi	r22, 0x85	; 133
    a8e6:	79 e2       	ldi	r23, 0x29	; 41
    a8e8:	8c e8       	ldi	r24, 0x8C	; 140
    a8ea:	9a e3       	ldi	r25, 0x3A	; 58
    a8ec:	0e 94 0d 65 	call	0xca1a	; 0xca1a <strncpy>
    a8f0:	81 e0       	ldi	r24, 0x01	; 1
    a8f2:	80 93 7c 3a 	sts	0x3A7C, r24
    a8f6:	10 92 7d 3a 	sts	0x3A7D, r1
    a8fa:	10 92 7f 3a 	sts	0x3A7F, r1
    a8fe:	10 92 88 3a 	sts	0x3A88, r1
    a902:	10 92 89 3a 	sts	0x3A89, r1
    a906:	10 92 8a 3a 	sts	0x3A8A, r1
    a90a:	10 92 8b 3a 	sts	0x3A8B, r1
    a90e:	8a e0       	ldi	r24, 0x0A	; 10
    a910:	ea e8       	ldi	r30, 0x8A	; 138
    a912:	f9 e2       	ldi	r31, 0x29	; 41
    a914:	a9 ee       	ldi	r26, 0xE9	; 233
    a916:	ba e3       	ldi	r27, 0x3A	; 58
    a918:	01 90       	ld	r0, Z+
    a91a:	0d 92       	st	X+, r0
    a91c:	8a 95       	dec	r24
    a91e:	e1 f7       	brne	.-8      	; 0xa918 <menu_set_env_variables+0x44>
    a920:	89 e0       	ldi	r24, 0x09	; 9
    a922:	e5 e9       	ldi	r30, 0x95	; 149
    a924:	f9 e2       	ldi	r31, 0x29	; 41
    a926:	a2 e0       	ldi	r26, 0x02	; 2
    a928:	bb e3       	ldi	r27, 0x3B	; 59
    a92a:	01 90       	ld	r0, Z+
    a92c:	0d 92       	st	X+, r0
    a92e:	8a 95       	dec	r24
    a930:	e1 f7       	brne	.-8      	; 0xa92a <menu_set_env_variables+0x56>
    a932:	80 e3       	ldi	r24, 0x30	; 48
    a934:	80 93 a5 3a 	sts	0x3AA5, r24
    a938:	80 93 d0 3a 	sts	0x3AD0, r24
    a93c:	10 92 1e 3b 	sts	0x3B1E, r1
    a940:	10 92 1f 3b 	sts	0x3B1F, r1
    a944:	10 92 20 3b 	sts	0x3B20, r1
    a948:	c1 e2       	ldi	r28, 0x21	; 33
    a94a:	db e3       	ldi	r29, 0x3B	; 59
    a94c:	83 e0       	ldi	r24, 0x03	; 3
    a94e:	88 83       	st	Y, r24
    a950:	04 e2       	ldi	r16, 0x24	; 36
    a952:	1b e3       	ldi	r17, 0x3B	; 59
    a954:	82 e0       	ldi	r24, 0x02	; 2
    a956:	f8 01       	movw	r30, r16
    a958:	80 83       	st	Z, r24
    a95a:	35 e2       	ldi	r19, 0x25	; 37
    a95c:	e3 2e       	mov	r14, r19
    a95e:	3b e3       	ldi	r19, 0x3B	; 59
    a960:	f3 2e       	mov	r15, r19
    a962:	80 ee       	ldi	r24, 0xE0	; 224
    a964:	97 e0       	ldi	r25, 0x07	; 7
    a966:	f7 01       	movw	r30, r14
    a968:	80 83       	st	Z, r24
    a96a:	91 83       	std	Z+1, r25	; 0x01
    a96c:	40 ee       	ldi	r20, 0xE0	; 224
    a96e:	57 e0       	ldi	r21, 0x07	; 7
    a970:	62 e0       	ldi	r22, 0x02	; 2
    a972:	83 e0       	ldi	r24, 0x03	; 3
    a974:	f4 d6       	rcall	.+3560   	; 0xb75e <time_get_weekday>
    a976:	80 93 22 3b 	sts	0x3B22, r24
    a97a:	f7 01       	movw	r30, r14
    a97c:	40 81       	ld	r20, Z
    a97e:	51 81       	ldd	r21, Z+1	; 0x01
    a980:	f8 01       	movw	r30, r16
    a982:	60 81       	ld	r22, Z
    a984:	88 81       	ld	r24, Y
    a986:	50 d7       	rcall	.+3744   	; 0xb828 <time_get_weeknumber>
    a988:	80 93 23 3b 	sts	0x3B23, r24
    a98c:	10 92 1c 3b 	sts	0x3B1C, r1
    a990:	10 92 1b 3b 	sts	0x3B1B, r1
    a994:	4b ea       	ldi	r20, 0xAB	; 171
    a996:	50 e0       	ldi	r21, 0x00	; 0
    a998:	60 e0       	ldi	r22, 0x00	; 0
    a99a:	70 e0       	ldi	r23, 0x00	; 0
    a99c:	8c e7       	ldi	r24, 0x7C	; 124
    a99e:	9a e3       	ldi	r25, 0x3A	; 58
    a9a0:	df 91       	pop	r29
    a9a2:	cf 91       	pop	r28
    a9a4:	1f 91       	pop	r17
    a9a6:	0f 91       	pop	r16
    a9a8:	ff 90       	pop	r15
    a9aa:	ef 90       	pop	r14
    a9ac:	0c 94 4f 69 	jmp	0xd29e	; 0xd29e <__eewr_block_x128a4u>

0000a9b0 <menu_alarm>:
    a9b0:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <rtc_disable_time_render>
    a9b4:	0e 94 48 21 	call	0x4290	; 0x4290 <display_slide_out_to_bottom>
    a9b8:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <display_fill_screen>
    a9bc:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <display_refresh_screen>
    a9c0:	0e 94 66 1d 	call	0x3acc	; 0x3acc <display_fade_blink>
    a9c4:	0e 94 66 1d 	call	0x3acc	; 0x3acc <display_fade_blink>
    a9c8:	0e 94 66 1d 	call	0x3acc	; 0x3acc <display_fade_blink>
    a9cc:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <display_clear_screen>
    a9d0:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <rtc_enable_time_render>
    a9d4:	0c 94 26 21 	jmp	0x424c	; 0x424c <display_slide_in_from_bottom>

0000a9d8 <menu_configure_brightnesss>:
    a9d8:	0f 93       	push	r16
    a9da:	80 91 7f 3a 	lds	r24, 0x3A7F
    a9de:	0e 94 75 0a 	call	0x14ea	; 0x14ea <ht1632c_set_brightness>
    a9e2:	40 91 7f 3a 	lds	r20, 0x3A7F
    a9e6:	4f 5f       	subi	r20, 0xFF	; 255
    a9e8:	01 e0       	ldi	r16, 0x01	; 1
    a9ea:	22 e0       	ldi	r18, 0x02	; 2
    a9ec:	67 e0       	ldi	r22, 0x07	; 7
    a9ee:	80 e0       	ldi	r24, 0x00	; 0
    a9f0:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <display_draw_filled_rect>
    a9f4:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <display_refresh_screen>
    a9f8:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <btn_check_press>
    a9fc:	80 93 12 3c 	sts	0x3C12, r24
    aa00:	80 91 12 3c 	lds	r24, 0x3C12
    aa04:	82 30       	cpi	r24, 0x02	; 2
    aa06:	09 f4       	brne	.+2      	; 0xaa0a <menu_configure_brightnesss+0x32>
    aa08:	49 c0       	rjmp	.+146    	; 0xaa9c <menu_configure_brightnesss+0xc4>
    aa0a:	18 f4       	brcc	.+6      	; 0xaa12 <menu_configure_brightnesss+0x3a>
    aa0c:	81 30       	cpi	r24, 0x01	; 1
    aa0e:	69 f1       	breq	.+90     	; 0xaa6a <menu_configure_brightnesss+0x92>
    aa10:	4b c0       	rjmp	.+150    	; 0xaaa8 <menu_configure_brightnesss+0xd0>
    aa12:	83 30       	cpi	r24, 0x03	; 3
    aa14:	c9 f1       	breq	.+114    	; 0xaa88 <menu_configure_brightnesss+0xb0>
    aa16:	84 30       	cpi	r24, 0x04	; 4
    aa18:	09 f0       	breq	.+2      	; 0xaa1c <menu_configure_brightnesss+0x44>
    aa1a:	46 c0       	rjmp	.+140    	; 0xaaa8 <menu_configure_brightnesss+0xd0>
    aa1c:	40 91 7f 3a 	lds	r20, 0x3A7F
    aa20:	4f 30       	cpi	r20, 0x0F	; 15
    aa22:	cc f4       	brge	.+50     	; 0xaa56 <menu_configure_brightnesss+0x7e>
    aa24:	4f 5f       	subi	r20, 0xFF	; 255
    aa26:	00 e0       	ldi	r16, 0x00	; 0
    aa28:	22 e0       	ldi	r18, 0x02	; 2
    aa2a:	67 e0       	ldi	r22, 0x07	; 7
    aa2c:	80 e0       	ldi	r24, 0x00	; 0
    aa2e:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <display_draw_filled_rect>
    aa32:	80 91 7f 3a 	lds	r24, 0x3A7F
    aa36:	8f 5f       	subi	r24, 0xFF	; 255
    aa38:	80 93 7f 3a 	sts	0x3A7F, r24
    aa3c:	0e 94 75 0a 	call	0x14ea	; 0x14ea <ht1632c_set_brightness>
    aa40:	40 91 7f 3a 	lds	r20, 0x3A7F
    aa44:	4f 5f       	subi	r20, 0xFF	; 255
    aa46:	01 e0       	ldi	r16, 0x01	; 1
    aa48:	22 e0       	ldi	r18, 0x02	; 2
    aa4a:	67 e0       	ldi	r22, 0x07	; 7
    aa4c:	80 e0       	ldi	r24, 0x00	; 0
    aa4e:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <display_draw_filled_rect>
    aa52:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <display_refresh_screen>
    aa56:	2f ef       	ldi	r18, 0xFF	; 255
    aa58:	83 ec       	ldi	r24, 0xC3	; 195
    aa5a:	99 e0       	ldi	r25, 0x09	; 9
    aa5c:	21 50       	subi	r18, 0x01	; 1
    aa5e:	80 40       	sbci	r24, 0x00	; 0
    aa60:	90 40       	sbci	r25, 0x00	; 0
    aa62:	e1 f7       	brne	.-8      	; 0xaa5c <menu_configure_brightnesss+0x84>
    aa64:	00 c0       	rjmp	.+0      	; 0xaa66 <menu_configure_brightnesss+0x8e>
    aa66:	00 00       	nop
    aa68:	c7 cf       	rjmp	.-114    	; 0xa9f8 <menu_configure_brightnesss+0x20>
    aa6a:	40 91 7f 3a 	lds	r20, 0x3A7F
    aa6e:	14 16       	cp	r1, r20
    aa70:	94 f7       	brge	.-28     	; 0xaa56 <menu_configure_brightnesss+0x7e>
    aa72:	4f 5f       	subi	r20, 0xFF	; 255
    aa74:	00 e0       	ldi	r16, 0x00	; 0
    aa76:	22 e0       	ldi	r18, 0x02	; 2
    aa78:	67 e0       	ldi	r22, 0x07	; 7
    aa7a:	80 e0       	ldi	r24, 0x00	; 0
    aa7c:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <display_draw_filled_rect>
    aa80:	80 91 7f 3a 	lds	r24, 0x3A7F
    aa84:	81 50       	subi	r24, 0x01	; 1
    aa86:	d8 cf       	rjmp	.-80     	; 0xaa38 <menu_configure_brightnesss+0x60>
    aa88:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <display_clear_screen>
    aa8c:	60 e0       	ldi	r22, 0x00	; 0
    aa8e:	8f e9       	ldi	r24, 0x9F	; 159
    aa90:	99 e2       	ldi	r25, 0x29	; 41
    aa92:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <display_print_scrolling_text>
    aa96:	0f 91       	pop	r16
    aa98:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <EEPROM_WriteEnv>
    aa9c:	60 e0       	ldi	r22, 0x00	; 0
    aa9e:	8e ea       	ldi	r24, 0xAE	; 174
    aaa0:	99 e2       	ldi	r25, 0x29	; 41
    aaa2:	0f 91       	pop	r16
    aaa4:	0c 94 7b 1f 	jmp	0x3ef6	; 0x3ef6 <display_print_scrolling_text>
    aaa8:	2f ef       	ldi	r18, 0xFF	; 255
    aaaa:	83 ec       	ldi	r24, 0xC3	; 195
    aaac:	99 e0       	ldi	r25, 0x09	; 9
    aaae:	21 50       	subi	r18, 0x01	; 1
    aab0:	80 40       	sbci	r24, 0x00	; 0
    aab2:	90 40       	sbci	r25, 0x00	; 0
    aab4:	e1 f7       	brne	.-8      	; 0xaaae <menu_configure_brightnesss+0xd6>
    aab6:	00 c0       	rjmp	.+0      	; 0xaab8 <menu_configure_brightnesss+0xe0>
    aab8:	00 00       	nop
    aaba:	10 92 12 3c 	sts	0x3C12, r1
    aabe:	9c cf       	rjmp	.-200    	; 0xa9f8 <menu_configure_brightnesss+0x20>

0000aac0 <menu_set_time>:
    aac0:	0e 94 32 21 	call	0x4264	; 0x4264 <display_slide_out_to_left>
    aac4:	83 eb       	ldi	r24, 0xB3	; 179
    aac6:	99 e2       	ldi	r25, 0x29	; 41
    aac8:	0e 94 83 20 	call	0x4106	; 0x4106 <display_draw_three_letter_word>
    aacc:	0e 94 24 21 	call	0x4248	; 0x4248 <display_slide_in_from_right>
    aad0:	2f ef       	ldi	r18, 0xFF	; 255
    aad2:	87 ea       	ldi	r24, 0xA7	; 167
    aad4:	91 e6       	ldi	r25, 0x61	; 97
    aad6:	21 50       	subi	r18, 0x01	; 1
    aad8:	80 40       	sbci	r24, 0x00	; 0
    aada:	90 40       	sbci	r25, 0x00	; 0
    aadc:	e1 f7       	brne	.-8      	; 0xaad6 <menu_set_time+0x16>
    aade:	00 c0       	rjmp	.+0      	; 0xaae0 <menu_set_time+0x20>
    aae0:	00 00       	nop
    aae2:	0e 94 32 21 	call	0x4264	; 0x4264 <display_slide_out_to_left>
    aae6:	60 91 20 3b 	lds	r22, 0x3B20
    aaea:	85 e0       	ldi	r24, 0x05	; 5
    aaec:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <rtc_update_display>
    aaf0:	0e 94 24 21 	call	0x4248	; 0x4248 <display_slide_in_from_right>
    aaf4:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <btn_check_press>
    aaf8:	80 93 12 3c 	sts	0x3C12, r24
    aafc:	80 91 12 3c 	lds	r24, 0x3C12
    ab00:	82 30       	cpi	r24, 0x02	; 2
    ab02:	09 f4       	brne	.+2      	; 0xab06 <menu_set_time+0x46>
    ab04:	78 c1       	rjmp	.+752    	; 0xadf6 <menu_set_time+0x336>
    ab06:	38 f4       	brcc	.+14     	; 0xab16 <menu_set_time+0x56>
    ab08:	81 30       	cpi	r24, 0x01	; 1
    ab0a:	d9 f5       	brne	.+118    	; 0xab82 <menu_set_time+0xc2>
    ab0c:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <display_clear_buffer>
    ab10:	0e 94 a4 21 	call	0x4348	; 0x4348 <display_draw_and_decrement_hour>
    ab14:	08 c0       	rjmp	.+16     	; 0xab26 <menu_set_time+0x66>
    ab16:	83 30       	cpi	r24, 0x03	; 3
    ab18:	81 f0       	breq	.+32     	; 0xab3a <menu_set_time+0x7a>
    ab1a:	84 30       	cpi	r24, 0x04	; 4
    ab1c:	91 f5       	brne	.+100    	; 0xab82 <menu_set_time+0xc2>
    ab1e:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <display_clear_buffer>
    ab22:	0e 94 94 21 	call	0x4328	; 0x4328 <display_draw_and_increment_hour>
    ab26:	2f ef       	ldi	r18, 0xFF	; 255
    ab28:	89 e6       	ldi	r24, 0x69	; 105
    ab2a:	98 e1       	ldi	r25, 0x18	; 24
    ab2c:	21 50       	subi	r18, 0x01	; 1
    ab2e:	80 40       	sbci	r24, 0x00	; 0
    ab30:	90 40       	sbci	r25, 0x00	; 0
    ab32:	e1 f7       	brne	.-8      	; 0xab2c <menu_set_time+0x6c>
    ab34:	00 c0       	rjmp	.+0      	; 0xab36 <menu_set_time+0x76>
    ab36:	00 00       	nop
    ab38:	dd cf       	rjmp	.-70     	; 0xaaf4 <menu_set_time+0x34>
    ab3a:	2f ef       	ldi	r18, 0xFF	; 255
    ab3c:	89 e6       	ldi	r24, 0x69	; 105
    ab3e:	98 e1       	ldi	r25, 0x18	; 24
    ab40:	21 50       	subi	r18, 0x01	; 1
    ab42:	80 40       	sbci	r24, 0x00	; 0
    ab44:	90 40       	sbci	r25, 0x00	; 0
    ab46:	e1 f7       	brne	.-8      	; 0xab40 <menu_set_time+0x80>
    ab48:	00 c0       	rjmp	.+0      	; 0xab4a <menu_set_time+0x8a>
    ab4a:	00 00       	nop
    ab4c:	0e 94 32 21 	call	0x4264	; 0x4264 <display_slide_out_to_left>
    ab50:	87 eb       	ldi	r24, 0xB7	; 183
    ab52:	99 e2       	ldi	r25, 0x29	; 41
    ab54:	0e 94 83 20 	call	0x4106	; 0x4106 <display_draw_three_letter_word>
    ab58:	0e 94 24 21 	call	0x4248	; 0x4248 <display_slide_in_from_right>
    ab5c:	2f ef       	ldi	r18, 0xFF	; 255
    ab5e:	87 ea       	ldi	r24, 0xA7	; 167
    ab60:	91 e6       	ldi	r25, 0x61	; 97
    ab62:	21 50       	subi	r18, 0x01	; 1
    ab64:	80 40       	sbci	r24, 0x00	; 0
    ab66:	90 40       	sbci	r25, 0x00	; 0
    ab68:	e1 f7       	brne	.-8      	; 0xab62 <menu_set_time+0xa2>
    ab6a:	00 c0       	rjmp	.+0      	; 0xab6c <menu_set_time+0xac>
    ab6c:	00 00       	nop
    ab6e:	0e 94 32 21 	call	0x4264	; 0x4264 <display_slide_out_to_left>
    ab72:	60 91 1f 3b 	lds	r22, 0x3B1F
    ab76:	85 e0       	ldi	r24, 0x05	; 5
    ab78:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <rtc_update_display>
    ab7c:	0e 94 24 21 	call	0x4248	; 0x4248 <display_slide_in_from_right>
    ab80:	17 c0       	rjmp	.+46     	; 0xabb0 <menu_set_time+0xf0>
    ab82:	10 92 12 3c 	sts	0x3C12, r1
    ab86:	b6 cf       	rjmp	.-148    	; 0xaaf4 <menu_set_time+0x34>
    ab88:	83 30       	cpi	r24, 0x03	; 3
    ab8a:	d8 f0       	brcs	.+54     	; 0xabc2 <menu_set_time+0x102>
    ab8c:	83 30       	cpi	r24, 0x03	; 3
    ab8e:	01 f1       	breq	.+64     	; 0xabd0 <menu_set_time+0x110>
    ab90:	84 30       	cpi	r24, 0x04	; 4
    ab92:	09 f0       	breq	.+2      	; 0xab96 <menu_set_time+0xd6>
    ab94:	49 c0       	rjmp	.+146    	; 0xac28 <menu_set_time+0x168>
    ab96:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <display_clear_buffer>
    ab9a:	0e 94 b5 21 	call	0x436a	; 0x436a <display_draw_and_increment_minute>
    ab9e:	2f ef       	ldi	r18, 0xFF	; 255
    aba0:	89 e6       	ldi	r24, 0x69	; 105
    aba2:	98 e1       	ldi	r25, 0x18	; 24
    aba4:	21 50       	subi	r18, 0x01	; 1
    aba6:	80 40       	sbci	r24, 0x00	; 0
    aba8:	90 40       	sbci	r25, 0x00	; 0
    abaa:	e1 f7       	brne	.-8      	; 0xaba4 <menu_set_time+0xe4>
    abac:	00 c0       	rjmp	.+0      	; 0xabae <menu_set_time+0xee>
    abae:	00 00       	nop
    abb0:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <btn_check_press>
    abb4:	80 93 12 3c 	sts	0x3C12, r24
    abb8:	80 91 12 3c 	lds	r24, 0x3C12
    abbc:	82 30       	cpi	r24, 0x02	; 2
    abbe:	21 f7       	brne	.-56     	; 0xab88 <menu_set_time+0xc8>
    abc0:	1a c1       	rjmp	.+564    	; 0xadf6 <menu_set_time+0x336>
    abc2:	81 30       	cpi	r24, 0x01	; 1
    abc4:	89 f5       	brne	.+98     	; 0xac28 <menu_set_time+0x168>
    abc6:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <display_clear_buffer>
    abca:	0e 94 c5 21 	call	0x438a	; 0x438a <display_draw_and_decrement_minute>
    abce:	e7 cf       	rjmp	.-50     	; 0xab9e <menu_set_time+0xde>
    abd0:	2f ef       	ldi	r18, 0xFF	; 255
    abd2:	89 e6       	ldi	r24, 0x69	; 105
    abd4:	98 e1       	ldi	r25, 0x18	; 24
    abd6:	21 50       	subi	r18, 0x01	; 1
    abd8:	80 40       	sbci	r24, 0x00	; 0
    abda:	90 40       	sbci	r25, 0x00	; 0
    abdc:	e1 f7       	brne	.-8      	; 0xabd6 <menu_set_time+0x116>
    abde:	00 c0       	rjmp	.+0      	; 0xabe0 <menu_set_time+0x120>
    abe0:	00 00       	nop
    abe2:	0e 94 32 21 	call	0x4264	; 0x4264 <display_slide_out_to_left>
    abe6:	85 ec       	ldi	r24, 0xC5	; 197
    abe8:	99 e2       	ldi	r25, 0x29	; 41
    abea:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <display_draw_four_letter_word>
    abee:	0e 94 24 21 	call	0x4248	; 0x4248 <display_slide_in_from_right>
    abf2:	2f ef       	ldi	r18, 0xFF	; 255
    abf4:	87 ea       	ldi	r24, 0xA7	; 167
    abf6:	91 e6       	ldi	r25, 0x61	; 97
    abf8:	21 50       	subi	r18, 0x01	; 1
    abfa:	80 40       	sbci	r24, 0x00	; 0
    abfc:	90 40       	sbci	r25, 0x00	; 0
    abfe:	e1 f7       	brne	.-8      	; 0xabf8 <menu_set_time+0x138>
    ac00:	00 c0       	rjmp	.+0      	; 0xac02 <menu_set_time+0x142>
    ac02:	00 00       	nop
    ac04:	0e 94 32 21 	call	0x4264	; 0x4264 <display_slide_out_to_left>
    ac08:	40 91 25 3b 	lds	r20, 0x3B25
    ac0c:	50 91 26 3b 	lds	r21, 0x3B26
    ac10:	60 e0       	ldi	r22, 0x00	; 0
    ac12:	70 e0       	ldi	r23, 0x00	; 0
    ac14:	80 e0       	ldi	r24, 0x00	; 0
    ac16:	90 e0       	ldi	r25, 0x00	; 0
    ac18:	e1 d9       	rcall	.-3134   	; 0x9fdc <itoa_simple>
    ac1a:	80 e0       	ldi	r24, 0x00	; 0
    ac1c:	90 e0       	ldi	r25, 0x00	; 0
    ac1e:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <display_draw_four_letter_word>
    ac22:	0e 94 24 21 	call	0x4248	; 0x4248 <display_slide_in_from_right>
    ac26:	17 c0       	rjmp	.+46     	; 0xac56 <menu_set_time+0x196>
    ac28:	10 92 12 3c 	sts	0x3C12, r1
    ac2c:	c1 cf       	rjmp	.-126    	; 0xabb0 <menu_set_time+0xf0>
    ac2e:	83 30       	cpi	r24, 0x03	; 3
    ac30:	d8 f0       	brcs	.+54     	; 0xac68 <menu_set_time+0x1a8>
    ac32:	83 30       	cpi	r24, 0x03	; 3
    ac34:	01 f1       	breq	.+64     	; 0xac76 <menu_set_time+0x1b6>
    ac36:	84 30       	cpi	r24, 0x04	; 4
    ac38:	09 f0       	breq	.+2      	; 0xac3c <menu_set_time+0x17c>
    ac3a:	41 c0       	rjmp	.+130    	; 0xacbe <menu_set_time+0x1fe>
    ac3c:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <display_clear_buffer>
    ac40:	0e 94 27 22 	call	0x444e	; 0x444e <display_draw_and_increment_year>
    ac44:	2f ef       	ldi	r18, 0xFF	; 255
    ac46:	89 e6       	ldi	r24, 0x69	; 105
    ac48:	98 e1       	ldi	r25, 0x18	; 24
    ac4a:	21 50       	subi	r18, 0x01	; 1
    ac4c:	80 40       	sbci	r24, 0x00	; 0
    ac4e:	90 40       	sbci	r25, 0x00	; 0
    ac50:	e1 f7       	brne	.-8      	; 0xac4a <menu_set_time+0x18a>
    ac52:	00 c0       	rjmp	.+0      	; 0xac54 <menu_set_time+0x194>
    ac54:	00 00       	nop
    ac56:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <btn_check_press>
    ac5a:	80 93 12 3c 	sts	0x3C12, r24
    ac5e:	80 91 12 3c 	lds	r24, 0x3C12
    ac62:	82 30       	cpi	r24, 0x02	; 2
    ac64:	21 f7       	brne	.-56     	; 0xac2e <menu_set_time+0x16e>
    ac66:	c7 c0       	rjmp	.+398    	; 0xadf6 <menu_set_time+0x336>
    ac68:	81 30       	cpi	r24, 0x01	; 1
    ac6a:	49 f5       	brne	.+82     	; 0xacbe <menu_set_time+0x1fe>
    ac6c:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <display_clear_buffer>
    ac70:	0e 94 37 22 	call	0x446e	; 0x446e <display_draw_and_decrement_year>
    ac74:	e7 cf       	rjmp	.-50     	; 0xac44 <menu_set_time+0x184>
    ac76:	2f ef       	ldi	r18, 0xFF	; 255
    ac78:	89 e6       	ldi	r24, 0x69	; 105
    ac7a:	98 e1       	ldi	r25, 0x18	; 24
    ac7c:	21 50       	subi	r18, 0x01	; 1
    ac7e:	80 40       	sbci	r24, 0x00	; 0
    ac80:	90 40       	sbci	r25, 0x00	; 0
    ac82:	e1 f7       	brne	.-8      	; 0xac7c <menu_set_time+0x1bc>
    ac84:	00 c0       	rjmp	.+0      	; 0xac86 <menu_set_time+0x1c6>
    ac86:	00 00       	nop
    ac88:	0e 94 32 21 	call	0x4264	; 0x4264 <display_slide_out_to_left>
    ac8c:	8a ec       	ldi	r24, 0xCA	; 202
    ac8e:	99 e2       	ldi	r25, 0x29	; 41
    ac90:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <display_draw_four_letter_word>
    ac94:	0e 94 24 21 	call	0x4248	; 0x4248 <display_slide_in_from_right>
    ac98:	2f ef       	ldi	r18, 0xFF	; 255
    ac9a:	87 ea       	ldi	r24, 0xA7	; 167
    ac9c:	91 e6       	ldi	r25, 0x61	; 97
    ac9e:	21 50       	subi	r18, 0x01	; 1
    aca0:	80 40       	sbci	r24, 0x00	; 0
    aca2:	90 40       	sbci	r25, 0x00	; 0
    aca4:	e1 f7       	brne	.-8      	; 0xac9e <menu_set_time+0x1de>
    aca6:	00 c0       	rjmp	.+0      	; 0xaca8 <menu_set_time+0x1e8>
    aca8:	00 00       	nop
    acaa:	0e 94 32 21 	call	0x4264	; 0x4264 <display_slide_out_to_left>
    acae:	80 91 24 3b 	lds	r24, 0x3B24
    acb2:	46 d5       	rcall	.+2700   	; 0xb740 <time_get_month_name>
    acb4:	0e 94 83 20 	call	0x4106	; 0x4106 <display_draw_three_letter_word>
    acb8:	0e 94 24 21 	call	0x4248	; 0x4248 <display_slide_in_from_right>
    acbc:	17 c0       	rjmp	.+46     	; 0xacec <menu_set_time+0x22c>
    acbe:	10 92 12 3c 	sts	0x3C12, r1
    acc2:	c9 cf       	rjmp	.-110    	; 0xac56 <menu_set_time+0x196>
    acc4:	83 30       	cpi	r24, 0x03	; 3
    acc6:	d8 f0       	brcs	.+54     	; 0xacfe <menu_set_time+0x23e>
    acc8:	83 30       	cpi	r24, 0x03	; 3
    acca:	01 f1       	breq	.+64     	; 0xad0c <menu_set_time+0x24c>
    accc:	84 30       	cpi	r24, 0x04	; 4
    acce:	09 f0       	breq	.+2      	; 0xacd2 <menu_set_time+0x212>
    acd0:	41 c0       	rjmp	.+130    	; 0xad54 <menu_set_time+0x294>
    acd2:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <display_clear_buffer>
    acd6:	0e 94 0b 22 	call	0x4416	; 0x4416 <display_draw_and_increment_month>
    acda:	2f ef       	ldi	r18, 0xFF	; 255
    acdc:	89 e6       	ldi	r24, 0x69	; 105
    acde:	98 e1       	ldi	r25, 0x18	; 24
    ace0:	21 50       	subi	r18, 0x01	; 1
    ace2:	80 40       	sbci	r24, 0x00	; 0
    ace4:	90 40       	sbci	r25, 0x00	; 0
    ace6:	e1 f7       	brne	.-8      	; 0xace0 <menu_set_time+0x220>
    ace8:	00 c0       	rjmp	.+0      	; 0xacea <menu_set_time+0x22a>
    acea:	00 00       	nop
    acec:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <btn_check_press>
    acf0:	80 93 12 3c 	sts	0x3C12, r24
    acf4:	80 91 12 3c 	lds	r24, 0x3C12
    acf8:	82 30       	cpi	r24, 0x02	; 2
    acfa:	21 f7       	brne	.-56     	; 0xacc4 <menu_set_time+0x204>
    acfc:	7c c0       	rjmp	.+248    	; 0xadf6 <menu_set_time+0x336>
    acfe:	81 30       	cpi	r24, 0x01	; 1
    ad00:	49 f5       	brne	.+82     	; 0xad54 <menu_set_time+0x294>
    ad02:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <display_clear_buffer>
    ad06:	0e 94 19 22 	call	0x4432	; 0x4432 <display_draw_and_decrement_month>
    ad0a:	e7 cf       	rjmp	.-50     	; 0xacda <menu_set_time+0x21a>
    ad0c:	2f ef       	ldi	r18, 0xFF	; 255
    ad0e:	89 e6       	ldi	r24, 0x69	; 105
    ad10:	98 e1       	ldi	r25, 0x18	; 24
    ad12:	21 50       	subi	r18, 0x01	; 1
    ad14:	80 40       	sbci	r24, 0x00	; 0
    ad16:	90 40       	sbci	r25, 0x00	; 0
    ad18:	e1 f7       	brne	.-8      	; 0xad12 <menu_set_time+0x252>
    ad1a:	00 c0       	rjmp	.+0      	; 0xad1c <menu_set_time+0x25c>
    ad1c:	00 00       	nop
    ad1e:	0e 94 32 21 	call	0x4264	; 0x4264 <display_slide_out_to_left>
    ad22:	8f ec       	ldi	r24, 0xCF	; 207
    ad24:	99 e2       	ldi	r25, 0x29	; 41
    ad26:	0e 94 83 20 	call	0x4106	; 0x4106 <display_draw_three_letter_word>
    ad2a:	0e 94 24 21 	call	0x4248	; 0x4248 <display_slide_in_from_right>
    ad2e:	2f ef       	ldi	r18, 0xFF	; 255
    ad30:	87 ea       	ldi	r24, 0xA7	; 167
    ad32:	91 e6       	ldi	r25, 0x61	; 97
    ad34:	21 50       	subi	r18, 0x01	; 1
    ad36:	80 40       	sbci	r24, 0x00	; 0
    ad38:	90 40       	sbci	r25, 0x00	; 0
    ad3a:	e1 f7       	brne	.-8      	; 0xad34 <menu_set_time+0x274>
    ad3c:	00 c0       	rjmp	.+0      	; 0xad3e <menu_set_time+0x27e>
    ad3e:	00 00       	nop
    ad40:	0e 94 32 21 	call	0x4264	; 0x4264 <display_slide_out_to_left>
    ad44:	60 91 21 3b 	lds	r22, 0x3B21
    ad48:	85 e0       	ldi	r24, 0x05	; 5
    ad4a:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <rtc_update_display>
    ad4e:	0e 94 24 21 	call	0x4248	; 0x4248 <display_slide_in_from_right>
    ad52:	17 c0       	rjmp	.+46     	; 0xad82 <menu_set_time+0x2c2>
    ad54:	10 92 12 3c 	sts	0x3C12, r1
    ad58:	c9 cf       	rjmp	.-110    	; 0xacec <menu_set_time+0x22c>
    ad5a:	83 30       	cpi	r24, 0x03	; 3
    ad5c:	d8 f0       	brcs	.+54     	; 0xad94 <menu_set_time+0x2d4>
    ad5e:	83 30       	cpi	r24, 0x03	; 3
    ad60:	01 f1       	breq	.+64     	; 0xada2 <menu_set_time+0x2e2>
    ad62:	84 30       	cpi	r24, 0x04	; 4
    ad64:	09 f0       	breq	.+2      	; 0xad68 <menu_set_time+0x2a8>
    ad66:	50 c0       	rjmp	.+160    	; 0xae08 <menu_set_time+0x348>
    ad68:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <display_clear_buffer>
    ad6c:	0e 94 d6 21 	call	0x43ac	; 0x43ac <display_draw_and_increment_day>
    ad70:	2f ef       	ldi	r18, 0xFF	; 255
    ad72:	89 e6       	ldi	r24, 0x69	; 105
    ad74:	98 e1       	ldi	r25, 0x18	; 24
    ad76:	21 50       	subi	r18, 0x01	; 1
    ad78:	80 40       	sbci	r24, 0x00	; 0
    ad7a:	90 40       	sbci	r25, 0x00	; 0
    ad7c:	e1 f7       	brne	.-8      	; 0xad76 <menu_set_time+0x2b6>
    ad7e:	00 c0       	rjmp	.+0      	; 0xad80 <menu_set_time+0x2c0>
    ad80:	00 00       	nop
    ad82:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <btn_check_press>
    ad86:	80 93 12 3c 	sts	0x3C12, r24
    ad8a:	80 91 12 3c 	lds	r24, 0x3C12
    ad8e:	82 30       	cpi	r24, 0x02	; 2
    ad90:	21 f7       	brne	.-56     	; 0xad5a <menu_set_time+0x29a>
    ad92:	31 c0       	rjmp	.+98     	; 0xadf6 <menu_set_time+0x336>
    ad94:	81 30       	cpi	r24, 0x01	; 1
    ad96:	c1 f5       	brne	.+112    	; 0xae08 <menu_set_time+0x348>
    ad98:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <display_clear_buffer>
    ad9c:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <display_draw_and_decrement_day>
    ada0:	e7 cf       	rjmp	.-50     	; 0xad70 <menu_set_time+0x2b0>
    ada2:	2f ef       	ldi	r18, 0xFF	; 255
    ada4:	89 e6       	ldi	r24, 0x69	; 105
    ada6:	98 e1       	ldi	r25, 0x18	; 24
    ada8:	21 50       	subi	r18, 0x01	; 1
    adaa:	80 40       	sbci	r24, 0x00	; 0
    adac:	90 40       	sbci	r25, 0x00	; 0
    adae:	e1 f7       	brne	.-8      	; 0xada8 <menu_set_time+0x2e8>
    adb0:	00 c0       	rjmp	.+0      	; 0xadb2 <menu_set_time+0x2f2>
    adb2:	00 00       	nop
    adb4:	40 91 25 3b 	lds	r20, 0x3B25
    adb8:	50 91 26 3b 	lds	r21, 0x3B26
    adbc:	60 91 24 3b 	lds	r22, 0x3B24
    adc0:	80 91 21 3b 	lds	r24, 0x3B21
    adc4:	cc d4       	rcall	.+2456   	; 0xb75e <time_get_weekday>
    adc6:	80 93 22 3b 	sts	0x3B22, r24
    adca:	40 91 25 3b 	lds	r20, 0x3B25
    adce:	50 91 26 3b 	lds	r21, 0x3B26
    add2:	60 91 24 3b 	lds	r22, 0x3B24
    add6:	80 91 21 3b 	lds	r24, 0x3B21
    adda:	26 d5       	rcall	.+2636   	; 0xb828 <time_get_weeknumber>
    addc:	80 93 23 3b 	sts	0x3B23, r24
    ade0:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <EEPROM_WriteEnv>
    ade4:	0e 94 48 21 	call	0x4290	; 0x4290 <display_slide_out_to_bottom>
    ade8:	60 e0       	ldi	r22, 0x00	; 0
    adea:	83 ed       	ldi	r24, 0xD3	; 211
    adec:	99 e2       	ldi	r25, 0x29	; 41
    adee:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <display_print_scrolling_text>
    adf2:	81 e0       	ldi	r24, 0x01	; 1
    adf4:	08 95       	ret
    adf6:	0e 94 48 21 	call	0x4290	; 0x4290 <display_slide_out_to_bottom>
    adfa:	60 e0       	ldi	r22, 0x00	; 0
    adfc:	8b eb       	ldi	r24, 0xBB	; 187
    adfe:	99 e2       	ldi	r25, 0x29	; 41
    ae00:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <display_print_scrolling_text>
    ae04:	80 e0       	ldi	r24, 0x00	; 0
    ae06:	08 95       	ret
    ae08:	10 92 12 3c 	sts	0x3C12, r1
    ae0c:	ba cf       	rjmp	.-140    	; 0xad82 <menu_set_time+0x2c2>

0000ae0e <menu_set_alarm>:
    ae0e:	83 eb       	ldi	r24, 0xB3	; 179
    ae10:	99 e2       	ldi	r25, 0x29	; 41
    ae12:	0e 94 83 20 	call	0x4106	; 0x4106 <display_draw_three_letter_word>
    ae16:	0e 94 24 21 	call	0x4248	; 0x4248 <display_slide_in_from_right>
    ae1a:	2f ef       	ldi	r18, 0xFF	; 255
    ae1c:	87 ea       	ldi	r24, 0xA7	; 167
    ae1e:	91 e6       	ldi	r25, 0x61	; 97
    ae20:	21 50       	subi	r18, 0x01	; 1
    ae22:	80 40       	sbci	r24, 0x00	; 0
    ae24:	90 40       	sbci	r25, 0x00	; 0
    ae26:	e1 f7       	brne	.-8      	; 0xae20 <menu_set_alarm+0x12>
    ae28:	00 c0       	rjmp	.+0      	; 0xae2a <menu_set_alarm+0x1c>
    ae2a:	00 00       	nop
    ae2c:	0e 94 32 21 	call	0x4264	; 0x4264 <display_slide_out_to_left>
    ae30:	60 91 1c 3b 	lds	r22, 0x3B1C
    ae34:	85 e0       	ldi	r24, 0x05	; 5
    ae36:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <rtc_update_display>
    ae3a:	0e 94 24 21 	call	0x4248	; 0x4248 <display_slide_in_from_right>
    ae3e:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <btn_check_press>
    ae42:	80 93 12 3c 	sts	0x3C12, r24
    ae46:	80 91 12 3c 	lds	r24, 0x3C12
    ae4a:	82 30       	cpi	r24, 0x02	; 2
    ae4c:	09 f4       	brne	.+2      	; 0xae50 <menu_set_alarm+0x42>
    ae4e:	7b c0       	rjmp	.+246    	; 0xaf46 <menu_set_alarm+0x138>
    ae50:	38 f4       	brcc	.+14     	; 0xae60 <menu_set_alarm+0x52>
    ae52:	81 30       	cpi	r24, 0x01	; 1
    ae54:	d9 f5       	brne	.+118    	; 0xaecc <menu_set_alarm+0xbe>
    ae56:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <display_clear_buffer>
    ae5a:	0e 94 83 21 	call	0x4306	; 0x4306 <display_alarm_decrement_hour>
    ae5e:	08 c0       	rjmp	.+16     	; 0xae70 <menu_set_alarm+0x62>
    ae60:	83 30       	cpi	r24, 0x03	; 3
    ae62:	81 f0       	breq	.+32     	; 0xae84 <menu_set_alarm+0x76>
    ae64:	84 30       	cpi	r24, 0x04	; 4
    ae66:	91 f5       	brne	.+100    	; 0xaecc <menu_set_alarm+0xbe>
    ae68:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <display_clear_buffer>
    ae6c:	0e 94 72 21 	call	0x42e4	; 0x42e4 <display_alarm_increment_hour>
    ae70:	2f ef       	ldi	r18, 0xFF	; 255
    ae72:	85 ea       	ldi	r24, 0xA5	; 165
    ae74:	9e e0       	ldi	r25, 0x0E	; 14
    ae76:	21 50       	subi	r18, 0x01	; 1
    ae78:	80 40       	sbci	r24, 0x00	; 0
    ae7a:	90 40       	sbci	r25, 0x00	; 0
    ae7c:	e1 f7       	brne	.-8      	; 0xae76 <menu_set_alarm+0x68>
    ae7e:	00 c0       	rjmp	.+0      	; 0xae80 <menu_set_alarm+0x72>
    ae80:	00 00       	nop
    ae82:	dd cf       	rjmp	.-70     	; 0xae3e <menu_set_alarm+0x30>
    ae84:	2f ef       	ldi	r18, 0xFF	; 255
    ae86:	89 e6       	ldi	r24, 0x69	; 105
    ae88:	98 e1       	ldi	r25, 0x18	; 24
    ae8a:	21 50       	subi	r18, 0x01	; 1
    ae8c:	80 40       	sbci	r24, 0x00	; 0
    ae8e:	90 40       	sbci	r25, 0x00	; 0
    ae90:	e1 f7       	brne	.-8      	; 0xae8a <menu_set_alarm+0x7c>
    ae92:	00 c0       	rjmp	.+0      	; 0xae94 <menu_set_alarm+0x86>
    ae94:	00 00       	nop
    ae96:	0e 94 32 21 	call	0x4264	; 0x4264 <display_slide_out_to_left>
    ae9a:	87 eb       	ldi	r24, 0xB7	; 183
    ae9c:	99 e2       	ldi	r25, 0x29	; 41
    ae9e:	0e 94 83 20 	call	0x4106	; 0x4106 <display_draw_three_letter_word>
    aea2:	0e 94 24 21 	call	0x4248	; 0x4248 <display_slide_in_from_right>
    aea6:	2f ef       	ldi	r18, 0xFF	; 255
    aea8:	87 ea       	ldi	r24, 0xA7	; 167
    aeaa:	91 e6       	ldi	r25, 0x61	; 97
    aeac:	21 50       	subi	r18, 0x01	; 1
    aeae:	80 40       	sbci	r24, 0x00	; 0
    aeb0:	90 40       	sbci	r25, 0x00	; 0
    aeb2:	e1 f7       	brne	.-8      	; 0xaeac <menu_set_alarm+0x9e>
    aeb4:	00 c0       	rjmp	.+0      	; 0xaeb6 <menu_set_alarm+0xa8>
    aeb6:	00 00       	nop
    aeb8:	0e 94 32 21 	call	0x4264	; 0x4264 <display_slide_out_to_left>
    aebc:	60 91 1b 3b 	lds	r22, 0x3B1B
    aec0:	85 e0       	ldi	r24, 0x05	; 5
    aec2:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <rtc_update_display>
    aec6:	0e 94 24 21 	call	0x4248	; 0x4248 <display_slide_in_from_right>
    aeca:	16 c0       	rjmp	.+44     	; 0xaef8 <menu_set_alarm+0xea>
    aecc:	10 92 12 3c 	sts	0x3C12, r1
    aed0:	b6 cf       	rjmp	.-148    	; 0xae3e <menu_set_alarm+0x30>
    aed2:	83 30       	cpi	r24, 0x03	; 3
    aed4:	d0 f0       	brcs	.+52     	; 0xaf0a <menu_set_alarm+0xfc>
    aed6:	83 30       	cpi	r24, 0x03	; 3
    aed8:	f9 f0       	breq	.+62     	; 0xaf18 <menu_set_alarm+0x10a>
    aeda:	84 30       	cpi	r24, 0x04	; 4
    aedc:	e9 f5       	brne	.+122    	; 0xaf58 <menu_set_alarm+0x14a>
    aede:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <display_clear_buffer>
    aee2:	0e 94 50 21 	call	0x42a0	; 0x42a0 <display_alarm_increment_minute>
    aee6:	2f ef       	ldi	r18, 0xFF	; 255
    aee8:	85 ea       	ldi	r24, 0xA5	; 165
    aeea:	9e e0       	ldi	r25, 0x0E	; 14
    aeec:	21 50       	subi	r18, 0x01	; 1
    aeee:	80 40       	sbci	r24, 0x00	; 0
    aef0:	90 40       	sbci	r25, 0x00	; 0
    aef2:	e1 f7       	brne	.-8      	; 0xaeec <menu_set_alarm+0xde>
    aef4:	00 c0       	rjmp	.+0      	; 0xaef6 <menu_set_alarm+0xe8>
    aef6:	00 00       	nop
    aef8:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <btn_check_press>
    aefc:	80 93 12 3c 	sts	0x3C12, r24
    af00:	80 91 12 3c 	lds	r24, 0x3C12
    af04:	82 30       	cpi	r24, 0x02	; 2
    af06:	29 f7       	brne	.-54     	; 0xaed2 <menu_set_alarm+0xc4>
    af08:	1e c0       	rjmp	.+60     	; 0xaf46 <menu_set_alarm+0x138>
    af0a:	81 30       	cpi	r24, 0x01	; 1
    af0c:	29 f5       	brne	.+74     	; 0xaf58 <menu_set_alarm+0x14a>
    af0e:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <display_clear_buffer>
    af12:	0e 94 61 21 	call	0x42c2	; 0x42c2 <display_alarm_decrement_minute>
    af16:	e7 cf       	rjmp	.-50     	; 0xaee6 <menu_set_alarm+0xd8>
    af18:	2f ef       	ldi	r18, 0xFF	; 255
    af1a:	89 e6       	ldi	r24, 0x69	; 105
    af1c:	98 e1       	ldi	r25, 0x18	; 24
    af1e:	21 50       	subi	r18, 0x01	; 1
    af20:	80 40       	sbci	r24, 0x00	; 0
    af22:	90 40       	sbci	r25, 0x00	; 0
    af24:	e1 f7       	brne	.-8      	; 0xaf1e <menu_set_alarm+0x110>
    af26:	00 c0       	rjmp	.+0      	; 0xaf28 <menu_set_alarm+0x11a>
    af28:	00 00       	nop
    af2a:	81 e0       	ldi	r24, 0x01	; 1
    af2c:	80 93 f1 3b 	sts	0x3BF1, r24
    af30:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <EEPROM_WriteEnv>
    af34:	0e 94 48 21 	call	0x4290	; 0x4290 <display_slide_out_to_bottom>
    af38:	60 e0       	ldi	r22, 0x00	; 0
    af3a:	85 ee       	ldi	r24, 0xE5	; 229
    af3c:	99 e2       	ldi	r25, 0x29	; 41
    af3e:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <display_print_scrolling_text>
    af42:	81 e0       	ldi	r24, 0x01	; 1
    af44:	08 95       	ret
    af46:	0e 94 48 21 	call	0x4290	; 0x4290 <display_slide_out_to_bottom>
    af4a:	60 e0       	ldi	r22, 0x00	; 0
    af4c:	8b eb       	ldi	r24, 0xBB	; 187
    af4e:	99 e2       	ldi	r25, 0x29	; 41
    af50:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <display_print_scrolling_text>
    af54:	80 e0       	ldi	r24, 0x00	; 0
    af56:	08 95       	ret
    af58:	10 92 12 3c 	sts	0x3C12, r1
    af5c:	cd cf       	rjmp	.-102    	; 0xaef8 <menu_set_alarm+0xea>

0000af5e <menu_configuration>:
    af5e:	ef 92       	push	r14
    af60:	0f 93       	push	r16
    af62:	cf 93       	push	r28
    af64:	df 93       	push	r29
    af66:	ec 01       	movw	r28, r24
    af68:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <btn_check_press>
    af6c:	80 93 12 3c 	sts	0x3C12, r24
    af70:	80 91 12 3c 	lds	r24, 0x3C12
    af74:	88 23       	and	r24, r24
    af76:	d1 f0       	breq	.+52     	; 0xafac <menu_configuration+0x4e>
    af78:	80 91 12 3c 	lds	r24, 0x3C12
    af7c:	81 30       	cpi	r24, 0x01	; 1
    af7e:	49 f4       	brne	.+18     	; 0xaf92 <menu_configuration+0x34>
    af80:	80 91 7d 3a 	lds	r24, 0x3A7D
    af84:	87 30       	cpi	r24, 0x07	; 7
    af86:	11 f0       	breq	.+4      	; 0xaf8c <menu_configuration+0x2e>
    af88:	8f 5f       	subi	r24, 0xFF	; 255
    af8a:	0e c0       	rjmp	.+28     	; 0xafa8 <menu_configuration+0x4a>
    af8c:	10 92 7d 3a 	sts	0x3A7D, r1
    af90:	0d c0       	rjmp	.+26     	; 0xafac <menu_configuration+0x4e>
    af92:	80 91 12 3c 	lds	r24, 0x3C12
    af96:	84 30       	cpi	r24, 0x04	; 4
    af98:	49 f4       	brne	.+18     	; 0xafac <menu_configuration+0x4e>
    af9a:	80 91 7d 3a 	lds	r24, 0x3A7D
    af9e:	88 23       	and	r24, r24
    afa0:	11 f0       	breq	.+4      	; 0xafa6 <menu_configuration+0x48>
    afa2:	81 50       	subi	r24, 0x01	; 1
    afa4:	01 c0       	rjmp	.+2      	; 0xafa8 <menu_configuration+0x4a>
    afa6:	87 e0       	ldi	r24, 0x07	; 7
    afa8:	80 93 7d 3a 	sts	0x3A7D, r24
    afac:	80 91 12 3c 	lds	r24, 0x3C12
    afb0:	81 30       	cpi	r24, 0x01	; 1
    afb2:	29 f4       	brne	.+10     	; 0xafbe <menu_configuration+0x60>
    afb4:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <rtc_disable_time_render>
    afb8:	0e 94 2a 21 	call	0x4254	; 0x4254 <display_slide_out_to_right>
    afbc:	0f c0       	rjmp	.+30     	; 0xafdc <menu_configuration+0x7e>
    afbe:	80 91 12 3c 	lds	r24, 0x3C12
    afc2:	84 30       	cpi	r24, 0x04	; 4
    afc4:	29 f4       	brne	.+10     	; 0xafd0 <menu_configuration+0x72>
    afc6:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <rtc_disable_time_render>
    afca:	0e 94 32 21 	call	0x4264	; 0x4264 <display_slide_out_to_left>
    afce:	06 c0       	rjmp	.+12     	; 0xafdc <menu_configuration+0x7e>
    afd0:	80 91 12 3c 	lds	r24, 0x3C12
    afd4:	83 30       	cpi	r24, 0x03	; 3
    afd6:	11 f4       	brne	.+4      	; 0xafdc <menu_configuration+0x7e>
    afd8:	0e 94 66 1d 	call	0x3acc	; 0x3acc <display_fade_blink>
    afdc:	80 91 12 3c 	lds	r24, 0x3C12
    afe0:	88 23       	and	r24, r24
    afe2:	21 f1       	breq	.+72     	; 0xb02c <menu_configuration+0xce>
    afe4:	80 91 7d 3a 	lds	r24, 0x3A7D
    afe8:	90 e0       	ldi	r25, 0x00	; 0
    afea:	88 30       	cpi	r24, 0x08	; 8
    afec:	91 05       	cpc	r25, r1
    afee:	f0 f4       	brcc	.+60     	; 0xb02c <menu_configuration+0xce>
    aff0:	fc 01       	movw	r30, r24
    aff2:	e1 5e       	subi	r30, 0xE1	; 225
    aff4:	fe 4f       	sbci	r31, 0xFE	; 254
    aff6:	0c 94 6e 62 	jmp	0xc4dc	; 0xc4dc <__tablejump2__>
    affa:	8f ee       	ldi	r24, 0xEF	; 239
    affc:	99 e2       	ldi	r25, 0x29	; 41
    affe:	14 c0       	rjmp	.+40     	; 0xb028 <menu_configuration+0xca>
    b000:	89 e8       	ldi	r24, 0x89	; 137
    b002:	9a e2       	ldi	r25, 0x2A	; 42
    b004:	11 c0       	rjmp	.+34     	; 0xb028 <menu_configuration+0xca>
    b006:	84 ef       	ldi	r24, 0xF4	; 244
    b008:	99 e2       	ldi	r25, 0x29	; 41
    b00a:	0e c0       	rjmp	.+28     	; 0xb028 <menu_configuration+0xca>
    b00c:	89 ef       	ldi	r24, 0xF9	; 249
    b00e:	99 e2       	ldi	r25, 0x29	; 41
    b010:	0b c0       	rjmp	.+22     	; 0xb028 <menu_configuration+0xca>
    b012:	8e ef       	ldi	r24, 0xFE	; 254
    b014:	99 e2       	ldi	r25, 0x29	; 41
    b016:	08 c0       	rjmp	.+16     	; 0xb028 <menu_configuration+0xca>
    b018:	83 e0       	ldi	r24, 0x03	; 3
    b01a:	9a e2       	ldi	r25, 0x2A	; 42
    b01c:	05 c0       	rjmp	.+10     	; 0xb028 <menu_configuration+0xca>
    b01e:	88 e0       	ldi	r24, 0x08	; 8
    b020:	9a e2       	ldi	r25, 0x2A	; 42
    b022:	02 c0       	rjmp	.+4      	; 0xb028 <menu_configuration+0xca>
    b024:	8e ea       	ldi	r24, 0xAE	; 174
    b026:	99 e2       	ldi	r25, 0x29	; 41
    b028:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <display_draw_four_letter_word>
    b02c:	80 91 12 3c 	lds	r24, 0x3C12
    b030:	81 30       	cpi	r24, 0x01	; 1
    b032:	19 f4       	brne	.+6      	; 0xb03a <menu_configuration+0xdc>
    b034:	0e 94 22 21 	call	0x4244	; 0x4244 <display_slide_in_from_left>
    b038:	06 c0       	rjmp	.+12     	; 0xb046 <menu_configuration+0xe8>
    b03a:	80 91 12 3c 	lds	r24, 0x3C12
    b03e:	84 30       	cpi	r24, 0x04	; 4
    b040:	11 f4       	brne	.+4      	; 0xb046 <menu_configuration+0xe8>
    b042:	0e 94 24 21 	call	0x4248	; 0x4248 <display_slide_in_from_right>
    b046:	80 91 12 3c 	lds	r24, 0x3C12
    b04a:	83 30       	cpi	r24, 0x03	; 3
    b04c:	09 f0       	breq	.+2      	; 0xb050 <menu_configuration+0xf2>
    b04e:	47 c0       	rjmp	.+142    	; 0xb0de <menu_configuration+0x180>
    b050:	40 91 7d 3a 	lds	r20, 0x3A7D
    b054:	50 e0       	ldi	r21, 0x00	; 0
    b056:	48 30       	cpi	r20, 0x08	; 8
    b058:	51 05       	cpc	r21, r1
    b05a:	b8 f5       	brcc	.+110    	; 0xb0ca <menu_configuration+0x16c>
    b05c:	fa 01       	movw	r30, r20
    b05e:	e9 5d       	subi	r30, 0xD9	; 217
    b060:	fe 4f       	sbci	r31, 0xFE	; 254
    b062:	0c 94 6e 62 	jmp	0xc4dc	; 0xc4dc <__tablejump2__>
    b066:	0e 94 3a 21 	call	0x4274	; 0x4274 <display_slide_out_to_top>
    b06a:	b6 dc       	rcall	.-1684   	; 0xa9d8 <menu_configure_brightnesss>
    b06c:	88 e0       	ldi	r24, 0x08	; 8
    b06e:	0e 94 75 0a 	call	0x14ea	; 0x14ea <ht1632c_set_brightness>
    b072:	2b c0       	rjmp	.+86     	; 0xb0ca <menu_configuration+0x16c>
    b074:	0e 94 3a 21 	call	0x4274	; 0x4274 <display_slide_out_to_top>
    b078:	23 dd       	rcall	.-1466   	; 0xaac0 <menu_set_time>
    b07a:	27 c0       	rjmp	.+78     	; 0xb0ca <menu_configuration+0x16c>
    b07c:	0e 94 3a 21 	call	0x4274	; 0x4274 <display_slide_out_to_top>
    b080:	c6 de       	rcall	.-628    	; 0xae0e <menu_set_alarm>
    b082:	23 c0       	rjmp	.+70     	; 0xb0ca <menu_configuration+0x16c>
    b084:	0e 94 3a 21 	call	0x4274	; 0x4274 <display_slide_out_to_top>
    b088:	ce 01       	movw	r24, r28
    b08a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <si114x_baseline_calibration>
    b08e:	1d c0       	rjmp	.+58     	; 0xb0ca <menu_configuration+0x16c>
    b090:	0e 94 3a 21 	call	0x4274	; 0x4274 <display_slide_out_to_top>
    b094:	60 e0       	ldi	r22, 0x00	; 0
    b096:	8d e0       	ldi	r24, 0x0D	; 13
    b098:	9a e2       	ldi	r25, 0x2A	; 42
    b09a:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <display_print_scrolling_text>
    b09e:	15 c0       	rjmp	.+42     	; 0xb0ca <menu_configuration+0x16c>
    b0a0:	0e 94 48 21 	call	0x4290	; 0x4290 <display_slide_out_to_bottom>
    b0a4:	ee 24       	eor	r14, r14
    b0a6:	e3 94       	inc	r14
    b0a8:	08 e0       	ldi	r16, 0x08	; 8
    b0aa:	26 e0       	ldi	r18, 0x06	; 6
    b0ac:	4f e7       	ldi	r20, 0x7F	; 127
    b0ae:	5d e0       	ldi	r21, 0x0D	; 13
    b0b0:	64 e0       	ldi	r22, 0x04	; 4
    b0b2:	85 e0       	ldi	r24, 0x05	; 5
    b0b4:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <display_draw_bitmap>
    b0b8:	0e 94 26 21 	call	0x424c	; 0x424c <display_slide_in_from_bottom>
    b0bc:	0e 94 4d 50 	call	0xa09a	; 0xa09a <play_sound>
    b0c0:	04 c0       	rjmp	.+8      	; 0xb0ca <menu_configuration+0x16c>
    b0c2:	0e 94 48 21 	call	0x4290	; 0x4290 <display_slide_out_to_bottom>
    b0c6:	82 e0       	ldi	r24, 0x02	; 2
    b0c8:	0b c0       	rjmp	.+22     	; 0xb0e0 <menu_configuration+0x182>
    b0ca:	10 92 7d 3a 	sts	0x3A7D, r1
    b0ce:	0e 94 48 21 	call	0x4290	; 0x4290 <display_slide_out_to_bottom>
    b0d2:	85 e2       	ldi	r24, 0x25	; 37
    b0d4:	9a e2       	ldi	r25, 0x2A	; 42
    b0d6:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <display_draw_four_letter_word>
    b0da:	0e 94 28 21 	call	0x4250	; 0x4250 <display_slide_in_from_top>
    b0de:	81 e0       	ldi	r24, 0x01	; 1
    b0e0:	df 91       	pop	r29
    b0e2:	cf 91       	pop	r28
    b0e4:	0f 91       	pop	r16
    b0e6:	ef 90       	pop	r14
    b0e8:	08 95       	ret

0000b0ea <menu_state_machine>:
    b0ea:	ff 92       	push	r15
    b0ec:	0f 93       	push	r16
    b0ee:	1f 93       	push	r17
    b0f0:	cf 93       	push	r28
    b0f2:	df 93       	push	r29
    b0f4:	cd b7       	in	r28, 0x3d	; 61
    b0f6:	de b7       	in	r29, 0x3e	; 62
    b0f8:	ed 97       	sbiw	r28, 0x3d	; 61
    b0fa:	cd bf       	out	0x3d, r28	; 61
    b0fc:	de bf       	out	0x3e, r29	; 62
    b0fe:	8c 01       	movw	r16, r24
    b100:	fc 01       	movw	r30, r24
    b102:	82 89       	ldd	r24, Z+18	; 0x12
    b104:	88 23       	and	r24, r24
    b106:	e1 f0       	breq	.+56     	; 0xb140 <menu_state_machine+0x56>
    b108:	82 30       	cpi	r24, 0x02	; 2
    b10a:	59 f4       	brne	.+22     	; 0xb122 <menu_state_machine+0x38>
    b10c:	80 91 7d 3a 	lds	r24, 0x3A7D
    b110:	86 30       	cpi	r24, 0x06	; 6
    b112:	21 f0       	breq	.+8      	; 0xb11c <menu_state_machine+0x32>
    b114:	8f 5f       	subi	r24, 0xFF	; 255
    b116:	80 93 7d 3a 	sts	0x3A7D, r24
    b11a:	4c c1       	rjmp	.+664    	; 0xb3b4 <menu_state_machine+0x2ca>
    b11c:	10 92 7d 3a 	sts	0x3A7D, r1
    b120:	49 c1       	rjmp	.+658    	; 0xb3b4 <menu_state_machine+0x2ca>
    b122:	81 30       	cpi	r24, 0x01	; 1
    b124:	69 f4       	brne	.+26     	; 0xb140 <menu_state_machine+0x56>
    b126:	80 91 7d 3a 	lds	r24, 0x3A7D
    b12a:	88 23       	and	r24, r24
    b12c:	11 f0       	breq	.+4      	; 0xb132 <menu_state_machine+0x48>
    b12e:	81 50       	subi	r24, 0x01	; 1
    b130:	01 c0       	rjmp	.+2      	; 0xb134 <menu_state_machine+0x4a>
    b132:	86 e0       	ldi	r24, 0x06	; 6
    b134:	80 93 7d 3a 	sts	0x3A7D, r24
    b138:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <rtc_disable_time_render>
    b13c:	0e 94 32 21 	call	0x4264	; 0x4264 <display_slide_out_to_left>
    b140:	f8 01       	movw	r30, r16
    b142:	82 89       	ldd	r24, Z+18	; 0x12
    b144:	88 23       	and	r24, r24
    b146:	c9 f0       	breq	.+50     	; 0xb17a <menu_state_machine+0x90>
    b148:	40 91 7d 3a 	lds	r20, 0x3A7D
    b14c:	50 e0       	ldi	r21, 0x00	; 0
    b14e:	47 30       	cpi	r20, 0x07	; 7
    b150:	51 05       	cpc	r21, r1
    b152:	98 f4       	brcc	.+38     	; 0xb17a <menu_state_machine+0x90>
    b154:	fa 01       	movw	r30, r20
    b156:	e1 5d       	subi	r30, 0xD1	; 209
    b158:	fe 4f       	sbci	r31, 0xFE	; 254
    b15a:	0c 94 6e 62 	jmp	0xc4dc	; 0xc4dc <__tablejump2__>
    b15e:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <rtc_enable_time_render>
    b162:	0b c0       	rjmp	.+22     	; 0xb17a <menu_state_machine+0x90>
    b164:	13 da       	rcall	.-3034   	; 0xa58c <menu_draw_date_frame>
    b166:	09 c0       	rjmp	.+18     	; 0xb17a <menu_state_machine+0x90>
    b168:	e7 da       	rcall	.-2610   	; 0xa738 <menu_draw_weekday_frame>
    b16a:	07 c0       	rjmp	.+14     	; 0xb17a <menu_state_machine+0x90>
    b16c:	90 da       	rcall	.-2784   	; 0xa68e <menu_draw_week_frame>
    b16e:	05 c0       	rjmp	.+10     	; 0xb17a <menu_state_machine+0x90>
    b170:	ac d9       	rcall	.-3240   	; 0xa4ca <menu_draw_temperature_frame>
    b172:	03 c0       	rjmp	.+6      	; 0xb17a <menu_state_machine+0x90>
    b174:	38 db       	rcall	.-2448   	; 0xa7e6 <menu_draw_battery_frame>
    b176:	01 c0       	rjmp	.+2      	; 0xb17a <menu_state_machine+0x90>
    b178:	a9 db       	rcall	.-2222   	; 0xa8cc <menu_draw_config_frame>
    b17a:	f8 01       	movw	r30, r16
    b17c:	82 89       	ldd	r24, Z+18	; 0x12
    b17e:	82 30       	cpi	r24, 0x02	; 2
    b180:	19 f4       	brne	.+6      	; 0xb188 <menu_state_machine+0x9e>
    b182:	0e 94 22 21 	call	0x4244	; 0x4244 <display_slide_in_from_left>
    b186:	04 c0       	rjmp	.+8      	; 0xb190 <menu_state_machine+0xa6>
    b188:	81 30       	cpi	r24, 0x01	; 1
    b18a:	11 f4       	brne	.+4      	; 0xb190 <menu_state_machine+0xa6>
    b18c:	0e 94 24 21 	call	0x4248	; 0x4248 <display_slide_in_from_right>
    b190:	f8 01       	movw	r30, r16
    b192:	82 89       	ldd	r24, Z+18	; 0x12
    b194:	83 30       	cpi	r24, 0x03	; 3
    b196:	09 f0       	breq	.+2      	; 0xb19a <menu_state_machine+0xb0>
    b198:	12 c1       	rjmp	.+548    	; 0xb3be <menu_state_machine+0x2d4>
    b19a:	80 91 7d 3a 	lds	r24, 0x3A7D
    b19e:	81 30       	cpi	r24, 0x01	; 1
    b1a0:	99 f5       	brne	.+102    	; 0xb208 <menu_state_machine+0x11e>
    b1a2:	8a e5       	ldi	r24, 0x5A	; 90
    b1a4:	90 e0       	ldi	r25, 0x00	; 0
    b1a6:	0e 94 75 11 	call	0x22ea	; 0x22ea <Si114xPauseAll>
    b1aa:	0e 94 66 1d 	call	0x3acc	; 0x3acc <display_fade_blink>
    b1ae:	0e 94 3a 21 	call	0x4274	; 0x4274 <display_slide_out_to_top>
    b1b2:	60 e0       	ldi	r22, 0x00	; 0
    b1b4:	8a e2       	ldi	r24, 0x2A	; 42
    b1b6:	9a e2       	ldi	r25, 0x2A	; 42
    b1b8:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <display_print_scrolling_text>
    b1bc:	81 e0       	ldi	r24, 0x01	; 1
    b1be:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <btn_turn_on_leds>
    b1c2:	85 e2       	ldi	r24, 0x25	; 37
    b1c4:	9a e2       	ldi	r25, 0x2A	; 42
    b1c6:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <display_draw_four_letter_word>
    b1ca:	0e 94 26 21 	call	0x424c	; 0x424c <display_slide_in_from_bottom>
    b1ce:	10 92 7d 3a 	sts	0x3A7D, r1
    b1d2:	c8 01       	movw	r24, r16
    b1d4:	c4 de       	rcall	.-632    	; 0xaf5e <menu_configuration>
    b1d6:	81 30       	cpi	r24, 0x01	; 1
    b1d8:	e1 f3       	breq	.-8      	; 0xb1d2 <menu_state_machine+0xe8>
    b1da:	8a e5       	ldi	r24, 0x5A	; 90
    b1dc:	90 e0       	ldi	r25, 0x00	; 0
    b1de:	0e 94 33 11 	call	0x2266	; 0x2266 <Si114xPsAlsAuto>
    b1e2:	80 e0       	ldi	r24, 0x00	; 0
    b1e4:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <btn_turn_on_leds>
    b1e8:	10 92 7d 3a 	sts	0x3A7D, r1
    b1ec:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <rtc_enable_time_render>
    b1f0:	0e 94 28 21 	call	0x4250	; 0x4250 <display_slide_in_from_top>
    b1f4:	ff ef       	ldi	r31, 0xFF	; 255
    b1f6:	27 ea       	ldi	r18, 0xA7	; 167
    b1f8:	81 e6       	ldi	r24, 0x61	; 97
    b1fa:	f1 50       	subi	r31, 0x01	; 1
    b1fc:	20 40       	sbci	r18, 0x00	; 0
    b1fe:	80 40       	sbci	r24, 0x00	; 0
    b200:	e1 f7       	brne	.-8      	; 0xb1fa <menu_state_machine+0x110>
    b202:	00 c0       	rjmp	.+0      	; 0xb204 <menu_state_machine+0x11a>
    b204:	00 00       	nop
    b206:	db c0       	rjmp	.+438    	; 0xb3be <menu_state_machine+0x2d4>
    b208:	83 30       	cpi	r24, 0x03	; 3
    b20a:	09 f0       	breq	.+2      	; 0xb20e <menu_state_machine+0x124>
    b20c:	a5 c0       	rjmp	.+330    	; 0xb358 <menu_state_machine+0x26e>
    b20e:	8a e5       	ldi	r24, 0x5A	; 90
    b210:	90 e0       	ldi	r25, 0x00	; 0
    b212:	0e 94 75 11 	call	0x22ea	; 0x22ea <Si114xPauseAll>
    b216:	0e 94 66 1d 	call	0x3acc	; 0x3acc <display_fade_blink>
    b21a:	0e 94 3a 21 	call	0x4274	; 0x4274 <display_slide_out_to_top>
    b21e:	40 91 78 3a 	lds	r20, 0x3A78
    b222:	50 91 79 3a 	lds	r21, 0x3A79
    b226:	60 91 7a 3a 	lds	r22, 0x3A7A
    b22a:	70 91 7b 3a 	lds	r23, 0x3A7B
    b22e:	41 15       	cp	r20, r1
    b230:	51 05       	cpc	r21, r1
    b232:	61 05       	cpc	r22, r1
    b234:	71 05       	cpc	r23, r1
    b236:	41 f1       	breq	.+80     	; 0xb288 <menu_state_machine+0x19e>
    b238:	80 91 88 3a 	lds	r24, 0x3A88
    b23c:	90 91 89 3a 	lds	r25, 0x3A89
    b240:	a0 91 8a 3a 	lds	r26, 0x3A8A
    b244:	b0 91 8b 3a 	lds	r27, 0x3A8B
    b248:	84 1b       	sub	r24, r20
    b24a:	95 0b       	sbc	r25, r21
    b24c:	a6 0b       	sbc	r26, r22
    b24e:	b7 0b       	sbc	r27, r23
    b250:	40 97       	sbiw	r24, 0x10	; 16
    b252:	a1 05       	cpc	r26, r1
    b254:	b1 05       	cpc	r27, r1
    b256:	c0 f4       	brcc	.+48     	; 0xb288 <menu_state_machine+0x19e>
    b258:	80 91 88 3a 	lds	r24, 0x3A88
    b25c:	90 91 89 3a 	lds	r25, 0x3A89
    b260:	a0 91 8a 3a 	lds	r26, 0x3A8A
    b264:	b0 91 8b 3a 	lds	r27, 0x3A8B
    b268:	80 93 78 3a 	sts	0x3A78, r24
    b26c:	90 93 79 3a 	sts	0x3A79, r25
    b270:	a0 93 7a 3a 	sts	0x3A7A, r26
    b274:	b0 93 7b 3a 	sts	0x3A7B, r27
    b278:	6b e3       	ldi	r22, 0x3B	; 59
    b27a:	7a e2       	ldi	r23, 0x2A	; 42
    b27c:	ce 01       	movw	r24, r28
    b27e:	01 96       	adiw	r24, 0x01	; 1
    b280:	0e 94 f8 64 	call	0xc9f0	; 0xc9f0 <strcpy>
    b284:	f1 2c       	mov	r15, r1
    b286:	22 c0       	rjmp	.+68     	; 0xb2cc <menu_state_machine+0x1e2>
    b288:	0e 94 7d 50 	call	0xa0fa	; 0xa0fa <start_loading>
    b28c:	0e 94 87 28 	call	0x510e	; 0x510e <ESP8266_On>
    b290:	0e 94 a2 28 	call	0x5144	; 0x5144 <ESP8266_TimerStart>
    b294:	61 e0       	ldi	r22, 0x01	; 1
    b296:	80 e0       	ldi	r24, 0x00	; 0
    b298:	0e 94 a8 50 	call	0xa150	; 0xa150 <get_internet_variables>
    b29c:	8d af       	std	Y+61, r24	; 0x3d
    b29e:	0e 94 ba 28 	call	0x5174	; 0x5174 <ESP8266_TimerStop>
    b2a2:	0e 94 99 28 	call	0x5132	; 0x5132 <ESP8266_Off>
    b2a6:	0e 94 97 50 	call	0xa12e	; 0xa12e <stop_loading>
    b2aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    b2ac:	81 30       	cpi	r24, 0x01	; 1
    b2ae:	a1 f2       	breq	.-88     	; 0xb258 <menu_state_machine+0x16e>
    b2b0:	10 92 78 3a 	sts	0x3A78, r1
    b2b4:	10 92 79 3a 	sts	0x3A79, r1
    b2b8:	10 92 7a 3a 	sts	0x3A7A, r1
    b2bc:	10 92 7b 3a 	sts	0x3A7B, r1
    b2c0:	60 e0       	ldi	r22, 0x00	; 0
    b2c2:	8b e4       	ldi	r24, 0x4B	; 75
    b2c4:	9a e2       	ldi	r25, 0x2A	; 42
    b2c6:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <display_print_scrolling_text>
    b2ca:	44 c0       	rjmp	.+136    	; 0xb354 <menu_state_machine+0x26a>
    b2cc:	0f 2d       	mov	r16, r15
    b2ce:	10 e0       	ldi	r17, 0x00	; 0
    b2d0:	00 53       	subi	r16, 0x30	; 48
    b2d2:	15 4c       	sbci	r17, 0xC5	; 197
    b2d4:	f8 01       	movw	r30, r16
    b2d6:	80 81       	ld	r24, Z
    b2d8:	88 23       	and	r24, r24
    b2da:	39 f0       	breq	.+14     	; 0xb2ea <menu_state_machine+0x200>
    b2dc:	90 e0       	ldi	r25, 0x00	; 0
    b2de:	0e 94 a6 64 	call	0xc94c	; 0xc94c <toupper>
    b2e2:	f8 01       	movw	r30, r16
    b2e4:	80 83       	st	Z, r24
    b2e6:	f3 94       	inc	r15
    b2e8:	f1 cf       	rjmp	.-30     	; 0xb2cc <menu_state_machine+0x1e2>
    b2ea:	60 ed       	ldi	r22, 0xD0	; 208
    b2ec:	7a e3       	ldi	r23, 0x3A	; 58
    b2ee:	ce 01       	movw	r24, r28
    b2f0:	01 96       	adiw	r24, 0x01	; 1
    b2f2:	0e 94 d9 64 	call	0xc9b2	; 0xc9b2 <strcat>
    b2f6:	69 ea       	ldi	r22, 0xA9	; 169
    b2f8:	75 e2       	ldi	r23, 0x25	; 37
    b2fa:	ce 01       	movw	r24, r28
    b2fc:	01 96       	adiw	r24, 0x01	; 1
    b2fe:	0e 94 d9 64 	call	0xc9b2	; 0xc9b2 <strcat>
    b302:	65 ea       	ldi	r22, 0xA5	; 165
    b304:	7a e3       	ldi	r23, 0x3A	; 58
    b306:	ce 01       	movw	r24, r28
    b308:	01 96       	adiw	r24, 0x01	; 1
    b30a:	0e 94 d9 64 	call	0xc9b2	; 0xc9b2 <strcat>
    b30e:	68 e4       	ldi	r22, 0x48	; 72
    b310:	7a e2       	ldi	r23, 0x2A	; 42
    b312:	ce 01       	movw	r24, r28
    b314:	01 96       	adiw	r24, 0x01	; 1
    b316:	0e 94 d9 64 	call	0xc9b2	; 0xc9b2 <strcat>
    b31a:	f1 2c       	mov	r15, r1
    b31c:	0f 2d       	mov	r16, r15
    b31e:	10 e0       	ldi	r17, 0x00	; 0
    b320:	04 58       	subi	r16, 0x84	; 132
    b322:	15 4c       	sbci	r17, 0xC5	; 197
    b324:	f8 01       	movw	r30, r16
    b326:	84 a5       	ldd	r24, Z+44	; 0x2c
    b328:	88 23       	and	r24, r24
    b32a:	39 f0       	breq	.+14     	; 0xb33a <menu_state_machine+0x250>
    b32c:	90 e0       	ldi	r25, 0x00	; 0
    b32e:	0e 94 a6 64 	call	0xc94c	; 0xc94c <toupper>
    b332:	f8 01       	movw	r30, r16
    b334:	84 a7       	std	Z+44, r24	; 0x2c
    b336:	f3 94       	inc	r15
    b338:	f1 cf       	rjmp	.-30     	; 0xb31c <menu_state_machine+0x232>
    b33a:	68 ea       	ldi	r22, 0xA8	; 168
    b33c:	7a e3       	ldi	r23, 0x3A	; 58
    b33e:	ce 01       	movw	r24, r28
    b340:	01 96       	adiw	r24, 0x01	; 1
    b342:	0e 94 d9 64 	call	0xc9b2	; 0xc9b2 <strcat>
    b346:	60 e0       	ldi	r22, 0x00	; 0
    b348:	ce 01       	movw	r24, r28
    b34a:	01 96       	adiw	r24, 0x01	; 1
    b34c:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <display_print_scrolling_text>
    b350:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <EEPROM_WriteEnv>
    b354:	ba d8       	rcall	.-3724   	; 0xa4ca <menu_draw_temperature_frame>
    b356:	27 c0       	rjmp	.+78     	; 0xb3a6 <menu_state_machine+0x2bc>
    b358:	85 30       	cpi	r24, 0x05	; 5
    b35a:	89 f5       	brne	.+98     	; 0xb3be <menu_state_machine+0x2d4>
    b35c:	8a e5       	ldi	r24, 0x5A	; 90
    b35e:	90 e0       	ldi	r25, 0x00	; 0
    b360:	0e 94 75 11 	call	0x22ea	; 0x22ea <Si114xPauseAll>
    b364:	0e 94 66 1d 	call	0x3acc	; 0x3acc <display_fade_blink>
    b368:	0e 94 3a 21 	call	0x4274	; 0x4274 <display_slide_out_to_top>
    b36c:	0e 94 7d 50 	call	0xa0fa	; 0xa0fa <start_loading>
    b370:	0e 94 87 28 	call	0x510e	; 0x510e <ESP8266_On>
    b374:	0e 94 a2 28 	call	0x5144	; 0x5144 <ESP8266_TimerStart>
    b378:	60 e0       	ldi	r22, 0x00	; 0
    b37a:	81 e0       	ldi	r24, 0x01	; 1
    b37c:	0e 94 a8 50 	call	0xa150	; 0xa150 <get_internet_variables>
    b380:	8d af       	std	Y+61, r24	; 0x3d
    b382:	0e 94 ba 28 	call	0x5174	; 0x5174 <ESP8266_TimerStop>
    b386:	0e 94 99 28 	call	0x5132	; 0x5132 <ESP8266_Off>
    b38a:	0e 94 97 50 	call	0xa12e	; 0xa12e <stop_loading>
    b38e:	8d ad       	ldd	r24, Y+61	; 0x3d
    b390:	60 e0       	ldi	r22, 0x00	; 0
    b392:	81 30       	cpi	r24, 0x01	; 1
    b394:	19 f4       	brne	.+6      	; 0xb39c <menu_state_machine+0x2b2>
    b396:	85 e6       	ldi	r24, 0x65	; 101
    b398:	9a e2       	ldi	r25, 0x2A	; 42
    b39a:	02 c0       	rjmp	.+4      	; 0xb3a0 <menu_state_machine+0x2b6>
    b39c:	8b e7       	ldi	r24, 0x7B	; 123
    b39e:	9a e2       	ldi	r25, 0x2A	; 42
    b3a0:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <display_print_scrolling_text>
    b3a4:	f3 d8       	rcall	.-3610   	; 0xa58c <menu_draw_date_frame>
    b3a6:	0e 94 28 21 	call	0x4250	; 0x4250 <display_slide_in_from_top>
    b3aa:	8a e5       	ldi	r24, 0x5A	; 90
    b3ac:	90 e0       	ldi	r25, 0x00	; 0
    b3ae:	0e 94 33 11 	call	0x2266	; 0x2266 <Si114xPsAlsAuto>
    b3b2:	05 c0       	rjmp	.+10     	; 0xb3be <menu_state_machine+0x2d4>
    b3b4:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <rtc_disable_time_render>
    b3b8:	0e 94 2a 21 	call	0x4254	; 0x4254 <display_slide_out_to_right>
    b3bc:	c1 ce       	rjmp	.-638    	; 0xb140 <menu_state_machine+0x56>
    b3be:	81 e0       	ldi	r24, 0x01	; 1
    b3c0:	ed 96       	adiw	r28, 0x3d	; 61
    b3c2:	cd bf       	out	0x3d, r28	; 61
    b3c4:	de bf       	out	0x3e, r29	; 62
    b3c6:	df 91       	pop	r29
    b3c8:	cf 91       	pop	r28
    b3ca:	1f 91       	pop	r17
    b3cc:	0f 91       	pop	r16
    b3ce:	ff 90       	pop	r15
    b3d0:	08 95       	ret

0000b3d2 <__vector_16>:
    b3d2:	1f 92       	push	r1
    b3d4:	0f 92       	push	r0
    b3d6:	0f b6       	in	r0, 0x3f	; 63
    b3d8:	0f 92       	push	r0
    b3da:	11 24       	eor	r1, r1
    b3dc:	08 b6       	in	r0, 0x38	; 56
    b3de:	0f 92       	push	r0
    b3e0:	18 be       	out	0x38, r1	; 56
    b3e2:	09 b6       	in	r0, 0x39	; 57
    b3e4:	0f 92       	push	r0
    b3e6:	19 be       	out	0x39, r1	; 57
    b3e8:	0b b6       	in	r0, 0x3b	; 59
    b3ea:	0f 92       	push	r0
    b3ec:	1b be       	out	0x3b, r1	; 59
    b3ee:	2f 93       	push	r18
    b3f0:	3f 93       	push	r19
    b3f2:	4f 93       	push	r20
    b3f4:	5f 93       	push	r21
    b3f6:	6f 93       	push	r22
    b3f8:	7f 93       	push	r23
    b3fa:	8f 93       	push	r24
    b3fc:	9f 93       	push	r25
    b3fe:	af 93       	push	r26
    b400:	bf 93       	push	r27
    b402:	ef 93       	push	r30
    b404:	ff 93       	push	r31
    b406:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <display_show_loading_square>
    b40a:	ff 91       	pop	r31
    b40c:	ef 91       	pop	r30
    b40e:	bf 91       	pop	r27
    b410:	af 91       	pop	r26
    b412:	9f 91       	pop	r25
    b414:	8f 91       	pop	r24
    b416:	7f 91       	pop	r23
    b418:	6f 91       	pop	r22
    b41a:	5f 91       	pop	r21
    b41c:	4f 91       	pop	r20
    b41e:	3f 91       	pop	r19
    b420:	2f 91       	pop	r18
    b422:	0f 90       	pop	r0
    b424:	0b be       	out	0x3b, r0	; 59
    b426:	0f 90       	pop	r0
    b428:	09 be       	out	0x39, r0	; 57
    b42a:	0f 90       	pop	r0
    b42c:	08 be       	out	0x38, r0	; 56
    b42e:	0f 90       	pop	r0
    b430:	0f be       	out	0x3f, r0	; 63
    b432:	0f 90       	pop	r0
    b434:	1f 90       	pop	r1
    b436:	18 95       	reti

0000b438 <__vector_19>:
    b438:	1f 92       	push	r1
    b43a:	0f 92       	push	r0
    b43c:	0f b6       	in	r0, 0x3f	; 63
    b43e:	0f 92       	push	r0
    b440:	11 24       	eor	r1, r1
    b442:	08 b6       	in	r0, 0x38	; 56
    b444:	0f 92       	push	r0
    b446:	18 be       	out	0x38, r1	; 56
    b448:	09 b6       	in	r0, 0x39	; 57
    b44a:	0f 92       	push	r0
    b44c:	19 be       	out	0x39, r1	; 57
    b44e:	0b b6       	in	r0, 0x3b	; 59
    b450:	0f 92       	push	r0
    b452:	1b be       	out	0x3b, r1	; 59
    b454:	2f 93       	push	r18
    b456:	3f 93       	push	r19
    b458:	4f 93       	push	r20
    b45a:	5f 93       	push	r21
    b45c:	6f 93       	push	r22
    b45e:	7f 93       	push	r23
    b460:	8f 93       	push	r24
    b462:	9f 93       	push	r25
    b464:	af 93       	push	r26
    b466:	bf 93       	push	r27
    b468:	ef 93       	push	r30
    b46a:	ff 93       	push	r31
    b46c:	0e 94 a4 20 	call	0x4148	; 0x4148 <display_draw_wifi_icon>
    b470:	ff 91       	pop	r31
    b472:	ef 91       	pop	r30
    b474:	bf 91       	pop	r27
    b476:	af 91       	pop	r26
    b478:	9f 91       	pop	r25
    b47a:	8f 91       	pop	r24
    b47c:	7f 91       	pop	r23
    b47e:	6f 91       	pop	r22
    b480:	5f 91       	pop	r21
    b482:	4f 91       	pop	r20
    b484:	3f 91       	pop	r19
    b486:	2f 91       	pop	r18
    b488:	0f 90       	pop	r0
    b48a:	0b be       	out	0x3b, r0	; 59
    b48c:	0f 90       	pop	r0
    b48e:	09 be       	out	0x39, r0	; 57
    b490:	0f 90       	pop	r0
    b492:	08 be       	out	0x38, r0	; 56
    b494:	0f 90       	pop	r0
    b496:	0f be       	out	0x3f, r0	; 63
    b498:	0f 90       	pop	r0
    b49a:	1f 90       	pop	r1
    b49c:	18 95       	reti

0000b49e <ESP8266_Callback_DeviceReady>:
    b49e:	8e e8       	ldi	r24, 0x8E	; 142
    b4a0:	9a e2       	ldi	r25, 0x2A	; 42
    b4a2:	0c 94 ab 65 	jmp	0xcb56	; 0xcb56 <puts>

0000b4a6 <ESP8266_Callback_WatchdogReset>:
    b4a6:	8f e9       	ldi	r24, 0x9F	; 159
    b4a8:	9a e2       	ldi	r25, 0x2A	; 42
    b4aa:	0c 94 ab 65 	jmp	0xcb56	; 0xcb56 <puts>

0000b4ae <ESP8266_Callback_WifiDisconnected>:
    b4ae:	89 eb       	ldi	r24, 0xB9	; 185
    b4b0:	9a e2       	ldi	r25, 0x2A	; 42
    b4b2:	0c 94 ab 65 	jmp	0xcb56	; 0xcb56 <puts>

0000b4b6 <ESP8266_Callback_WifiConnected>:
    b4b6:	80 ed       	ldi	r24, 0xD0	; 208
    b4b8:	9a e2       	ldi	r25, 0x2A	; 42
    b4ba:	0c 94 ab 65 	jmp	0xcb56	; 0xcb56 <puts>

0000b4be <ESP8266_Callback_WifiConnectFailed>:
    b4be:	8f 5d       	subi	r24, 0xDF	; 223
    b4c0:	9e 4f       	sbci	r25, 0xFE	; 254
    b4c2:	fc 01       	movw	r30, r24
    b4c4:	80 81       	ld	r24, Z
    b4c6:	1f 92       	push	r1
    b4c8:	8f 93       	push	r24
    b4ca:	84 ee       	ldi	r24, 0xE4	; 228
    b4cc:	9a e2       	ldi	r25, 0x2A	; 42
    b4ce:	9f 93       	push	r25
    b4d0:	8f 93       	push	r24
    b4d2:	0e 94 9a 65 	call	0xcb34	; 0xcb34 <printf>
    b4d6:	0f 90       	pop	r0
    b4d8:	0f 90       	pop	r0
    b4da:	0f 90       	pop	r0
    b4dc:	0f 90       	pop	r0
    b4de:	08 95       	ret

0000b4e0 <ESP8266_Callback_WifiGotIP>:
    b4e0:	cf 93       	push	r28
    b4e2:	df 93       	push	r29
    b4e4:	ec 01       	movw	r28, r24
    b4e6:	87 e1       	ldi	r24, 0x17	; 23
    b4e8:	9b e2       	ldi	r25, 0x2B	; 43
    b4ea:	0e 94 ab 65 	call	0xcb56	; 0xcb56 <puts>
    b4ee:	ce 01       	movw	r24, r28
    b4f0:	0e 94 33 31 	call	0x6266	; 0x6266 <ESP8266_GetSTAIP>
    b4f4:	1f 92       	push	r1
    b4f6:	8f 93       	push	r24
    b4f8:	8f e2       	ldi	r24, 0x2F	; 47
    b4fa:	9b e2       	ldi	r25, 0x2B	; 43
    b4fc:	9f 93       	push	r25
    b4fe:	8f 93       	push	r24
    b500:	0e 94 9a 65 	call	0xcb34	; 0xcb34 <printf>
    b504:	0f 90       	pop	r0
    b506:	0f 90       	pop	r0
    b508:	0f 90       	pop	r0
    b50a:	0f 90       	pop	r0
    b50c:	df 91       	pop	r29
    b50e:	cf 91       	pop	r28
    b510:	08 95       	ret

0000b512 <ESP8266_Callback_WifiIPSet>:
    b512:	fc 01       	movw	r30, r24
    b514:	ea 52       	subi	r30, 0x2A	; 42
    b516:	ff 4f       	sbci	r31, 0xFF	; 255
    b518:	20 81       	ld	r18, Z
    b51a:	1f 92       	push	r1
    b51c:	2f 93       	push	r18
    b51e:	31 97       	sbiw	r30, 0x01	; 1
    b520:	20 81       	ld	r18, Z
    b522:	1f 92       	push	r1
    b524:	2f 93       	push	r18
    b526:	31 97       	sbiw	r30, 0x01	; 1
    b528:	20 81       	ld	r18, Z
    b52a:	1f 92       	push	r1
    b52c:	2f 93       	push	r18
    b52e:	31 97       	sbiw	r30, 0x01	; 1
    b530:	80 81       	ld	r24, Z
    b532:	1f 92       	push	r1
    b534:	8f 93       	push	r24
    b536:	88 e4       	ldi	r24, 0x48	; 72
    b538:	9b e2       	ldi	r25, 0x2B	; 43
    b53a:	9f 93       	push	r25
    b53c:	8f 93       	push	r24
    b53e:	0e 94 9a 65 	call	0xcb34	; 0xcb34 <printf>
    b542:	8d b7       	in	r24, 0x3d	; 61
    b544:	9e b7       	in	r25, 0x3e	; 62
    b546:	0a 96       	adiw	r24, 0x0a	; 10
    b548:	8d bf       	out	0x3d, r24	; 61
    b54a:	9e bf       	out	0x3e, r25	; 62
    b54c:	08 95       	ret

0000b54e <ESP8266_Callback_DHCPTimeout>:
    b54e:	80 e7       	ldi	r24, 0x70	; 112
    b550:	9b e2       	ldi	r25, 0x2B	; 43
    b552:	0c 94 ab 65 	jmp	0xcb56	; 0xcb56 <puts>

0000b556 <ESP8266_Callback_ClientConnectionConnected>:
    b556:	0f 93       	push	r16
    b558:	1f 93       	push	r17
    b55a:	cf 93       	push	r28
    b55c:	df 93       	push	r29
    b55e:	8c 01       	movw	r16, r24
    b560:	eb 01       	movw	r28, r22
    b562:	8f 8d       	ldd	r24, Y+31	; 0x1f
    b564:	8f 93       	push	r24
    b566:	8e 8d       	ldd	r24, Y+30	; 0x1e
    b568:	8f 93       	push	r24
    b56a:	2b ea       	ldi	r18, 0xAB	; 171
    b56c:	3b e2       	ldi	r19, 0x2B	; 43
    b56e:	3f 93       	push	r19
    b570:	2f 93       	push	r18
    b572:	0e 94 9a 65 	call	0xcb34	; 0xcb34 <printf>
    b576:	0f 90       	pop	r0
    b578:	0f 90       	pop	r0
    b57a:	0f 90       	pop	r0
    b57c:	0f 90       	pop	r0
    b57e:	be 01       	movw	r22, r28
    b580:	c8 01       	movw	r24, r16
    b582:	df 91       	pop	r29
    b584:	cf 91       	pop	r28
    b586:	1f 91       	pop	r17
    b588:	0f 91       	pop	r16
    b58a:	0c 94 2a 32 	jmp	0x6454	; 0x6454 <ESP8266_RequestSendData>

0000b58e <ESP8266_Callback_ClientConnectionError>:
    b58e:	fb 01       	movw	r30, r22
    b590:	81 81       	ldd	r24, Z+1	; 0x01
    b592:	1f 92       	push	r1
    b594:	8f 93       	push	r24
    b596:	8f ed       	ldi	r24, 0xDF	; 223
    b598:	9b e2       	ldi	r25, 0x2B	; 43
    b59a:	9f 93       	push	r25
    b59c:	8f 93       	push	r24
    b59e:	0e 94 9a 65 	call	0xcb34	; 0xcb34 <printf>
    b5a2:	0f 90       	pop	r0
    b5a4:	0f 90       	pop	r0
    b5a6:	0f 90       	pop	r0
    b5a8:	0f 90       	pop	r0
    b5aa:	08 95       	ret

0000b5ac <ESP8266_Callback_ClientConnectionDataSent>:
    b5ac:	8c e1       	ldi	r24, 0x1C	; 28
    b5ae:	9c e2       	ldi	r25, 0x2C	; 44
    b5b0:	0c 94 ab 65 	jmp	0xcb56	; 0xcb56 <puts>

0000b5b4 <ESP8266_Callback_ClientConnectionDataReceived>:
}

void ESP8266_Callback_ClientConnectionDataReceived(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection, char* Buffer) {
    b5b4:	cf 93       	push	r28
    b5b6:	df 93       	push	r29
    b5b8:	eb 01       	movw	r28, r22
	/* Data received from server back to client */
	printf("Data received from server on connection: %s; Number of bytes received: %lu; %lu / %lu;\r\n",
    b5ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    b5bc:	8f 93       	push	r24
    b5be:	8c 8d       	ldd	r24, Y+28	; 0x1c
    b5c0:	8f 93       	push	r24
    b5c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b5c4:	8f 93       	push	r24
    b5c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    b5c8:	8f 93       	push	r24
    b5ca:	89 89       	ldd	r24, Y+17	; 0x11
    b5cc:	8f 93       	push	r24
    b5ce:	88 89       	ldd	r24, Y+16	; 0x10
    b5d0:	8f 93       	push	r24
    b5d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    b5d4:	8f 93       	push	r24
    b5d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    b5d8:	8f 93       	push	r24
    b5da:	8d 85       	ldd	r24, Y+13	; 0x0d
    b5dc:	8f 93       	push	r24
    b5de:	8c 85       	ldd	r24, Y+12	; 0x0c
    b5e0:	8f 93       	push	r24
    b5e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    b5e4:	8f 93       	push	r24
    b5e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    b5e8:	8f 93       	push	r24
    b5ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    b5ec:	8f 93       	push	r24
    b5ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    b5f0:	8f 93       	push	r24
    b5f2:	8c e6       	ldi	r24, 0x6C	; 108
    b5f4:	9c e2       	ldi	r25, 0x2C	; 44
    b5f6:	9f 93       	push	r25
    b5f8:	8f 93       	push	r24
    b5fa:	0e 94 9a 65 	call	0xcb34	; 0xcb34 <printf>
	Connection->TotalBytesReceived,
	Connection->ContentLength
	);
	
	/* Print message when first packet */
	if (Connection->FirstPacket) {
    b5fe:	8d b7       	in	r24, 0x3d	; 61
    b600:	9e b7       	in	r25, 0x3e	; 62
    b602:	40 96       	adiw	r24, 0x10	; 16
    b604:	8d bf       	out	0x3d, r24	; 61
    b606:	9e bf       	out	0x3e, r25	; 62
    b608:	8b a1       	ldd	r24, Y+35	; 0x23
    b60a:	88 23       	and	r24, r24
    b60c:	e9 f0       	breq	.+58     	; 0xb648 <ESP8266_Callback_ClientConnectionDataReceived+0x94>
		
		/* Print first message */
		printf("This is first packet received. Content length on this connection is: %lu\r\n", Connection->ContentLength);
    b60e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    b610:	8f 93       	push	r24
    b612:	8c 8d       	ldd	r24, Y+28	; 0x1c
    b614:	8f 93       	push	r24
    b616:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b618:	8f 93       	push	r24
    b61a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    b61c:	8f 93       	push	r24
    b61e:	85 ec       	ldi	r24, 0xC5	; 197
    b620:	9c e2       	ldi	r25, 0x2C	; 44
    b622:	9f 93       	push	r25
    b624:	8f 93       	push	r24
    b626:	0e 94 9a 65 	call	0xcb34	; 0xcb34 <printf>
		printf("%s\r\n",Connection->Data);
    b62a:	8d 89       	ldd	r24, Y+21	; 0x15
    b62c:	8f 93       	push	r24
    b62e:	8c 89       	ldd	r24, Y+20	; 0x14
    b630:	8f 93       	push	r24
    b632:	86 ea       	ldi	r24, 0xA6	; 166
    b634:	9b e2       	ldi	r25, 0x2B	; 43
    b636:	9f 93       	push	r25
    b638:	8f 93       	push	r24
    b63a:	0e 94 9a 65 	call	0xcb34	; 0xcb34 <printf>
    b63e:	8d b7       	in	r24, 0x3d	; 61
    b640:	9e b7       	in	r25, 0x3e	; 62
    b642:	0a 96       	adiw	r24, 0x0a	; 10
    b644:	8d bf       	out	0x3d, r24	; 61
    b646:	9e bf       	out	0x3e, r25	; 62
	}
}
    b648:	df 91       	pop	r29
    b64a:	cf 91       	pop	r28
    b64c:	08 95       	ret

0000b64e <ESP8266_Callback_ClientConnectionClosed>:

/* Called when connection is closed */
void ESP8266_Callback_ClientConnectionClosed(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
    b64e:	fb 01       	movw	r30, r22
	printf("Client connection closed, connection: %d; Total bytes received: %lu; Content-Length header: %lu\r\n",
    b650:	85 8d       	ldd	r24, Z+29	; 0x1d
    b652:	8f 93       	push	r24
    b654:	84 8d       	ldd	r24, Z+28	; 0x1c
    b656:	8f 93       	push	r24
    b658:	83 8d       	ldd	r24, Z+27	; 0x1b
    b65a:	8f 93       	push	r24
    b65c:	82 8d       	ldd	r24, Z+26	; 0x1a
    b65e:	8f 93       	push	r24
    b660:	81 89       	ldd	r24, Z+17	; 0x11
    b662:	8f 93       	push	r24
    b664:	80 89       	ldd	r24, Z+16	; 0x10
    b666:	8f 93       	push	r24
    b668:	87 85       	ldd	r24, Z+15	; 0x0f
    b66a:	8f 93       	push	r24
    b66c:	86 85       	ldd	r24, Z+14	; 0x0e
    b66e:	8f 93       	push	r24
    b670:	81 81       	ldd	r24, Z+1	; 0x01
    b672:	1f 92       	push	r1
    b674:	8f 93       	push	r24
    b676:	80 e1       	ldi	r24, 0x10	; 16
    b678:	9d e2       	ldi	r25, 0x2D	; 45
    b67a:	9f 93       	push	r25
    b67c:	8f 93       	push	r24
    b67e:	0e 94 9a 65 	call	0xcb34	; 0xcb34 <printf>
	Connection->Number, Connection->TotalBytesReceived, Connection->ContentLength
	);
	connection_open = false;
    b682:	10 92 1a 3c 	sts	0x3C1A, r1
    b686:	8d b7       	in	r24, 0x3d	; 61
    b688:	9e b7       	in	r25, 0x3e	; 62
    b68a:	0c 96       	adiw	r24, 0x0c	; 12
    b68c:	8d bf       	out	0x3d, r24	; 61
    b68e:	9e bf       	out	0x3e, r25	; 62
    b690:	08 95       	ret

0000b692 <ESP8266_Callback_ClientConnectionTimeout>:
}

/* Called when timeout is reached on connection to server */
void ESP8266_Callback_ClientConnectionTimeout(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
	printf("Timeout reached on connection: %d\r\n", Connection->Number);
    b692:	fb 01       	movw	r30, r22
    b694:	81 81       	ldd	r24, Z+1	; 0x01
    b696:	1f 92       	push	r1
    b698:	8f 93       	push	r24
    b69a:	82 e7       	ldi	r24, 0x72	; 114
    b69c:	9d e2       	ldi	r25, 0x2D	; 45
    b69e:	9f 93       	push	r25
    b6a0:	8f 93       	push	r24
    b6a2:	0e 94 9a 65 	call	0xcb34	; 0xcb34 <printf>
    b6a6:	0f 90       	pop	r0
    b6a8:	0f 90       	pop	r0
    b6aa:	0f 90       	pop	r0
    b6ac:	0f 90       	pop	r0
    b6ae:	08 95       	ret

0000b6b0 <__vector_82>:
}

ISR(TCD0_CCD_vect)
{
    b6b0:	1f 92       	push	r1
    b6b2:	0f 92       	push	r0
    b6b4:	0f b6       	in	r0, 0x3f	; 63
    b6b6:	0f 92       	push	r0
    b6b8:	11 24       	eor	r1, r1
    b6ba:	08 b6       	in	r0, 0x38	; 56
    b6bc:	0f 92       	push	r0
    b6be:	18 be       	out	0x38, r1	; 56
    b6c0:	09 b6       	in	r0, 0x39	; 57
    b6c2:	0f 92       	push	r0
    b6c4:	19 be       	out	0x39, r1	; 57
    b6c6:	0b b6       	in	r0, 0x3b	; 59
    b6c8:	0f 92       	push	r0
    b6ca:	1b be       	out	0x3b, r1	; 59
    b6cc:	2f 93       	push	r18
    b6ce:	3f 93       	push	r19
    b6d0:	4f 93       	push	r20
    b6d2:	5f 93       	push	r21
    b6d4:	6f 93       	push	r22
    b6d6:	7f 93       	push	r23
    b6d8:	8f 93       	push	r24
    b6da:	9f 93       	push	r25
    b6dc:	af 93       	push	r26
    b6de:	bf 93       	push	r27
    b6e0:	ef 93       	push	r30
    b6e2:	ff 93       	push	r31
	ESP8266_TimeUpdate(&ESP8266, 1);
    b6e4:	41 e0       	ldi	r20, 0x01	; 1
    b6e6:	50 e0       	ldi	r21, 0x00	; 0
    b6e8:	60 e0       	ldi	r22, 0x00	; 0
    b6ea:	70 e0       	ldi	r23, 0x00	; 0
    b6ec:	8b e1       	ldi	r24, 0x1B	; 27
    b6ee:	9c e3       	ldi	r25, 0x3C	; 60
    b6f0:	0e 94 c9 28 	call	0x5192	; 0x5192 <ESP8266_TimeUpdate>
    b6f4:	ff 91       	pop	r31
    b6f6:	ef 91       	pop	r30
    b6f8:	bf 91       	pop	r27
    b6fa:	af 91       	pop	r26
    b6fc:	9f 91       	pop	r25
    b6fe:	8f 91       	pop	r24
    b700:	7f 91       	pop	r23
    b702:	6f 91       	pop	r22
    b704:	5f 91       	pop	r21
    b706:	4f 91       	pop	r20
    b708:	3f 91       	pop	r19
    b70a:	2f 91       	pop	r18
    b70c:	0f 90       	pop	r0
    b70e:	0b be       	out	0x3b, r0	; 59
    b710:	0f 90       	pop	r0
    b712:	09 be       	out	0x39, r0	; 57
    b714:	0f 90       	pop	r0
    b716:	08 be       	out	0x38, r0	; 56
    b718:	0f 90       	pop	r0
    b71a:	0f be       	out	0x3f, r0	; 63
    b71c:	0f 90       	pop	r0
    b71e:	1f 90       	pop	r1
    b720:	18 95       	reti

0000b722 <time_get_day_name>:
		days_count += time_get_days_in_month(i,year);
	}
	days_count += day;
	
	return days_count;
}
    b722:	81 50       	subi	r24, 0x01	; 1
    b724:	88 30       	cpi	r24, 0x08	; 8
    b726:	48 f4       	brcc	.+18     	; 0xb73a <time_get_day_name+0x18>
    b728:	e8 2f       	mov	r30, r24
    b72a:	f0 e0       	ldi	r31, 0x00	; 0
    b72c:	ee 0f       	add	r30, r30
    b72e:	ff 1f       	adc	r31, r31
    b730:	ed 5c       	subi	r30, 0xCD	; 205
    b732:	f1 4d       	sbci	r31, 0xD1	; 209
    b734:	80 81       	ld	r24, Z
    b736:	91 81       	ldd	r25, Z+1	; 0x01
    b738:	08 95       	ret
    b73a:	86 e9       	ldi	r24, 0x96	; 150
    b73c:	9d e2       	ldi	r25, 0x2D	; 45
    b73e:	08 95       	ret

0000b740 <time_get_month_name>:
    b740:	81 50       	subi	r24, 0x01	; 1
    b742:	8c 30       	cpi	r24, 0x0C	; 12
    b744:	48 f4       	brcc	.+18     	; 0xb758 <time_get_month_name+0x18>
    b746:	e8 2f       	mov	r30, r24
    b748:	f0 e0       	ldi	r31, 0x00	; 0
    b74a:	ee 0f       	add	r30, r30
    b74c:	ff 1f       	adc	r31, r31
    b74e:	e5 5e       	subi	r30, 0xE5	; 229
    b750:	f1 4d       	sbci	r31, 0xD1	; 209
    b752:	80 81       	ld	r24, Z
    b754:	91 81       	ldd	r25, Z+1	; 0x01
    b756:	08 95       	ret
    b758:	86 e9       	ldi	r24, 0x96	; 150
    b75a:	9d e2       	ldi	r25, 0x2D	; 45
    b75c:	08 95       	ret

0000b75e <time_get_weekday>:
    b75e:	cf 93       	push	r28
    b760:	df 93       	push	r29
    b762:	e6 2f       	mov	r30, r22
    b764:	21 e0       	ldi	r18, 0x01	; 1
    b766:	30 e0       	ldi	r19, 0x00	; 0
    b768:	63 30       	cpi	r22, 0x03	; 3
    b76a:	10 f0       	brcs	.+4      	; 0xb770 <time_get_weekday+0x12>
    b76c:	20 e0       	ldi	r18, 0x00	; 0
    b76e:	30 e0       	ldi	r19, 0x00	; 0
    b770:	ea 01       	movw	r28, r20
    b772:	c2 1b       	sub	r28, r18
    b774:	d3 0b       	sbc	r29, r19
    b776:	9e 01       	movw	r18, r28
    b778:	28 0f       	add	r18, r24
    b77a:	31 1d       	adc	r19, r1
    b77c:	ce 01       	movw	r24, r28
    b77e:	96 95       	lsr	r25
    b780:	87 95       	ror	r24
    b782:	96 95       	lsr	r25
    b784:	87 95       	ror	r24
    b786:	28 0f       	add	r18, r24
    b788:	39 1f       	adc	r19, r25
    b78a:	ce 01       	movw	r24, r28
    b78c:	60 e9       	ldi	r22, 0x90	; 144
    b78e:	71 e0       	ldi	r23, 0x01	; 1
    b790:	5c d6       	rcall	.+3256   	; 0xc44a <__udivmodhi4>
    b792:	26 0f       	add	r18, r22
    b794:	37 1f       	adc	r19, r23
    b796:	f0 e0       	ldi	r31, 0x00	; 0
    b798:	ee 0f       	add	r30, r30
    b79a:	ff 1f       	adc	r31, r31
    b79c:	ef 5b       	subi	r30, 0xBF	; 191
    b79e:	f1 4d       	sbci	r31, 0xD1	; 209
    b7a0:	80 81       	ld	r24, Z
    b7a2:	91 81       	ldd	r25, Z+1	; 0x01
    b7a4:	28 0f       	add	r18, r24
    b7a6:	39 1f       	adc	r19, r25
    b7a8:	ce 01       	movw	r24, r28
    b7aa:	64 e6       	ldi	r22, 0x64	; 100
    b7ac:	70 e0       	ldi	r23, 0x00	; 0
    b7ae:	4d d6       	rcall	.+3226   	; 0xc44a <__udivmodhi4>
    b7b0:	26 1b       	sub	r18, r22
    b7b2:	37 0b       	sbc	r19, r23
    b7b4:	c9 01       	movw	r24, r18
    b7b6:	67 e0       	ldi	r22, 0x07	; 7
    b7b8:	70 e0       	ldi	r23, 0x00	; 0
    b7ba:	47 d6       	rcall	.+3214   	; 0xc44a <__udivmodhi4>
    b7bc:	8c 5e       	subi	r24, 0xEC	; 236
    b7be:	91 4d       	sbci	r25, 0xD1	; 209
    b7c0:	fc 01       	movw	r30, r24
    b7c2:	80 81       	ld	r24, Z
    b7c4:	df 91       	pop	r29
    b7c6:	cf 91       	pop	r28
    b7c8:	08 95       	ret

0000b7ca <time_is_leap_year>:
    b7ca:	9c 01       	movw	r18, r24
    b7cc:	83 70       	andi	r24, 0x03	; 3
    b7ce:	99 27       	eor	r25, r25
    b7d0:	89 2b       	or	r24, r25
    b7d2:	31 f4       	brne	.+12     	; 0xb7e0 <time_is_leap_year+0x16>
    b7d4:	c9 01       	movw	r24, r18
    b7d6:	64 e6       	ldi	r22, 0x64	; 100
    b7d8:	70 e0       	ldi	r23, 0x00	; 0
    b7da:	37 d6       	rcall	.+3182   	; 0xc44a <__udivmodhi4>
    b7dc:	89 2b       	or	r24, r25
    b7de:	49 f4       	brne	.+18     	; 0xb7f2 <time_is_leap_year+0x28>
    b7e0:	c9 01       	movw	r24, r18
    b7e2:	60 e9       	ldi	r22, 0x90	; 144
    b7e4:	71 e0       	ldi	r23, 0x01	; 1
    b7e6:	31 d6       	rcall	.+3170   	; 0xc44a <__udivmodhi4>
    b7e8:	21 e0       	ldi	r18, 0x01	; 1
    b7ea:	89 2b       	or	r24, r25
    b7ec:	19 f0       	breq	.+6      	; 0xb7f4 <time_is_leap_year+0x2a>
    b7ee:	20 e0       	ldi	r18, 0x00	; 0
    b7f0:	01 c0       	rjmp	.+2      	; 0xb7f4 <time_is_leap_year+0x2a>
    b7f2:	21 e0       	ldi	r18, 0x01	; 1
    b7f4:	82 2f       	mov	r24, r18
    b7f6:	08 95       	ret

0000b7f8 <time_get_days_in_month>:
    b7f8:	48 2f       	mov	r20, r24
    b7fa:	cb 01       	movw	r24, r22
    b7fc:	50 e0       	ldi	r21, 0x00	; 0
    b7fe:	fa 01       	movw	r30, r20
    b800:	31 97       	sbiw	r30, 0x01	; 1
    b802:	ec 30       	cpi	r30, 0x0C	; 12
    b804:	f1 05       	cpc	r31, r1
    b806:	50 f4       	brcc	.+20     	; 0xb81c <time_get_days_in_month+0x24>
    b808:	ea 5c       	subi	r30, 0xCA	; 202
    b80a:	fe 4f       	sbci	r31, 0xFE	; 254
    b80c:	67 c6       	rjmp	.+3278   	; 0xc4dc <__tablejump2__>
    b80e:	8f e1       	ldi	r24, 0x1F	; 31
    b810:	08 95       	ret
    b812:	db df       	rcall	.-74     	; 0xb7ca <time_is_leap_year>
    b814:	88 23       	and	r24, r24
    b816:	31 f0       	breq	.+12     	; 0xb824 <time_get_days_in_month+0x2c>
    b818:	8d e1       	ldi	r24, 0x1D	; 29
    b81a:	08 95       	ret
    b81c:	80 e0       	ldi	r24, 0x00	; 0
    b81e:	08 95       	ret
    b820:	8e e1       	ldi	r24, 0x1E	; 30
    b822:	08 95       	ret
    b824:	8c e1       	ldi	r24, 0x1C	; 28
    b826:	08 95       	ret

0000b828 <time_get_weeknumber>:
		return false;
}

// Static Method to return ISO WeekNumber (1-53) for a given year
int16_t time_get_weeknumber(uint8_t day, uint8_t month, uint16_t year) 
{	    
    b828:	cf 92       	push	r12
    b82a:	df 92       	push	r13
    b82c:	ef 92       	push	r14
    b82e:	ff 92       	push	r15
    b830:	0f 93       	push	r16
    b832:	1f 93       	push	r17
    b834:	cf 93       	push	r28
    b836:	df 93       	push	r29
    b838:	cd b7       	in	r28, 0x3d	; 61
    b83a:	de b7       	in	r29, 0x3e	; 62
    b83c:	68 97       	sbiw	r28, 0x18	; 24
    b83e:	cd bf       	out	0x3d, r28	; 61
    b840:	de bf       	out	0x3e, r29	; 62
    b842:	7a 01       	movw	r14, r20
	int16_t yyyy = year;
	int16_t mm= month;
    b844:	c6 2e       	mov	r12, r22
    b846:	d1 2c       	mov	r13, r1
	int16_t day_of_year_number;
	int16_t jan_1_weekday;
	int16_t week_number = 0, weekday;
	    
	int16_t i,j,k,l,m,n;
	int16_t mnth[12] = {0,31,59,90,120,151,181,212,243,273,304,334};
    b848:	98 e1       	ldi	r25, 0x18	; 24
    b84a:	ee eb       	ldi	r30, 0xBE	; 190
    b84c:	f0 e2       	ldi	r31, 0x20	; 32
    b84e:	de 01       	movw	r26, r28
    b850:	11 96       	adiw	r26, 0x01	; 1
    b852:	01 90       	ld	r0, Z+
    b854:	0d 92       	st	X+, r0
    b856:	9a 95       	dec	r25
    b858:	e1 f7       	brne	.-8      	; 0xb852 <time_get_weeknumber+0x2a>

	int16_t year_number;
	    
	// Set DayofYear Number for yyyy mm dd
	day_of_year_number = dd + mnth[mm-1];
    b85a:	f6 01       	movw	r30, r12
    b85c:	31 97       	sbiw	r30, 0x01	; 1
    b85e:	ee 0f       	add	r30, r30
    b860:	ff 1f       	adc	r31, r31
    b862:	21 e0       	ldi	r18, 0x01	; 1
    b864:	30 e0       	ldi	r19, 0x00	; 0
    b866:	2c 0f       	add	r18, r28
    b868:	3d 1f       	adc	r19, r29
    b86a:	e2 0f       	add	r30, r18
    b86c:	f3 1f       	adc	r31, r19
    b86e:	00 81       	ld	r16, Z
    b870:	11 81       	ldd	r17, Z+1	; 0x01
    b872:	08 0f       	add	r16, r24
    b874:	11 1d       	adc	r17, r1

	// Increase of Dayof Year Number by 1, if year is leapyear and month is february
	if ((time_is_leap_year(yyyy) == true) && (mm == 2))
    b876:	ca 01       	movw	r24, r20
    b878:	a8 df       	rcall	.-176    	; 0xb7ca <time_is_leap_year>
    b87a:	48 2f       	mov	r20, r24
    b87c:	88 23       	and	r24, r24
    b87e:	31 f0       	breq	.+12     	; 0xb88c <time_get_weeknumber+0x64>
    b880:	32 e0       	ldi	r19, 0x02	; 2
    b882:	c3 16       	cp	r12, r19
    b884:	d1 04       	cpc	r13, r1
    b886:	11 f4       	brne	.+4      	; 0xb88c <time_get_weeknumber+0x64>
	day_of_year_number += 1;
    b888:	0f 5f       	subi	r16, 0xFF	; 255
    b88a:	1f 4f       	sbci	r17, 0xFF	; 255

	// Find the Jan1WeekDay for year
	i = (yyyy - 1) % 100;
    b88c:	51 e0       	ldi	r21, 0x01	; 1
    b88e:	e5 1a       	sub	r14, r21
    b890:	f1 08       	sbc	r15, r1
    b892:	e4 e6       	ldi	r30, 0x64	; 100
    b894:	f0 e0       	ldi	r31, 0x00	; 0
    b896:	c7 01       	movw	r24, r14
    b898:	bf 01       	movw	r22, r30
    b89a:	eb d5       	rcall	.+3030   	; 0xc472 <__divmodhi4>
    b89c:	9c 01       	movw	r18, r24
	j = (yyyy - 1) - i;
    b89e:	c7 01       	movw	r24, r14
    b8a0:	82 1b       	sub	r24, r18
    b8a2:	93 0b       	sbc	r25, r19
	k = i + i/4;
	jan_1_weekday = 1 + (((((j / 100) % 4) * 5) + k) % 7);
    b8a4:	bf 01       	movw	r22, r30
    b8a6:	e5 d5       	rcall	.+3018   	; 0xc472 <__divmodhi4>
    b8a8:	cb 01       	movw	r24, r22
    b8aa:	64 e0       	ldi	r22, 0x04	; 4
    b8ac:	70 e0       	ldi	r23, 0x00	; 0
    b8ae:	e1 d5       	rcall	.+3010   	; 0xc472 <__divmodhi4>
    b8b0:	55 e0       	ldi	r21, 0x05	; 5
    b8b2:	58 9f       	mul	r21, r24
    b8b4:	b0 01       	movw	r22, r0
    b8b6:	59 9f       	mul	r21, r25
    b8b8:	70 0d       	add	r23, r0
    b8ba:	11 24       	eor	r1, r1
	day_of_year_number += 1;

	// Find the Jan1WeekDay for year
	i = (yyyy - 1) % 100;
	j = (yyyy - 1) - i;
	k = i + i/4;
    b8bc:	c9 01       	movw	r24, r18
    b8be:	37 fd       	sbrc	r19, 7
    b8c0:	03 96       	adiw	r24, 0x03	; 3
    b8c2:	95 95       	asr	r25
    b8c4:	87 95       	ror	r24
    b8c6:	95 95       	asr	r25
    b8c8:	87 95       	ror	r24
    b8ca:	82 0f       	add	r24, r18
    b8cc:	93 1f       	adc	r25, r19
	jan_1_weekday = 1 + (((((j / 100) % 4) * 5) + k) % 7);
    b8ce:	86 0f       	add	r24, r22
    b8d0:	97 1f       	adc	r25, r23
    b8d2:	27 e0       	ldi	r18, 0x07	; 7
    b8d4:	e2 2e       	mov	r14, r18
    b8d6:	f1 2c       	mov	r15, r1
    b8d8:	b7 01       	movw	r22, r14
    b8da:	cb d5       	rcall	.+2966   	; 0xc472 <__divmodhi4>
    b8dc:	9c 01       	movw	r18, r24
    b8de:	fc 01       	movw	r30, r24
    b8e0:	31 96       	adiw	r30, 0x01	; 1
	// Calcuate the WeekDay for the given date
	l = day_of_year_number + (jan_1_weekday - 1);
	weekday = 1 + ((l - 1) % 7);

	// Find if the date falls in YearNumber set WeekNumber to 52 or 53
	if ((day_of_year_number <= (8 - jan_1_weekday)) && (jan_1_weekday > 4))
    b8e2:	e8 1a       	sub	r14, r24
    b8e4:	f9 0a       	sbc	r15, r25
    b8e6:	e0 16       	cp	r14, r16
    b8e8:	f1 06       	cpc	r15, r17
    b8ea:	5c f0       	brlt	.+22     	; 0xb902 <time_get_weeknumber+0xda>
    b8ec:	e5 30       	cpi	r30, 0x05	; 5
    b8ee:	f1 05       	cpc	r31, r1
    b8f0:	44 f0       	brlt	.+16     	; 0xb902 <time_get_weeknumber+0xda>
	{
		year_number = yyyy - 1;
		if ((jan_1_weekday == 5) || ((jan_1_weekday == 6) && (jan_1_weekday > 4)))
    b8f2:	37 97       	sbiw	r30, 0x07	; 7
    b8f4:	19 f4       	brne	.+6      	; 0xb8fc <time_get_weeknumber+0xd4>
		week_number = 53;
		else
		week_number = 52;
    b8f6:	84 e3       	ldi	r24, 0x34	; 52
    b8f8:	90 e0       	ldi	r25, 0x00	; 0
    b8fa:	30 c0       	rjmp	.+96     	; 0xb95c <time_get_weeknumber+0x134>
	// Find if the date falls in YearNumber set WeekNumber to 52 or 53
	if ((day_of_year_number <= (8 - jan_1_weekday)) && (jan_1_weekday > 4))
	{
		year_number = yyyy - 1;
		if ((jan_1_weekday == 5) || ((jan_1_weekday == 6) && (jan_1_weekday > 4)))
		week_number = 53;
    b8fc:	85 e3       	ldi	r24, 0x35	; 53
    b8fe:	90 e0       	ldi	r25, 0x00	; 0
    b900:	2d c0       	rjmp	.+90     	; 0xb95c <time_get_weeknumber+0x134>
	year_number = yyyy;
	    
	// Set WeekNumber to 1 to 53 if date falls in YearNumber
	if (year_number == yyyy)
	{
		if (time_is_leap_year(yyyy)==true)
    b902:	44 23       	and	r20, r20
    b904:	29 f0       	breq	.+10     	; 0xb910 <time_get_weeknumber+0xe8>
		m = 366;
    b906:	ae e6       	ldi	r26, 0x6E	; 110
    b908:	ca 2e       	mov	r12, r26
    b90a:	dd 24       	eor	r13, r13
    b90c:	d3 94       	inc	r13
    b90e:	04 c0       	rjmp	.+8      	; 0xb918 <time_get_weeknumber+0xf0>
		else
		m = 365;
    b910:	7d e6       	ldi	r23, 0x6D	; 109
    b912:	c7 2e       	mov	r12, r23
    b914:	dd 24       	eor	r13, r13
    b916:	d3 94       	inc	r13
	j = (yyyy - 1) - i;
	k = i + i/4;
	jan_1_weekday = 1 + (((((j / 100) % 4) * 5) + k) % 7);

	// Calcuate the WeekDay for the given date
	l = day_of_year_number + (jan_1_weekday - 1);
    b918:	c8 01       	movw	r24, r16
    b91a:	82 0f       	add	r24, r18
    b91c:	93 1f       	adc	r25, r19
	weekday = 1 + ((l - 1) % 7);
    b91e:	01 97       	sbiw	r24, 0x01	; 1
    b920:	67 e0       	ldi	r22, 0x07	; 7
    b922:	e6 2e       	mov	r14, r22
    b924:	f1 2c       	mov	r15, r1
    b926:	b7 01       	movw	r22, r14
    b928:	a4 d5       	rcall	.+2888   	; 0xc472 <__divmodhi4>
	{
		if (time_is_leap_year(yyyy)==true)
		m = 366;
		else
		m = 365;
		if ((m - day_of_year_number) < (4-weekday))
    b92a:	c0 1a       	sub	r12, r16
    b92c:	d1 0a       	sbc	r13, r17
    b92e:	43 e0       	ldi	r20, 0x03	; 3
    b930:	50 e0       	ldi	r21, 0x00	; 0
    b932:	48 1b       	sub	r20, r24
    b934:	59 0b       	sbc	r21, r25
    b936:	c4 16       	cp	r12, r20
    b938:	d5 06       	cpc	r13, r21
    b93a:	74 f0       	brlt	.+28     	; 0xb958 <time_get_weeknumber+0x130>
			week_number = 1;
		}
	}
	    
	if (year_number==yyyy) {
		n = day_of_year_number + (7 - weekday) + (jan_1_weekday -1);
    b93c:	a8 01       	movw	r20, r16
    b93e:	48 1b       	sub	r20, r24
    b940:	59 0b       	sbc	r21, r25
    b942:	ca 01       	movw	r24, r20
    b944:	06 96       	adiw	r24, 0x06	; 6
    b946:	82 0f       	add	r24, r18
    b948:	93 1f       	adc	r25, r19
		week_number = n / 7;
    b94a:	b7 01       	movw	r22, r14
    b94c:	92 d5       	rcall	.+2852   	; 0xc472 <__divmodhi4>
    b94e:	cb 01       	movw	r24, r22
		if (jan_1_weekday > 4)
    b950:	35 97       	sbiw	r30, 0x05	; 5
    b952:	24 f0       	brlt	.+8      	; 0xb95c <time_get_weeknumber+0x134>
		week_number -= 1;
    b954:	01 97       	sbiw	r24, 0x01	; 1
    b956:	02 c0       	rjmp	.+4      	; 0xb95c <time_get_weeknumber+0x134>
		else
		m = 365;
		if ((m - day_of_year_number) < (4-weekday))
		{
			year_number = yyyy + 1;
			week_number = 1;
    b958:	81 e0       	ldi	r24, 0x01	; 1
    b95a:	90 e0       	ldi	r25, 0x00	; 0
		if (jan_1_weekday > 4)
		week_number -= 1;
	}

	return (week_number);
}
    b95c:	68 96       	adiw	r28, 0x18	; 24
    b95e:	cd bf       	out	0x3d, r28	; 61
    b960:	de bf       	out	0x3e, r29	; 62
    b962:	df 91       	pop	r29
    b964:	cf 91       	pop	r28
    b966:	1f 91       	pop	r17
    b968:	0f 91       	pop	r16
    b96a:	ff 90       	pop	r15
    b96c:	ef 90       	pop	r14
    b96e:	df 90       	pop	r13
    b970:	cf 90       	pop	r12
    b972:	08 95       	ret

0000b974 <__subsf3>:
    b974:	50 58       	subi	r21, 0x80	; 128

0000b976 <__addsf3>:
    b976:	bb 27       	eor	r27, r27
    b978:	aa 27       	eor	r26, r26
    b97a:	0e d0       	rcall	.+28     	; 0xb998 <__addsf3x>
    b97c:	48 c1       	rjmp	.+656    	; 0xbc0e <__fp_round>
    b97e:	39 d1       	rcall	.+626    	; 0xbbf2 <__fp_pscA>
    b980:	30 f0       	brcs	.+12     	; 0xb98e <__addsf3+0x18>
    b982:	3e d1       	rcall	.+636    	; 0xbc00 <__fp_pscB>
    b984:	20 f0       	brcs	.+8      	; 0xb98e <__addsf3+0x18>
    b986:	31 f4       	brne	.+12     	; 0xb994 <__addsf3+0x1e>
    b988:	9f 3f       	cpi	r25, 0xFF	; 255
    b98a:	11 f4       	brne	.+4      	; 0xb990 <__addsf3+0x1a>
    b98c:	1e f4       	brtc	.+6      	; 0xb994 <__addsf3+0x1e>
    b98e:	2e c1       	rjmp	.+604    	; 0xbbec <__fp_nan>
    b990:	0e f4       	brtc	.+2      	; 0xb994 <__addsf3+0x1e>
    b992:	e0 95       	com	r30
    b994:	e7 fb       	bst	r30, 7
    b996:	24 c1       	rjmp	.+584    	; 0xbbe0 <__fp_inf>

0000b998 <__addsf3x>:
    b998:	e9 2f       	mov	r30, r25
    b99a:	4a d1       	rcall	.+660    	; 0xbc30 <__fp_split3>
    b99c:	80 f3       	brcs	.-32     	; 0xb97e <__addsf3+0x8>
    b99e:	ba 17       	cp	r27, r26
    b9a0:	62 07       	cpc	r22, r18
    b9a2:	73 07       	cpc	r23, r19
    b9a4:	84 07       	cpc	r24, r20
    b9a6:	95 07       	cpc	r25, r21
    b9a8:	18 f0       	brcs	.+6      	; 0xb9b0 <__addsf3x+0x18>
    b9aa:	71 f4       	brne	.+28     	; 0xb9c8 <__addsf3x+0x30>
    b9ac:	9e f5       	brtc	.+102    	; 0xba14 <__addsf3x+0x7c>
    b9ae:	62 c1       	rjmp	.+708    	; 0xbc74 <__fp_zero>
    b9b0:	0e f4       	brtc	.+2      	; 0xb9b4 <__addsf3x+0x1c>
    b9b2:	e0 95       	com	r30
    b9b4:	0b 2e       	mov	r0, r27
    b9b6:	ba 2f       	mov	r27, r26
    b9b8:	a0 2d       	mov	r26, r0
    b9ba:	0b 01       	movw	r0, r22
    b9bc:	b9 01       	movw	r22, r18
    b9be:	90 01       	movw	r18, r0
    b9c0:	0c 01       	movw	r0, r24
    b9c2:	ca 01       	movw	r24, r20
    b9c4:	a0 01       	movw	r20, r0
    b9c6:	11 24       	eor	r1, r1
    b9c8:	ff 27       	eor	r31, r31
    b9ca:	59 1b       	sub	r21, r25
    b9cc:	99 f0       	breq	.+38     	; 0xb9f4 <__addsf3x+0x5c>
    b9ce:	59 3f       	cpi	r21, 0xF9	; 249
    b9d0:	50 f4       	brcc	.+20     	; 0xb9e6 <__addsf3x+0x4e>
    b9d2:	50 3e       	cpi	r21, 0xE0	; 224
    b9d4:	68 f1       	brcs	.+90     	; 0xba30 <__addsf3x+0x98>
    b9d6:	1a 16       	cp	r1, r26
    b9d8:	f0 40       	sbci	r31, 0x00	; 0
    b9da:	a2 2f       	mov	r26, r18
    b9dc:	23 2f       	mov	r18, r19
    b9de:	34 2f       	mov	r19, r20
    b9e0:	44 27       	eor	r20, r20
    b9e2:	58 5f       	subi	r21, 0xF8	; 248
    b9e4:	f3 cf       	rjmp	.-26     	; 0xb9cc <__addsf3x+0x34>
    b9e6:	46 95       	lsr	r20
    b9e8:	37 95       	ror	r19
    b9ea:	27 95       	ror	r18
    b9ec:	a7 95       	ror	r26
    b9ee:	f0 40       	sbci	r31, 0x00	; 0
    b9f0:	53 95       	inc	r21
    b9f2:	c9 f7       	brne	.-14     	; 0xb9e6 <__addsf3x+0x4e>
    b9f4:	7e f4       	brtc	.+30     	; 0xba14 <__addsf3x+0x7c>
    b9f6:	1f 16       	cp	r1, r31
    b9f8:	ba 0b       	sbc	r27, r26
    b9fa:	62 0b       	sbc	r22, r18
    b9fc:	73 0b       	sbc	r23, r19
    b9fe:	84 0b       	sbc	r24, r20
    ba00:	ba f0       	brmi	.+46     	; 0xba30 <__addsf3x+0x98>
    ba02:	91 50       	subi	r25, 0x01	; 1
    ba04:	a1 f0       	breq	.+40     	; 0xba2e <__addsf3x+0x96>
    ba06:	ff 0f       	add	r31, r31
    ba08:	bb 1f       	adc	r27, r27
    ba0a:	66 1f       	adc	r22, r22
    ba0c:	77 1f       	adc	r23, r23
    ba0e:	88 1f       	adc	r24, r24
    ba10:	c2 f7       	brpl	.-16     	; 0xba02 <__addsf3x+0x6a>
    ba12:	0e c0       	rjmp	.+28     	; 0xba30 <__addsf3x+0x98>
    ba14:	ba 0f       	add	r27, r26
    ba16:	62 1f       	adc	r22, r18
    ba18:	73 1f       	adc	r23, r19
    ba1a:	84 1f       	adc	r24, r20
    ba1c:	48 f4       	brcc	.+18     	; 0xba30 <__addsf3x+0x98>
    ba1e:	87 95       	ror	r24
    ba20:	77 95       	ror	r23
    ba22:	67 95       	ror	r22
    ba24:	b7 95       	ror	r27
    ba26:	f7 95       	ror	r31
    ba28:	9e 3f       	cpi	r25, 0xFE	; 254
    ba2a:	08 f0       	brcs	.+2      	; 0xba2e <__addsf3x+0x96>
    ba2c:	b3 cf       	rjmp	.-154    	; 0xb994 <__addsf3+0x1e>
    ba2e:	93 95       	inc	r25
    ba30:	88 0f       	add	r24, r24
    ba32:	08 f0       	brcs	.+2      	; 0xba36 <__addsf3x+0x9e>
    ba34:	99 27       	eor	r25, r25
    ba36:	ee 0f       	add	r30, r30
    ba38:	97 95       	ror	r25
    ba3a:	87 95       	ror	r24
    ba3c:	08 95       	ret

0000ba3e <__divsf3>:
    ba3e:	0c d0       	rcall	.+24     	; 0xba58 <__divsf3x>
    ba40:	e6 c0       	rjmp	.+460    	; 0xbc0e <__fp_round>
    ba42:	de d0       	rcall	.+444    	; 0xbc00 <__fp_pscB>
    ba44:	40 f0       	brcs	.+16     	; 0xba56 <__divsf3+0x18>
    ba46:	d5 d0       	rcall	.+426    	; 0xbbf2 <__fp_pscA>
    ba48:	30 f0       	brcs	.+12     	; 0xba56 <__divsf3+0x18>
    ba4a:	21 f4       	brne	.+8      	; 0xba54 <__divsf3+0x16>
    ba4c:	5f 3f       	cpi	r21, 0xFF	; 255
    ba4e:	19 f0       	breq	.+6      	; 0xba56 <__divsf3+0x18>
    ba50:	c7 c0       	rjmp	.+398    	; 0xbbe0 <__fp_inf>
    ba52:	51 11       	cpse	r21, r1
    ba54:	10 c1       	rjmp	.+544    	; 0xbc76 <__fp_szero>
    ba56:	ca c0       	rjmp	.+404    	; 0xbbec <__fp_nan>

0000ba58 <__divsf3x>:
    ba58:	eb d0       	rcall	.+470    	; 0xbc30 <__fp_split3>
    ba5a:	98 f3       	brcs	.-26     	; 0xba42 <__divsf3+0x4>

0000ba5c <__divsf3_pse>:
    ba5c:	99 23       	and	r25, r25
    ba5e:	c9 f3       	breq	.-14     	; 0xba52 <__divsf3+0x14>
    ba60:	55 23       	and	r21, r21
    ba62:	b1 f3       	breq	.-20     	; 0xba50 <__divsf3+0x12>
    ba64:	95 1b       	sub	r25, r21
    ba66:	55 0b       	sbc	r21, r21
    ba68:	bb 27       	eor	r27, r27
    ba6a:	aa 27       	eor	r26, r26
    ba6c:	62 17       	cp	r22, r18
    ba6e:	73 07       	cpc	r23, r19
    ba70:	84 07       	cpc	r24, r20
    ba72:	38 f0       	brcs	.+14     	; 0xba82 <__divsf3_pse+0x26>
    ba74:	9f 5f       	subi	r25, 0xFF	; 255
    ba76:	5f 4f       	sbci	r21, 0xFF	; 255
    ba78:	22 0f       	add	r18, r18
    ba7a:	33 1f       	adc	r19, r19
    ba7c:	44 1f       	adc	r20, r20
    ba7e:	aa 1f       	adc	r26, r26
    ba80:	a9 f3       	breq	.-22     	; 0xba6c <__divsf3_pse+0x10>
    ba82:	33 d0       	rcall	.+102    	; 0xbaea <__divsf3_pse+0x8e>
    ba84:	0e 2e       	mov	r0, r30
    ba86:	3a f0       	brmi	.+14     	; 0xba96 <__divsf3_pse+0x3a>
    ba88:	e0 e8       	ldi	r30, 0x80	; 128
    ba8a:	30 d0       	rcall	.+96     	; 0xbaec <__divsf3_pse+0x90>
    ba8c:	91 50       	subi	r25, 0x01	; 1
    ba8e:	50 40       	sbci	r21, 0x00	; 0
    ba90:	e6 95       	lsr	r30
    ba92:	00 1c       	adc	r0, r0
    ba94:	ca f7       	brpl	.-14     	; 0xba88 <__divsf3_pse+0x2c>
    ba96:	29 d0       	rcall	.+82     	; 0xbaea <__divsf3_pse+0x8e>
    ba98:	fe 2f       	mov	r31, r30
    ba9a:	27 d0       	rcall	.+78     	; 0xbaea <__divsf3_pse+0x8e>
    ba9c:	66 0f       	add	r22, r22
    ba9e:	77 1f       	adc	r23, r23
    baa0:	88 1f       	adc	r24, r24
    baa2:	bb 1f       	adc	r27, r27
    baa4:	26 17       	cp	r18, r22
    baa6:	37 07       	cpc	r19, r23
    baa8:	48 07       	cpc	r20, r24
    baaa:	ab 07       	cpc	r26, r27
    baac:	b0 e8       	ldi	r27, 0x80	; 128
    baae:	09 f0       	breq	.+2      	; 0xbab2 <__divsf3_pse+0x56>
    bab0:	bb 0b       	sbc	r27, r27
    bab2:	80 2d       	mov	r24, r0
    bab4:	bf 01       	movw	r22, r30
    bab6:	ff 27       	eor	r31, r31
    bab8:	93 58       	subi	r25, 0x83	; 131
    baba:	5f 4f       	sbci	r21, 0xFF	; 255
    babc:	2a f0       	brmi	.+10     	; 0xbac8 <__divsf3_pse+0x6c>
    babe:	9e 3f       	cpi	r25, 0xFE	; 254
    bac0:	51 05       	cpc	r21, r1
    bac2:	68 f0       	brcs	.+26     	; 0xbade <__divsf3_pse+0x82>
    bac4:	8d c0       	rjmp	.+282    	; 0xbbe0 <__fp_inf>
    bac6:	d7 c0       	rjmp	.+430    	; 0xbc76 <__fp_szero>
    bac8:	5f 3f       	cpi	r21, 0xFF	; 255
    baca:	ec f3       	brlt	.-6      	; 0xbac6 <__divsf3_pse+0x6a>
    bacc:	98 3e       	cpi	r25, 0xE8	; 232
    bace:	dc f3       	brlt	.-10     	; 0xbac6 <__divsf3_pse+0x6a>
    bad0:	86 95       	lsr	r24
    bad2:	77 95       	ror	r23
    bad4:	67 95       	ror	r22
    bad6:	b7 95       	ror	r27
    bad8:	f7 95       	ror	r31
    bada:	9f 5f       	subi	r25, 0xFF	; 255
    badc:	c9 f7       	brne	.-14     	; 0xbad0 <__divsf3_pse+0x74>
    bade:	88 0f       	add	r24, r24
    bae0:	91 1d       	adc	r25, r1
    bae2:	96 95       	lsr	r25
    bae4:	87 95       	ror	r24
    bae6:	97 f9       	bld	r25, 7
    bae8:	08 95       	ret
    baea:	e1 e0       	ldi	r30, 0x01	; 1
    baec:	66 0f       	add	r22, r22
    baee:	77 1f       	adc	r23, r23
    baf0:	88 1f       	adc	r24, r24
    baf2:	bb 1f       	adc	r27, r27
    baf4:	62 17       	cp	r22, r18
    baf6:	73 07       	cpc	r23, r19
    baf8:	84 07       	cpc	r24, r20
    bafa:	ba 07       	cpc	r27, r26
    bafc:	20 f0       	brcs	.+8      	; 0xbb06 <__divsf3_pse+0xaa>
    bafe:	62 1b       	sub	r22, r18
    bb00:	73 0b       	sbc	r23, r19
    bb02:	84 0b       	sbc	r24, r20
    bb04:	ba 0b       	sbc	r27, r26
    bb06:	ee 1f       	adc	r30, r30
    bb08:	88 f7       	brcc	.-30     	; 0xbaec <__divsf3_pse+0x90>
    bb0a:	e0 95       	com	r30
    bb0c:	08 95       	ret

0000bb0e <__fixunssfsi>:
    bb0e:	98 d0       	rcall	.+304    	; 0xbc40 <__fp_splitA>
    bb10:	88 f0       	brcs	.+34     	; 0xbb34 <__fixunssfsi+0x26>
    bb12:	9f 57       	subi	r25, 0x7F	; 127
    bb14:	90 f0       	brcs	.+36     	; 0xbb3a <__fixunssfsi+0x2c>
    bb16:	b9 2f       	mov	r27, r25
    bb18:	99 27       	eor	r25, r25
    bb1a:	b7 51       	subi	r27, 0x17	; 23
    bb1c:	a0 f0       	brcs	.+40     	; 0xbb46 <__fixunssfsi+0x38>
    bb1e:	d1 f0       	breq	.+52     	; 0xbb54 <__fixunssfsi+0x46>
    bb20:	66 0f       	add	r22, r22
    bb22:	77 1f       	adc	r23, r23
    bb24:	88 1f       	adc	r24, r24
    bb26:	99 1f       	adc	r25, r25
    bb28:	1a f0       	brmi	.+6      	; 0xbb30 <__fixunssfsi+0x22>
    bb2a:	ba 95       	dec	r27
    bb2c:	c9 f7       	brne	.-14     	; 0xbb20 <__fixunssfsi+0x12>
    bb2e:	12 c0       	rjmp	.+36     	; 0xbb54 <__fixunssfsi+0x46>
    bb30:	b1 30       	cpi	r27, 0x01	; 1
    bb32:	81 f0       	breq	.+32     	; 0xbb54 <__fixunssfsi+0x46>
    bb34:	9f d0       	rcall	.+318    	; 0xbc74 <__fp_zero>
    bb36:	b1 e0       	ldi	r27, 0x01	; 1
    bb38:	08 95       	ret
    bb3a:	9c c0       	rjmp	.+312    	; 0xbc74 <__fp_zero>
    bb3c:	67 2f       	mov	r22, r23
    bb3e:	78 2f       	mov	r23, r24
    bb40:	88 27       	eor	r24, r24
    bb42:	b8 5f       	subi	r27, 0xF8	; 248
    bb44:	39 f0       	breq	.+14     	; 0xbb54 <__fixunssfsi+0x46>
    bb46:	b9 3f       	cpi	r27, 0xF9	; 249
    bb48:	cc f3       	brlt	.-14     	; 0xbb3c <__fixunssfsi+0x2e>
    bb4a:	86 95       	lsr	r24
    bb4c:	77 95       	ror	r23
    bb4e:	67 95       	ror	r22
    bb50:	b3 95       	inc	r27
    bb52:	d9 f7       	brne	.-10     	; 0xbb4a <__fixunssfsi+0x3c>
    bb54:	3e f4       	brtc	.+14     	; 0xbb64 <__fixunssfsi+0x56>
    bb56:	90 95       	com	r25
    bb58:	80 95       	com	r24
    bb5a:	70 95       	com	r23
    bb5c:	61 95       	neg	r22
    bb5e:	7f 4f       	sbci	r23, 0xFF	; 255
    bb60:	8f 4f       	sbci	r24, 0xFF	; 255
    bb62:	9f 4f       	sbci	r25, 0xFF	; 255
    bb64:	08 95       	ret

0000bb66 <__floatunsisf>:
    bb66:	e8 94       	clt
    bb68:	09 c0       	rjmp	.+18     	; 0xbb7c <__floatsisf+0x12>

0000bb6a <__floatsisf>:
    bb6a:	97 fb       	bst	r25, 7
    bb6c:	3e f4       	brtc	.+14     	; 0xbb7c <__floatsisf+0x12>
    bb6e:	90 95       	com	r25
    bb70:	80 95       	com	r24
    bb72:	70 95       	com	r23
    bb74:	61 95       	neg	r22
    bb76:	7f 4f       	sbci	r23, 0xFF	; 255
    bb78:	8f 4f       	sbci	r24, 0xFF	; 255
    bb7a:	9f 4f       	sbci	r25, 0xFF	; 255
    bb7c:	99 23       	and	r25, r25
    bb7e:	a9 f0       	breq	.+42     	; 0xbbaa <__floatsisf+0x40>
    bb80:	f9 2f       	mov	r31, r25
    bb82:	96 e9       	ldi	r25, 0x96	; 150
    bb84:	bb 27       	eor	r27, r27
    bb86:	93 95       	inc	r25
    bb88:	f6 95       	lsr	r31
    bb8a:	87 95       	ror	r24
    bb8c:	77 95       	ror	r23
    bb8e:	67 95       	ror	r22
    bb90:	b7 95       	ror	r27
    bb92:	f1 11       	cpse	r31, r1
    bb94:	f8 cf       	rjmp	.-16     	; 0xbb86 <__floatsisf+0x1c>
    bb96:	fa f4       	brpl	.+62     	; 0xbbd6 <__floatsisf+0x6c>
    bb98:	bb 0f       	add	r27, r27
    bb9a:	11 f4       	brne	.+4      	; 0xbba0 <__floatsisf+0x36>
    bb9c:	60 ff       	sbrs	r22, 0
    bb9e:	1b c0       	rjmp	.+54     	; 0xbbd6 <__floatsisf+0x6c>
    bba0:	6f 5f       	subi	r22, 0xFF	; 255
    bba2:	7f 4f       	sbci	r23, 0xFF	; 255
    bba4:	8f 4f       	sbci	r24, 0xFF	; 255
    bba6:	9f 4f       	sbci	r25, 0xFF	; 255
    bba8:	16 c0       	rjmp	.+44     	; 0xbbd6 <__floatsisf+0x6c>
    bbaa:	88 23       	and	r24, r24
    bbac:	11 f0       	breq	.+4      	; 0xbbb2 <__floatsisf+0x48>
    bbae:	96 e9       	ldi	r25, 0x96	; 150
    bbb0:	11 c0       	rjmp	.+34     	; 0xbbd4 <__floatsisf+0x6a>
    bbb2:	77 23       	and	r23, r23
    bbb4:	21 f0       	breq	.+8      	; 0xbbbe <__floatsisf+0x54>
    bbb6:	9e e8       	ldi	r25, 0x8E	; 142
    bbb8:	87 2f       	mov	r24, r23
    bbba:	76 2f       	mov	r23, r22
    bbbc:	05 c0       	rjmp	.+10     	; 0xbbc8 <__floatsisf+0x5e>
    bbbe:	66 23       	and	r22, r22
    bbc0:	71 f0       	breq	.+28     	; 0xbbde <__floatsisf+0x74>
    bbc2:	96 e8       	ldi	r25, 0x86	; 134
    bbc4:	86 2f       	mov	r24, r22
    bbc6:	70 e0       	ldi	r23, 0x00	; 0
    bbc8:	60 e0       	ldi	r22, 0x00	; 0
    bbca:	2a f0       	brmi	.+10     	; 0xbbd6 <__floatsisf+0x6c>
    bbcc:	9a 95       	dec	r25
    bbce:	66 0f       	add	r22, r22
    bbd0:	77 1f       	adc	r23, r23
    bbd2:	88 1f       	adc	r24, r24
    bbd4:	da f7       	brpl	.-10     	; 0xbbcc <__floatsisf+0x62>
    bbd6:	88 0f       	add	r24, r24
    bbd8:	96 95       	lsr	r25
    bbda:	87 95       	ror	r24
    bbdc:	97 f9       	bld	r25, 7
    bbde:	08 95       	ret

0000bbe0 <__fp_inf>:
    bbe0:	97 f9       	bld	r25, 7
    bbe2:	9f 67       	ori	r25, 0x7F	; 127
    bbe4:	80 e8       	ldi	r24, 0x80	; 128
    bbe6:	70 e0       	ldi	r23, 0x00	; 0
    bbe8:	60 e0       	ldi	r22, 0x00	; 0
    bbea:	08 95       	ret

0000bbec <__fp_nan>:
    bbec:	9f ef       	ldi	r25, 0xFF	; 255
    bbee:	80 ec       	ldi	r24, 0xC0	; 192
    bbf0:	08 95       	ret

0000bbf2 <__fp_pscA>:
    bbf2:	00 24       	eor	r0, r0
    bbf4:	0a 94       	dec	r0
    bbf6:	16 16       	cp	r1, r22
    bbf8:	17 06       	cpc	r1, r23
    bbfa:	18 06       	cpc	r1, r24
    bbfc:	09 06       	cpc	r0, r25
    bbfe:	08 95       	ret

0000bc00 <__fp_pscB>:
    bc00:	00 24       	eor	r0, r0
    bc02:	0a 94       	dec	r0
    bc04:	12 16       	cp	r1, r18
    bc06:	13 06       	cpc	r1, r19
    bc08:	14 06       	cpc	r1, r20
    bc0a:	05 06       	cpc	r0, r21
    bc0c:	08 95       	ret

0000bc0e <__fp_round>:
    bc0e:	09 2e       	mov	r0, r25
    bc10:	03 94       	inc	r0
    bc12:	00 0c       	add	r0, r0
    bc14:	11 f4       	brne	.+4      	; 0xbc1a <__fp_round+0xc>
    bc16:	88 23       	and	r24, r24
    bc18:	52 f0       	brmi	.+20     	; 0xbc2e <__fp_round+0x20>
    bc1a:	bb 0f       	add	r27, r27
    bc1c:	40 f4       	brcc	.+16     	; 0xbc2e <__fp_round+0x20>
    bc1e:	bf 2b       	or	r27, r31
    bc20:	11 f4       	brne	.+4      	; 0xbc26 <__fp_round+0x18>
    bc22:	60 ff       	sbrs	r22, 0
    bc24:	04 c0       	rjmp	.+8      	; 0xbc2e <__fp_round+0x20>
    bc26:	6f 5f       	subi	r22, 0xFF	; 255
    bc28:	7f 4f       	sbci	r23, 0xFF	; 255
    bc2a:	8f 4f       	sbci	r24, 0xFF	; 255
    bc2c:	9f 4f       	sbci	r25, 0xFF	; 255
    bc2e:	08 95       	ret

0000bc30 <__fp_split3>:
    bc30:	57 fd       	sbrc	r21, 7
    bc32:	90 58       	subi	r25, 0x80	; 128
    bc34:	44 0f       	add	r20, r20
    bc36:	55 1f       	adc	r21, r21
    bc38:	59 f0       	breq	.+22     	; 0xbc50 <__fp_splitA+0x10>
    bc3a:	5f 3f       	cpi	r21, 0xFF	; 255
    bc3c:	71 f0       	breq	.+28     	; 0xbc5a <__fp_splitA+0x1a>
    bc3e:	47 95       	ror	r20

0000bc40 <__fp_splitA>:
    bc40:	88 0f       	add	r24, r24
    bc42:	97 fb       	bst	r25, 7
    bc44:	99 1f       	adc	r25, r25
    bc46:	61 f0       	breq	.+24     	; 0xbc60 <__fp_splitA+0x20>
    bc48:	9f 3f       	cpi	r25, 0xFF	; 255
    bc4a:	79 f0       	breq	.+30     	; 0xbc6a <__fp_splitA+0x2a>
    bc4c:	87 95       	ror	r24
    bc4e:	08 95       	ret
    bc50:	12 16       	cp	r1, r18
    bc52:	13 06       	cpc	r1, r19
    bc54:	14 06       	cpc	r1, r20
    bc56:	55 1f       	adc	r21, r21
    bc58:	f2 cf       	rjmp	.-28     	; 0xbc3e <__fp_split3+0xe>
    bc5a:	46 95       	lsr	r20
    bc5c:	f1 df       	rcall	.-30     	; 0xbc40 <__fp_splitA>
    bc5e:	08 c0       	rjmp	.+16     	; 0xbc70 <__fp_splitA+0x30>
    bc60:	16 16       	cp	r1, r22
    bc62:	17 06       	cpc	r1, r23
    bc64:	18 06       	cpc	r1, r24
    bc66:	99 1f       	adc	r25, r25
    bc68:	f1 cf       	rjmp	.-30     	; 0xbc4c <__fp_splitA+0xc>
    bc6a:	86 95       	lsr	r24
    bc6c:	71 05       	cpc	r23, r1
    bc6e:	61 05       	cpc	r22, r1
    bc70:	08 94       	sec
    bc72:	08 95       	ret

0000bc74 <__fp_zero>:
    bc74:	e8 94       	clt

0000bc76 <__fp_szero>:
    bc76:	bb 27       	eor	r27, r27
    bc78:	66 27       	eor	r22, r22
    bc7a:	77 27       	eor	r23, r23
    bc7c:	cb 01       	movw	r24, r22
    bc7e:	97 f9       	bld	r25, 7
    bc80:	08 95       	ret

0000bc82 <__mulsf3>:
    bc82:	0b d0       	rcall	.+22     	; 0xbc9a <__mulsf3x>
    bc84:	c4 cf       	rjmp	.-120    	; 0xbc0e <__fp_round>
    bc86:	b5 df       	rcall	.-150    	; 0xbbf2 <__fp_pscA>
    bc88:	28 f0       	brcs	.+10     	; 0xbc94 <__mulsf3+0x12>
    bc8a:	ba df       	rcall	.-140    	; 0xbc00 <__fp_pscB>
    bc8c:	18 f0       	brcs	.+6      	; 0xbc94 <__mulsf3+0x12>
    bc8e:	95 23       	and	r25, r21
    bc90:	09 f0       	breq	.+2      	; 0xbc94 <__mulsf3+0x12>
    bc92:	a6 cf       	rjmp	.-180    	; 0xbbe0 <__fp_inf>
    bc94:	ab cf       	rjmp	.-170    	; 0xbbec <__fp_nan>
    bc96:	11 24       	eor	r1, r1
    bc98:	ee cf       	rjmp	.-36     	; 0xbc76 <__fp_szero>

0000bc9a <__mulsf3x>:
    bc9a:	ca df       	rcall	.-108    	; 0xbc30 <__fp_split3>
    bc9c:	a0 f3       	brcs	.-24     	; 0xbc86 <__mulsf3+0x4>

0000bc9e <__mulsf3_pse>:
    bc9e:	95 9f       	mul	r25, r21
    bca0:	d1 f3       	breq	.-12     	; 0xbc96 <__mulsf3+0x14>
    bca2:	95 0f       	add	r25, r21
    bca4:	50 e0       	ldi	r21, 0x00	; 0
    bca6:	55 1f       	adc	r21, r21
    bca8:	62 9f       	mul	r22, r18
    bcaa:	f0 01       	movw	r30, r0
    bcac:	72 9f       	mul	r23, r18
    bcae:	bb 27       	eor	r27, r27
    bcb0:	f0 0d       	add	r31, r0
    bcb2:	b1 1d       	adc	r27, r1
    bcb4:	63 9f       	mul	r22, r19
    bcb6:	aa 27       	eor	r26, r26
    bcb8:	f0 0d       	add	r31, r0
    bcba:	b1 1d       	adc	r27, r1
    bcbc:	aa 1f       	adc	r26, r26
    bcbe:	64 9f       	mul	r22, r20
    bcc0:	66 27       	eor	r22, r22
    bcc2:	b0 0d       	add	r27, r0
    bcc4:	a1 1d       	adc	r26, r1
    bcc6:	66 1f       	adc	r22, r22
    bcc8:	82 9f       	mul	r24, r18
    bcca:	22 27       	eor	r18, r18
    bccc:	b0 0d       	add	r27, r0
    bcce:	a1 1d       	adc	r26, r1
    bcd0:	62 1f       	adc	r22, r18
    bcd2:	73 9f       	mul	r23, r19
    bcd4:	b0 0d       	add	r27, r0
    bcd6:	a1 1d       	adc	r26, r1
    bcd8:	62 1f       	adc	r22, r18
    bcda:	83 9f       	mul	r24, r19
    bcdc:	a0 0d       	add	r26, r0
    bcde:	61 1d       	adc	r22, r1
    bce0:	22 1f       	adc	r18, r18
    bce2:	74 9f       	mul	r23, r20
    bce4:	33 27       	eor	r19, r19
    bce6:	a0 0d       	add	r26, r0
    bce8:	61 1d       	adc	r22, r1
    bcea:	23 1f       	adc	r18, r19
    bcec:	84 9f       	mul	r24, r20
    bcee:	60 0d       	add	r22, r0
    bcf0:	21 1d       	adc	r18, r1
    bcf2:	82 2f       	mov	r24, r18
    bcf4:	76 2f       	mov	r23, r22
    bcf6:	6a 2f       	mov	r22, r26
    bcf8:	11 24       	eor	r1, r1
    bcfa:	9f 57       	subi	r25, 0x7F	; 127
    bcfc:	50 40       	sbci	r21, 0x00	; 0
    bcfe:	8a f0       	brmi	.+34     	; 0xbd22 <__mulsf3_pse+0x84>
    bd00:	e1 f0       	breq	.+56     	; 0xbd3a <__mulsf3_pse+0x9c>
    bd02:	88 23       	and	r24, r24
    bd04:	4a f0       	brmi	.+18     	; 0xbd18 <__mulsf3_pse+0x7a>
    bd06:	ee 0f       	add	r30, r30
    bd08:	ff 1f       	adc	r31, r31
    bd0a:	bb 1f       	adc	r27, r27
    bd0c:	66 1f       	adc	r22, r22
    bd0e:	77 1f       	adc	r23, r23
    bd10:	88 1f       	adc	r24, r24
    bd12:	91 50       	subi	r25, 0x01	; 1
    bd14:	50 40       	sbci	r21, 0x00	; 0
    bd16:	a9 f7       	brne	.-22     	; 0xbd02 <__mulsf3_pse+0x64>
    bd18:	9e 3f       	cpi	r25, 0xFE	; 254
    bd1a:	51 05       	cpc	r21, r1
    bd1c:	70 f0       	brcs	.+28     	; 0xbd3a <__mulsf3_pse+0x9c>
    bd1e:	60 cf       	rjmp	.-320    	; 0xbbe0 <__fp_inf>
    bd20:	aa cf       	rjmp	.-172    	; 0xbc76 <__fp_szero>
    bd22:	5f 3f       	cpi	r21, 0xFF	; 255
    bd24:	ec f3       	brlt	.-6      	; 0xbd20 <__mulsf3_pse+0x82>
    bd26:	98 3e       	cpi	r25, 0xE8	; 232
    bd28:	dc f3       	brlt	.-10     	; 0xbd20 <__mulsf3_pse+0x82>
    bd2a:	86 95       	lsr	r24
    bd2c:	77 95       	ror	r23
    bd2e:	67 95       	ror	r22
    bd30:	b7 95       	ror	r27
    bd32:	f7 95       	ror	r31
    bd34:	e7 95       	ror	r30
    bd36:	9f 5f       	subi	r25, 0xFF	; 255
    bd38:	c1 f7       	brne	.-16     	; 0xbd2a <__mulsf3_pse+0x8c>
    bd3a:	fe 2b       	or	r31, r30
    bd3c:	88 0f       	add	r24, r24
    bd3e:	91 1d       	adc	r25, r1
    bd40:	96 95       	lsr	r25
    bd42:	87 95       	ror	r24
    bd44:	97 f9       	bld	r25, 7
    bd46:	08 95       	ret

0000bd48 <vfprintf>:
    bd48:	2f 92       	push	r2
    bd4a:	3f 92       	push	r3
    bd4c:	4f 92       	push	r4
    bd4e:	5f 92       	push	r5
    bd50:	6f 92       	push	r6
    bd52:	7f 92       	push	r7
    bd54:	8f 92       	push	r8
    bd56:	9f 92       	push	r9
    bd58:	af 92       	push	r10
    bd5a:	bf 92       	push	r11
    bd5c:	cf 92       	push	r12
    bd5e:	df 92       	push	r13
    bd60:	ef 92       	push	r14
    bd62:	ff 92       	push	r15
    bd64:	0f 93       	push	r16
    bd66:	1f 93       	push	r17
    bd68:	cf 93       	push	r28
    bd6a:	df 93       	push	r29
    bd6c:	cd b7       	in	r28, 0x3d	; 61
    bd6e:	de b7       	in	r29, 0x3e	; 62
    bd70:	63 97       	sbiw	r28, 0x13	; 19
    bd72:	cd bf       	out	0x3d, r28	; 61
    bd74:	de bf       	out	0x3e, r29	; 62
    bd76:	7c 01       	movw	r14, r24
    bd78:	1b 01       	movw	r2, r22
    bd7a:	6a 01       	movw	r12, r20
    bd7c:	fc 01       	movw	r30, r24
    bd7e:	16 82       	std	Z+6, r1	; 0x06
    bd80:	17 82       	std	Z+7, r1	; 0x07
    bd82:	83 81       	ldd	r24, Z+3	; 0x03
    bd84:	81 ff       	sbrs	r24, 1
    bd86:	49 c3       	rjmp	.+1682   	; 0xc41a <vfprintf+0x6d2>
    bd88:	be 01       	movw	r22, r28
    bd8a:	6f 5f       	subi	r22, 0xFF	; 255
    bd8c:	7f 4f       	sbci	r23, 0xFF	; 255
    bd8e:	4b 01       	movw	r8, r22
    bd90:	f7 01       	movw	r30, r14
    bd92:	93 81       	ldd	r25, Z+3	; 0x03
    bd94:	f1 01       	movw	r30, r2
    bd96:	93 fd       	sbrc	r25, 3
    bd98:	85 91       	lpm	r24, Z+
    bd9a:	93 ff       	sbrs	r25, 3
    bd9c:	81 91       	ld	r24, Z+
    bd9e:	1f 01       	movw	r2, r30
    bda0:	88 23       	and	r24, r24
    bda2:	09 f4       	brne	.+2      	; 0xbda6 <vfprintf+0x5e>
    bda4:	36 c3       	rjmp	.+1644   	; 0xc412 <vfprintf+0x6ca>
    bda6:	85 32       	cpi	r24, 0x25	; 37
    bda8:	39 f4       	brne	.+14     	; 0xbdb8 <vfprintf+0x70>
    bdaa:	93 fd       	sbrc	r25, 3
    bdac:	85 91       	lpm	r24, Z+
    bdae:	93 ff       	sbrs	r25, 3
    bdb0:	81 91       	ld	r24, Z+
    bdb2:	1f 01       	movw	r2, r30
    bdb4:	85 32       	cpi	r24, 0x25	; 37
    bdb6:	31 f4       	brne	.+12     	; 0xbdc4 <vfprintf+0x7c>
    bdb8:	b7 01       	movw	r22, r14
    bdba:	90 e0       	ldi	r25, 0x00	; 0
    bdbc:	89 d6       	rcall	.+3346   	; 0xcad0 <fputc>
    bdbe:	56 01       	movw	r10, r12
    bdc0:	65 01       	movw	r12, r10
    bdc2:	e6 cf       	rjmp	.-52     	; 0xbd90 <vfprintf+0x48>
    bdc4:	10 e0       	ldi	r17, 0x00	; 0
    bdc6:	51 2c       	mov	r5, r1
    bdc8:	20 e0       	ldi	r18, 0x00	; 0
    bdca:	20 32       	cpi	r18, 0x20	; 32
    bdcc:	a0 f4       	brcc	.+40     	; 0xbdf6 <vfprintf+0xae>
    bdce:	8b 32       	cpi	r24, 0x2B	; 43
    bdd0:	69 f0       	breq	.+26     	; 0xbdec <vfprintf+0xa4>
    bdd2:	30 f4       	brcc	.+12     	; 0xbde0 <vfprintf+0x98>
    bdd4:	80 32       	cpi	r24, 0x20	; 32
    bdd6:	59 f0       	breq	.+22     	; 0xbdee <vfprintf+0xa6>
    bdd8:	83 32       	cpi	r24, 0x23	; 35
    bdda:	69 f4       	brne	.+26     	; 0xbdf6 <vfprintf+0xae>
    bddc:	20 61       	ori	r18, 0x10	; 16
    bdde:	2c c0       	rjmp	.+88     	; 0xbe38 <vfprintf+0xf0>
    bde0:	8d 32       	cpi	r24, 0x2D	; 45
    bde2:	39 f0       	breq	.+14     	; 0xbdf2 <vfprintf+0xaa>
    bde4:	80 33       	cpi	r24, 0x30	; 48
    bde6:	39 f4       	brne	.+14     	; 0xbdf6 <vfprintf+0xae>
    bde8:	21 60       	ori	r18, 0x01	; 1
    bdea:	26 c0       	rjmp	.+76     	; 0xbe38 <vfprintf+0xf0>
    bdec:	22 60       	ori	r18, 0x02	; 2
    bdee:	24 60       	ori	r18, 0x04	; 4
    bdf0:	23 c0       	rjmp	.+70     	; 0xbe38 <vfprintf+0xf0>
    bdf2:	28 60       	ori	r18, 0x08	; 8
    bdf4:	21 c0       	rjmp	.+66     	; 0xbe38 <vfprintf+0xf0>
    bdf6:	27 fd       	sbrc	r18, 7
    bdf8:	27 c0       	rjmp	.+78     	; 0xbe48 <vfprintf+0x100>
    bdfa:	30 ed       	ldi	r19, 0xD0	; 208
    bdfc:	38 0f       	add	r19, r24
    bdfe:	3a 30       	cpi	r19, 0x0A	; 10
    be00:	78 f4       	brcc	.+30     	; 0xbe20 <vfprintf+0xd8>
    be02:	26 ff       	sbrs	r18, 6
    be04:	06 c0       	rjmp	.+12     	; 0xbe12 <vfprintf+0xca>
    be06:	fa e0       	ldi	r31, 0x0A	; 10
    be08:	1f 9f       	mul	r17, r31
    be0a:	30 0d       	add	r19, r0
    be0c:	11 24       	eor	r1, r1
    be0e:	13 2f       	mov	r17, r19
    be10:	13 c0       	rjmp	.+38     	; 0xbe38 <vfprintf+0xf0>
    be12:	6a e0       	ldi	r22, 0x0A	; 10
    be14:	56 9e       	mul	r5, r22
    be16:	30 0d       	add	r19, r0
    be18:	11 24       	eor	r1, r1
    be1a:	53 2e       	mov	r5, r19
    be1c:	20 62       	ori	r18, 0x20	; 32
    be1e:	0c c0       	rjmp	.+24     	; 0xbe38 <vfprintf+0xf0>
    be20:	8e 32       	cpi	r24, 0x2E	; 46
    be22:	21 f4       	brne	.+8      	; 0xbe2c <vfprintf+0xe4>
    be24:	26 fd       	sbrc	r18, 6
    be26:	f5 c2       	rjmp	.+1514   	; 0xc412 <vfprintf+0x6ca>
    be28:	20 64       	ori	r18, 0x40	; 64
    be2a:	06 c0       	rjmp	.+12     	; 0xbe38 <vfprintf+0xf0>
    be2c:	8c 36       	cpi	r24, 0x6C	; 108
    be2e:	11 f4       	brne	.+4      	; 0xbe34 <vfprintf+0xec>
    be30:	20 68       	ori	r18, 0x80	; 128
    be32:	02 c0       	rjmp	.+4      	; 0xbe38 <vfprintf+0xf0>
    be34:	88 36       	cpi	r24, 0x68	; 104
    be36:	41 f4       	brne	.+16     	; 0xbe48 <vfprintf+0x100>
    be38:	f1 01       	movw	r30, r2
    be3a:	93 fd       	sbrc	r25, 3
    be3c:	85 91       	lpm	r24, Z+
    be3e:	93 ff       	sbrs	r25, 3
    be40:	81 91       	ld	r24, Z+
    be42:	1f 01       	movw	r2, r30
    be44:	81 11       	cpse	r24, r1
    be46:	c1 cf       	rjmp	.-126    	; 0xbdca <vfprintf+0x82>
    be48:	9b eb       	ldi	r25, 0xBB	; 187
    be4a:	98 0f       	add	r25, r24
    be4c:	93 30       	cpi	r25, 0x03	; 3
    be4e:	18 f4       	brcc	.+6      	; 0xbe56 <vfprintf+0x10e>
    be50:	20 61       	ori	r18, 0x10	; 16
    be52:	80 5e       	subi	r24, 0xE0	; 224
    be54:	06 c0       	rjmp	.+12     	; 0xbe62 <vfprintf+0x11a>
    be56:	9b e9       	ldi	r25, 0x9B	; 155
    be58:	98 0f       	add	r25, r24
    be5a:	93 30       	cpi	r25, 0x03	; 3
    be5c:	08 f0       	brcs	.+2      	; 0xbe60 <vfprintf+0x118>
    be5e:	9a c1       	rjmp	.+820    	; 0xc194 <vfprintf+0x44c>
    be60:	2f 7e       	andi	r18, 0xEF	; 239
    be62:	26 ff       	sbrs	r18, 6
    be64:	16 e0       	ldi	r17, 0x06	; 6
    be66:	2f 73       	andi	r18, 0x3F	; 63
    be68:	72 2e       	mov	r7, r18
    be6a:	85 36       	cpi	r24, 0x65	; 101
    be6c:	21 f4       	brne	.+8      	; 0xbe76 <vfprintf+0x12e>
    be6e:	f2 2f       	mov	r31, r18
    be70:	f0 64       	ori	r31, 0x40	; 64
    be72:	7f 2e       	mov	r7, r31
    be74:	08 c0       	rjmp	.+16     	; 0xbe86 <vfprintf+0x13e>
    be76:	86 36       	cpi	r24, 0x66	; 102
    be78:	21 f4       	brne	.+8      	; 0xbe82 <vfprintf+0x13a>
    be7a:	62 2f       	mov	r22, r18
    be7c:	60 68       	ori	r22, 0x80	; 128
    be7e:	76 2e       	mov	r7, r22
    be80:	02 c0       	rjmp	.+4      	; 0xbe86 <vfprintf+0x13e>
    be82:	11 11       	cpse	r17, r1
    be84:	11 50       	subi	r17, 0x01	; 1
    be86:	77 fe       	sbrs	r7, 7
    be88:	07 c0       	rjmp	.+14     	; 0xbe98 <vfprintf+0x150>
    be8a:	1c 33       	cpi	r17, 0x3C	; 60
    be8c:	48 f4       	brcc	.+18     	; 0xbea0 <vfprintf+0x158>
    be8e:	44 24       	eor	r4, r4
    be90:	43 94       	inc	r4
    be92:	41 0e       	add	r4, r17
    be94:	27 e0       	ldi	r18, 0x07	; 7
    be96:	0b c0       	rjmp	.+22     	; 0xbeae <vfprintf+0x166>
    be98:	18 30       	cpi	r17, 0x08	; 8
    be9a:	30 f4       	brcc	.+12     	; 0xbea8 <vfprintf+0x160>
    be9c:	21 2f       	mov	r18, r17
    be9e:	06 c0       	rjmp	.+12     	; 0xbeac <vfprintf+0x164>
    bea0:	27 e0       	ldi	r18, 0x07	; 7
    bea2:	4c e3       	ldi	r20, 0x3C	; 60
    bea4:	44 2e       	mov	r4, r20
    bea6:	03 c0       	rjmp	.+6      	; 0xbeae <vfprintf+0x166>
    bea8:	27 e0       	ldi	r18, 0x07	; 7
    beaa:	17 e0       	ldi	r17, 0x07	; 7
    beac:	41 2c       	mov	r4, r1
    beae:	56 01       	movw	r10, r12
    beb0:	74 e0       	ldi	r23, 0x04	; 4
    beb2:	a7 0e       	add	r10, r23
    beb4:	b1 1c       	adc	r11, r1
    beb6:	f6 01       	movw	r30, r12
    beb8:	60 81       	ld	r22, Z
    beba:	71 81       	ldd	r23, Z+1	; 0x01
    bebc:	82 81       	ldd	r24, Z+2	; 0x02
    bebe:	93 81       	ldd	r25, Z+3	; 0x03
    bec0:	04 2d       	mov	r16, r4
    bec2:	a4 01       	movw	r20, r8
    bec4:	6b d4       	rcall	.+2262   	; 0xc79c <__ftoa_engine>
    bec6:	6c 01       	movw	r12, r24
    bec8:	09 81       	ldd	r16, Y+1	; 0x01
    beca:	00 ff       	sbrs	r16, 0
    becc:	02 c0       	rjmp	.+4      	; 0xbed2 <vfprintf+0x18a>
    bece:	03 ff       	sbrs	r16, 3
    bed0:	06 c0       	rjmp	.+12     	; 0xbede <vfprintf+0x196>
    bed2:	71 fc       	sbrc	r7, 1
    bed4:	07 c0       	rjmp	.+14     	; 0xbee4 <vfprintf+0x19c>
    bed6:	72 fc       	sbrc	r7, 2
    bed8:	08 c0       	rjmp	.+16     	; 0xbeea <vfprintf+0x1a2>
    beda:	61 2c       	mov	r6, r1
    bedc:	08 c0       	rjmp	.+16     	; 0xbeee <vfprintf+0x1a6>
    bede:	3d e2       	ldi	r19, 0x2D	; 45
    bee0:	63 2e       	mov	r6, r19
    bee2:	05 c0       	rjmp	.+10     	; 0xbeee <vfprintf+0x1a6>
    bee4:	2b e2       	ldi	r18, 0x2B	; 43
    bee6:	62 2e       	mov	r6, r18
    bee8:	02 c0       	rjmp	.+4      	; 0xbeee <vfprintf+0x1a6>
    beea:	90 e2       	ldi	r25, 0x20	; 32
    beec:	69 2e       	mov	r6, r25
    beee:	80 2f       	mov	r24, r16
    bef0:	8c 70       	andi	r24, 0x0C	; 12
    bef2:	81 f1       	breq	.+96     	; 0xbf54 <vfprintf+0x20c>
    bef4:	66 20       	and	r6, r6
    bef6:	11 f0       	breq	.+4      	; 0xbefc <vfprintf+0x1b4>
    bef8:	84 e0       	ldi	r24, 0x04	; 4
    befa:	01 c0       	rjmp	.+2      	; 0xbefe <vfprintf+0x1b6>
    befc:	83 e0       	ldi	r24, 0x03	; 3
    befe:	85 15       	cp	r24, r5
    bf00:	10 f0       	brcs	.+4      	; 0xbf06 <vfprintf+0x1be>
    bf02:	51 2c       	mov	r5, r1
    bf04:	0a c0       	rjmp	.+20     	; 0xbf1a <vfprintf+0x1d2>
    bf06:	58 1a       	sub	r5, r24
    bf08:	73 fc       	sbrc	r7, 3
    bf0a:	07 c0       	rjmp	.+14     	; 0xbf1a <vfprintf+0x1d2>
    bf0c:	b7 01       	movw	r22, r14
    bf0e:	80 e2       	ldi	r24, 0x20	; 32
    bf10:	90 e0       	ldi	r25, 0x00	; 0
    bf12:	de d5       	rcall	.+3004   	; 0xcad0 <fputc>
    bf14:	5a 94       	dec	r5
    bf16:	d1 f7       	brne	.-12     	; 0xbf0c <vfprintf+0x1c4>
    bf18:	f4 cf       	rjmp	.-24     	; 0xbf02 <vfprintf+0x1ba>
    bf1a:	66 20       	and	r6, r6
    bf1c:	21 f0       	breq	.+8      	; 0xbf26 <vfprintf+0x1de>
    bf1e:	b7 01       	movw	r22, r14
    bf20:	86 2d       	mov	r24, r6
    bf22:	90 e0       	ldi	r25, 0x00	; 0
    bf24:	d5 d5       	rcall	.+2986   	; 0xcad0 <fputc>
    bf26:	03 fd       	sbrc	r16, 3
    bf28:	03 c0       	rjmp	.+6      	; 0xbf30 <vfprintf+0x1e8>
    bf2a:	09 e8       	ldi	r16, 0x89	; 137
    bf2c:	1d e0       	ldi	r17, 0x0D	; 13
    bf2e:	02 c0       	rjmp	.+4      	; 0xbf34 <vfprintf+0x1ec>
    bf30:	05 e8       	ldi	r16, 0x85	; 133
    bf32:	1d e0       	ldi	r17, 0x0D	; 13
    bf34:	f7 2d       	mov	r31, r7
    bf36:	f0 71       	andi	r31, 0x10	; 16
    bf38:	7f 2e       	mov	r7, r31
    bf3a:	f8 01       	movw	r30, r16
    bf3c:	84 91       	lpm	r24, Z
    bf3e:	88 23       	and	r24, r24
    bf40:	09 f4       	brne	.+2      	; 0xbf44 <vfprintf+0x1fc>
    bf42:	5e c2       	rjmp	.+1212   	; 0xc400 <vfprintf+0x6b8>
    bf44:	71 10       	cpse	r7, r1
    bf46:	80 52       	subi	r24, 0x20	; 32
    bf48:	b7 01       	movw	r22, r14
    bf4a:	90 e0       	ldi	r25, 0x00	; 0
    bf4c:	c1 d5       	rcall	.+2946   	; 0xcad0 <fputc>
    bf4e:	0f 5f       	subi	r16, 0xFF	; 255
    bf50:	1f 4f       	sbci	r17, 0xFF	; 255
    bf52:	f3 cf       	rjmp	.-26     	; 0xbf3a <vfprintf+0x1f2>
    bf54:	77 fe       	sbrs	r7, 7
    bf56:	0f c0       	rjmp	.+30     	; 0xbf76 <vfprintf+0x22e>
    bf58:	4c 0c       	add	r4, r12
    bf5a:	04 ff       	sbrs	r16, 4
    bf5c:	04 c0       	rjmp	.+8      	; 0xbf66 <vfprintf+0x21e>
    bf5e:	8a 81       	ldd	r24, Y+2	; 0x02
    bf60:	81 33       	cpi	r24, 0x31	; 49
    bf62:	09 f4       	brne	.+2      	; 0xbf66 <vfprintf+0x21e>
    bf64:	4a 94       	dec	r4
    bf66:	14 14       	cp	r1, r4
    bf68:	74 f5       	brge	.+92     	; 0xbfc6 <vfprintf+0x27e>
    bf6a:	f8 e0       	ldi	r31, 0x08	; 8
    bf6c:	f4 15       	cp	r31, r4
    bf6e:	78 f5       	brcc	.+94     	; 0xbfce <vfprintf+0x286>
    bf70:	88 e0       	ldi	r24, 0x08	; 8
    bf72:	48 2e       	mov	r4, r24
    bf74:	2c c0       	rjmp	.+88     	; 0xbfce <vfprintf+0x286>
    bf76:	76 fc       	sbrc	r7, 6
    bf78:	2a c0       	rjmp	.+84     	; 0xbfce <vfprintf+0x286>
    bf7a:	81 2f       	mov	r24, r17
    bf7c:	90 e0       	ldi	r25, 0x00	; 0
    bf7e:	8c 15       	cp	r24, r12
    bf80:	9d 05       	cpc	r25, r13
    bf82:	9c f0       	brlt	.+38     	; 0xbfaa <vfprintf+0x262>
    bf84:	6c ef       	ldi	r22, 0xFC	; 252
    bf86:	c6 16       	cp	r12, r22
    bf88:	6f ef       	ldi	r22, 0xFF	; 255
    bf8a:	d6 06       	cpc	r13, r22
    bf8c:	74 f0       	brlt	.+28     	; 0xbfaa <vfprintf+0x262>
    bf8e:	77 2d       	mov	r23, r7
    bf90:	70 68       	ori	r23, 0x80	; 128
    bf92:	77 2e       	mov	r7, r23
    bf94:	0a c0       	rjmp	.+20     	; 0xbfaa <vfprintf+0x262>
    bf96:	e2 e0       	ldi	r30, 0x02	; 2
    bf98:	f0 e0       	ldi	r31, 0x00	; 0
    bf9a:	ec 0f       	add	r30, r28
    bf9c:	fd 1f       	adc	r31, r29
    bf9e:	e1 0f       	add	r30, r17
    bfa0:	f1 1d       	adc	r31, r1
    bfa2:	80 81       	ld	r24, Z
    bfa4:	80 33       	cpi	r24, 0x30	; 48
    bfa6:	19 f4       	brne	.+6      	; 0xbfae <vfprintf+0x266>
    bfa8:	11 50       	subi	r17, 0x01	; 1
    bfaa:	11 11       	cpse	r17, r1
    bfac:	f4 cf       	rjmp	.-24     	; 0xbf96 <vfprintf+0x24e>
    bfae:	77 fe       	sbrs	r7, 7
    bfb0:	0e c0       	rjmp	.+28     	; 0xbfce <vfprintf+0x286>
    bfb2:	44 24       	eor	r4, r4
    bfb4:	43 94       	inc	r4
    bfb6:	41 0e       	add	r4, r17
    bfb8:	81 2f       	mov	r24, r17
    bfba:	90 e0       	ldi	r25, 0x00	; 0
    bfbc:	c8 16       	cp	r12, r24
    bfbe:	d9 06       	cpc	r13, r25
    bfc0:	2c f4       	brge	.+10     	; 0xbfcc <vfprintf+0x284>
    bfc2:	1c 19       	sub	r17, r12
    bfc4:	04 c0       	rjmp	.+8      	; 0xbfce <vfprintf+0x286>
    bfc6:	44 24       	eor	r4, r4
    bfc8:	43 94       	inc	r4
    bfca:	01 c0       	rjmp	.+2      	; 0xbfce <vfprintf+0x286>
    bfcc:	10 e0       	ldi	r17, 0x00	; 0
    bfce:	77 fe       	sbrs	r7, 7
    bfd0:	07 c0       	rjmp	.+14     	; 0xbfe0 <vfprintf+0x298>
    bfd2:	1c 14       	cp	r1, r12
    bfd4:	1d 04       	cpc	r1, r13
    bfd6:	3c f4       	brge	.+14     	; 0xbfe6 <vfprintf+0x29e>
    bfd8:	96 01       	movw	r18, r12
    bfda:	2f 5f       	subi	r18, 0xFF	; 255
    bfdc:	3f 4f       	sbci	r19, 0xFF	; 255
    bfde:	05 c0       	rjmp	.+10     	; 0xbfea <vfprintf+0x2a2>
    bfe0:	25 e0       	ldi	r18, 0x05	; 5
    bfe2:	30 e0       	ldi	r19, 0x00	; 0
    bfe4:	02 c0       	rjmp	.+4      	; 0xbfea <vfprintf+0x2a2>
    bfe6:	21 e0       	ldi	r18, 0x01	; 1
    bfe8:	30 e0       	ldi	r19, 0x00	; 0
    bfea:	66 20       	and	r6, r6
    bfec:	11 f0       	breq	.+4      	; 0xbff2 <vfprintf+0x2aa>
    bfee:	2f 5f       	subi	r18, 0xFF	; 255
    bff0:	3f 4f       	sbci	r19, 0xFF	; 255
    bff2:	11 23       	and	r17, r17
    bff4:	31 f0       	breq	.+12     	; 0xc002 <vfprintf+0x2ba>
    bff6:	41 2f       	mov	r20, r17
    bff8:	50 e0       	ldi	r21, 0x00	; 0
    bffa:	4f 5f       	subi	r20, 0xFF	; 255
    bffc:	5f 4f       	sbci	r21, 0xFF	; 255
    bffe:	24 0f       	add	r18, r20
    c000:	35 1f       	adc	r19, r21
    c002:	45 2d       	mov	r20, r5
    c004:	50 e0       	ldi	r21, 0x00	; 0
    c006:	24 17       	cp	r18, r20
    c008:	35 07       	cpc	r19, r21
    c00a:	14 f4       	brge	.+4      	; 0xc010 <vfprintf+0x2c8>
    c00c:	52 1a       	sub	r5, r18
    c00e:	01 c0       	rjmp	.+2      	; 0xc012 <vfprintf+0x2ca>
    c010:	51 2c       	mov	r5, r1
    c012:	87 2d       	mov	r24, r7
    c014:	89 70       	andi	r24, 0x09	; 9
    c016:	41 f4       	brne	.+16     	; 0xc028 <vfprintf+0x2e0>
    c018:	55 20       	and	r5, r5
    c01a:	31 f0       	breq	.+12     	; 0xc028 <vfprintf+0x2e0>
    c01c:	b7 01       	movw	r22, r14
    c01e:	80 e2       	ldi	r24, 0x20	; 32
    c020:	90 e0       	ldi	r25, 0x00	; 0
    c022:	56 d5       	rcall	.+2732   	; 0xcad0 <fputc>
    c024:	5a 94       	dec	r5
    c026:	f8 cf       	rjmp	.-16     	; 0xc018 <vfprintf+0x2d0>
    c028:	66 20       	and	r6, r6
    c02a:	21 f0       	breq	.+8      	; 0xc034 <vfprintf+0x2ec>
    c02c:	b7 01       	movw	r22, r14
    c02e:	86 2d       	mov	r24, r6
    c030:	90 e0       	ldi	r25, 0x00	; 0
    c032:	4e d5       	rcall	.+2716   	; 0xcad0 <fputc>
    c034:	73 fc       	sbrc	r7, 3
    c036:	08 c0       	rjmp	.+16     	; 0xc048 <vfprintf+0x300>
    c038:	55 20       	and	r5, r5
    c03a:	31 f0       	breq	.+12     	; 0xc048 <vfprintf+0x300>
    c03c:	b7 01       	movw	r22, r14
    c03e:	80 e3       	ldi	r24, 0x30	; 48
    c040:	90 e0       	ldi	r25, 0x00	; 0
    c042:	46 d5       	rcall	.+2700   	; 0xcad0 <fputc>
    c044:	5a 94       	dec	r5
    c046:	f8 cf       	rjmp	.-16     	; 0xc038 <vfprintf+0x2f0>
    c048:	77 fe       	sbrs	r7, 7
    c04a:	5d c0       	rjmp	.+186    	; 0xc106 <vfprintf+0x3be>
    c04c:	9c 2d       	mov	r25, r12
    c04e:	8d 2d       	mov	r24, r13
    c050:	d7 fe       	sbrs	r13, 7
    c052:	02 c0       	rjmp	.+4      	; 0xc058 <vfprintf+0x310>
    c054:	90 e0       	ldi	r25, 0x00	; 0
    c056:	80 e0       	ldi	r24, 0x00	; 0
    c058:	69 2e       	mov	r6, r25
    c05a:	78 2e       	mov	r7, r24
    c05c:	40 e0       	ldi	r20, 0x00	; 0
    c05e:	50 e0       	ldi	r21, 0x00	; 0
    c060:	c6 01       	movw	r24, r12
    c062:	84 19       	sub	r24, r4
    c064:	91 09       	sbc	r25, r1
    c066:	8c 87       	std	Y+12, r24	; 0x0c
    c068:	9d 87       	std	Y+13, r25	; 0x0d
    c06a:	96 01       	movw	r18, r12
    c06c:	26 19       	sub	r18, r6
    c06e:	37 09       	sbc	r19, r7
    c070:	28 0d       	add	r18, r8
    c072:	39 1d       	adc	r19, r9
    c074:	81 2f       	mov	r24, r17
    c076:	90 e0       	ldi	r25, 0x00	; 0
    c078:	ee 27       	eor	r30, r30
    c07a:	ff 27       	eor	r31, r31
    c07c:	e8 1b       	sub	r30, r24
    c07e:	f9 0b       	sbc	r31, r25
    c080:	ee 87       	std	Y+14, r30	; 0x0e
    c082:	ff 87       	std	Y+15, r31	; 0x0f
    c084:	ff ef       	ldi	r31, 0xFF	; 255
    c086:	6f 16       	cp	r6, r31
    c088:	7f 06       	cpc	r7, r31
    c08a:	61 f4       	brne	.+24     	; 0xc0a4 <vfprintf+0x35c>
    c08c:	b7 01       	movw	r22, r14
    c08e:	8e e2       	ldi	r24, 0x2E	; 46
    c090:	90 e0       	ldi	r25, 0x00	; 0
    c092:	2b 8b       	std	Y+19, r18	; 0x13
    c094:	3a 8b       	std	Y+18, r19	; 0x12
    c096:	48 8b       	std	Y+16, r20	; 0x10
    c098:	59 8b       	std	Y+17, r21	; 0x11
    c09a:	1a d5       	rcall	.+2612   	; 0xcad0 <fputc>
    c09c:	59 89       	ldd	r21, Y+17	; 0x11
    c09e:	48 89       	ldd	r20, Y+16	; 0x10
    c0a0:	3a 89       	ldd	r19, Y+18	; 0x12
    c0a2:	2b 89       	ldd	r18, Y+19	; 0x13
    c0a4:	c6 14       	cp	r12, r6
    c0a6:	d7 04       	cpc	r13, r7
    c0a8:	54 f0       	brlt	.+20     	; 0xc0be <vfprintf+0x376>
    c0aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    c0ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    c0ae:	66 15       	cp	r22, r6
    c0b0:	77 05       	cpc	r23, r7
    c0b2:	2c f4       	brge	.+10     	; 0xc0be <vfprintf+0x376>
    c0b4:	f9 01       	movw	r30, r18
    c0b6:	e4 0f       	add	r30, r20
    c0b8:	f5 1f       	adc	r31, r21
    c0ba:	81 81       	ldd	r24, Z+1	; 0x01
    c0bc:	01 c0       	rjmp	.+2      	; 0xc0c0 <vfprintf+0x378>
    c0be:	80 e3       	ldi	r24, 0x30	; 48
    c0c0:	71 e0       	ldi	r23, 0x01	; 1
    c0c2:	67 1a       	sub	r6, r23
    c0c4:	71 08       	sbc	r7, r1
    c0c6:	4f 5f       	subi	r20, 0xFF	; 255
    c0c8:	5f 4f       	sbci	r21, 0xFF	; 255
    c0ca:	ee 85       	ldd	r30, Y+14	; 0x0e
    c0cc:	ff 85       	ldd	r31, Y+15	; 0x0f
    c0ce:	6e 16       	cp	r6, r30
    c0d0:	7f 06       	cpc	r7, r31
    c0d2:	64 f0       	brlt	.+24     	; 0xc0ec <vfprintf+0x3a4>
    c0d4:	b7 01       	movw	r22, r14
    c0d6:	90 e0       	ldi	r25, 0x00	; 0
    c0d8:	2b 8b       	std	Y+19, r18	; 0x13
    c0da:	3a 8b       	std	Y+18, r19	; 0x12
    c0dc:	48 8b       	std	Y+16, r20	; 0x10
    c0de:	59 8b       	std	Y+17, r21	; 0x11
    c0e0:	f7 d4       	rcall	.+2542   	; 0xcad0 <fputc>
    c0e2:	2b 89       	ldd	r18, Y+19	; 0x13
    c0e4:	3a 89       	ldd	r19, Y+18	; 0x12
    c0e6:	48 89       	ldd	r20, Y+16	; 0x10
    c0e8:	59 89       	ldd	r21, Y+17	; 0x11
    c0ea:	cc cf       	rjmp	.-104    	; 0xc084 <vfprintf+0x33c>
    c0ec:	6c 14       	cp	r6, r12
    c0ee:	7d 04       	cpc	r7, r13
    c0f0:	39 f4       	brne	.+14     	; 0xc100 <vfprintf+0x3b8>
    c0f2:	9a 81       	ldd	r25, Y+2	; 0x02
    c0f4:	96 33       	cpi	r25, 0x36	; 54
    c0f6:	18 f4       	brcc	.+6      	; 0xc0fe <vfprintf+0x3b6>
    c0f8:	95 33       	cpi	r25, 0x35	; 53
    c0fa:	11 f4       	brne	.+4      	; 0xc100 <vfprintf+0x3b8>
    c0fc:	04 ff       	sbrs	r16, 4
    c0fe:	81 e3       	ldi	r24, 0x31	; 49
    c100:	b7 01       	movw	r22, r14
    c102:	90 e0       	ldi	r25, 0x00	; 0
    c104:	45 c0       	rjmp	.+138    	; 0xc190 <vfprintf+0x448>
    c106:	8a 81       	ldd	r24, Y+2	; 0x02
    c108:	81 33       	cpi	r24, 0x31	; 49
    c10a:	09 f0       	breq	.+2      	; 0xc10e <vfprintf+0x3c6>
    c10c:	0f 7e       	andi	r16, 0xEF	; 239
    c10e:	b7 01       	movw	r22, r14
    c110:	90 e0       	ldi	r25, 0x00	; 0
    c112:	de d4       	rcall	.+2492   	; 0xcad0 <fputc>
    c114:	11 11       	cpse	r17, r1
    c116:	05 c0       	rjmp	.+10     	; 0xc122 <vfprintf+0x3da>
    c118:	74 fe       	sbrs	r7, 4
    c11a:	16 c0       	rjmp	.+44     	; 0xc148 <vfprintf+0x400>
    c11c:	85 e4       	ldi	r24, 0x45	; 69
    c11e:	90 e0       	ldi	r25, 0x00	; 0
    c120:	15 c0       	rjmp	.+42     	; 0xc14c <vfprintf+0x404>
    c122:	b7 01       	movw	r22, r14
    c124:	8e e2       	ldi	r24, 0x2E	; 46
    c126:	90 e0       	ldi	r25, 0x00	; 0
    c128:	d3 d4       	rcall	.+2470   	; 0xcad0 <fputc>
    c12a:	82 e0       	ldi	r24, 0x02	; 2
    c12c:	66 24       	eor	r6, r6
    c12e:	63 94       	inc	r6
    c130:	68 0e       	add	r6, r24
    c132:	f4 01       	movw	r30, r8
    c134:	e8 0f       	add	r30, r24
    c136:	f1 1d       	adc	r31, r1
    c138:	80 81       	ld	r24, Z
    c13a:	b7 01       	movw	r22, r14
    c13c:	90 e0       	ldi	r25, 0x00	; 0
    c13e:	c8 d4       	rcall	.+2448   	; 0xcad0 <fputc>
    c140:	11 50       	subi	r17, 0x01	; 1
    c142:	51 f3       	breq	.-44     	; 0xc118 <vfprintf+0x3d0>
    c144:	86 2d       	mov	r24, r6
    c146:	f2 cf       	rjmp	.-28     	; 0xc12c <vfprintf+0x3e4>
    c148:	85 e6       	ldi	r24, 0x65	; 101
    c14a:	90 e0       	ldi	r25, 0x00	; 0
    c14c:	b7 01       	movw	r22, r14
    c14e:	c0 d4       	rcall	.+2432   	; 0xcad0 <fputc>
    c150:	d7 fc       	sbrc	r13, 7
    c152:	05 c0       	rjmp	.+10     	; 0xc15e <vfprintf+0x416>
    c154:	c1 14       	cp	r12, r1
    c156:	d1 04       	cpc	r13, r1
    c158:	39 f4       	brne	.+14     	; 0xc168 <vfprintf+0x420>
    c15a:	04 ff       	sbrs	r16, 4
    c15c:	05 c0       	rjmp	.+10     	; 0xc168 <vfprintf+0x420>
    c15e:	d1 94       	neg	r13
    c160:	c1 94       	neg	r12
    c162:	d1 08       	sbc	r13, r1
    c164:	8d e2       	ldi	r24, 0x2D	; 45
    c166:	01 c0       	rjmp	.+2      	; 0xc16a <vfprintf+0x422>
    c168:	8b e2       	ldi	r24, 0x2B	; 43
    c16a:	b7 01       	movw	r22, r14
    c16c:	90 e0       	ldi	r25, 0x00	; 0
    c16e:	b0 d4       	rcall	.+2400   	; 0xcad0 <fputc>
    c170:	80 e3       	ldi	r24, 0x30	; 48
    c172:	6a e0       	ldi	r22, 0x0A	; 10
    c174:	c6 16       	cp	r12, r22
    c176:	d1 04       	cpc	r13, r1
    c178:	2c f0       	brlt	.+10     	; 0xc184 <vfprintf+0x43c>
    c17a:	8f 5f       	subi	r24, 0xFF	; 255
    c17c:	fa e0       	ldi	r31, 0x0A	; 10
    c17e:	cf 1a       	sub	r12, r31
    c180:	d1 08       	sbc	r13, r1
    c182:	f7 cf       	rjmp	.-18     	; 0xc172 <vfprintf+0x42a>
    c184:	b7 01       	movw	r22, r14
    c186:	90 e0       	ldi	r25, 0x00	; 0
    c188:	a3 d4       	rcall	.+2374   	; 0xcad0 <fputc>
    c18a:	b7 01       	movw	r22, r14
    c18c:	c6 01       	movw	r24, r12
    c18e:	c0 96       	adiw	r24, 0x30	; 48
    c190:	9f d4       	rcall	.+2366   	; 0xcad0 <fputc>
    c192:	36 c1       	rjmp	.+620    	; 0xc400 <vfprintf+0x6b8>
    c194:	83 36       	cpi	r24, 0x63	; 99
    c196:	31 f0       	breq	.+12     	; 0xc1a4 <vfprintf+0x45c>
    c198:	83 37       	cpi	r24, 0x73	; 115
    c19a:	79 f0       	breq	.+30     	; 0xc1ba <vfprintf+0x472>
    c19c:	83 35       	cpi	r24, 0x53	; 83
    c19e:	09 f0       	breq	.+2      	; 0xc1a2 <vfprintf+0x45a>
    c1a0:	54 c0       	rjmp	.+168    	; 0xc24a <vfprintf+0x502>
    c1a2:	20 c0       	rjmp	.+64     	; 0xc1e4 <vfprintf+0x49c>
    c1a4:	56 01       	movw	r10, r12
    c1a6:	72 e0       	ldi	r23, 0x02	; 2
    c1a8:	a7 0e       	add	r10, r23
    c1aa:	b1 1c       	adc	r11, r1
    c1ac:	f6 01       	movw	r30, r12
    c1ae:	80 81       	ld	r24, Z
    c1b0:	89 83       	std	Y+1, r24	; 0x01
    c1b2:	01 e0       	ldi	r16, 0x01	; 1
    c1b4:	10 e0       	ldi	r17, 0x00	; 0
    c1b6:	64 01       	movw	r12, r8
    c1b8:	13 c0       	rjmp	.+38     	; 0xc1e0 <vfprintf+0x498>
    c1ba:	56 01       	movw	r10, r12
    c1bc:	f2 e0       	ldi	r31, 0x02	; 2
    c1be:	af 0e       	add	r10, r31
    c1c0:	b1 1c       	adc	r11, r1
    c1c2:	f6 01       	movw	r30, r12
    c1c4:	c0 80       	ld	r12, Z
    c1c6:	d1 80       	ldd	r13, Z+1	; 0x01
    c1c8:	26 ff       	sbrs	r18, 6
    c1ca:	03 c0       	rjmp	.+6      	; 0xc1d2 <vfprintf+0x48a>
    c1cc:	61 2f       	mov	r22, r17
    c1ce:	70 e0       	ldi	r23, 0x00	; 0
    c1d0:	02 c0       	rjmp	.+4      	; 0xc1d6 <vfprintf+0x48e>
    c1d2:	6f ef       	ldi	r22, 0xFF	; 255
    c1d4:	7f ef       	ldi	r23, 0xFF	; 255
    c1d6:	c6 01       	movw	r24, r12
    c1d8:	2b 8b       	std	Y+19, r18	; 0x13
    c1da:	2e d4       	rcall	.+2140   	; 0xca38 <strnlen>
    c1dc:	8c 01       	movw	r16, r24
    c1de:	2b 89       	ldd	r18, Y+19	; 0x13
    c1e0:	2f 77       	andi	r18, 0x7F	; 127
    c1e2:	14 c0       	rjmp	.+40     	; 0xc20c <vfprintf+0x4c4>
    c1e4:	56 01       	movw	r10, r12
    c1e6:	f2 e0       	ldi	r31, 0x02	; 2
    c1e8:	af 0e       	add	r10, r31
    c1ea:	b1 1c       	adc	r11, r1
    c1ec:	f6 01       	movw	r30, r12
    c1ee:	c0 80       	ld	r12, Z
    c1f0:	d1 80       	ldd	r13, Z+1	; 0x01
    c1f2:	26 ff       	sbrs	r18, 6
    c1f4:	03 c0       	rjmp	.+6      	; 0xc1fc <vfprintf+0x4b4>
    c1f6:	61 2f       	mov	r22, r17
    c1f8:	70 e0       	ldi	r23, 0x00	; 0
    c1fa:	02 c0       	rjmp	.+4      	; 0xc200 <vfprintf+0x4b8>
    c1fc:	6f ef       	ldi	r22, 0xFF	; 255
    c1fe:	7f ef       	ldi	r23, 0xFF	; 255
    c200:	c6 01       	movw	r24, r12
    c202:	2b 8b       	std	Y+19, r18	; 0x13
    c204:	ab d3       	rcall	.+1878   	; 0xc95c <strnlen_P>
    c206:	8c 01       	movw	r16, r24
    c208:	2b 89       	ldd	r18, Y+19	; 0x13
    c20a:	20 68       	ori	r18, 0x80	; 128
    c20c:	72 2e       	mov	r7, r18
    c20e:	23 fd       	sbrc	r18, 3
    c210:	18 c0       	rjmp	.+48     	; 0xc242 <vfprintf+0x4fa>
    c212:	85 2d       	mov	r24, r5
    c214:	90 e0       	ldi	r25, 0x00	; 0
    c216:	08 17       	cp	r16, r24
    c218:	19 07       	cpc	r17, r25
    c21a:	98 f4       	brcc	.+38     	; 0xc242 <vfprintf+0x4fa>
    c21c:	b7 01       	movw	r22, r14
    c21e:	80 e2       	ldi	r24, 0x20	; 32
    c220:	90 e0       	ldi	r25, 0x00	; 0
    c222:	56 d4       	rcall	.+2220   	; 0xcad0 <fputc>
    c224:	5a 94       	dec	r5
    c226:	f5 cf       	rjmp	.-22     	; 0xc212 <vfprintf+0x4ca>
    c228:	f6 01       	movw	r30, r12
    c22a:	77 fc       	sbrc	r7, 7
    c22c:	85 91       	lpm	r24, Z+
    c22e:	77 fe       	sbrs	r7, 7
    c230:	81 91       	ld	r24, Z+
    c232:	6f 01       	movw	r12, r30
    c234:	b7 01       	movw	r22, r14
    c236:	90 e0       	ldi	r25, 0x00	; 0
    c238:	4b d4       	rcall	.+2198   	; 0xcad0 <fputc>
    c23a:	51 10       	cpse	r5, r1
    c23c:	5a 94       	dec	r5
    c23e:	01 50       	subi	r16, 0x01	; 1
    c240:	11 09       	sbc	r17, r1
    c242:	01 15       	cp	r16, r1
    c244:	11 05       	cpc	r17, r1
    c246:	81 f7       	brne	.-32     	; 0xc228 <vfprintf+0x4e0>
    c248:	db c0       	rjmp	.+438    	; 0xc400 <vfprintf+0x6b8>
    c24a:	84 36       	cpi	r24, 0x64	; 100
    c24c:	11 f0       	breq	.+4      	; 0xc252 <vfprintf+0x50a>
    c24e:	89 36       	cpi	r24, 0x69	; 105
    c250:	49 f5       	brne	.+82     	; 0xc2a4 <vfprintf+0x55c>
    c252:	56 01       	movw	r10, r12
    c254:	27 ff       	sbrs	r18, 7
    c256:	09 c0       	rjmp	.+18     	; 0xc26a <vfprintf+0x522>
    c258:	f4 e0       	ldi	r31, 0x04	; 4
    c25a:	af 0e       	add	r10, r31
    c25c:	b1 1c       	adc	r11, r1
    c25e:	f6 01       	movw	r30, r12
    c260:	60 81       	ld	r22, Z
    c262:	71 81       	ldd	r23, Z+1	; 0x01
    c264:	82 81       	ldd	r24, Z+2	; 0x02
    c266:	93 81       	ldd	r25, Z+3	; 0x03
    c268:	0a c0       	rjmp	.+20     	; 0xc27e <vfprintf+0x536>
    c26a:	f2 e0       	ldi	r31, 0x02	; 2
    c26c:	af 0e       	add	r10, r31
    c26e:	b1 1c       	adc	r11, r1
    c270:	f6 01       	movw	r30, r12
    c272:	60 81       	ld	r22, Z
    c274:	71 81       	ldd	r23, Z+1	; 0x01
    c276:	88 27       	eor	r24, r24
    c278:	77 fd       	sbrc	r23, 7
    c27a:	80 95       	com	r24
    c27c:	98 2f       	mov	r25, r24
    c27e:	02 2f       	mov	r16, r18
    c280:	0f 76       	andi	r16, 0x6F	; 111
    c282:	97 ff       	sbrs	r25, 7
    c284:	08 c0       	rjmp	.+16     	; 0xc296 <vfprintf+0x54e>
    c286:	90 95       	com	r25
    c288:	80 95       	com	r24
    c28a:	70 95       	com	r23
    c28c:	61 95       	neg	r22
    c28e:	7f 4f       	sbci	r23, 0xFF	; 255
    c290:	8f 4f       	sbci	r24, 0xFF	; 255
    c292:	9f 4f       	sbci	r25, 0xFF	; 255
    c294:	00 68       	ori	r16, 0x80	; 128
    c296:	2a e0       	ldi	r18, 0x0A	; 10
    c298:	30 e0       	ldi	r19, 0x00	; 0
    c29a:	a4 01       	movw	r20, r8
    c29c:	cc d4       	rcall	.+2456   	; 0xcc36 <__ultoa_invert>
    c29e:	c8 2e       	mov	r12, r24
    c2a0:	c8 18       	sub	r12, r8
    c2a2:	3d c0       	rjmp	.+122    	; 0xc31e <vfprintf+0x5d6>
    c2a4:	02 2f       	mov	r16, r18
    c2a6:	85 37       	cpi	r24, 0x75	; 117
    c2a8:	21 f4       	brne	.+8      	; 0xc2b2 <vfprintf+0x56a>
    c2aa:	0f 7e       	andi	r16, 0xEF	; 239
    c2ac:	2a e0       	ldi	r18, 0x0A	; 10
    c2ae:	30 e0       	ldi	r19, 0x00	; 0
    c2b0:	1d c0       	rjmp	.+58     	; 0xc2ec <vfprintf+0x5a4>
    c2b2:	09 7f       	andi	r16, 0xF9	; 249
    c2b4:	8f 36       	cpi	r24, 0x6F	; 111
    c2b6:	91 f0       	breq	.+36     	; 0xc2dc <vfprintf+0x594>
    c2b8:	18 f4       	brcc	.+6      	; 0xc2c0 <vfprintf+0x578>
    c2ba:	88 35       	cpi	r24, 0x58	; 88
    c2bc:	59 f0       	breq	.+22     	; 0xc2d4 <vfprintf+0x58c>
    c2be:	a9 c0       	rjmp	.+338    	; 0xc412 <vfprintf+0x6ca>
    c2c0:	80 37       	cpi	r24, 0x70	; 112
    c2c2:	19 f0       	breq	.+6      	; 0xc2ca <vfprintf+0x582>
    c2c4:	88 37       	cpi	r24, 0x78	; 120
    c2c6:	11 f0       	breq	.+4      	; 0xc2cc <vfprintf+0x584>
    c2c8:	a4 c0       	rjmp	.+328    	; 0xc412 <vfprintf+0x6ca>
    c2ca:	00 61       	ori	r16, 0x10	; 16
    c2cc:	04 ff       	sbrs	r16, 4
    c2ce:	09 c0       	rjmp	.+18     	; 0xc2e2 <vfprintf+0x59a>
    c2d0:	04 60       	ori	r16, 0x04	; 4
    c2d2:	07 c0       	rjmp	.+14     	; 0xc2e2 <vfprintf+0x59a>
    c2d4:	24 ff       	sbrs	r18, 4
    c2d6:	08 c0       	rjmp	.+16     	; 0xc2e8 <vfprintf+0x5a0>
    c2d8:	06 60       	ori	r16, 0x06	; 6
    c2da:	06 c0       	rjmp	.+12     	; 0xc2e8 <vfprintf+0x5a0>
    c2dc:	28 e0       	ldi	r18, 0x08	; 8
    c2de:	30 e0       	ldi	r19, 0x00	; 0
    c2e0:	05 c0       	rjmp	.+10     	; 0xc2ec <vfprintf+0x5a4>
    c2e2:	20 e1       	ldi	r18, 0x10	; 16
    c2e4:	30 e0       	ldi	r19, 0x00	; 0
    c2e6:	02 c0       	rjmp	.+4      	; 0xc2ec <vfprintf+0x5a4>
    c2e8:	20 e1       	ldi	r18, 0x10	; 16
    c2ea:	32 e0       	ldi	r19, 0x02	; 2
    c2ec:	56 01       	movw	r10, r12
    c2ee:	07 ff       	sbrs	r16, 7
    c2f0:	09 c0       	rjmp	.+18     	; 0xc304 <vfprintf+0x5bc>
    c2f2:	f4 e0       	ldi	r31, 0x04	; 4
    c2f4:	af 0e       	add	r10, r31
    c2f6:	b1 1c       	adc	r11, r1
    c2f8:	f6 01       	movw	r30, r12
    c2fa:	60 81       	ld	r22, Z
    c2fc:	71 81       	ldd	r23, Z+1	; 0x01
    c2fe:	82 81       	ldd	r24, Z+2	; 0x02
    c300:	93 81       	ldd	r25, Z+3	; 0x03
    c302:	08 c0       	rjmp	.+16     	; 0xc314 <vfprintf+0x5cc>
    c304:	f2 e0       	ldi	r31, 0x02	; 2
    c306:	af 0e       	add	r10, r31
    c308:	b1 1c       	adc	r11, r1
    c30a:	f6 01       	movw	r30, r12
    c30c:	60 81       	ld	r22, Z
    c30e:	71 81       	ldd	r23, Z+1	; 0x01
    c310:	80 e0       	ldi	r24, 0x00	; 0
    c312:	90 e0       	ldi	r25, 0x00	; 0
    c314:	a4 01       	movw	r20, r8
    c316:	8f d4       	rcall	.+2334   	; 0xcc36 <__ultoa_invert>
    c318:	c8 2e       	mov	r12, r24
    c31a:	c8 18       	sub	r12, r8
    c31c:	0f 77       	andi	r16, 0x7F	; 127
    c31e:	06 ff       	sbrs	r16, 6
    c320:	0b c0       	rjmp	.+22     	; 0xc338 <vfprintf+0x5f0>
    c322:	20 2f       	mov	r18, r16
    c324:	2e 7f       	andi	r18, 0xFE	; 254
    c326:	c1 16       	cp	r12, r17
    c328:	50 f4       	brcc	.+20     	; 0xc33e <vfprintf+0x5f6>
    c32a:	04 ff       	sbrs	r16, 4
    c32c:	0a c0       	rjmp	.+20     	; 0xc342 <vfprintf+0x5fa>
    c32e:	02 fd       	sbrc	r16, 2
    c330:	08 c0       	rjmp	.+16     	; 0xc342 <vfprintf+0x5fa>
    c332:	20 2f       	mov	r18, r16
    c334:	2e 7e       	andi	r18, 0xEE	; 238
    c336:	05 c0       	rjmp	.+10     	; 0xc342 <vfprintf+0x5fa>
    c338:	dc 2c       	mov	r13, r12
    c33a:	20 2f       	mov	r18, r16
    c33c:	03 c0       	rjmp	.+6      	; 0xc344 <vfprintf+0x5fc>
    c33e:	dc 2c       	mov	r13, r12
    c340:	01 c0       	rjmp	.+2      	; 0xc344 <vfprintf+0x5fc>
    c342:	d1 2e       	mov	r13, r17
    c344:	24 ff       	sbrs	r18, 4
    c346:	0d c0       	rjmp	.+26     	; 0xc362 <vfprintf+0x61a>
    c348:	fe 01       	movw	r30, r28
    c34a:	ec 0d       	add	r30, r12
    c34c:	f1 1d       	adc	r31, r1
    c34e:	80 81       	ld	r24, Z
    c350:	80 33       	cpi	r24, 0x30	; 48
    c352:	11 f4       	brne	.+4      	; 0xc358 <vfprintf+0x610>
    c354:	29 7e       	andi	r18, 0xE9	; 233
    c356:	09 c0       	rjmp	.+18     	; 0xc36a <vfprintf+0x622>
    c358:	22 ff       	sbrs	r18, 2
    c35a:	06 c0       	rjmp	.+12     	; 0xc368 <vfprintf+0x620>
    c35c:	d3 94       	inc	r13
    c35e:	d3 94       	inc	r13
    c360:	04 c0       	rjmp	.+8      	; 0xc36a <vfprintf+0x622>
    c362:	82 2f       	mov	r24, r18
    c364:	86 78       	andi	r24, 0x86	; 134
    c366:	09 f0       	breq	.+2      	; 0xc36a <vfprintf+0x622>
    c368:	d3 94       	inc	r13
    c36a:	23 fd       	sbrc	r18, 3
    c36c:	12 c0       	rjmp	.+36     	; 0xc392 <vfprintf+0x64a>
    c36e:	20 ff       	sbrs	r18, 0
    c370:	06 c0       	rjmp	.+12     	; 0xc37e <vfprintf+0x636>
    c372:	1c 2d       	mov	r17, r12
    c374:	d5 14       	cp	r13, r5
    c376:	18 f4       	brcc	.+6      	; 0xc37e <vfprintf+0x636>
    c378:	15 0d       	add	r17, r5
    c37a:	1d 19       	sub	r17, r13
    c37c:	d5 2c       	mov	r13, r5
    c37e:	d5 14       	cp	r13, r5
    c380:	60 f4       	brcc	.+24     	; 0xc39a <vfprintf+0x652>
    c382:	b7 01       	movw	r22, r14
    c384:	80 e2       	ldi	r24, 0x20	; 32
    c386:	90 e0       	ldi	r25, 0x00	; 0
    c388:	2b 8b       	std	Y+19, r18	; 0x13
    c38a:	a2 d3       	rcall	.+1860   	; 0xcad0 <fputc>
    c38c:	d3 94       	inc	r13
    c38e:	2b 89       	ldd	r18, Y+19	; 0x13
    c390:	f6 cf       	rjmp	.-20     	; 0xc37e <vfprintf+0x636>
    c392:	d5 14       	cp	r13, r5
    c394:	10 f4       	brcc	.+4      	; 0xc39a <vfprintf+0x652>
    c396:	5d 18       	sub	r5, r13
    c398:	01 c0       	rjmp	.+2      	; 0xc39c <vfprintf+0x654>
    c39a:	51 2c       	mov	r5, r1
    c39c:	24 ff       	sbrs	r18, 4
    c39e:	11 c0       	rjmp	.+34     	; 0xc3c2 <vfprintf+0x67a>
    c3a0:	b7 01       	movw	r22, r14
    c3a2:	80 e3       	ldi	r24, 0x30	; 48
    c3a4:	90 e0       	ldi	r25, 0x00	; 0
    c3a6:	2b 8b       	std	Y+19, r18	; 0x13
    c3a8:	93 d3       	rcall	.+1830   	; 0xcad0 <fputc>
    c3aa:	2b 89       	ldd	r18, Y+19	; 0x13
    c3ac:	22 ff       	sbrs	r18, 2
    c3ae:	16 c0       	rjmp	.+44     	; 0xc3dc <vfprintf+0x694>
    c3b0:	21 ff       	sbrs	r18, 1
    c3b2:	03 c0       	rjmp	.+6      	; 0xc3ba <vfprintf+0x672>
    c3b4:	88 e5       	ldi	r24, 0x58	; 88
    c3b6:	90 e0       	ldi	r25, 0x00	; 0
    c3b8:	02 c0       	rjmp	.+4      	; 0xc3be <vfprintf+0x676>
    c3ba:	88 e7       	ldi	r24, 0x78	; 120
    c3bc:	90 e0       	ldi	r25, 0x00	; 0
    c3be:	b7 01       	movw	r22, r14
    c3c0:	0c c0       	rjmp	.+24     	; 0xc3da <vfprintf+0x692>
    c3c2:	82 2f       	mov	r24, r18
    c3c4:	86 78       	andi	r24, 0x86	; 134
    c3c6:	51 f0       	breq	.+20     	; 0xc3dc <vfprintf+0x694>
    c3c8:	21 fd       	sbrc	r18, 1
    c3ca:	02 c0       	rjmp	.+4      	; 0xc3d0 <vfprintf+0x688>
    c3cc:	80 e2       	ldi	r24, 0x20	; 32
    c3ce:	01 c0       	rjmp	.+2      	; 0xc3d2 <vfprintf+0x68a>
    c3d0:	8b e2       	ldi	r24, 0x2B	; 43
    c3d2:	27 fd       	sbrc	r18, 7
    c3d4:	8d e2       	ldi	r24, 0x2D	; 45
    c3d6:	b7 01       	movw	r22, r14
    c3d8:	90 e0       	ldi	r25, 0x00	; 0
    c3da:	7a d3       	rcall	.+1780   	; 0xcad0 <fputc>
    c3dc:	c1 16       	cp	r12, r17
    c3de:	30 f4       	brcc	.+12     	; 0xc3ec <vfprintf+0x6a4>
    c3e0:	b7 01       	movw	r22, r14
    c3e2:	80 e3       	ldi	r24, 0x30	; 48
    c3e4:	90 e0       	ldi	r25, 0x00	; 0
    c3e6:	74 d3       	rcall	.+1768   	; 0xcad0 <fputc>
    c3e8:	11 50       	subi	r17, 0x01	; 1
    c3ea:	f8 cf       	rjmp	.-16     	; 0xc3dc <vfprintf+0x694>
    c3ec:	ca 94       	dec	r12
    c3ee:	f4 01       	movw	r30, r8
    c3f0:	ec 0d       	add	r30, r12
    c3f2:	f1 1d       	adc	r31, r1
    c3f4:	80 81       	ld	r24, Z
    c3f6:	b7 01       	movw	r22, r14
    c3f8:	90 e0       	ldi	r25, 0x00	; 0
    c3fa:	6a d3       	rcall	.+1748   	; 0xcad0 <fputc>
    c3fc:	c1 10       	cpse	r12, r1
    c3fe:	f6 cf       	rjmp	.-20     	; 0xc3ec <vfprintf+0x6a4>
    c400:	55 20       	and	r5, r5
    c402:	09 f4       	brne	.+2      	; 0xc406 <vfprintf+0x6be>
    c404:	dd cc       	rjmp	.-1606   	; 0xbdc0 <vfprintf+0x78>
    c406:	b7 01       	movw	r22, r14
    c408:	80 e2       	ldi	r24, 0x20	; 32
    c40a:	90 e0       	ldi	r25, 0x00	; 0
    c40c:	61 d3       	rcall	.+1730   	; 0xcad0 <fputc>
    c40e:	5a 94       	dec	r5
    c410:	f7 cf       	rjmp	.-18     	; 0xc400 <vfprintf+0x6b8>
    c412:	f7 01       	movw	r30, r14
    c414:	86 81       	ldd	r24, Z+6	; 0x06
    c416:	97 81       	ldd	r25, Z+7	; 0x07
    c418:	02 c0       	rjmp	.+4      	; 0xc41e <vfprintf+0x6d6>
    c41a:	8f ef       	ldi	r24, 0xFF	; 255
    c41c:	9f ef       	ldi	r25, 0xFF	; 255
    c41e:	63 96       	adiw	r28, 0x13	; 19
    c420:	cd bf       	out	0x3d, r28	; 61
    c422:	de bf       	out	0x3e, r29	; 62
    c424:	df 91       	pop	r29
    c426:	cf 91       	pop	r28
    c428:	1f 91       	pop	r17
    c42a:	0f 91       	pop	r16
    c42c:	ff 90       	pop	r15
    c42e:	ef 90       	pop	r14
    c430:	df 90       	pop	r13
    c432:	cf 90       	pop	r12
    c434:	bf 90       	pop	r11
    c436:	af 90       	pop	r10
    c438:	9f 90       	pop	r9
    c43a:	8f 90       	pop	r8
    c43c:	7f 90       	pop	r7
    c43e:	6f 90       	pop	r6
    c440:	5f 90       	pop	r5
    c442:	4f 90       	pop	r4
    c444:	3f 90       	pop	r3
    c446:	2f 90       	pop	r2
    c448:	08 95       	ret

0000c44a <__udivmodhi4>:
    c44a:	aa 1b       	sub	r26, r26
    c44c:	bb 1b       	sub	r27, r27
    c44e:	51 e1       	ldi	r21, 0x11	; 17
    c450:	07 c0       	rjmp	.+14     	; 0xc460 <__udivmodhi4_ep>

0000c452 <__udivmodhi4_loop>:
    c452:	aa 1f       	adc	r26, r26
    c454:	bb 1f       	adc	r27, r27
    c456:	a6 17       	cp	r26, r22
    c458:	b7 07       	cpc	r27, r23
    c45a:	10 f0       	brcs	.+4      	; 0xc460 <__udivmodhi4_ep>
    c45c:	a6 1b       	sub	r26, r22
    c45e:	b7 0b       	sbc	r27, r23

0000c460 <__udivmodhi4_ep>:
    c460:	88 1f       	adc	r24, r24
    c462:	99 1f       	adc	r25, r25
    c464:	5a 95       	dec	r21
    c466:	a9 f7       	brne	.-22     	; 0xc452 <__udivmodhi4_loop>
    c468:	80 95       	com	r24
    c46a:	90 95       	com	r25
    c46c:	bc 01       	movw	r22, r24
    c46e:	cd 01       	movw	r24, r26
    c470:	08 95       	ret

0000c472 <__divmodhi4>:
    c472:	97 fb       	bst	r25, 7
    c474:	07 2e       	mov	r0, r23
    c476:	16 f4       	brtc	.+4      	; 0xc47c <__divmodhi4+0xa>
    c478:	00 94       	com	r0
    c47a:	06 d0       	rcall	.+12     	; 0xc488 <__divmodhi4_neg1>
    c47c:	77 fd       	sbrc	r23, 7
    c47e:	08 d0       	rcall	.+16     	; 0xc490 <__divmodhi4_neg2>
    c480:	e4 df       	rcall	.-56     	; 0xc44a <__udivmodhi4>
    c482:	07 fc       	sbrc	r0, 7
    c484:	05 d0       	rcall	.+10     	; 0xc490 <__divmodhi4_neg2>
    c486:	3e f4       	brtc	.+14     	; 0xc496 <__divmodhi4_exit>

0000c488 <__divmodhi4_neg1>:
    c488:	90 95       	com	r25
    c48a:	81 95       	neg	r24
    c48c:	9f 4f       	sbci	r25, 0xFF	; 255
    c48e:	08 95       	ret

0000c490 <__divmodhi4_neg2>:
    c490:	70 95       	com	r23
    c492:	61 95       	neg	r22
    c494:	7f 4f       	sbci	r23, 0xFF	; 255

0000c496 <__divmodhi4_exit>:
    c496:	08 95       	ret

0000c498 <__udivmodsi4>:
    c498:	a1 e2       	ldi	r26, 0x21	; 33
    c49a:	1a 2e       	mov	r1, r26
    c49c:	aa 1b       	sub	r26, r26
    c49e:	bb 1b       	sub	r27, r27
    c4a0:	fd 01       	movw	r30, r26
    c4a2:	0d c0       	rjmp	.+26     	; 0xc4be <__udivmodsi4_ep>

0000c4a4 <__udivmodsi4_loop>:
    c4a4:	aa 1f       	adc	r26, r26
    c4a6:	bb 1f       	adc	r27, r27
    c4a8:	ee 1f       	adc	r30, r30
    c4aa:	ff 1f       	adc	r31, r31
    c4ac:	a2 17       	cp	r26, r18
    c4ae:	b3 07       	cpc	r27, r19
    c4b0:	e4 07       	cpc	r30, r20
    c4b2:	f5 07       	cpc	r31, r21
    c4b4:	20 f0       	brcs	.+8      	; 0xc4be <__udivmodsi4_ep>
    c4b6:	a2 1b       	sub	r26, r18
    c4b8:	b3 0b       	sbc	r27, r19
    c4ba:	e4 0b       	sbc	r30, r20
    c4bc:	f5 0b       	sbc	r31, r21

0000c4be <__udivmodsi4_ep>:
    c4be:	66 1f       	adc	r22, r22
    c4c0:	77 1f       	adc	r23, r23
    c4c2:	88 1f       	adc	r24, r24
    c4c4:	99 1f       	adc	r25, r25
    c4c6:	1a 94       	dec	r1
    c4c8:	69 f7       	brne	.-38     	; 0xc4a4 <__udivmodsi4_loop>
    c4ca:	60 95       	com	r22
    c4cc:	70 95       	com	r23
    c4ce:	80 95       	com	r24
    c4d0:	90 95       	com	r25
    c4d2:	9b 01       	movw	r18, r22
    c4d4:	ac 01       	movw	r20, r24
    c4d6:	bd 01       	movw	r22, r26
    c4d8:	cf 01       	movw	r24, r30
    c4da:	08 95       	ret

0000c4dc <__tablejump2__>:
    c4dc:	ee 0f       	add	r30, r30
    c4de:	ff 1f       	adc	r31, r31

0000c4e0 <__tablejump__>:
    c4e0:	05 90       	lpm	r0, Z+
    c4e2:	f4 91       	lpm	r31, Z
    c4e4:	e0 2d       	mov	r30, r0
    c4e6:	19 94       	eijmp

0000c4e8 <__umulhisi3>:
    c4e8:	a2 9f       	mul	r26, r18
    c4ea:	b0 01       	movw	r22, r0
    c4ec:	b3 9f       	mul	r27, r19
    c4ee:	c0 01       	movw	r24, r0
    c4f0:	a3 9f       	mul	r26, r19
    c4f2:	70 0d       	add	r23, r0
    c4f4:	81 1d       	adc	r24, r1
    c4f6:	11 24       	eor	r1, r1
    c4f8:	91 1d       	adc	r25, r1
    c4fa:	b2 9f       	mul	r27, r18
    c4fc:	70 0d       	add	r23, r0
    c4fe:	81 1d       	adc	r24, r1
    c500:	11 24       	eor	r1, r1
    c502:	91 1d       	adc	r25, r1
    c504:	08 95       	ret

0000c506 <__muluhisi3>:
    c506:	f0 df       	rcall	.-32     	; 0xc4e8 <__umulhisi3>
    c508:	a5 9f       	mul	r26, r21
    c50a:	90 0d       	add	r25, r0
    c50c:	b4 9f       	mul	r27, r20
    c50e:	90 0d       	add	r25, r0
    c510:	a4 9f       	mul	r26, r20
    c512:	80 0d       	add	r24, r0
    c514:	91 1d       	adc	r25, r1
    c516:	11 24       	eor	r1, r1
    c518:	08 95       	ret

0000c51a <calloc>:
    c51a:	0f 93       	push	r16
    c51c:	1f 93       	push	r17
    c51e:	cf 93       	push	r28
    c520:	df 93       	push	r29
    c522:	86 9f       	mul	r24, r22
    c524:	80 01       	movw	r16, r0
    c526:	87 9f       	mul	r24, r23
    c528:	10 0d       	add	r17, r0
    c52a:	96 9f       	mul	r25, r22
    c52c:	10 0d       	add	r17, r0
    c52e:	11 24       	eor	r1, r1
    c530:	c8 01       	movw	r24, r16
    c532:	0d d0       	rcall	.+26     	; 0xc54e <malloc>
    c534:	ec 01       	movw	r28, r24
    c536:	00 97       	sbiw	r24, 0x00	; 0
    c538:	21 f0       	breq	.+8      	; 0xc542 <calloc+0x28>
    c53a:	a8 01       	movw	r20, r16
    c53c:	60 e0       	ldi	r22, 0x00	; 0
    c53e:	70 e0       	ldi	r23, 0x00	; 0
    c540:	31 d2       	rcall	.+1122   	; 0xc9a4 <memset>
    c542:	ce 01       	movw	r24, r28
    c544:	df 91       	pop	r29
    c546:	cf 91       	pop	r28
    c548:	1f 91       	pop	r17
    c54a:	0f 91       	pop	r16
    c54c:	08 95       	ret

0000c54e <malloc>:
    c54e:	cf 93       	push	r28
    c550:	df 93       	push	r29
    c552:	82 30       	cpi	r24, 0x02	; 2
    c554:	91 05       	cpc	r25, r1
    c556:	10 f4       	brcc	.+4      	; 0xc55c <malloc+0xe>
    c558:	82 e0       	ldi	r24, 0x02	; 2
    c55a:	90 e0       	ldi	r25, 0x00	; 0
    c55c:	e0 91 4f 3d 	lds	r30, 0x3D4F
    c560:	f0 91 50 3d 	lds	r31, 0x3D50
    c564:	20 e0       	ldi	r18, 0x00	; 0
    c566:	30 e0       	ldi	r19, 0x00	; 0
    c568:	a0 e0       	ldi	r26, 0x00	; 0
    c56a:	b0 e0       	ldi	r27, 0x00	; 0
    c56c:	30 97       	sbiw	r30, 0x00	; 0
    c56e:	39 f1       	breq	.+78     	; 0xc5be <malloc+0x70>
    c570:	40 81       	ld	r20, Z
    c572:	51 81       	ldd	r21, Z+1	; 0x01
    c574:	48 17       	cp	r20, r24
    c576:	59 07       	cpc	r21, r25
    c578:	b8 f0       	brcs	.+46     	; 0xc5a8 <malloc+0x5a>
    c57a:	48 17       	cp	r20, r24
    c57c:	59 07       	cpc	r21, r25
    c57e:	71 f4       	brne	.+28     	; 0xc59c <malloc+0x4e>
    c580:	82 81       	ldd	r24, Z+2	; 0x02
    c582:	93 81       	ldd	r25, Z+3	; 0x03
    c584:	10 97       	sbiw	r26, 0x00	; 0
    c586:	29 f0       	breq	.+10     	; 0xc592 <malloc+0x44>
    c588:	12 96       	adiw	r26, 0x02	; 2
    c58a:	8d 93       	st	X+, r24
    c58c:	9c 93       	st	X, r25
    c58e:	13 97       	sbiw	r26, 0x03	; 3
    c590:	2c c0       	rjmp	.+88     	; 0xc5ea <malloc+0x9c>
    c592:	80 93 4f 3d 	sts	0x3D4F, r24
    c596:	90 93 50 3d 	sts	0x3D50, r25
    c59a:	27 c0       	rjmp	.+78     	; 0xc5ea <malloc+0x9c>
    c59c:	21 15       	cp	r18, r1
    c59e:	31 05       	cpc	r19, r1
    c5a0:	31 f0       	breq	.+12     	; 0xc5ae <malloc+0x60>
    c5a2:	42 17       	cp	r20, r18
    c5a4:	53 07       	cpc	r21, r19
    c5a6:	18 f0       	brcs	.+6      	; 0xc5ae <malloc+0x60>
    c5a8:	a9 01       	movw	r20, r18
    c5aa:	db 01       	movw	r26, r22
    c5ac:	01 c0       	rjmp	.+2      	; 0xc5b0 <malloc+0x62>
    c5ae:	ef 01       	movw	r28, r30
    c5b0:	9a 01       	movw	r18, r20
    c5b2:	bd 01       	movw	r22, r26
    c5b4:	df 01       	movw	r26, r30
    c5b6:	02 80       	ldd	r0, Z+2	; 0x02
    c5b8:	f3 81       	ldd	r31, Z+3	; 0x03
    c5ba:	e0 2d       	mov	r30, r0
    c5bc:	d7 cf       	rjmp	.-82     	; 0xc56c <malloc+0x1e>
    c5be:	21 15       	cp	r18, r1
    c5c0:	31 05       	cpc	r19, r1
    c5c2:	f9 f0       	breq	.+62     	; 0xc602 <malloc+0xb4>
    c5c4:	28 1b       	sub	r18, r24
    c5c6:	39 0b       	sbc	r19, r25
    c5c8:	24 30       	cpi	r18, 0x04	; 4
    c5ca:	31 05       	cpc	r19, r1
    c5cc:	80 f4       	brcc	.+32     	; 0xc5ee <malloc+0xa0>
    c5ce:	8a 81       	ldd	r24, Y+2	; 0x02
    c5d0:	9b 81       	ldd	r25, Y+3	; 0x03
    c5d2:	61 15       	cp	r22, r1
    c5d4:	71 05       	cpc	r23, r1
    c5d6:	21 f0       	breq	.+8      	; 0xc5e0 <malloc+0x92>
    c5d8:	fb 01       	movw	r30, r22
    c5da:	82 83       	std	Z+2, r24	; 0x02
    c5dc:	93 83       	std	Z+3, r25	; 0x03
    c5de:	04 c0       	rjmp	.+8      	; 0xc5e8 <malloc+0x9a>
    c5e0:	80 93 4f 3d 	sts	0x3D4F, r24
    c5e4:	90 93 50 3d 	sts	0x3D50, r25
    c5e8:	fe 01       	movw	r30, r28
    c5ea:	32 96       	adiw	r30, 0x02	; 2
    c5ec:	44 c0       	rjmp	.+136    	; 0xc676 <malloc+0x128>
    c5ee:	fe 01       	movw	r30, r28
    c5f0:	e2 0f       	add	r30, r18
    c5f2:	f3 1f       	adc	r31, r19
    c5f4:	81 93       	st	Z+, r24
    c5f6:	91 93       	st	Z+, r25
    c5f8:	22 50       	subi	r18, 0x02	; 2
    c5fa:	31 09       	sbc	r19, r1
    c5fc:	28 83       	st	Y, r18
    c5fe:	39 83       	std	Y+1, r19	; 0x01
    c600:	3a c0       	rjmp	.+116    	; 0xc676 <malloc+0x128>
    c602:	20 91 4d 3d 	lds	r18, 0x3D4D
    c606:	30 91 4e 3d 	lds	r19, 0x3D4E
    c60a:	23 2b       	or	r18, r19
    c60c:	41 f4       	brne	.+16     	; 0xc61e <malloc+0xd0>
    c60e:	20 91 02 20 	lds	r18, 0x2002
    c612:	30 91 03 20 	lds	r19, 0x2003
    c616:	20 93 4d 3d 	sts	0x3D4D, r18
    c61a:	30 93 4e 3d 	sts	0x3D4E, r19
    c61e:	20 91 00 20 	lds	r18, 0x2000
    c622:	30 91 01 20 	lds	r19, 0x2001
    c626:	21 15       	cp	r18, r1
    c628:	31 05       	cpc	r19, r1
    c62a:	41 f4       	brne	.+16     	; 0xc63c <malloc+0xee>
    c62c:	2d b7       	in	r18, 0x3d	; 61
    c62e:	3e b7       	in	r19, 0x3e	; 62
    c630:	40 91 04 20 	lds	r20, 0x2004
    c634:	50 91 05 20 	lds	r21, 0x2005
    c638:	24 1b       	sub	r18, r20
    c63a:	35 0b       	sbc	r19, r21
    c63c:	e0 91 4d 3d 	lds	r30, 0x3D4D
    c640:	f0 91 4e 3d 	lds	r31, 0x3D4E
    c644:	e2 17       	cp	r30, r18
    c646:	f3 07       	cpc	r31, r19
    c648:	a0 f4       	brcc	.+40     	; 0xc672 <malloc+0x124>
    c64a:	2e 1b       	sub	r18, r30
    c64c:	3f 0b       	sbc	r19, r31
    c64e:	28 17       	cp	r18, r24
    c650:	39 07       	cpc	r19, r25
    c652:	78 f0       	brcs	.+30     	; 0xc672 <malloc+0x124>
    c654:	ac 01       	movw	r20, r24
    c656:	4e 5f       	subi	r20, 0xFE	; 254
    c658:	5f 4f       	sbci	r21, 0xFF	; 255
    c65a:	24 17       	cp	r18, r20
    c65c:	35 07       	cpc	r19, r21
    c65e:	48 f0       	brcs	.+18     	; 0xc672 <malloc+0x124>
    c660:	4e 0f       	add	r20, r30
    c662:	5f 1f       	adc	r21, r31
    c664:	40 93 4d 3d 	sts	0x3D4D, r20
    c668:	50 93 4e 3d 	sts	0x3D4E, r21
    c66c:	81 93       	st	Z+, r24
    c66e:	91 93       	st	Z+, r25
    c670:	02 c0       	rjmp	.+4      	; 0xc676 <malloc+0x128>
    c672:	e0 e0       	ldi	r30, 0x00	; 0
    c674:	f0 e0       	ldi	r31, 0x00	; 0
    c676:	cf 01       	movw	r24, r30
    c678:	df 91       	pop	r29
    c67a:	cf 91       	pop	r28
    c67c:	08 95       	ret

0000c67e <free>:
    c67e:	cf 93       	push	r28
    c680:	df 93       	push	r29
    c682:	00 97       	sbiw	r24, 0x00	; 0
    c684:	09 f4       	brne	.+2      	; 0xc688 <free+0xa>
    c686:	87 c0       	rjmp	.+270    	; 0xc796 <free+0x118>
    c688:	fc 01       	movw	r30, r24
    c68a:	32 97       	sbiw	r30, 0x02	; 2
    c68c:	12 82       	std	Z+2, r1	; 0x02
    c68e:	13 82       	std	Z+3, r1	; 0x03
    c690:	c0 91 4f 3d 	lds	r28, 0x3D4F
    c694:	d0 91 50 3d 	lds	r29, 0x3D50
    c698:	20 97       	sbiw	r28, 0x00	; 0
    c69a:	81 f4       	brne	.+32     	; 0xc6bc <free+0x3e>
    c69c:	20 81       	ld	r18, Z
    c69e:	31 81       	ldd	r19, Z+1	; 0x01
    c6a0:	28 0f       	add	r18, r24
    c6a2:	39 1f       	adc	r19, r25
    c6a4:	80 91 4d 3d 	lds	r24, 0x3D4D
    c6a8:	90 91 4e 3d 	lds	r25, 0x3D4E
    c6ac:	82 17       	cp	r24, r18
    c6ae:	93 07       	cpc	r25, r19
    c6b0:	79 f5       	brne	.+94     	; 0xc710 <free+0x92>
    c6b2:	e0 93 4d 3d 	sts	0x3D4D, r30
    c6b6:	f0 93 4e 3d 	sts	0x3D4E, r31
    c6ba:	6d c0       	rjmp	.+218    	; 0xc796 <free+0x118>
    c6bc:	de 01       	movw	r26, r28
    c6be:	20 e0       	ldi	r18, 0x00	; 0
    c6c0:	30 e0       	ldi	r19, 0x00	; 0
    c6c2:	ae 17       	cp	r26, r30
    c6c4:	bf 07       	cpc	r27, r31
    c6c6:	50 f4       	brcc	.+20     	; 0xc6dc <free+0x5e>
    c6c8:	12 96       	adiw	r26, 0x02	; 2
    c6ca:	4d 91       	ld	r20, X+
    c6cc:	5c 91       	ld	r21, X
    c6ce:	13 97       	sbiw	r26, 0x03	; 3
    c6d0:	9d 01       	movw	r18, r26
    c6d2:	41 15       	cp	r20, r1
    c6d4:	51 05       	cpc	r21, r1
    c6d6:	09 f1       	breq	.+66     	; 0xc71a <free+0x9c>
    c6d8:	da 01       	movw	r26, r20
    c6da:	f3 cf       	rjmp	.-26     	; 0xc6c2 <free+0x44>
    c6dc:	a2 83       	std	Z+2, r26	; 0x02
    c6de:	b3 83       	std	Z+3, r27	; 0x03
    c6e0:	40 81       	ld	r20, Z
    c6e2:	51 81       	ldd	r21, Z+1	; 0x01
    c6e4:	84 0f       	add	r24, r20
    c6e6:	95 1f       	adc	r25, r21
    c6e8:	8a 17       	cp	r24, r26
    c6ea:	9b 07       	cpc	r25, r27
    c6ec:	71 f4       	brne	.+28     	; 0xc70a <free+0x8c>
    c6ee:	8d 91       	ld	r24, X+
    c6f0:	9c 91       	ld	r25, X
    c6f2:	11 97       	sbiw	r26, 0x01	; 1
    c6f4:	84 0f       	add	r24, r20
    c6f6:	95 1f       	adc	r25, r21
    c6f8:	02 96       	adiw	r24, 0x02	; 2
    c6fa:	80 83       	st	Z, r24
    c6fc:	91 83       	std	Z+1, r25	; 0x01
    c6fe:	12 96       	adiw	r26, 0x02	; 2
    c700:	8d 91       	ld	r24, X+
    c702:	9c 91       	ld	r25, X
    c704:	13 97       	sbiw	r26, 0x03	; 3
    c706:	82 83       	std	Z+2, r24	; 0x02
    c708:	93 83       	std	Z+3, r25	; 0x03
    c70a:	21 15       	cp	r18, r1
    c70c:	31 05       	cpc	r19, r1
    c70e:	29 f4       	brne	.+10     	; 0xc71a <free+0x9c>
    c710:	e0 93 4f 3d 	sts	0x3D4F, r30
    c714:	f0 93 50 3d 	sts	0x3D50, r31
    c718:	3e c0       	rjmp	.+124    	; 0xc796 <free+0x118>
    c71a:	d9 01       	movw	r26, r18
    c71c:	12 96       	adiw	r26, 0x02	; 2
    c71e:	ed 93       	st	X+, r30
    c720:	fc 93       	st	X, r31
    c722:	13 97       	sbiw	r26, 0x03	; 3
    c724:	4d 91       	ld	r20, X+
    c726:	5d 91       	ld	r21, X+
    c728:	a4 0f       	add	r26, r20
    c72a:	b5 1f       	adc	r27, r21
    c72c:	ea 17       	cp	r30, r26
    c72e:	fb 07       	cpc	r31, r27
    c730:	79 f4       	brne	.+30     	; 0xc750 <free+0xd2>
    c732:	80 81       	ld	r24, Z
    c734:	91 81       	ldd	r25, Z+1	; 0x01
    c736:	84 0f       	add	r24, r20
    c738:	95 1f       	adc	r25, r21
    c73a:	02 96       	adiw	r24, 0x02	; 2
    c73c:	d9 01       	movw	r26, r18
    c73e:	8d 93       	st	X+, r24
    c740:	9c 93       	st	X, r25
    c742:	11 97       	sbiw	r26, 0x01	; 1
    c744:	82 81       	ldd	r24, Z+2	; 0x02
    c746:	93 81       	ldd	r25, Z+3	; 0x03
    c748:	12 96       	adiw	r26, 0x02	; 2
    c74a:	8d 93       	st	X+, r24
    c74c:	9c 93       	st	X, r25
    c74e:	13 97       	sbiw	r26, 0x03	; 3
    c750:	e0 e0       	ldi	r30, 0x00	; 0
    c752:	f0 e0       	ldi	r31, 0x00	; 0
    c754:	8a 81       	ldd	r24, Y+2	; 0x02
    c756:	9b 81       	ldd	r25, Y+3	; 0x03
    c758:	00 97       	sbiw	r24, 0x00	; 0
    c75a:	19 f0       	breq	.+6      	; 0xc762 <free+0xe4>
    c75c:	fe 01       	movw	r30, r28
    c75e:	ec 01       	movw	r28, r24
    c760:	f9 cf       	rjmp	.-14     	; 0xc754 <free+0xd6>
    c762:	ce 01       	movw	r24, r28
    c764:	02 96       	adiw	r24, 0x02	; 2
    c766:	28 81       	ld	r18, Y
    c768:	39 81       	ldd	r19, Y+1	; 0x01
    c76a:	82 0f       	add	r24, r18
    c76c:	93 1f       	adc	r25, r19
    c76e:	20 91 4d 3d 	lds	r18, 0x3D4D
    c772:	30 91 4e 3d 	lds	r19, 0x3D4E
    c776:	28 17       	cp	r18, r24
    c778:	39 07       	cpc	r19, r25
    c77a:	69 f4       	brne	.+26     	; 0xc796 <free+0x118>
    c77c:	30 97       	sbiw	r30, 0x00	; 0
    c77e:	29 f4       	brne	.+10     	; 0xc78a <free+0x10c>
    c780:	10 92 4f 3d 	sts	0x3D4F, r1
    c784:	10 92 50 3d 	sts	0x3D50, r1
    c788:	02 c0       	rjmp	.+4      	; 0xc78e <free+0x110>
    c78a:	12 82       	std	Z+2, r1	; 0x02
    c78c:	13 82       	std	Z+3, r1	; 0x03
    c78e:	c0 93 4d 3d 	sts	0x3D4D, r28
    c792:	d0 93 4e 3d 	sts	0x3D4E, r29
    c796:	df 91       	pop	r29
    c798:	cf 91       	pop	r28
    c79a:	08 95       	ret

0000c79c <__ftoa_engine>:
    c79c:	28 30       	cpi	r18, 0x08	; 8
    c79e:	08 f0       	brcs	.+2      	; 0xc7a2 <__ftoa_engine+0x6>
    c7a0:	27 e0       	ldi	r18, 0x07	; 7
    c7a2:	33 27       	eor	r19, r19
    c7a4:	da 01       	movw	r26, r20
    c7a6:	99 0f       	add	r25, r25
    c7a8:	31 1d       	adc	r19, r1
    c7aa:	87 fd       	sbrc	r24, 7
    c7ac:	91 60       	ori	r25, 0x01	; 1
    c7ae:	00 96       	adiw	r24, 0x00	; 0
    c7b0:	61 05       	cpc	r22, r1
    c7b2:	71 05       	cpc	r23, r1
    c7b4:	39 f4       	brne	.+14     	; 0xc7c4 <__ftoa_engine+0x28>
    c7b6:	32 60       	ori	r19, 0x02	; 2
    c7b8:	2e 5f       	subi	r18, 0xFE	; 254
    c7ba:	3d 93       	st	X+, r19
    c7bc:	30 e3       	ldi	r19, 0x30	; 48
    c7be:	2a 95       	dec	r18
    c7c0:	e1 f7       	brne	.-8      	; 0xc7ba <__ftoa_engine+0x1e>
    c7c2:	08 95       	ret
    c7c4:	9f 3f       	cpi	r25, 0xFF	; 255
    c7c6:	30 f0       	brcs	.+12     	; 0xc7d4 <__ftoa_engine+0x38>
    c7c8:	80 38       	cpi	r24, 0x80	; 128
    c7ca:	71 05       	cpc	r23, r1
    c7cc:	61 05       	cpc	r22, r1
    c7ce:	09 f0       	breq	.+2      	; 0xc7d2 <__ftoa_engine+0x36>
    c7d0:	3c 5f       	subi	r19, 0xFC	; 252
    c7d2:	3c 5f       	subi	r19, 0xFC	; 252
    c7d4:	3d 93       	st	X+, r19
    c7d6:	91 30       	cpi	r25, 0x01	; 1
    c7d8:	08 f0       	brcs	.+2      	; 0xc7dc <__ftoa_engine+0x40>
    c7da:	80 68       	ori	r24, 0x80	; 128
    c7dc:	91 1d       	adc	r25, r1
    c7de:	df 93       	push	r29
    c7e0:	cf 93       	push	r28
    c7e2:	1f 93       	push	r17
    c7e4:	0f 93       	push	r16
    c7e6:	ff 92       	push	r15
    c7e8:	ef 92       	push	r14
    c7ea:	19 2f       	mov	r17, r25
    c7ec:	98 7f       	andi	r25, 0xF8	; 248
    c7ee:	96 95       	lsr	r25
    c7f0:	e9 2f       	mov	r30, r25
    c7f2:	96 95       	lsr	r25
    c7f4:	96 95       	lsr	r25
    c7f6:	e9 0f       	add	r30, r25
    c7f8:	ff 27       	eor	r31, r31
    c7fa:	e9 51       	subi	r30, 0x19	; 25
    c7fc:	f2 4f       	sbci	r31, 0xF2	; 242
    c7fe:	99 27       	eor	r25, r25
    c800:	33 27       	eor	r19, r19
    c802:	ee 24       	eor	r14, r14
    c804:	ff 24       	eor	r15, r15
    c806:	a7 01       	movw	r20, r14
    c808:	e7 01       	movw	r28, r14
    c80a:	05 90       	lpm	r0, Z+
    c80c:	08 94       	sec
    c80e:	07 94       	ror	r0
    c810:	28 f4       	brcc	.+10     	; 0xc81c <__ftoa_engine+0x80>
    c812:	36 0f       	add	r19, r22
    c814:	e7 1e       	adc	r14, r23
    c816:	f8 1e       	adc	r15, r24
    c818:	49 1f       	adc	r20, r25
    c81a:	51 1d       	adc	r21, r1
    c81c:	66 0f       	add	r22, r22
    c81e:	77 1f       	adc	r23, r23
    c820:	88 1f       	adc	r24, r24
    c822:	99 1f       	adc	r25, r25
    c824:	06 94       	lsr	r0
    c826:	a1 f7       	brne	.-24     	; 0xc810 <__ftoa_engine+0x74>
    c828:	05 90       	lpm	r0, Z+
    c82a:	07 94       	ror	r0
    c82c:	28 f4       	brcc	.+10     	; 0xc838 <__ftoa_engine+0x9c>
    c82e:	e7 0e       	add	r14, r23
    c830:	f8 1e       	adc	r15, r24
    c832:	49 1f       	adc	r20, r25
    c834:	56 1f       	adc	r21, r22
    c836:	c1 1d       	adc	r28, r1
    c838:	77 0f       	add	r23, r23
    c83a:	88 1f       	adc	r24, r24
    c83c:	99 1f       	adc	r25, r25
    c83e:	66 1f       	adc	r22, r22
    c840:	06 94       	lsr	r0
    c842:	a1 f7       	brne	.-24     	; 0xc82c <__ftoa_engine+0x90>
    c844:	05 90       	lpm	r0, Z+
    c846:	07 94       	ror	r0
    c848:	28 f4       	brcc	.+10     	; 0xc854 <__ftoa_engine+0xb8>
    c84a:	f8 0e       	add	r15, r24
    c84c:	49 1f       	adc	r20, r25
    c84e:	56 1f       	adc	r21, r22
    c850:	c7 1f       	adc	r28, r23
    c852:	d1 1d       	adc	r29, r1
    c854:	88 0f       	add	r24, r24
    c856:	99 1f       	adc	r25, r25
    c858:	66 1f       	adc	r22, r22
    c85a:	77 1f       	adc	r23, r23
    c85c:	06 94       	lsr	r0
    c85e:	a1 f7       	brne	.-24     	; 0xc848 <__ftoa_engine+0xac>
    c860:	05 90       	lpm	r0, Z+
    c862:	07 94       	ror	r0
    c864:	20 f4       	brcc	.+8      	; 0xc86e <__ftoa_engine+0xd2>
    c866:	49 0f       	add	r20, r25
    c868:	56 1f       	adc	r21, r22
    c86a:	c7 1f       	adc	r28, r23
    c86c:	d8 1f       	adc	r29, r24
    c86e:	99 0f       	add	r25, r25
    c870:	66 1f       	adc	r22, r22
    c872:	77 1f       	adc	r23, r23
    c874:	88 1f       	adc	r24, r24
    c876:	06 94       	lsr	r0
    c878:	a9 f7       	brne	.-22     	; 0xc864 <__ftoa_engine+0xc8>
    c87a:	84 91       	lpm	r24, Z
    c87c:	10 95       	com	r17
    c87e:	17 70       	andi	r17, 0x07	; 7
    c880:	41 f0       	breq	.+16     	; 0xc892 <__ftoa_engine+0xf6>
    c882:	d6 95       	lsr	r29
    c884:	c7 95       	ror	r28
    c886:	57 95       	ror	r21
    c888:	47 95       	ror	r20
    c88a:	f7 94       	ror	r15
    c88c:	e7 94       	ror	r14
    c88e:	1a 95       	dec	r17
    c890:	c1 f7       	brne	.-16     	; 0xc882 <__ftoa_engine+0xe6>
    c892:	ed e8       	ldi	r30, 0x8D	; 141
    c894:	fd e0       	ldi	r31, 0x0D	; 13
    c896:	68 94       	set
    c898:	15 90       	lpm	r1, Z+
    c89a:	15 91       	lpm	r17, Z+
    c89c:	35 91       	lpm	r19, Z+
    c89e:	65 91       	lpm	r22, Z+
    c8a0:	95 91       	lpm	r25, Z+
    c8a2:	05 90       	lpm	r0, Z+
    c8a4:	7f e2       	ldi	r23, 0x2F	; 47
    c8a6:	73 95       	inc	r23
    c8a8:	e1 18       	sub	r14, r1
    c8aa:	f1 0a       	sbc	r15, r17
    c8ac:	43 0b       	sbc	r20, r19
    c8ae:	56 0b       	sbc	r21, r22
    c8b0:	c9 0b       	sbc	r28, r25
    c8b2:	d0 09       	sbc	r29, r0
    c8b4:	c0 f7       	brcc	.-16     	; 0xc8a6 <__ftoa_engine+0x10a>
    c8b6:	e1 0c       	add	r14, r1
    c8b8:	f1 1e       	adc	r15, r17
    c8ba:	43 1f       	adc	r20, r19
    c8bc:	56 1f       	adc	r21, r22
    c8be:	c9 1f       	adc	r28, r25
    c8c0:	d0 1d       	adc	r29, r0
    c8c2:	7e f4       	brtc	.+30     	; 0xc8e2 <__ftoa_engine+0x146>
    c8c4:	70 33       	cpi	r23, 0x30	; 48
    c8c6:	11 f4       	brne	.+4      	; 0xc8cc <__ftoa_engine+0x130>
    c8c8:	8a 95       	dec	r24
    c8ca:	e6 cf       	rjmp	.-52     	; 0xc898 <__ftoa_engine+0xfc>
    c8cc:	e8 94       	clt
    c8ce:	01 50       	subi	r16, 0x01	; 1
    c8d0:	30 f0       	brcs	.+12     	; 0xc8de <__ftoa_engine+0x142>
    c8d2:	08 0f       	add	r16, r24
    c8d4:	0a f4       	brpl	.+2      	; 0xc8d8 <__ftoa_engine+0x13c>
    c8d6:	00 27       	eor	r16, r16
    c8d8:	02 17       	cp	r16, r18
    c8da:	08 f4       	brcc	.+2      	; 0xc8de <__ftoa_engine+0x142>
    c8dc:	20 2f       	mov	r18, r16
    c8de:	23 95       	inc	r18
    c8e0:	02 2f       	mov	r16, r18
    c8e2:	7a 33       	cpi	r23, 0x3A	; 58
    c8e4:	28 f0       	brcs	.+10     	; 0xc8f0 <__ftoa_engine+0x154>
    c8e6:	79 e3       	ldi	r23, 0x39	; 57
    c8e8:	7d 93       	st	X+, r23
    c8ea:	2a 95       	dec	r18
    c8ec:	e9 f7       	brne	.-6      	; 0xc8e8 <__ftoa_engine+0x14c>
    c8ee:	10 c0       	rjmp	.+32     	; 0xc910 <__ftoa_engine+0x174>
    c8f0:	7d 93       	st	X+, r23
    c8f2:	2a 95       	dec	r18
    c8f4:	89 f6       	brne	.-94     	; 0xc898 <__ftoa_engine+0xfc>
    c8f6:	06 94       	lsr	r0
    c8f8:	97 95       	ror	r25
    c8fa:	67 95       	ror	r22
    c8fc:	37 95       	ror	r19
    c8fe:	17 95       	ror	r17
    c900:	17 94       	ror	r1
    c902:	e1 18       	sub	r14, r1
    c904:	f1 0a       	sbc	r15, r17
    c906:	43 0b       	sbc	r20, r19
    c908:	56 0b       	sbc	r21, r22
    c90a:	c9 0b       	sbc	r28, r25
    c90c:	d0 09       	sbc	r29, r0
    c90e:	98 f0       	brcs	.+38     	; 0xc936 <__ftoa_engine+0x19a>
    c910:	23 95       	inc	r18
    c912:	7e 91       	ld	r23, -X
    c914:	73 95       	inc	r23
    c916:	7a 33       	cpi	r23, 0x3A	; 58
    c918:	08 f0       	brcs	.+2      	; 0xc91c <__ftoa_engine+0x180>
    c91a:	70 e3       	ldi	r23, 0x30	; 48
    c91c:	7c 93       	st	X, r23
    c91e:	20 13       	cpse	r18, r16
    c920:	b8 f7       	brcc	.-18     	; 0xc910 <__ftoa_engine+0x174>
    c922:	7e 91       	ld	r23, -X
    c924:	70 61       	ori	r23, 0x10	; 16
    c926:	7d 93       	st	X+, r23
    c928:	30 f0       	brcs	.+12     	; 0xc936 <__ftoa_engine+0x19a>
    c92a:	83 95       	inc	r24
    c92c:	71 e3       	ldi	r23, 0x31	; 49
    c92e:	7d 93       	st	X+, r23
    c930:	70 e3       	ldi	r23, 0x30	; 48
    c932:	2a 95       	dec	r18
    c934:	e1 f7       	brne	.-8      	; 0xc92e <__ftoa_engine+0x192>
    c936:	11 24       	eor	r1, r1
    c938:	ef 90       	pop	r14
    c93a:	ff 90       	pop	r15
    c93c:	0f 91       	pop	r16
    c93e:	1f 91       	pop	r17
    c940:	cf 91       	pop	r28
    c942:	df 91       	pop	r29
    c944:	99 27       	eor	r25, r25
    c946:	87 fd       	sbrc	r24, 7
    c948:	90 95       	com	r25
    c94a:	08 95       	ret

0000c94c <toupper>:
    c94c:	91 11       	cpse	r25, r1
    c94e:	08 95       	ret
    c950:	81 56       	subi	r24, 0x61	; 97
    c952:	8a 51       	subi	r24, 0x1A	; 26
    c954:	08 f4       	brcc	.+2      	; 0xc958 <toupper+0xc>
    c956:	80 52       	subi	r24, 0x20	; 32
    c958:	85 58       	subi	r24, 0x85	; 133
    c95a:	08 95       	ret

0000c95c <strnlen_P>:
    c95c:	fc 01       	movw	r30, r24
    c95e:	05 90       	lpm	r0, Z+
    c960:	61 50       	subi	r22, 0x01	; 1
    c962:	70 40       	sbci	r23, 0x00	; 0
    c964:	01 10       	cpse	r0, r1
    c966:	d8 f7       	brcc	.-10     	; 0xc95e <strnlen_P+0x2>
    c968:	80 95       	com	r24
    c96a:	90 95       	com	r25
    c96c:	8e 0f       	add	r24, r30
    c96e:	9f 1f       	adc	r25, r31
    c970:	08 95       	ret

0000c972 <strtok>:
    c972:	4c e5       	ldi	r20, 0x5C	; 92
    c974:	5e e2       	ldi	r21, 0x2E	; 46
    c976:	85 c0       	rjmp	.+266    	; 0xca82 <strtok_r>

0000c978 <memcmp>:
    c978:	fb 01       	movw	r30, r22
    c97a:	dc 01       	movw	r26, r24
    c97c:	04 c0       	rjmp	.+8      	; 0xc986 <memcmp+0xe>
    c97e:	8d 91       	ld	r24, X+
    c980:	01 90       	ld	r0, Z+
    c982:	80 19       	sub	r24, r0
    c984:	21 f4       	brne	.+8      	; 0xc98e <memcmp+0x16>
    c986:	41 50       	subi	r20, 0x01	; 1
    c988:	50 40       	sbci	r21, 0x00	; 0
    c98a:	c8 f7       	brcc	.-14     	; 0xc97e <memcmp+0x6>
    c98c:	88 1b       	sub	r24, r24
    c98e:	99 0b       	sbc	r25, r25
    c990:	08 95       	ret

0000c992 <memcpy>:
    c992:	fb 01       	movw	r30, r22
    c994:	dc 01       	movw	r26, r24
    c996:	02 c0       	rjmp	.+4      	; 0xc99c <memcpy+0xa>
    c998:	01 90       	ld	r0, Z+
    c99a:	0d 92       	st	X+, r0
    c99c:	41 50       	subi	r20, 0x01	; 1
    c99e:	50 40       	sbci	r21, 0x00	; 0
    c9a0:	d8 f7       	brcc	.-10     	; 0xc998 <memcpy+0x6>
    c9a2:	08 95       	ret

0000c9a4 <memset>:
    c9a4:	dc 01       	movw	r26, r24
    c9a6:	01 c0       	rjmp	.+2      	; 0xc9aa <memset+0x6>
    c9a8:	6d 93       	st	X+, r22
    c9aa:	41 50       	subi	r20, 0x01	; 1
    c9ac:	50 40       	sbci	r21, 0x00	; 0
    c9ae:	e0 f7       	brcc	.-8      	; 0xc9a8 <memset+0x4>
    c9b0:	08 95       	ret

0000c9b2 <strcat>:
    c9b2:	fb 01       	movw	r30, r22
    c9b4:	dc 01       	movw	r26, r24
    c9b6:	0d 90       	ld	r0, X+
    c9b8:	00 20       	and	r0, r0
    c9ba:	e9 f7       	brne	.-6      	; 0xc9b6 <strcat+0x4>
    c9bc:	11 97       	sbiw	r26, 0x01	; 1
    c9be:	01 90       	ld	r0, Z+
    c9c0:	0d 92       	st	X+, r0
    c9c2:	00 20       	and	r0, r0
    c9c4:	e1 f7       	brne	.-8      	; 0xc9be <strcat+0xc>
    c9c6:	08 95       	ret

0000c9c8 <strchr>:
    c9c8:	fc 01       	movw	r30, r24
    c9ca:	81 91       	ld	r24, Z+
    c9cc:	86 17       	cp	r24, r22
    c9ce:	21 f0       	breq	.+8      	; 0xc9d8 <strchr+0x10>
    c9d0:	88 23       	and	r24, r24
    c9d2:	d9 f7       	brne	.-10     	; 0xc9ca <strchr+0x2>
    c9d4:	99 27       	eor	r25, r25
    c9d6:	08 95       	ret
    c9d8:	31 97       	sbiw	r30, 0x01	; 1
    c9da:	cf 01       	movw	r24, r30
    c9dc:	08 95       	ret

0000c9de <strcmp>:
    c9de:	fb 01       	movw	r30, r22
    c9e0:	dc 01       	movw	r26, r24
    c9e2:	8d 91       	ld	r24, X+
    c9e4:	01 90       	ld	r0, Z+
    c9e6:	80 19       	sub	r24, r0
    c9e8:	01 10       	cpse	r0, r1
    c9ea:	d9 f3       	breq	.-10     	; 0xc9e2 <strcmp+0x4>
    c9ec:	99 0b       	sbc	r25, r25
    c9ee:	08 95       	ret

0000c9f0 <strcpy>:
    c9f0:	fb 01       	movw	r30, r22
    c9f2:	dc 01       	movw	r26, r24
    c9f4:	01 90       	ld	r0, Z+
    c9f6:	0d 92       	st	X+, r0
    c9f8:	00 20       	and	r0, r0
    c9fa:	e1 f7       	brne	.-8      	; 0xc9f4 <strcpy+0x4>
    c9fc:	08 95       	ret

0000c9fe <strncmp>:
    c9fe:	fb 01       	movw	r30, r22
    ca00:	dc 01       	movw	r26, r24
    ca02:	41 50       	subi	r20, 0x01	; 1
    ca04:	50 40       	sbci	r21, 0x00	; 0
    ca06:	30 f0       	brcs	.+12     	; 0xca14 <strncmp+0x16>
    ca08:	8d 91       	ld	r24, X+
    ca0a:	01 90       	ld	r0, Z+
    ca0c:	80 19       	sub	r24, r0
    ca0e:	19 f4       	brne	.+6      	; 0xca16 <strncmp+0x18>
    ca10:	00 20       	and	r0, r0
    ca12:	b9 f7       	brne	.-18     	; 0xca02 <strncmp+0x4>
    ca14:	88 1b       	sub	r24, r24
    ca16:	99 0b       	sbc	r25, r25
    ca18:	08 95       	ret

0000ca1a <strncpy>:
    ca1a:	fb 01       	movw	r30, r22
    ca1c:	dc 01       	movw	r26, r24
    ca1e:	41 50       	subi	r20, 0x01	; 1
    ca20:	50 40       	sbci	r21, 0x00	; 0
    ca22:	48 f0       	brcs	.+18     	; 0xca36 <strncpy+0x1c>
    ca24:	01 90       	ld	r0, Z+
    ca26:	0d 92       	st	X+, r0
    ca28:	00 20       	and	r0, r0
    ca2a:	c9 f7       	brne	.-14     	; 0xca1e <strncpy+0x4>
    ca2c:	01 c0       	rjmp	.+2      	; 0xca30 <strncpy+0x16>
    ca2e:	1d 92       	st	X+, r1
    ca30:	41 50       	subi	r20, 0x01	; 1
    ca32:	50 40       	sbci	r21, 0x00	; 0
    ca34:	e0 f7       	brcc	.-8      	; 0xca2e <strncpy+0x14>
    ca36:	08 95       	ret

0000ca38 <strnlen>:
    ca38:	fc 01       	movw	r30, r24
    ca3a:	61 50       	subi	r22, 0x01	; 1
    ca3c:	70 40       	sbci	r23, 0x00	; 0
    ca3e:	01 90       	ld	r0, Z+
    ca40:	01 10       	cpse	r0, r1
    ca42:	d8 f7       	brcc	.-10     	; 0xca3a <strnlen+0x2>
    ca44:	80 95       	com	r24
    ca46:	90 95       	com	r25
    ca48:	8e 0f       	add	r24, r30
    ca4a:	9f 1f       	adc	r25, r31
    ca4c:	08 95       	ret

0000ca4e <strstr>:
    ca4e:	fb 01       	movw	r30, r22
    ca50:	51 91       	ld	r21, Z+
    ca52:	55 23       	and	r21, r21
    ca54:	a9 f0       	breq	.+42     	; 0xca80 <strstr+0x32>
    ca56:	bf 01       	movw	r22, r30
    ca58:	dc 01       	movw	r26, r24
    ca5a:	4d 91       	ld	r20, X+
    ca5c:	45 17       	cp	r20, r21
    ca5e:	41 11       	cpse	r20, r1
    ca60:	e1 f7       	brne	.-8      	; 0xca5a <strstr+0xc>
    ca62:	59 f4       	brne	.+22     	; 0xca7a <strstr+0x2c>
    ca64:	cd 01       	movw	r24, r26
    ca66:	01 90       	ld	r0, Z+
    ca68:	00 20       	and	r0, r0
    ca6a:	49 f0       	breq	.+18     	; 0xca7e <strstr+0x30>
    ca6c:	4d 91       	ld	r20, X+
    ca6e:	40 15       	cp	r20, r0
    ca70:	41 11       	cpse	r20, r1
    ca72:	c9 f3       	breq	.-14     	; 0xca66 <strstr+0x18>
    ca74:	fb 01       	movw	r30, r22
    ca76:	41 11       	cpse	r20, r1
    ca78:	ef cf       	rjmp	.-34     	; 0xca58 <strstr+0xa>
    ca7a:	81 e0       	ldi	r24, 0x01	; 1
    ca7c:	90 e0       	ldi	r25, 0x00	; 0
    ca7e:	01 97       	sbiw	r24, 0x01	; 1
    ca80:	08 95       	ret

0000ca82 <strtok_r>:
    ca82:	fa 01       	movw	r30, r20
    ca84:	a1 91       	ld	r26, Z+
    ca86:	b0 81       	ld	r27, Z
    ca88:	00 97       	sbiw	r24, 0x00	; 0
    ca8a:	19 f4       	brne	.+6      	; 0xca92 <strtok_r+0x10>
    ca8c:	10 97       	sbiw	r26, 0x00	; 0
    ca8e:	e1 f0       	breq	.+56     	; 0xcac8 <strtok_r+0x46>
    ca90:	cd 01       	movw	r24, r26
    ca92:	dc 01       	movw	r26, r24
    ca94:	cd 01       	movw	r24, r26
    ca96:	0d 90       	ld	r0, X+
    ca98:	00 20       	and	r0, r0
    ca9a:	11 f4       	brne	.+4      	; 0xcaa0 <strtok_r+0x1e>
    ca9c:	c0 01       	movw	r24, r0
    ca9e:	13 c0       	rjmp	.+38     	; 0xcac6 <strtok_r+0x44>
    caa0:	fb 01       	movw	r30, r22
    caa2:	21 91       	ld	r18, Z+
    caa4:	22 23       	and	r18, r18
    caa6:	19 f0       	breq	.+6      	; 0xcaae <strtok_r+0x2c>
    caa8:	20 15       	cp	r18, r0
    caaa:	d9 f7       	brne	.-10     	; 0xcaa2 <strtok_r+0x20>
    caac:	f3 cf       	rjmp	.-26     	; 0xca94 <strtok_r+0x12>
    caae:	fb 01       	movw	r30, r22
    cab0:	21 91       	ld	r18, Z+
    cab2:	20 15       	cp	r18, r0
    cab4:	19 f4       	brne	.+6      	; 0xcabc <strtok_r+0x3a>
    cab6:	1e 92       	st	-X, r1
    cab8:	11 96       	adiw	r26, 0x01	; 1
    caba:	06 c0       	rjmp	.+12     	; 0xcac8 <strtok_r+0x46>
    cabc:	22 23       	and	r18, r18
    cabe:	c1 f7       	brne	.-16     	; 0xcab0 <strtok_r+0x2e>
    cac0:	0d 90       	ld	r0, X+
    cac2:	00 20       	and	r0, r0
    cac4:	a1 f7       	brne	.-24     	; 0xcaae <strtok_r+0x2c>
    cac6:	d0 01       	movw	r26, r0
    cac8:	fa 01       	movw	r30, r20
    caca:	a1 93       	st	Z+, r26
    cacc:	b0 83       	st	Z, r27
    cace:	08 95       	ret

0000cad0 <fputc>:
    cad0:	0f 93       	push	r16
    cad2:	1f 93       	push	r17
    cad4:	cf 93       	push	r28
    cad6:	df 93       	push	r29
    cad8:	18 2f       	mov	r17, r24
    cada:	09 2f       	mov	r16, r25
    cadc:	eb 01       	movw	r28, r22
    cade:	8b 81       	ldd	r24, Y+3	; 0x03
    cae0:	81 fd       	sbrc	r24, 1
    cae2:	03 c0       	rjmp	.+6      	; 0xcaea <fputc+0x1a>
    cae4:	8f ef       	ldi	r24, 0xFF	; 255
    cae6:	9f ef       	ldi	r25, 0xFF	; 255
    cae8:	20 c0       	rjmp	.+64     	; 0xcb2a <fputc+0x5a>
    caea:	82 ff       	sbrs	r24, 2
    caec:	10 c0       	rjmp	.+32     	; 0xcb0e <fputc+0x3e>
    caee:	4e 81       	ldd	r20, Y+6	; 0x06
    caf0:	5f 81       	ldd	r21, Y+7	; 0x07
    caf2:	2c 81       	ldd	r18, Y+4	; 0x04
    caf4:	3d 81       	ldd	r19, Y+5	; 0x05
    caf6:	42 17       	cp	r20, r18
    caf8:	53 07       	cpc	r21, r19
    cafa:	7c f4       	brge	.+30     	; 0xcb1a <fputc+0x4a>
    cafc:	e8 81       	ld	r30, Y
    cafe:	f9 81       	ldd	r31, Y+1	; 0x01
    cb00:	9f 01       	movw	r18, r30
    cb02:	2f 5f       	subi	r18, 0xFF	; 255
    cb04:	3f 4f       	sbci	r19, 0xFF	; 255
    cb06:	28 83       	st	Y, r18
    cb08:	39 83       	std	Y+1, r19	; 0x01
    cb0a:	10 83       	st	Z, r17
    cb0c:	06 c0       	rjmp	.+12     	; 0xcb1a <fputc+0x4a>
    cb0e:	e8 85       	ldd	r30, Y+8	; 0x08
    cb10:	f9 85       	ldd	r31, Y+9	; 0x09
    cb12:	81 2f       	mov	r24, r17
    cb14:	19 95       	eicall
    cb16:	89 2b       	or	r24, r25
    cb18:	29 f7       	brne	.-54     	; 0xcae4 <fputc+0x14>
    cb1a:	2e 81       	ldd	r18, Y+6	; 0x06
    cb1c:	3f 81       	ldd	r19, Y+7	; 0x07
    cb1e:	2f 5f       	subi	r18, 0xFF	; 255
    cb20:	3f 4f       	sbci	r19, 0xFF	; 255
    cb22:	2e 83       	std	Y+6, r18	; 0x06
    cb24:	3f 83       	std	Y+7, r19	; 0x07
    cb26:	81 2f       	mov	r24, r17
    cb28:	90 2f       	mov	r25, r16
    cb2a:	df 91       	pop	r29
    cb2c:	cf 91       	pop	r28
    cb2e:	1f 91       	pop	r17
    cb30:	0f 91       	pop	r16
    cb32:	08 95       	ret

0000cb34 <printf>:
    cb34:	cf 93       	push	r28
    cb36:	df 93       	push	r29
    cb38:	cd b7       	in	r28, 0x3d	; 61
    cb3a:	de b7       	in	r29, 0x3e	; 62
    cb3c:	fe 01       	movw	r30, r28
    cb3e:	36 96       	adiw	r30, 0x06	; 6
    cb40:	61 91       	ld	r22, Z+
    cb42:	71 91       	ld	r23, Z+
    cb44:	af 01       	movw	r20, r30
    cb46:	80 91 53 3d 	lds	r24, 0x3D53
    cb4a:	90 91 54 3d 	lds	r25, 0x3D54
    cb4e:	fc d8       	rcall	.-3592   	; 0xbd48 <vfprintf>
    cb50:	df 91       	pop	r29
    cb52:	cf 91       	pop	r28
    cb54:	08 95       	ret

0000cb56 <puts>:
    cb56:	0f 93       	push	r16
    cb58:	1f 93       	push	r17
    cb5a:	cf 93       	push	r28
    cb5c:	df 93       	push	r29
    cb5e:	e0 91 53 3d 	lds	r30, 0x3D53
    cb62:	f0 91 54 3d 	lds	r31, 0x3D54
    cb66:	23 81       	ldd	r18, Z+3	; 0x03
    cb68:	21 ff       	sbrs	r18, 1
    cb6a:	1b c0       	rjmp	.+54     	; 0xcba2 <puts+0x4c>
    cb6c:	ec 01       	movw	r28, r24
    cb6e:	00 e0       	ldi	r16, 0x00	; 0
    cb70:	10 e0       	ldi	r17, 0x00	; 0
    cb72:	89 91       	ld	r24, Y+
    cb74:	60 91 53 3d 	lds	r22, 0x3D53
    cb78:	70 91 54 3d 	lds	r23, 0x3D54
    cb7c:	db 01       	movw	r26, r22
    cb7e:	18 96       	adiw	r26, 0x08	; 8
    cb80:	ed 91       	ld	r30, X+
    cb82:	fc 91       	ld	r31, X
    cb84:	19 97       	sbiw	r26, 0x09	; 9
    cb86:	88 23       	and	r24, r24
    cb88:	31 f0       	breq	.+12     	; 0xcb96 <puts+0x40>
    cb8a:	19 95       	eicall
    cb8c:	89 2b       	or	r24, r25
    cb8e:	89 f3       	breq	.-30     	; 0xcb72 <puts+0x1c>
    cb90:	0f ef       	ldi	r16, 0xFF	; 255
    cb92:	1f ef       	ldi	r17, 0xFF	; 255
    cb94:	ee cf       	rjmp	.-36     	; 0xcb72 <puts+0x1c>
    cb96:	8a e0       	ldi	r24, 0x0A	; 10
    cb98:	19 95       	eicall
    cb9a:	89 2b       	or	r24, r25
    cb9c:	11 f4       	brne	.+4      	; 0xcba2 <puts+0x4c>
    cb9e:	c8 01       	movw	r24, r16
    cba0:	02 c0       	rjmp	.+4      	; 0xcba6 <puts+0x50>
    cba2:	8f ef       	ldi	r24, 0xFF	; 255
    cba4:	9f ef       	ldi	r25, 0xFF	; 255
    cba6:	df 91       	pop	r29
    cba8:	cf 91       	pop	r28
    cbaa:	1f 91       	pop	r17
    cbac:	0f 91       	pop	r16
    cbae:	08 95       	ret

0000cbb0 <sprintf>:
    cbb0:	0f 93       	push	r16
    cbb2:	1f 93       	push	r17
    cbb4:	cf 93       	push	r28
    cbb6:	df 93       	push	r29
    cbb8:	cd b7       	in	r28, 0x3d	; 61
    cbba:	de b7       	in	r29, 0x3e	; 62
    cbbc:	2e 97       	sbiw	r28, 0x0e	; 14
    cbbe:	cd bf       	out	0x3d, r28	; 61
    cbc0:	de bf       	out	0x3e, r29	; 62
    cbc2:	0e 89       	ldd	r16, Y+22	; 0x16
    cbc4:	1f 89       	ldd	r17, Y+23	; 0x17
    cbc6:	86 e0       	ldi	r24, 0x06	; 6
    cbc8:	8c 83       	std	Y+4, r24	; 0x04
    cbca:	09 83       	std	Y+1, r16	; 0x01
    cbcc:	1a 83       	std	Y+2, r17	; 0x02
    cbce:	8f ef       	ldi	r24, 0xFF	; 255
    cbd0:	9f e7       	ldi	r25, 0x7F	; 127
    cbd2:	8d 83       	std	Y+5, r24	; 0x05
    cbd4:	9e 83       	std	Y+6, r25	; 0x06
    cbd6:	ae 01       	movw	r20, r28
    cbd8:	46 5e       	subi	r20, 0xE6	; 230
    cbda:	5f 4f       	sbci	r21, 0xFF	; 255
    cbdc:	68 8d       	ldd	r22, Y+24	; 0x18
    cbde:	79 8d       	ldd	r23, Y+25	; 0x19
    cbe0:	ce 01       	movw	r24, r28
    cbe2:	01 96       	adiw	r24, 0x01	; 1
    cbe4:	b1 d8       	rcall	.-3742   	; 0xbd48 <vfprintf>
    cbe6:	ef 81       	ldd	r30, Y+7	; 0x07
    cbe8:	f8 85       	ldd	r31, Y+8	; 0x08
    cbea:	e0 0f       	add	r30, r16
    cbec:	f1 1f       	adc	r31, r17
    cbee:	10 82       	st	Z, r1
    cbf0:	2e 96       	adiw	r28, 0x0e	; 14
    cbf2:	cd bf       	out	0x3d, r28	; 61
    cbf4:	de bf       	out	0x3e, r29	; 62
    cbf6:	df 91       	pop	r29
    cbf8:	cf 91       	pop	r28
    cbfa:	1f 91       	pop	r17
    cbfc:	0f 91       	pop	r16
    cbfe:	08 95       	ret

0000cc00 <sscanf>:
    cc00:	cf 93       	push	r28
    cc02:	df 93       	push	r29
    cc04:	cd b7       	in	r28, 0x3d	; 61
    cc06:	de b7       	in	r29, 0x3e	; 62
    cc08:	2e 97       	sbiw	r28, 0x0e	; 14
    cc0a:	cd bf       	out	0x3d, r28	; 61
    cc0c:	de bf       	out	0x3e, r29	; 62
    cc0e:	85 e0       	ldi	r24, 0x05	; 5
    cc10:	8c 83       	std	Y+4, r24	; 0x04
    cc12:	8c 89       	ldd	r24, Y+20	; 0x14
    cc14:	9d 89       	ldd	r25, Y+21	; 0x15
    cc16:	89 83       	std	Y+1, r24	; 0x01
    cc18:	9a 83       	std	Y+2, r25	; 0x02
    cc1a:	ae 01       	movw	r20, r28
    cc1c:	48 5e       	subi	r20, 0xE8	; 232
    cc1e:	5f 4f       	sbci	r21, 0xFF	; 255
    cc20:	6e 89       	ldd	r22, Y+22	; 0x16
    cc22:	7f 89       	ldd	r23, Y+23	; 0x17
    cc24:	ce 01       	movw	r24, r28
    cc26:	01 96       	adiw	r24, 0x01	; 1
    cc28:	ee d1       	rcall	.+988    	; 0xd006 <vfscanf>
    cc2a:	2e 96       	adiw	r28, 0x0e	; 14
    cc2c:	cd bf       	out	0x3d, r28	; 61
    cc2e:	de bf       	out	0x3e, r29	; 62
    cc30:	df 91       	pop	r29
    cc32:	cf 91       	pop	r28
    cc34:	08 95       	ret

0000cc36 <__ultoa_invert>:
    cc36:	fa 01       	movw	r30, r20
    cc38:	aa 27       	eor	r26, r26
    cc3a:	28 30       	cpi	r18, 0x08	; 8
    cc3c:	51 f1       	breq	.+84     	; 0xcc92 <__ultoa_invert+0x5c>
    cc3e:	20 31       	cpi	r18, 0x10	; 16
    cc40:	81 f1       	breq	.+96     	; 0xcca2 <__ultoa_invert+0x6c>
    cc42:	e8 94       	clt
    cc44:	6f 93       	push	r22
    cc46:	6e 7f       	andi	r22, 0xFE	; 254
    cc48:	6e 5f       	subi	r22, 0xFE	; 254
    cc4a:	7f 4f       	sbci	r23, 0xFF	; 255
    cc4c:	8f 4f       	sbci	r24, 0xFF	; 255
    cc4e:	9f 4f       	sbci	r25, 0xFF	; 255
    cc50:	af 4f       	sbci	r26, 0xFF	; 255
    cc52:	b1 e0       	ldi	r27, 0x01	; 1
    cc54:	3e d0       	rcall	.+124    	; 0xccd2 <__ultoa_invert+0x9c>
    cc56:	b4 e0       	ldi	r27, 0x04	; 4
    cc58:	3c d0       	rcall	.+120    	; 0xccd2 <__ultoa_invert+0x9c>
    cc5a:	67 0f       	add	r22, r23
    cc5c:	78 1f       	adc	r23, r24
    cc5e:	89 1f       	adc	r24, r25
    cc60:	9a 1f       	adc	r25, r26
    cc62:	a1 1d       	adc	r26, r1
    cc64:	68 0f       	add	r22, r24
    cc66:	79 1f       	adc	r23, r25
    cc68:	8a 1f       	adc	r24, r26
    cc6a:	91 1d       	adc	r25, r1
    cc6c:	a1 1d       	adc	r26, r1
    cc6e:	6a 0f       	add	r22, r26
    cc70:	71 1d       	adc	r23, r1
    cc72:	81 1d       	adc	r24, r1
    cc74:	91 1d       	adc	r25, r1
    cc76:	a1 1d       	adc	r26, r1
    cc78:	20 d0       	rcall	.+64     	; 0xccba <__ultoa_invert+0x84>
    cc7a:	09 f4       	brne	.+2      	; 0xcc7e <__ultoa_invert+0x48>
    cc7c:	68 94       	set
    cc7e:	3f 91       	pop	r19
    cc80:	2a e0       	ldi	r18, 0x0A	; 10
    cc82:	26 9f       	mul	r18, r22
    cc84:	11 24       	eor	r1, r1
    cc86:	30 19       	sub	r19, r0
    cc88:	30 5d       	subi	r19, 0xD0	; 208
    cc8a:	31 93       	st	Z+, r19
    cc8c:	de f6       	brtc	.-74     	; 0xcc44 <__ultoa_invert+0xe>
    cc8e:	cf 01       	movw	r24, r30
    cc90:	08 95       	ret
    cc92:	46 2f       	mov	r20, r22
    cc94:	47 70       	andi	r20, 0x07	; 7
    cc96:	40 5d       	subi	r20, 0xD0	; 208
    cc98:	41 93       	st	Z+, r20
    cc9a:	b3 e0       	ldi	r27, 0x03	; 3
    cc9c:	0f d0       	rcall	.+30     	; 0xccbc <__ultoa_invert+0x86>
    cc9e:	c9 f7       	brne	.-14     	; 0xcc92 <__ultoa_invert+0x5c>
    cca0:	f6 cf       	rjmp	.-20     	; 0xcc8e <__ultoa_invert+0x58>
    cca2:	46 2f       	mov	r20, r22
    cca4:	4f 70       	andi	r20, 0x0F	; 15
    cca6:	40 5d       	subi	r20, 0xD0	; 208
    cca8:	4a 33       	cpi	r20, 0x3A	; 58
    ccaa:	18 f0       	brcs	.+6      	; 0xccb2 <__ultoa_invert+0x7c>
    ccac:	49 5d       	subi	r20, 0xD9	; 217
    ccae:	31 fd       	sbrc	r19, 1
    ccb0:	40 52       	subi	r20, 0x20	; 32
    ccb2:	41 93       	st	Z+, r20
    ccb4:	02 d0       	rcall	.+4      	; 0xccba <__ultoa_invert+0x84>
    ccb6:	a9 f7       	brne	.-22     	; 0xcca2 <__ultoa_invert+0x6c>
    ccb8:	ea cf       	rjmp	.-44     	; 0xcc8e <__ultoa_invert+0x58>
    ccba:	b4 e0       	ldi	r27, 0x04	; 4
    ccbc:	a6 95       	lsr	r26
    ccbe:	97 95       	ror	r25
    ccc0:	87 95       	ror	r24
    ccc2:	77 95       	ror	r23
    ccc4:	67 95       	ror	r22
    ccc6:	ba 95       	dec	r27
    ccc8:	c9 f7       	brne	.-14     	; 0xccbc <__ultoa_invert+0x86>
    ccca:	00 97       	sbiw	r24, 0x00	; 0
    cccc:	61 05       	cpc	r22, r1
    ccce:	71 05       	cpc	r23, r1
    ccd0:	08 95       	ret
    ccd2:	9b 01       	movw	r18, r22
    ccd4:	ac 01       	movw	r20, r24
    ccd6:	0a 2e       	mov	r0, r26
    ccd8:	06 94       	lsr	r0
    ccda:	57 95       	ror	r21
    ccdc:	47 95       	ror	r20
    ccde:	37 95       	ror	r19
    cce0:	27 95       	ror	r18
    cce2:	ba 95       	dec	r27
    cce4:	c9 f7       	brne	.-14     	; 0xccd8 <__ultoa_invert+0xa2>
    cce6:	62 0f       	add	r22, r18
    cce8:	73 1f       	adc	r23, r19
    ccea:	84 1f       	adc	r24, r20
    ccec:	95 1f       	adc	r25, r21
    ccee:	a0 1d       	adc	r26, r0
    ccf0:	08 95       	ret

0000ccf2 <putval>:
    ccf2:	20 fd       	sbrc	r18, 0
    ccf4:	09 c0       	rjmp	.+18     	; 0xcd08 <putval+0x16>
    ccf6:	fc 01       	movw	r30, r24
    ccf8:	23 fd       	sbrc	r18, 3
    ccfa:	05 c0       	rjmp	.+10     	; 0xcd06 <putval+0x14>
    ccfc:	22 ff       	sbrs	r18, 2
    ccfe:	02 c0       	rjmp	.+4      	; 0xcd04 <putval+0x12>
    cd00:	73 83       	std	Z+3, r23	; 0x03
    cd02:	62 83       	std	Z+2, r22	; 0x02
    cd04:	51 83       	std	Z+1, r21	; 0x01
    cd06:	40 83       	st	Z, r20
    cd08:	08 95       	ret

0000cd0a <mulacc>:
    cd0a:	44 fd       	sbrc	r20, 4
    cd0c:	10 c0       	rjmp	.+32     	; 0xcd2e <mulacc+0x24>
    cd0e:	46 fd       	sbrc	r20, 6
    cd10:	10 c0       	rjmp	.+32     	; 0xcd32 <mulacc+0x28>
    cd12:	db 01       	movw	r26, r22
    cd14:	fc 01       	movw	r30, r24
    cd16:	aa 0f       	add	r26, r26
    cd18:	bb 1f       	adc	r27, r27
    cd1a:	ee 1f       	adc	r30, r30
    cd1c:	ff 1f       	adc	r31, r31
    cd1e:	10 94       	com	r1
    cd20:	d1 f7       	brne	.-12     	; 0xcd16 <mulacc+0xc>
    cd22:	6a 0f       	add	r22, r26
    cd24:	7b 1f       	adc	r23, r27
    cd26:	8e 1f       	adc	r24, r30
    cd28:	9f 1f       	adc	r25, r31
    cd2a:	31 e0       	ldi	r19, 0x01	; 1
    cd2c:	03 c0       	rjmp	.+6      	; 0xcd34 <mulacc+0x2a>
    cd2e:	33 e0       	ldi	r19, 0x03	; 3
    cd30:	01 c0       	rjmp	.+2      	; 0xcd34 <mulacc+0x2a>
    cd32:	34 e0       	ldi	r19, 0x04	; 4
    cd34:	66 0f       	add	r22, r22
    cd36:	77 1f       	adc	r23, r23
    cd38:	88 1f       	adc	r24, r24
    cd3a:	99 1f       	adc	r25, r25
    cd3c:	31 50       	subi	r19, 0x01	; 1
    cd3e:	d1 f7       	brne	.-12     	; 0xcd34 <mulacc+0x2a>
    cd40:	62 0f       	add	r22, r18
    cd42:	71 1d       	adc	r23, r1
    cd44:	81 1d       	adc	r24, r1
    cd46:	91 1d       	adc	r25, r1
    cd48:	08 95       	ret

0000cd4a <skip_spaces>:
    cd4a:	0f 93       	push	r16
    cd4c:	1f 93       	push	r17
    cd4e:	cf 93       	push	r28
    cd50:	df 93       	push	r29
    cd52:	8c 01       	movw	r16, r24
    cd54:	c8 01       	movw	r24, r16
    cd56:	e2 d2       	rcall	.+1476   	; 0xd31c <fgetc>
    cd58:	ec 01       	movw	r28, r24
    cd5a:	97 fd       	sbrc	r25, 7
    cd5c:	06 c0       	rjmp	.+12     	; 0xcd6a <skip_spaces+0x20>
    cd5e:	cb d2       	rcall	.+1430   	; 0xd2f6 <isspace>
    cd60:	89 2b       	or	r24, r25
    cd62:	c1 f7       	brne	.-16     	; 0xcd54 <skip_spaces+0xa>
    cd64:	b8 01       	movw	r22, r16
    cd66:	ce 01       	movw	r24, r28
    cd68:	17 d3       	rcall	.+1582   	; 0xd398 <ungetc>
    cd6a:	ce 01       	movw	r24, r28
    cd6c:	df 91       	pop	r29
    cd6e:	cf 91       	pop	r28
    cd70:	1f 91       	pop	r17
    cd72:	0f 91       	pop	r16
    cd74:	08 95       	ret

0000cd76 <conv_int>:
    cd76:	8f 92       	push	r8
    cd78:	9f 92       	push	r9
    cd7a:	af 92       	push	r10
    cd7c:	cf 92       	push	r12
    cd7e:	df 92       	push	r13
    cd80:	ef 92       	push	r14
    cd82:	ff 92       	push	r15
    cd84:	0f 93       	push	r16
    cd86:	1f 93       	push	r17
    cd88:	cf 93       	push	r28
    cd8a:	df 93       	push	r29
    cd8c:	ec 01       	movw	r28, r24
    cd8e:	a6 2e       	mov	r10, r22
    cd90:	4a 01       	movw	r8, r20
    cd92:	02 2f       	mov	r16, r18
    cd94:	c3 d2       	rcall	.+1414   	; 0xd31c <fgetc>
    cd96:	ac 01       	movw	r20, r24
    cd98:	55 27       	eor	r21, r21
    cd9a:	4b 32       	cpi	r20, 0x2B	; 43
    cd9c:	51 05       	cpc	r21, r1
    cd9e:	21 f0       	breq	.+8      	; 0xcda8 <conv_int+0x32>
    cda0:	4d 32       	cpi	r20, 0x2D	; 45
    cda2:	51 05       	cpc	r21, r1
    cda4:	49 f4       	brne	.+18     	; 0xcdb8 <conv_int+0x42>
    cda6:	00 68       	ori	r16, 0x80	; 128
    cda8:	aa 94       	dec	r10
    cdaa:	11 f4       	brne	.+4      	; 0xcdb0 <conv_int+0x3a>
    cdac:	80 e0       	ldi	r24, 0x00	; 0
    cdae:	60 c0       	rjmp	.+192    	; 0xce70 <conv_int+0xfa>
    cdb0:	ce 01       	movw	r24, r28
    cdb2:	b4 d2       	rcall	.+1384   	; 0xd31c <fgetc>
    cdb4:	97 fd       	sbrc	r25, 7
    cdb6:	fa cf       	rjmp	.-12     	; 0xcdac <conv_int+0x36>
    cdb8:	10 2f       	mov	r17, r16
    cdba:	1d 7f       	andi	r17, 0xFD	; 253
    cdbc:	30 2f       	mov	r19, r16
    cdbe:	30 73       	andi	r19, 0x30	; 48
    cdc0:	f1 f4       	brne	.+60     	; 0xcdfe <conv_int+0x88>
    cdc2:	80 33       	cpi	r24, 0x30	; 48
    cdc4:	e1 f4       	brne	.+56     	; 0xcdfe <conv_int+0x88>
    cdc6:	ff 24       	eor	r15, r15
    cdc8:	fa 94       	dec	r15
    cdca:	fa 0c       	add	r15, r10
    cdcc:	09 f4       	brne	.+2      	; 0xcdd0 <conv_int+0x5a>
    cdce:	3d c0       	rjmp	.+122    	; 0xce4a <conv_int+0xd4>
    cdd0:	ce 01       	movw	r24, r28
    cdd2:	a4 d2       	rcall	.+1352   	; 0xd31c <fgetc>
    cdd4:	97 fd       	sbrc	r25, 7
    cdd6:	39 c0       	rjmp	.+114    	; 0xce4a <conv_int+0xd4>
    cdd8:	38 2f       	mov	r19, r24
    cdda:	3f 7d       	andi	r19, 0xDF	; 223
    cddc:	38 35       	cpi	r19, 0x58	; 88
    cdde:	49 f4       	brne	.+18     	; 0xcdf2 <conv_int+0x7c>
    cde0:	12 64       	ori	r17, 0x42	; 66
    cde2:	aa 94       	dec	r10
    cde4:	aa 94       	dec	r10
    cde6:	89 f1       	breq	.+98     	; 0xce4a <conv_int+0xd4>
    cde8:	ce 01       	movw	r24, r28
    cdea:	98 d2       	rcall	.+1328   	; 0xd31c <fgetc>
    cdec:	97 ff       	sbrs	r25, 7
    cdee:	07 c0       	rjmp	.+14     	; 0xcdfe <conv_int+0x88>
    cdf0:	2c c0       	rjmp	.+88     	; 0xce4a <conv_int+0xd4>
    cdf2:	06 ff       	sbrs	r16, 6
    cdf4:	02 c0       	rjmp	.+4      	; 0xcdfa <conv_int+0x84>
    cdf6:	12 60       	ori	r17, 0x02	; 2
    cdf8:	01 c0       	rjmp	.+2      	; 0xcdfc <conv_int+0x86>
    cdfa:	12 61       	ori	r17, 0x12	; 18
    cdfc:	af 2c       	mov	r10, r15
    cdfe:	c1 2c       	mov	r12, r1
    ce00:	d1 2c       	mov	r13, r1
    ce02:	76 01       	movw	r14, r12
    ce04:	20 ed       	ldi	r18, 0xD0	; 208
    ce06:	28 0f       	add	r18, r24
    ce08:	28 30       	cpi	r18, 0x08	; 8
    ce0a:	78 f0       	brcs	.+30     	; 0xce2a <conv_int+0xb4>
    ce0c:	14 ff       	sbrs	r17, 4
    ce0e:	03 c0       	rjmp	.+6      	; 0xce16 <conv_int+0xa0>
    ce10:	be 01       	movw	r22, r28
    ce12:	c2 d2       	rcall	.+1412   	; 0xd398 <ungetc>
    ce14:	17 c0       	rjmp	.+46     	; 0xce44 <conv_int+0xce>
    ce16:	2a 30       	cpi	r18, 0x0A	; 10
    ce18:	40 f0       	brcs	.+16     	; 0xce2a <conv_int+0xb4>
    ce1a:	16 ff       	sbrs	r17, 6
    ce1c:	f9 cf       	rjmp	.-14     	; 0xce10 <conv_int+0x9a>
    ce1e:	2f 7d       	andi	r18, 0xDF	; 223
    ce20:	3f ee       	ldi	r19, 0xEF	; 239
    ce22:	32 0f       	add	r19, r18
    ce24:	36 30       	cpi	r19, 0x06	; 6
    ce26:	a0 f7       	brcc	.-24     	; 0xce10 <conv_int+0x9a>
    ce28:	27 50       	subi	r18, 0x07	; 7
    ce2a:	41 2f       	mov	r20, r17
    ce2c:	c7 01       	movw	r24, r14
    ce2e:	b6 01       	movw	r22, r12
    ce30:	6c df       	rcall	.-296    	; 0xcd0a <mulacc>
    ce32:	6b 01       	movw	r12, r22
    ce34:	7c 01       	movw	r14, r24
    ce36:	12 60       	ori	r17, 0x02	; 2
    ce38:	aa 94       	dec	r10
    ce3a:	51 f0       	breq	.+20     	; 0xce50 <conv_int+0xda>
    ce3c:	ce 01       	movw	r24, r28
    ce3e:	6e d2       	rcall	.+1244   	; 0xd31c <fgetc>
    ce40:	97 ff       	sbrs	r25, 7
    ce42:	e0 cf       	rjmp	.-64     	; 0xce04 <conv_int+0x8e>
    ce44:	11 fd       	sbrc	r17, 1
    ce46:	04 c0       	rjmp	.+8      	; 0xce50 <conv_int+0xda>
    ce48:	b1 cf       	rjmp	.-158    	; 0xcdac <conv_int+0x36>
    ce4a:	c1 2c       	mov	r12, r1
    ce4c:	d1 2c       	mov	r13, r1
    ce4e:	76 01       	movw	r14, r12
    ce50:	17 ff       	sbrs	r17, 7
    ce52:	08 c0       	rjmp	.+16     	; 0xce64 <conv_int+0xee>
    ce54:	f0 94       	com	r15
    ce56:	e0 94       	com	r14
    ce58:	d0 94       	com	r13
    ce5a:	c0 94       	com	r12
    ce5c:	c1 1c       	adc	r12, r1
    ce5e:	d1 1c       	adc	r13, r1
    ce60:	e1 1c       	adc	r14, r1
    ce62:	f1 1c       	adc	r15, r1
    ce64:	21 2f       	mov	r18, r17
    ce66:	b7 01       	movw	r22, r14
    ce68:	a6 01       	movw	r20, r12
    ce6a:	c4 01       	movw	r24, r8
    ce6c:	42 df       	rcall	.-380    	; 0xccf2 <putval>
    ce6e:	81 e0       	ldi	r24, 0x01	; 1
    ce70:	df 91       	pop	r29
    ce72:	cf 91       	pop	r28
    ce74:	1f 91       	pop	r17
    ce76:	0f 91       	pop	r16
    ce78:	ff 90       	pop	r15
    ce7a:	ef 90       	pop	r14
    ce7c:	df 90       	pop	r13
    ce7e:	cf 90       	pop	r12
    ce80:	af 90       	pop	r10
    ce82:	9f 90       	pop	r9
    ce84:	8f 90       	pop	r8
    ce86:	08 95       	ret

0000ce88 <conv_brk>:
    ce88:	7f 92       	push	r7
    ce8a:	8f 92       	push	r8
    ce8c:	9f 92       	push	r9
    ce8e:	af 92       	push	r10
    ce90:	bf 92       	push	r11
    ce92:	cf 92       	push	r12
    ce94:	df 92       	push	r13
    ce96:	ef 92       	push	r14
    ce98:	ff 92       	push	r15
    ce9a:	0f 93       	push	r16
    ce9c:	1f 93       	push	r17
    ce9e:	cf 93       	push	r28
    cea0:	df 93       	push	r29
    cea2:	cd b7       	in	r28, 0x3d	; 61
    cea4:	de b7       	in	r29, 0x3e	; 62
    cea6:	a1 97       	sbiw	r28, 0x21	; 33
    cea8:	cd bf       	out	0x3d, r28	; 61
    ceaa:	de bf       	out	0x3e, r29	; 62
    ceac:	5c 01       	movw	r10, r24
    ceae:	7a 01       	movw	r14, r20
    ceb0:	8e 01       	movw	r16, r28
    ceb2:	0f 5f       	subi	r16, 0xFF	; 255
    ceb4:	1f 4f       	sbci	r17, 0xFF	; 255
    ceb6:	68 01       	movw	r12, r16
    ceb8:	80 e2       	ldi	r24, 0x20	; 32
    ceba:	d8 01       	movw	r26, r16
    cebc:	1d 92       	st	X+, r1
    cebe:	8a 95       	dec	r24
    cec0:	e9 f7       	brne	.-6      	; 0xcebc <conv_brk+0x34>
    cec2:	f5 01       	movw	r30, r10
    cec4:	73 80       	ldd	r7, Z+3	; 0x03
    cec6:	40 e0       	ldi	r20, 0x00	; 0
    cec8:	50 e0       	ldi	r21, 0x00	; 0
    ceca:	81 2c       	mov	r8, r1
    cecc:	b0 e0       	ldi	r27, 0x00	; 0
    cece:	91 2c       	mov	r9, r1
    ced0:	81 e0       	ldi	r24, 0x01	; 1
    ced2:	90 e0       	ldi	r25, 0x00	; 0
    ced4:	f9 01       	movw	r30, r18
    ced6:	73 fc       	sbrc	r7, 3
    ced8:	a5 91       	lpm	r26, Z+
    ceda:	73 fe       	sbrs	r7, 3
    cedc:	a1 91       	ld	r26, Z+
    cede:	8f 01       	movw	r16, r30
    cee0:	7a 2f       	mov	r23, r26
    cee2:	9f 01       	movw	r18, r30
    cee4:	a1 11       	cpse	r26, r1
    cee6:	03 c0       	rjmp	.+6      	; 0xceee <conv_brk+0x66>
    cee8:	80 e0       	ldi	r24, 0x00	; 0
    ceea:	90 e0       	ldi	r25, 0x00	; 0
    ceec:	7b c0       	rjmp	.+246    	; 0xcfe4 <conv_brk+0x15c>
    ceee:	ae 35       	cpi	r26, 0x5E	; 94
    cef0:	19 f4       	brne	.+6      	; 0xcef8 <conv_brk+0x70>
    cef2:	41 15       	cp	r20, r1
    cef4:	51 05       	cpc	r21, r1
    cef6:	59 f1       	breq	.+86     	; 0xcf4e <conv_brk+0xc6>
    cef8:	e9 2d       	mov	r30, r9
    cefa:	f0 e0       	ldi	r31, 0x00	; 0
    cefc:	e4 17       	cp	r30, r20
    cefe:	f5 07       	cpc	r31, r21
    cf00:	3c f4       	brge	.+14     	; 0xcf10 <conv_brk+0x88>
    cf02:	ad 35       	cpi	r26, 0x5D	; 93
    cf04:	69 f1       	breq	.+90     	; 0xcf60 <conv_brk+0xd8>
    cf06:	ad 32       	cpi	r26, 0x2D	; 45
    cf08:	19 f4       	brne	.+6      	; 0xcf10 <conv_brk+0x88>
    cf0a:	bb 23       	and	r27, r27
    cf0c:	19 f1       	breq	.+70     	; 0xcf54 <conv_brk+0xcc>
    cf0e:	03 c0       	rjmp	.+6      	; 0xcf16 <conv_brk+0x8e>
    cf10:	b1 11       	cpse	r27, r1
    cf12:	01 c0       	rjmp	.+2      	; 0xcf16 <conv_brk+0x8e>
    cf14:	8a 2e       	mov	r8, r26
    cf16:	e7 2f       	mov	r30, r23
    cf18:	e6 95       	lsr	r30
    cf1a:	e6 95       	lsr	r30
    cf1c:	e6 95       	lsr	r30
    cf1e:	86 01       	movw	r16, r12
    cf20:	0e 0f       	add	r16, r30
    cf22:	11 1d       	adc	r17, r1
    cf24:	f8 01       	movw	r30, r16
    cf26:	a7 2f       	mov	r26, r23
    cf28:	a7 70       	andi	r26, 0x07	; 7
    cf2a:	8c 01       	movw	r16, r24
    cf2c:	02 c0       	rjmp	.+4      	; 0xcf32 <conv_brk+0xaa>
    cf2e:	00 0f       	add	r16, r16
    cf30:	11 1f       	adc	r17, r17
    cf32:	aa 95       	dec	r26
    cf34:	e2 f7       	brpl	.-8      	; 0xcf2e <conv_brk+0xa6>
    cf36:	d8 01       	movw	r26, r16
    cf38:	b0 81       	ld	r27, Z
    cf3a:	ba 2b       	or	r27, r26
    cf3c:	b0 83       	st	Z, r27
    cf3e:	78 15       	cp	r23, r8
    cf40:	59 f0       	breq	.+22     	; 0xcf58 <conv_brk+0xd0>
    cf42:	78 15       	cp	r23, r8
    cf44:	10 f4       	brcc	.+4      	; 0xcf4a <conv_brk+0xc2>
    cf46:	7f 5f       	subi	r23, 0xFF	; 255
    cf48:	e6 cf       	rjmp	.-52     	; 0xcf16 <conv_brk+0x8e>
    cf4a:	71 50       	subi	r23, 0x01	; 1
    cf4c:	e4 cf       	rjmp	.-56     	; 0xcf16 <conv_brk+0x8e>
    cf4e:	99 24       	eor	r9, r9
    cf50:	93 94       	inc	r9
    cf52:	03 c0       	rjmp	.+6      	; 0xcf5a <conv_brk+0xd2>
    cf54:	b1 e0       	ldi	r27, 0x01	; 1
    cf56:	01 c0       	rjmp	.+2      	; 0xcf5a <conv_brk+0xd2>
    cf58:	b0 e0       	ldi	r27, 0x00	; 0
    cf5a:	4f 5f       	subi	r20, 0xFF	; 255
    cf5c:	5f 4f       	sbci	r21, 0xFF	; 255
    cf5e:	ba cf       	rjmp	.-140    	; 0xced4 <conv_brk+0x4c>
    cf60:	bb 23       	and	r27, r27
    cf62:	19 f0       	breq	.+6      	; 0xcf6a <conv_brk+0xe2>
    cf64:	8e 81       	ldd	r24, Y+6	; 0x06
    cf66:	80 62       	ori	r24, 0x20	; 32
    cf68:	8e 83       	std	Y+6, r24	; 0x06
    cf6a:	91 10       	cpse	r9, r1
    cf6c:	03 c0       	rjmp	.+6      	; 0xcf74 <conv_brk+0xec>
    cf6e:	99 24       	eor	r9, r9
    cf70:	93 94       	inc	r9
    cf72:	15 c0       	rjmp	.+42     	; 0xcf9e <conv_brk+0x116>
    cf74:	f6 01       	movw	r30, r12
    cf76:	ce 01       	movw	r24, r28
    cf78:	81 96       	adiw	r24, 0x21	; 33
    cf7a:	20 81       	ld	r18, Z
    cf7c:	20 95       	com	r18
    cf7e:	21 93       	st	Z+, r18
    cf80:	e8 17       	cp	r30, r24
    cf82:	f9 07       	cpc	r31, r25
    cf84:	d1 f7       	brne	.-12     	; 0xcf7a <conv_brk+0xf2>
    cf86:	f3 cf       	rjmp	.-26     	; 0xcf6e <conv_brk+0xe6>
    cf88:	e1 14       	cp	r14, r1
    cf8a:	f1 04       	cpc	r15, r1
    cf8c:	29 f0       	breq	.+10     	; 0xcf98 <conv_brk+0x110>
    cf8e:	d7 01       	movw	r26, r14
    cf90:	8c 93       	st	X, r24
    cf92:	f7 01       	movw	r30, r14
    cf94:	31 96       	adiw	r30, 0x01	; 1
    cf96:	7f 01       	movw	r14, r30
    cf98:	61 50       	subi	r22, 0x01	; 1
    cf9a:	f1 f0       	breq	.+60     	; 0xcfd8 <conv_brk+0x150>
    cf9c:	91 2c       	mov	r9, r1
    cf9e:	c5 01       	movw	r24, r10
    cfa0:	69 a3       	std	Y+33, r22	; 0x21
    cfa2:	bc d1       	rcall	.+888    	; 0xd31c <fgetc>
    cfa4:	69 a1       	ldd	r22, Y+33	; 0x21
    cfa6:	97 fd       	sbrc	r25, 7
    cfa8:	15 c0       	rjmp	.+42     	; 0xcfd4 <conv_brk+0x14c>
    cfaa:	28 2f       	mov	r18, r24
    cfac:	26 95       	lsr	r18
    cfae:	26 95       	lsr	r18
    cfb0:	26 95       	lsr	r18
    cfb2:	f6 01       	movw	r30, r12
    cfb4:	e2 0f       	add	r30, r18
    cfb6:	f1 1d       	adc	r31, r1
    cfb8:	20 81       	ld	r18, Z
    cfba:	30 e0       	ldi	r19, 0x00	; 0
    cfbc:	ac 01       	movw	r20, r24
    cfbe:	47 70       	andi	r20, 0x07	; 7
    cfc0:	55 27       	eor	r21, r21
    cfc2:	02 c0       	rjmp	.+4      	; 0xcfc8 <conv_brk+0x140>
    cfc4:	35 95       	asr	r19
    cfc6:	27 95       	ror	r18
    cfc8:	4a 95       	dec	r20
    cfca:	e2 f7       	brpl	.-8      	; 0xcfc4 <conv_brk+0x13c>
    cfcc:	20 fd       	sbrc	r18, 0
    cfce:	dc cf       	rjmp	.-72     	; 0xcf88 <conv_brk+0x100>
    cfd0:	b5 01       	movw	r22, r10
    cfd2:	e2 d1       	rcall	.+964    	; 0xd398 <ungetc>
    cfd4:	91 10       	cpse	r9, r1
    cfd6:	88 cf       	rjmp	.-240    	; 0xcee8 <conv_brk+0x60>
    cfd8:	e1 14       	cp	r14, r1
    cfda:	f1 04       	cpc	r15, r1
    cfdc:	11 f0       	breq	.+4      	; 0xcfe2 <conv_brk+0x15a>
    cfde:	d7 01       	movw	r26, r14
    cfe0:	1c 92       	st	X, r1
    cfe2:	c8 01       	movw	r24, r16
    cfe4:	a1 96       	adiw	r28, 0x21	; 33
    cfe6:	cd bf       	out	0x3d, r28	; 61
    cfe8:	de bf       	out	0x3e, r29	; 62
    cfea:	df 91       	pop	r29
    cfec:	cf 91       	pop	r28
    cfee:	1f 91       	pop	r17
    cff0:	0f 91       	pop	r16
    cff2:	ff 90       	pop	r15
    cff4:	ef 90       	pop	r14
    cff6:	df 90       	pop	r13
    cff8:	cf 90       	pop	r12
    cffa:	bf 90       	pop	r11
    cffc:	af 90       	pop	r10
    cffe:	9f 90       	pop	r9
    d000:	8f 90       	pop	r8
    d002:	7f 90       	pop	r7
    d004:	08 95       	ret

0000d006 <vfscanf>:
    d006:	4f 92       	push	r4
    d008:	5f 92       	push	r5
    d00a:	7f 92       	push	r7
    d00c:	8f 92       	push	r8
    d00e:	9f 92       	push	r9
    d010:	af 92       	push	r10
    d012:	bf 92       	push	r11
    d014:	cf 92       	push	r12
    d016:	df 92       	push	r13
    d018:	ef 92       	push	r14
    d01a:	ff 92       	push	r15
    d01c:	0f 93       	push	r16
    d01e:	1f 93       	push	r17
    d020:	cf 93       	push	r28
    d022:	df 93       	push	r29
    d024:	1f 92       	push	r1
    d026:	cd b7       	in	r28, 0x3d	; 61
    d028:	de b7       	in	r29, 0x3e	; 62
    d02a:	8c 01       	movw	r16, r24
    d02c:	2b 01       	movw	r4, r22
    d02e:	7a 01       	movw	r14, r20
    d030:	fc 01       	movw	r30, r24
    d032:	16 82       	std	Z+6, r1	; 0x06
    d034:	17 82       	std	Z+7, r1	; 0x07
    d036:	a1 2c       	mov	r10, r1
    d038:	f8 01       	movw	r30, r16
    d03a:	d3 80       	ldd	r13, Z+3	; 0x03
    d03c:	f2 01       	movw	r30, r4
    d03e:	d3 fc       	sbrc	r13, 3
    d040:	85 91       	lpm	r24, Z+
    d042:	d3 fe       	sbrs	r13, 3
    d044:	81 91       	ld	r24, Z+
    d046:	38 2f       	mov	r19, r24
    d048:	2f 01       	movw	r4, r30
    d04a:	88 23       	and	r24, r24
    d04c:	09 f4       	brne	.+2      	; 0xd050 <vfscanf+0x4a>
    d04e:	ee c0       	rjmp	.+476    	; 0xd22c <vfscanf+0x226>
    d050:	90 e0       	ldi	r25, 0x00	; 0
    d052:	39 83       	std	Y+1, r19	; 0x01
    d054:	50 d1       	rcall	.+672    	; 0xd2f6 <isspace>
    d056:	39 81       	ldd	r19, Y+1	; 0x01
    d058:	89 2b       	or	r24, r25
    d05a:	19 f0       	breq	.+6      	; 0xd062 <vfscanf+0x5c>
    d05c:	c8 01       	movw	r24, r16
    d05e:	75 de       	rcall	.-790    	; 0xcd4a <skip_spaces>
    d060:	eb cf       	rjmp	.-42     	; 0xd038 <vfscanf+0x32>
    d062:	35 32       	cpi	r19, 0x25	; 37
    d064:	41 f4       	brne	.+16     	; 0xd076 <vfscanf+0x70>
    d066:	f2 01       	movw	r30, r4
    d068:	d3 fc       	sbrc	r13, 3
    d06a:	35 91       	lpm	r19, Z+
    d06c:	d3 fe       	sbrs	r13, 3
    d06e:	31 91       	ld	r19, Z+
    d070:	2f 01       	movw	r4, r30
    d072:	35 32       	cpi	r19, 0x25	; 37
    d074:	59 f4       	brne	.+22     	; 0xd08c <vfscanf+0x86>
    d076:	c8 01       	movw	r24, r16
    d078:	39 83       	std	Y+1, r19	; 0x01
    d07a:	50 d1       	rcall	.+672    	; 0xd31c <fgetc>
    d07c:	39 81       	ldd	r19, Y+1	; 0x01
    d07e:	97 fd       	sbrc	r25, 7
    d080:	d3 c0       	rjmp	.+422    	; 0xd228 <vfscanf+0x222>
    d082:	38 17       	cp	r19, r24
    d084:	c9 f2       	breq	.-78     	; 0xd038 <vfscanf+0x32>
    d086:	b8 01       	movw	r22, r16
    d088:	87 d1       	rcall	.+782    	; 0xd398 <ungetc>
    d08a:	d0 c0       	rjmp	.+416    	; 0xd22c <vfscanf+0x226>
    d08c:	3a 32       	cpi	r19, 0x2A	; 42
    d08e:	41 f4       	brne	.+16     	; 0xd0a0 <vfscanf+0x9a>
    d090:	d3 fc       	sbrc	r13, 3
    d092:	35 91       	lpm	r19, Z+
    d094:	d3 fe       	sbrs	r13, 3
    d096:	31 91       	ld	r19, Z+
    d098:	2f 01       	movw	r4, r30
    d09a:	bb 24       	eor	r11, r11
    d09c:	b3 94       	inc	r11
    d09e:	01 c0       	rjmp	.+2      	; 0xd0a2 <vfscanf+0x9c>
    d0a0:	b1 2c       	mov	r11, r1
    d0a2:	71 2c       	mov	r7, r1
    d0a4:	20 ed       	ldi	r18, 0xD0	; 208
    d0a6:	23 0f       	add	r18, r19
    d0a8:	2a 30       	cpi	r18, 0x0A	; 10
    d0aa:	88 f4       	brcc	.+34     	; 0xd0ce <vfscanf+0xc8>
    d0ac:	fb 2d       	mov	r31, r11
    d0ae:	f2 60       	ori	r31, 0x02	; 2
    d0b0:	bf 2e       	mov	r11, r31
    d0b2:	67 2d       	mov	r22, r7
    d0b4:	70 e0       	ldi	r23, 0x00	; 0
    d0b6:	80 e0       	ldi	r24, 0x00	; 0
    d0b8:	90 e0       	ldi	r25, 0x00	; 0
    d0ba:	40 e2       	ldi	r20, 0x20	; 32
    d0bc:	26 de       	rcall	.-948    	; 0xcd0a <mulacc>
    d0be:	76 2e       	mov	r7, r22
    d0c0:	f2 01       	movw	r30, r4
    d0c2:	d3 fc       	sbrc	r13, 3
    d0c4:	35 91       	lpm	r19, Z+
    d0c6:	d3 fe       	sbrs	r13, 3
    d0c8:	31 91       	ld	r19, Z+
    d0ca:	2f 01       	movw	r4, r30
    d0cc:	eb cf       	rjmp	.-42     	; 0xd0a4 <vfscanf+0x9e>
    d0ce:	b1 fe       	sbrs	r11, 1
    d0d0:	03 c0       	rjmp	.+6      	; 0xd0d8 <vfscanf+0xd2>
    d0d2:	71 10       	cpse	r7, r1
    d0d4:	03 c0       	rjmp	.+6      	; 0xd0dc <vfscanf+0xd6>
    d0d6:	aa c0       	rjmp	.+340    	; 0xd22c <vfscanf+0x226>
    d0d8:	77 24       	eor	r7, r7
    d0da:	7a 94       	dec	r7
    d0dc:	38 36       	cpi	r19, 0x68	; 104
    d0de:	19 f0       	breq	.+6      	; 0xd0e6 <vfscanf+0xe0>
    d0e0:	3c 36       	cpi	r19, 0x6C	; 108
    d0e2:	61 f0       	breq	.+24     	; 0xd0fc <vfscanf+0xf6>
    d0e4:	14 c0       	rjmp	.+40     	; 0xd10e <vfscanf+0x108>
    d0e6:	f2 01       	movw	r30, r4
    d0e8:	d3 fc       	sbrc	r13, 3
    d0ea:	35 91       	lpm	r19, Z+
    d0ec:	d3 fe       	sbrs	r13, 3
    d0ee:	31 91       	ld	r19, Z+
    d0f0:	2f 01       	movw	r4, r30
    d0f2:	38 36       	cpi	r19, 0x68	; 104
    d0f4:	61 f4       	brne	.+24     	; 0xd10e <vfscanf+0x108>
    d0f6:	fb 2d       	mov	r31, r11
    d0f8:	f8 60       	ori	r31, 0x08	; 8
    d0fa:	bf 2e       	mov	r11, r31
    d0fc:	8b 2d       	mov	r24, r11
    d0fe:	84 60       	ori	r24, 0x04	; 4
    d100:	b8 2e       	mov	r11, r24
    d102:	f2 01       	movw	r30, r4
    d104:	d3 fc       	sbrc	r13, 3
    d106:	35 91       	lpm	r19, Z+
    d108:	d3 fe       	sbrs	r13, 3
    d10a:	31 91       	ld	r19, Z+
    d10c:	2f 01       	movw	r4, r30
    d10e:	33 23       	and	r19, r19
    d110:	09 f4       	brne	.+2      	; 0xd114 <vfscanf+0x10e>
    d112:	8c c0       	rjmp	.+280    	; 0xd22c <vfscanf+0x226>
    d114:	63 2f       	mov	r22, r19
    d116:	70 e0       	ldi	r23, 0x00	; 0
    d118:	87 e8       	ldi	r24, 0x87	; 135
    d11a:	9e e0       	ldi	r25, 0x0E	; 14
    d11c:	39 83       	std	Y+1, r19	; 0x01
    d11e:	f3 d0       	rcall	.+486    	; 0xd306 <strchr_P>
    d120:	39 81       	ldd	r19, Y+1	; 0x01
    d122:	89 2b       	or	r24, r25
    d124:	09 f4       	brne	.+2      	; 0xd128 <vfscanf+0x122>
    d126:	82 c0       	rjmp	.+260    	; 0xd22c <vfscanf+0x226>
    d128:	b0 fc       	sbrc	r11, 0
    d12a:	07 c0       	rjmp	.+14     	; 0xd13a <vfscanf+0x134>
    d12c:	f7 01       	movw	r30, r14
    d12e:	c0 80       	ld	r12, Z
    d130:	d1 80       	ldd	r13, Z+1	; 0x01
    d132:	c7 01       	movw	r24, r14
    d134:	02 96       	adiw	r24, 0x02	; 2
    d136:	7c 01       	movw	r14, r24
    d138:	02 c0       	rjmp	.+4      	; 0xd13e <vfscanf+0x138>
    d13a:	c1 2c       	mov	r12, r1
    d13c:	d1 2c       	mov	r13, r1
    d13e:	3e 36       	cpi	r19, 0x6E	; 110
    d140:	49 f4       	brne	.+18     	; 0xd154 <vfscanf+0x14e>
    d142:	f8 01       	movw	r30, r16
    d144:	46 81       	ldd	r20, Z+6	; 0x06
    d146:	57 81       	ldd	r21, Z+7	; 0x07
    d148:	60 e0       	ldi	r22, 0x00	; 0
    d14a:	70 e0       	ldi	r23, 0x00	; 0
    d14c:	2b 2d       	mov	r18, r11
    d14e:	c6 01       	movw	r24, r12
    d150:	d0 dd       	rcall	.-1120   	; 0xccf2 <putval>
    d152:	72 cf       	rjmp	.-284    	; 0xd038 <vfscanf+0x32>
    d154:	33 36       	cpi	r19, 0x63	; 99
    d156:	99 f4       	brne	.+38     	; 0xd17e <vfscanf+0x178>
    d158:	b1 fc       	sbrc	r11, 1
    d15a:	02 c0       	rjmp	.+4      	; 0xd160 <vfscanf+0x15a>
    d15c:	77 24       	eor	r7, r7
    d15e:	73 94       	inc	r7
    d160:	c8 01       	movw	r24, r16
    d162:	dc d0       	rcall	.+440    	; 0xd31c <fgetc>
    d164:	97 fd       	sbrc	r25, 7
    d166:	60 c0       	rjmp	.+192    	; 0xd228 <vfscanf+0x222>
    d168:	c1 14       	cp	r12, r1
    d16a:	d1 04       	cpc	r13, r1
    d16c:	29 f0       	breq	.+10     	; 0xd178 <vfscanf+0x172>
    d16e:	f6 01       	movw	r30, r12
    d170:	80 83       	st	Z, r24
    d172:	c6 01       	movw	r24, r12
    d174:	01 96       	adiw	r24, 0x01	; 1
    d176:	6c 01       	movw	r12, r24
    d178:	7a 94       	dec	r7
    d17a:	91 f7       	brne	.-28     	; 0xd160 <vfscanf+0x15a>
    d17c:	51 c0       	rjmp	.+162    	; 0xd220 <vfscanf+0x21a>
    d17e:	3b 35       	cpi	r19, 0x5B	; 91
    d180:	51 f4       	brne	.+20     	; 0xd196 <vfscanf+0x190>
    d182:	92 01       	movw	r18, r4
    d184:	a6 01       	movw	r20, r12
    d186:	67 2d       	mov	r22, r7
    d188:	c8 01       	movw	r24, r16
    d18a:	7e de       	rcall	.-772    	; 0xce88 <conv_brk>
    d18c:	2c 01       	movw	r4, r24
    d18e:	00 97       	sbiw	r24, 0x00	; 0
    d190:	09 f0       	breq	.+2      	; 0xd194 <vfscanf+0x18e>
    d192:	46 c0       	rjmp	.+140    	; 0xd220 <vfscanf+0x21a>
    d194:	40 c0       	rjmp	.+128    	; 0xd216 <vfscanf+0x210>
    d196:	c8 01       	movw	r24, r16
    d198:	39 83       	std	Y+1, r19	; 0x01
    d19a:	d7 dd       	rcall	.-1106   	; 0xcd4a <skip_spaces>
    d19c:	39 81       	ldd	r19, Y+1	; 0x01
    d19e:	97 fd       	sbrc	r25, 7
    d1a0:	43 c0       	rjmp	.+134    	; 0xd228 <vfscanf+0x222>
    d1a2:	3f 36       	cpi	r19, 0x6F	; 111
    d1a4:	51 f1       	breq	.+84     	; 0xd1fa <vfscanf+0x1f4>
    d1a6:	28 f4       	brcc	.+10     	; 0xd1b2 <vfscanf+0x1ac>
    d1a8:	34 36       	cpi	r19, 0x64	; 100
    d1aa:	19 f1       	breq	.+70     	; 0xd1f2 <vfscanf+0x1ec>
    d1ac:	39 36       	cpi	r19, 0x69	; 105
    d1ae:	61 f1       	breq	.+88     	; 0xd208 <vfscanf+0x202>
    d1b0:	28 c0       	rjmp	.+80     	; 0xd202 <vfscanf+0x1fc>
    d1b2:	33 37       	cpi	r19, 0x73	; 115
    d1b4:	69 f0       	breq	.+26     	; 0xd1d0 <vfscanf+0x1ca>
    d1b6:	35 37       	cpi	r19, 0x75	; 117
    d1b8:	e1 f0       	breq	.+56     	; 0xd1f2 <vfscanf+0x1ec>
    d1ba:	23 c0       	rjmp	.+70     	; 0xd202 <vfscanf+0x1fc>
    d1bc:	c1 14       	cp	r12, r1
    d1be:	d1 04       	cpc	r13, r1
    d1c0:	29 f0       	breq	.+10     	; 0xd1cc <vfscanf+0x1c6>
    d1c2:	f6 01       	movw	r30, r12
    d1c4:	80 82       	st	Z, r8
    d1c6:	c6 01       	movw	r24, r12
    d1c8:	01 96       	adiw	r24, 0x01	; 1
    d1ca:	6c 01       	movw	r12, r24
    d1cc:	7a 94       	dec	r7
    d1ce:	59 f0       	breq	.+22     	; 0xd1e6 <vfscanf+0x1e0>
    d1d0:	c8 01       	movw	r24, r16
    d1d2:	a4 d0       	rcall	.+328    	; 0xd31c <fgetc>
    d1d4:	4c 01       	movw	r8, r24
    d1d6:	97 fd       	sbrc	r25, 7
    d1d8:	06 c0       	rjmp	.+12     	; 0xd1e6 <vfscanf+0x1e0>
    d1da:	8d d0       	rcall	.+282    	; 0xd2f6 <isspace>
    d1dc:	89 2b       	or	r24, r25
    d1de:	71 f3       	breq	.-36     	; 0xd1bc <vfscanf+0x1b6>
    d1e0:	b8 01       	movw	r22, r16
    d1e2:	c4 01       	movw	r24, r8
    d1e4:	d9 d0       	rcall	.+434    	; 0xd398 <ungetc>
    d1e6:	c1 14       	cp	r12, r1
    d1e8:	d1 04       	cpc	r13, r1
    d1ea:	d1 f0       	breq	.+52     	; 0xd220 <vfscanf+0x21a>
    d1ec:	f6 01       	movw	r30, r12
    d1ee:	10 82       	st	Z, r1
    d1f0:	17 c0       	rjmp	.+46     	; 0xd220 <vfscanf+0x21a>
    d1f2:	fb 2d       	mov	r31, r11
    d1f4:	f0 62       	ori	r31, 0x20	; 32
    d1f6:	bf 2e       	mov	r11, r31
    d1f8:	07 c0       	rjmp	.+14     	; 0xd208 <vfscanf+0x202>
    d1fa:	8b 2d       	mov	r24, r11
    d1fc:	80 61       	ori	r24, 0x10	; 16
    d1fe:	b8 2e       	mov	r11, r24
    d200:	03 c0       	rjmp	.+6      	; 0xd208 <vfscanf+0x202>
    d202:	9b 2d       	mov	r25, r11
    d204:	90 64       	ori	r25, 0x40	; 64
    d206:	b9 2e       	mov	r11, r25
    d208:	2b 2d       	mov	r18, r11
    d20a:	a6 01       	movw	r20, r12
    d20c:	67 2d       	mov	r22, r7
    d20e:	c8 01       	movw	r24, r16
    d210:	b2 dd       	rcall	.-1180   	; 0xcd76 <conv_int>
    d212:	81 11       	cpse	r24, r1
    d214:	05 c0       	rjmp	.+10     	; 0xd220 <vfscanf+0x21a>
    d216:	f8 01       	movw	r30, r16
    d218:	83 81       	ldd	r24, Z+3	; 0x03
    d21a:	80 73       	andi	r24, 0x30	; 48
    d21c:	29 f4       	brne	.+10     	; 0xd228 <vfscanf+0x222>
    d21e:	06 c0       	rjmp	.+12     	; 0xd22c <vfscanf+0x226>
    d220:	b0 fc       	sbrc	r11, 0
    d222:	0a cf       	rjmp	.-492    	; 0xd038 <vfscanf+0x32>
    d224:	a3 94       	inc	r10
    d226:	08 cf       	rjmp	.-496    	; 0xd038 <vfscanf+0x32>
    d228:	aa 20       	and	r10, r10
    d22a:	19 f0       	breq	.+6      	; 0xd232 <vfscanf+0x22c>
    d22c:	8a 2d       	mov	r24, r10
    d22e:	90 e0       	ldi	r25, 0x00	; 0
    d230:	02 c0       	rjmp	.+4      	; 0xd236 <vfscanf+0x230>
    d232:	8f ef       	ldi	r24, 0xFF	; 255
    d234:	9f ef       	ldi	r25, 0xFF	; 255
    d236:	0f 90       	pop	r0
    d238:	df 91       	pop	r29
    d23a:	cf 91       	pop	r28
    d23c:	1f 91       	pop	r17
    d23e:	0f 91       	pop	r16
    d240:	ff 90       	pop	r15
    d242:	ef 90       	pop	r14
    d244:	df 90       	pop	r13
    d246:	cf 90       	pop	r12
    d248:	bf 90       	pop	r11
    d24a:	af 90       	pop	r10
    d24c:	9f 90       	pop	r9
    d24e:	8f 90       	pop	r8
    d250:	7f 90       	pop	r7
    d252:	5f 90       	pop	r5
    d254:	4f 90       	pop	r4
    d256:	08 95       	ret

0000d258 <__eerd_block_x128a4u>:
    d258:	e0 ec       	ldi	r30, 0xC0	; 192
    d25a:	f1 e0       	ldi	r31, 0x01	; 1
    d25c:	a7 85       	ldd	r26, Z+15	; 0x0f
    d25e:	a7 fd       	sbrc	r26, 7
    d260:	fd cf       	rjmp	.-6      	; 0xd25c <__eerd_block_x128a4u+0x4>
    d262:	a4 85       	ldd	r26, Z+12	; 0x0c
    d264:	a8 60       	ori	r26, 0x08	; 8
    d266:	a4 87       	std	Z+12, r26	; 0x0c
    d268:	60 50       	subi	r22, 0x00	; 0
    d26a:	70 4f       	sbci	r23, 0xF0	; 240
    d26c:	92 cb       	rjmp	.-2268   	; 0xc992 <memcpy>

0000d26e <__eeupd_block_x128a4u>:
    d26e:	dc 01       	movw	r26, r24
    d270:	a4 0f       	add	r26, r20
    d272:	b5 1f       	adc	r27, r21
    d274:	41 50       	subi	r20, 0x01	; 1
    d276:	50 40       	sbci	r21, 0x00	; 0
    d278:	40 f0       	brcs	.+16     	; 0xd28a <__eeupd_block_x128a4u+0x1c>
    d27a:	cb 01       	movw	r24, r22
    d27c:	84 0f       	add	r24, r20
    d27e:	95 1f       	adc	r25, r21
    d280:	2e 91       	ld	r18, -X
    d282:	05 d0       	rcall	.+10     	; 0xd28e <__eeupd_r18_x128a4u>
    d284:	41 50       	subi	r20, 0x01	; 1
    d286:	50 40       	sbci	r21, 0x00	; 0
    d288:	d8 f7       	brcc	.-10     	; 0xd280 <__eeupd_block_x128a4u+0x12>
    d28a:	08 95       	ret

0000d28c <__eeupd_byte_x128a4u>:
    d28c:	26 2f       	mov	r18, r22

0000d28e <__eeupd_r18_x128a4u>:
    d28e:	a1 d0       	rcall	.+322    	; 0xd3d2 <eeprom_mapen>
    d290:	00 80       	ld	r0, Z
    d292:	02 16       	cp	r0, r18
    d294:	11 f0       	breq	.+4      	; 0xd29a <__eeupd_r18_x128a4u+0xc>
    d296:	0d d0       	rcall	.+26     	; 0xd2b2 <__eewr_r18_x128a4u>
    d298:	01 97       	sbiw	r24, 0x01	; 1
    d29a:	01 97       	sbiw	r24, 0x01	; 1
    d29c:	08 95       	ret

0000d29e <__eewr_block_x128a4u>:
    d29e:	dc 01       	movw	r26, r24
    d2a0:	cb 01       	movw	r24, r22
    d2a2:	02 c0       	rjmp	.+4      	; 0xd2a8 <__eewr_block_x128a4u+0xa>
    d2a4:	2d 91       	ld	r18, X+
    d2a6:	05 d0       	rcall	.+10     	; 0xd2b2 <__eewr_r18_x128a4u>
    d2a8:	41 50       	subi	r20, 0x01	; 1
    d2aa:	50 40       	sbci	r21, 0x00	; 0
    d2ac:	d8 f7       	brcc	.-10     	; 0xd2a4 <__eewr_block_x128a4u+0x6>
    d2ae:	08 95       	ret

0000d2b0 <__eewr_byte_x128a4u>:
    d2b0:	26 2f       	mov	r18, r22

0000d2b2 <__eewr_r18_x128a4u>:
    d2b2:	e0 ec       	ldi	r30, 0xC0	; 192
    d2b4:	f1 e0       	ldi	r31, 0x01	; 1
    d2b6:	37 85       	ldd	r19, Z+15	; 0x0f
    d2b8:	37 fd       	sbrc	r19, 7
    d2ba:	fd cf       	rjmp	.-6      	; 0xd2b6 <__eewr_r18_x128a4u+0x4>
    d2bc:	34 85       	ldd	r19, Z+12	; 0x0c
    d2be:	37 7f       	andi	r19, 0xF7	; 247
    d2c0:	34 87       	std	Z+12, r19	; 0x0c
    d2c2:	37 85       	ldd	r19, Z+15	; 0x0f
    d2c4:	31 ff       	sbrs	r19, 1
    d2c6:	09 c0       	rjmp	.+18     	; 0xd2da <__eewr_r18_x128a4u+0x28>
    d2c8:	36 e3       	ldi	r19, 0x36	; 54
    d2ca:	32 87       	std	Z+10, r19	; 0x0a
    d2cc:	38 ed       	ldi	r19, 0xD8	; 216
    d2ce:	34 bf       	out	0x34, r19	; 52
    d2d0:	31 e0       	ldi	r19, 0x01	; 1
    d2d2:	33 87       	std	Z+11, r19	; 0x0b
    d2d4:	37 85       	ldd	r19, Z+15	; 0x0f
    d2d6:	37 fd       	sbrc	r19, 7
    d2d8:	fd cf       	rjmp	.-6      	; 0xd2d4 <__eewr_r18_x128a4u+0x22>
    d2da:	33 e3       	ldi	r19, 0x33	; 51
    d2dc:	32 87       	std	Z+10, r19	; 0x0a
    d2de:	80 83       	st	Z, r24
    d2e0:	91 83       	std	Z+1, r25	; 0x01
    d2e2:	12 82       	std	Z+2, r1	; 0x02
    d2e4:	24 83       	std	Z+4, r18	; 0x04
    d2e6:	25 e3       	ldi	r18, 0x35	; 53
    d2e8:	22 87       	std	Z+10, r18	; 0x0a
    d2ea:	28 ed       	ldi	r18, 0xD8	; 216
    d2ec:	31 e0       	ldi	r19, 0x01	; 1
    d2ee:	24 bf       	out	0x34, r18	; 52
    d2f0:	33 87       	std	Z+11, r19	; 0x0b
    d2f2:	01 96       	adiw	r24, 0x01	; 1
    d2f4:	08 95       	ret

0000d2f6 <isspace>:
    d2f6:	91 11       	cpse	r25, r1
    d2f8:	78 c0       	rjmp	.+240    	; 0xd3ea <__ctype_isfalse>
    d2fa:	80 32       	cpi	r24, 0x20	; 32
    d2fc:	19 f0       	breq	.+6      	; 0xd304 <isspace+0xe>
    d2fe:	89 50       	subi	r24, 0x09	; 9
    d300:	85 50       	subi	r24, 0x05	; 5
    d302:	d0 f7       	brcc	.-12     	; 0xd2f8 <isspace+0x2>
    d304:	08 95       	ret

0000d306 <strchr_P>:
    d306:	fc 01       	movw	r30, r24
    d308:	05 90       	lpm	r0, Z+
    d30a:	06 16       	cp	r0, r22
    d30c:	21 f0       	breq	.+8      	; 0xd316 <strchr_P+0x10>
    d30e:	00 20       	and	r0, r0
    d310:	d9 f7       	brne	.-10     	; 0xd308 <strchr_P+0x2>
    d312:	c0 01       	movw	r24, r0
    d314:	08 95       	ret
    d316:	31 97       	sbiw	r30, 0x01	; 1
    d318:	cf 01       	movw	r24, r30
    d31a:	08 95       	ret

0000d31c <fgetc>:
    d31c:	cf 93       	push	r28
    d31e:	df 93       	push	r29
    d320:	ec 01       	movw	r28, r24
    d322:	2b 81       	ldd	r18, Y+3	; 0x03
    d324:	20 ff       	sbrs	r18, 0
    d326:	33 c0       	rjmp	.+102    	; 0xd38e <fgetc+0x72>
    d328:	26 ff       	sbrs	r18, 6
    d32a:	0a c0       	rjmp	.+20     	; 0xd340 <fgetc+0x24>
    d32c:	2f 7b       	andi	r18, 0xBF	; 191
    d32e:	2b 83       	std	Y+3, r18	; 0x03
    d330:	8e 81       	ldd	r24, Y+6	; 0x06
    d332:	9f 81       	ldd	r25, Y+7	; 0x07
    d334:	01 96       	adiw	r24, 0x01	; 1
    d336:	8e 83       	std	Y+6, r24	; 0x06
    d338:	9f 83       	std	Y+7, r25	; 0x07
    d33a:	8a 81       	ldd	r24, Y+2	; 0x02
    d33c:	90 e0       	ldi	r25, 0x00	; 0
    d33e:	29 c0       	rjmp	.+82     	; 0xd392 <fgetc+0x76>
    d340:	22 ff       	sbrs	r18, 2
    d342:	0f c0       	rjmp	.+30     	; 0xd362 <fgetc+0x46>
    d344:	e8 81       	ld	r30, Y
    d346:	f9 81       	ldd	r31, Y+1	; 0x01
    d348:	80 81       	ld	r24, Z
    d34a:	99 27       	eor	r25, r25
    d34c:	87 fd       	sbrc	r24, 7
    d34e:	90 95       	com	r25
    d350:	00 97       	sbiw	r24, 0x00	; 0
    d352:	19 f4       	brne	.+6      	; 0xd35a <fgetc+0x3e>
    d354:	20 62       	ori	r18, 0x20	; 32
    d356:	2b 83       	std	Y+3, r18	; 0x03
    d358:	1a c0       	rjmp	.+52     	; 0xd38e <fgetc+0x72>
    d35a:	31 96       	adiw	r30, 0x01	; 1
    d35c:	e8 83       	st	Y, r30
    d35e:	f9 83       	std	Y+1, r31	; 0x01
    d360:	0e c0       	rjmp	.+28     	; 0xd37e <fgetc+0x62>
    d362:	ea 85       	ldd	r30, Y+10	; 0x0a
    d364:	fb 85       	ldd	r31, Y+11	; 0x0b
    d366:	19 95       	eicall
    d368:	97 ff       	sbrs	r25, 7
    d36a:	09 c0       	rjmp	.+18     	; 0xd37e <fgetc+0x62>
    d36c:	2b 81       	ldd	r18, Y+3	; 0x03
    d36e:	01 96       	adiw	r24, 0x01	; 1
    d370:	11 f4       	brne	.+4      	; 0xd376 <fgetc+0x5a>
    d372:	80 e1       	ldi	r24, 0x10	; 16
    d374:	01 c0       	rjmp	.+2      	; 0xd378 <fgetc+0x5c>
    d376:	80 e2       	ldi	r24, 0x20	; 32
    d378:	82 2b       	or	r24, r18
    d37a:	8b 83       	std	Y+3, r24	; 0x03
    d37c:	08 c0       	rjmp	.+16     	; 0xd38e <fgetc+0x72>
    d37e:	2e 81       	ldd	r18, Y+6	; 0x06
    d380:	3f 81       	ldd	r19, Y+7	; 0x07
    d382:	2f 5f       	subi	r18, 0xFF	; 255
    d384:	3f 4f       	sbci	r19, 0xFF	; 255
    d386:	2e 83       	std	Y+6, r18	; 0x06
    d388:	3f 83       	std	Y+7, r19	; 0x07
    d38a:	99 27       	eor	r25, r25
    d38c:	02 c0       	rjmp	.+4      	; 0xd392 <fgetc+0x76>
    d38e:	8f ef       	ldi	r24, 0xFF	; 255
    d390:	9f ef       	ldi	r25, 0xFF	; 255
    d392:	df 91       	pop	r29
    d394:	cf 91       	pop	r28
    d396:	08 95       	ret

0000d398 <ungetc>:
    d398:	fb 01       	movw	r30, r22
    d39a:	23 81       	ldd	r18, Z+3	; 0x03
    d39c:	20 ff       	sbrs	r18, 0
    d39e:	12 c0       	rjmp	.+36     	; 0xd3c4 <ungetc+0x2c>
    d3a0:	26 fd       	sbrc	r18, 6
    d3a2:	10 c0       	rjmp	.+32     	; 0xd3c4 <ungetc+0x2c>
    d3a4:	8f 3f       	cpi	r24, 0xFF	; 255
    d3a6:	3f ef       	ldi	r19, 0xFF	; 255
    d3a8:	93 07       	cpc	r25, r19
    d3aa:	61 f0       	breq	.+24     	; 0xd3c4 <ungetc+0x2c>
    d3ac:	82 83       	std	Z+2, r24	; 0x02
    d3ae:	2f 7d       	andi	r18, 0xDF	; 223
    d3b0:	20 64       	ori	r18, 0x40	; 64
    d3b2:	23 83       	std	Z+3, r18	; 0x03
    d3b4:	26 81       	ldd	r18, Z+6	; 0x06
    d3b6:	37 81       	ldd	r19, Z+7	; 0x07
    d3b8:	21 50       	subi	r18, 0x01	; 1
    d3ba:	31 09       	sbc	r19, r1
    d3bc:	26 83       	std	Z+6, r18	; 0x06
    d3be:	37 83       	std	Z+7, r19	; 0x07
    d3c0:	99 27       	eor	r25, r25
    d3c2:	08 95       	ret
    d3c4:	8f ef       	ldi	r24, 0xFF	; 255
    d3c6:	9f ef       	ldi	r25, 0xFF	; 255
    d3c8:	08 95       	ret

0000d3ca <__eerd_byte_x128a1>:
    d3ca:	03 d0       	rcall	.+6      	; 0xd3d2 <eeprom_mapen>
    d3cc:	80 81       	ld	r24, Z
    d3ce:	99 27       	eor	r25, r25
    d3d0:	08 95       	ret

0000d3d2 <eeprom_mapen>:
    d3d2:	e0 ec       	ldi	r30, 0xC0	; 192
    d3d4:	f1 e0       	ldi	r31, 0x01	; 1
    d3d6:	37 85       	ldd	r19, Z+15	; 0x0f
    d3d8:	37 fd       	sbrc	r19, 7
    d3da:	fd cf       	rjmp	.-6      	; 0xd3d6 <eeprom_mapen+0x4>
    d3dc:	34 85       	ldd	r19, Z+12	; 0x0c
    d3de:	38 60       	ori	r19, 0x08	; 8
    d3e0:	34 87       	std	Z+12, r19	; 0x0c
    d3e2:	fc 01       	movw	r30, r24
    d3e4:	e0 50       	subi	r30, 0x00	; 0
    d3e6:	f0 4f       	sbci	r31, 0xF0	; 240
    d3e8:	08 95       	ret

0000d3ea <__ctype_isfalse>:
    d3ea:	99 27       	eor	r25, r25
    d3ec:	88 27       	eor	r24, r24

0000d3ee <__ctype_istrue>:
    d3ee:	08 95       	ret

0000d3f0 <_exit>:
    d3f0:	f8 94       	cli

0000d3f2 <__stop_program>:
    d3f2:	ff cf       	rjmp	.-2      	; 0xd3f2 <__stop_program>
