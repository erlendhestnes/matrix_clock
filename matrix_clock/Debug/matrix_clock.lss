
matrix_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006b7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000444  00802000  00006b7a  00006c0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000322  00802444  00802444  00007052  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007052  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000b60  00000000  00000000  000070ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001a340  00000000  00000000  00007c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003bd5  00000000  00000000  00021f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000a683  00000000  00000000  00025b23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00002f3c  00000000  00000000  000301a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004328  00000000  00000000  000330e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00013a24  00000000  00000000  0003740c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000c10  00000000  00000000  0004ae30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	be c6       	rjmp	.+3452   	; 0xd7e <_StackPaint>
       2:	00 00       	nop
       4:	f2 c6       	rjmp	.+3556   	; 0xdea <__bad_interrupt>
       6:	00 00       	nop
       8:	f0 c6       	rjmp	.+3552   	; 0xdea <__bad_interrupt>
       a:	00 00       	nop
       c:	ee c6       	rjmp	.+3548   	; 0xdea <__bad_interrupt>
       e:	00 00       	nop
      10:	ec c6       	rjmp	.+3544   	; 0xdea <__bad_interrupt>
      12:	00 00       	nop
      14:	ea c6       	rjmp	.+3540   	; 0xdea <__bad_interrupt>
      16:	00 00       	nop
      18:	f7 c6       	rjmp	.+3566   	; 0xe08 <__vector_6>
      1a:	00 00       	nop
      1c:	e6 c6       	rjmp	.+3532   	; 0xdea <__bad_interrupt>
      1e:	00 00       	nop
      20:	e4 c6       	rjmp	.+3528   	; 0xdea <__bad_interrupt>
      22:	00 00       	nop
      24:	e2 c6       	rjmp	.+3524   	; 0xdea <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 eb 10 	jmp	0x21d6	; 0x21d6 <__vector_10>
      2c:	de c6       	rjmp	.+3516   	; 0xdea <__bad_interrupt>
      2e:	00 00       	nop
      30:	dc c6       	rjmp	.+3512   	; 0xdea <__bad_interrupt>
      32:	00 00       	nop
      34:	da c6       	rjmp	.+3508   	; 0xdea <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 79 2f 	jmp	0x5ef2	; 0x5ef2 <__vector_14>
      3c:	d6 c6       	rjmp	.+3500   	; 0xdea <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 78 30 	jmp	0x60f0	; 0x60f0 <__vector_16>
      44:	0c 94 a0 30 	jmp	0x6140	; 0x6140 <__vector_17>
      48:	d0 c6       	rjmp	.+3488   	; 0xdea <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ce c6       	rjmp	.+3484   	; 0xdea <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 af 14 	jmp	0x295e	; 0x295e <__vector_20>
      54:	ca c6       	rjmp	.+3476   	; 0xdea <__bad_interrupt>
      56:	00 00       	nop
      58:	c8 c6       	rjmp	.+3472   	; 0xdea <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c6 c6       	rjmp	.+3468   	; 0xdea <__bad_interrupt>
      5e:	00 00       	nop
      60:	c4 c6       	rjmp	.+3464   	; 0xdea <__bad_interrupt>
      62:	00 00       	nop
      64:	c2 c6       	rjmp	.+3460   	; 0xdea <__bad_interrupt>
      66:	00 00       	nop
      68:	c0 c6       	rjmp	.+3456   	; 0xdea <__bad_interrupt>
      6a:	00 00       	nop
      6c:	be c6       	rjmp	.+3452   	; 0xdea <__bad_interrupt>
      6e:	00 00       	nop
      70:	bc c6       	rjmp	.+3448   	; 0xdea <__bad_interrupt>
      72:	00 00       	nop
      74:	ba c6       	rjmp	.+3444   	; 0xdea <__bad_interrupt>
      76:	00 00       	nop
      78:	b8 c6       	rjmp	.+3440   	; 0xdea <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b6 c6       	rjmp	.+3436   	; 0xdea <__bad_interrupt>
      7e:	00 00       	nop
      80:	b4 c6       	rjmp	.+3432   	; 0xdea <__bad_interrupt>
      82:	00 00       	nop
      84:	b2 c6       	rjmp	.+3428   	; 0xdea <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 89 0f 	jmp	0x1f12	; 0x1f12 <__vector_34>
      8c:	ae c6       	rjmp	.+3420   	; 0xdea <__bad_interrupt>
      8e:	00 00       	nop
      90:	ac c6       	rjmp	.+3416   	; 0xdea <__bad_interrupt>
      92:	00 00       	nop
      94:	aa c6       	rjmp	.+3412   	; 0xdea <__bad_interrupt>
      96:	00 00       	nop
      98:	a8 c6       	rjmp	.+3408   	; 0xdea <__bad_interrupt>
      9a:	00 00       	nop
      9c:	a6 c6       	rjmp	.+3404   	; 0xdea <__bad_interrupt>
      9e:	00 00       	nop
      a0:	a4 c6       	rjmp	.+3400   	; 0xdea <__bad_interrupt>
      a2:	00 00       	nop
      a4:	a2 c6       	rjmp	.+3396   	; 0xdea <__bad_interrupt>
      a6:	00 00       	nop
      a8:	a0 c6       	rjmp	.+3392   	; 0xdea <__bad_interrupt>
      aa:	00 00       	nop
      ac:	9e c6       	rjmp	.+3388   	; 0xdea <__bad_interrupt>
      ae:	00 00       	nop
      b0:	9c c6       	rjmp	.+3384   	; 0xdea <__bad_interrupt>
      b2:	00 00       	nop
      b4:	9a c6       	rjmp	.+3380   	; 0xdea <__bad_interrupt>
      b6:	00 00       	nop
      b8:	98 c6       	rjmp	.+3376   	; 0xdea <__bad_interrupt>
      ba:	00 00       	nop
      bc:	96 c6       	rjmp	.+3372   	; 0xdea <__bad_interrupt>
      be:	00 00       	nop
      c0:	94 c6       	rjmp	.+3368   	; 0xdea <__bad_interrupt>
      c2:	00 00       	nop
      c4:	92 c6       	rjmp	.+3364   	; 0xdea <__bad_interrupt>
      c6:	00 00       	nop
      c8:	90 c6       	rjmp	.+3360   	; 0xdea <__bad_interrupt>
      ca:	00 00       	nop
      cc:	8e c6       	rjmp	.+3356   	; 0xdea <__bad_interrupt>
      ce:	00 00       	nop
      d0:	8c c6       	rjmp	.+3352   	; 0xdea <__bad_interrupt>
      d2:	00 00       	nop
      d4:	8a c6       	rjmp	.+3348   	; 0xdea <__bad_interrupt>
      d6:	00 00       	nop
      d8:	88 c6       	rjmp	.+3344   	; 0xdea <__bad_interrupt>
      da:	00 00       	nop
      dc:	86 c6       	rjmp	.+3340   	; 0xdea <__bad_interrupt>
      de:	00 00       	nop
      e0:	84 c6       	rjmp	.+3336   	; 0xdea <__bad_interrupt>
      e2:	00 00       	nop
      e4:	82 c6       	rjmp	.+3332   	; 0xdea <__bad_interrupt>
      e6:	00 00       	nop
      e8:	80 c6       	rjmp	.+3328   	; 0xdea <__bad_interrupt>
      ea:	00 00       	nop
      ec:	7e c6       	rjmp	.+3324   	; 0xdea <__bad_interrupt>
      ee:	00 00       	nop
      f0:	7c c6       	rjmp	.+3320   	; 0xdea <__bad_interrupt>
      f2:	00 00       	nop
      f4:	7a c6       	rjmp	.+3316   	; 0xdea <__bad_interrupt>
      f6:	00 00       	nop
      f8:	78 c6       	rjmp	.+3312   	; 0xdea <__bad_interrupt>
      fa:	00 00       	nop
      fc:	76 c6       	rjmp	.+3308   	; 0xdea <__bad_interrupt>
      fe:	00 00       	nop
     100:	74 c6       	rjmp	.+3304   	; 0xdea <__bad_interrupt>
     102:	00 00       	nop
     104:	72 c6       	rjmp	.+3300   	; 0xdea <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <__vector_66>
     10c:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <__vector_67>
     110:	6c c6       	rjmp	.+3288   	; 0xdea <__bad_interrupt>
     112:	00 00       	nop
     114:	6a c6       	rjmp	.+3284   	; 0xdea <__bad_interrupt>
     116:	00 00       	nop
     118:	68 c6       	rjmp	.+3280   	; 0xdea <__bad_interrupt>
     11a:	00 00       	nop
     11c:	66 c6       	rjmp	.+3276   	; 0xdea <__bad_interrupt>
     11e:	00 00       	nop
     120:	64 c6       	rjmp	.+3272   	; 0xdea <__bad_interrupt>
     122:	00 00       	nop
     124:	62 c6       	rjmp	.+3268   	; 0xdea <__bad_interrupt>
     126:	00 00       	nop
     128:	60 c6       	rjmp	.+3264   	; 0xdea <__bad_interrupt>
     12a:	00 00       	nop
     12c:	5e c6       	rjmp	.+3260   	; 0xdea <__bad_interrupt>
     12e:	00 00       	nop
     130:	5c c6       	rjmp	.+3256   	; 0xdea <__bad_interrupt>
     132:	00 00       	nop
     134:	5a c6       	rjmp	.+3252   	; 0xdea <__bad_interrupt>
     136:	00 00       	nop
     138:	58 c6       	rjmp	.+3248   	; 0xdea <__bad_interrupt>
     13a:	00 00       	nop
     13c:	56 c6       	rjmp	.+3244   	; 0xdea <__bad_interrupt>
     13e:	00 00       	nop
     140:	54 c6       	rjmp	.+3240   	; 0xdea <__bad_interrupt>
     142:	00 00       	nop
     144:	52 c6       	rjmp	.+3236   	; 0xdea <__bad_interrupt>
     146:	00 00       	nop
     148:	50 c6       	rjmp	.+3232   	; 0xdea <__bad_interrupt>
     14a:	00 00       	nop
     14c:	4e c6       	rjmp	.+3228   	; 0xdea <__bad_interrupt>
     14e:	00 00       	nop
     150:	4c c6       	rjmp	.+3224   	; 0xdea <__bad_interrupt>
     152:	00 00       	nop
     154:	4a c6       	rjmp	.+3220   	; 0xdea <__bad_interrupt>
     156:	00 00       	nop
     158:	48 c6       	rjmp	.+3216   	; 0xdea <__bad_interrupt>
     15a:	00 00       	nop
     15c:	46 c6       	rjmp	.+3212   	; 0xdea <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <__vector_88>
     164:	42 c6       	rjmp	.+3204   	; 0xdea <__bad_interrupt>
     166:	00 00       	nop
     168:	40 c6       	rjmp	.+3200   	; 0xdea <__bad_interrupt>
     16a:	00 00       	nop
     16c:	3e c6       	rjmp	.+3196   	; 0xdea <__bad_interrupt>
     16e:	00 00       	nop
     170:	3c c6       	rjmp	.+3192   	; 0xdea <__bad_interrupt>
     172:	00 00       	nop
     174:	3a c6       	rjmp	.+3188   	; 0xdea <__bad_interrupt>
     176:	00 00       	nop
     178:	38 c6       	rjmp	.+3184   	; 0xdea <__bad_interrupt>
     17a:	00 00       	nop
     17c:	36 c6       	rjmp	.+3180   	; 0xdea <__bad_interrupt>
     17e:	00 00       	nop
     180:	34 c6       	rjmp	.+3176   	; 0xdea <__bad_interrupt>
     182:	00 00       	nop
     184:	32 c6       	rjmp	.+3172   	; 0xdea <__bad_interrupt>
     186:	00 00       	nop
     188:	30 c6       	rjmp	.+3168   	; 0xdea <__bad_interrupt>
     18a:	00 00       	nop
     18c:	2e c6       	rjmp	.+3164   	; 0xdea <__bad_interrupt>
     18e:	00 00       	nop
     190:	2c c6       	rjmp	.+3160   	; 0xdea <__bad_interrupt>
     192:	00 00       	nop
     194:	2a c6       	rjmp	.+3156   	; 0xdea <__bad_interrupt>
     196:	00 00       	nop
     198:	28 c6       	rjmp	.+3152   	; 0xdea <__bad_interrupt>
     19a:	00 00       	nop
     19c:	26 c6       	rjmp	.+3148   	; 0xdea <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	24 c6       	rjmp	.+3144   	; 0xdea <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	22 c6       	rjmp	.+3140   	; 0xdea <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	20 c6       	rjmp	.+3136   	; 0xdea <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	1e c6       	rjmp	.+3132   	; 0xdea <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	1c c6       	rjmp	.+3128   	; 0xdea <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	1a c6       	rjmp	.+3124   	; 0xdea <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	18 c6       	rjmp	.+3120   	; 0xdea <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	16 c6       	rjmp	.+3116   	; 0xdea <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	14 c6       	rjmp	.+3112   	; 0xdea <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	12 c6       	rjmp	.+3108   	; 0xdea <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	10 c6       	rjmp	.+3104   	; 0xdea <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	0e c6       	rjmp	.+3100   	; 0xdea <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	0c c6       	rjmp	.+3096   	; 0xdea <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	0a c6       	rjmp	.+3092   	; 0xdea <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	08 c6       	rjmp	.+3088   	; 0xdea <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	06 c6       	rjmp	.+3084   	; 0xdea <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	04 c6       	rjmp	.+3080   	; 0xdea <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	02 c6       	rjmp	.+3076   	; 0xdea <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	00 c6       	rjmp	.+3072   	; 0xdea <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	fe c5       	rjmp	.+3068   	; 0xdea <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	fc c5       	rjmp	.+3064   	; 0xdea <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	fa c5       	rjmp	.+3060   	; 0xdea <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	f8 c5       	rjmp	.+3056   	; 0xdea <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	e1 10       	cpse	r14, r1
     1fe:	cd 10       	cpse	r12, r13
     200:	e1 10       	cpse	r14, r1
     202:	e3 10       	cpse	r14, r3
     204:	e1 10       	cpse	r14, r1
     206:	e3 10       	cpse	r14, r3
     208:	e1 10       	cpse	r14, r1
     20a:	e1 10       	cpse	r14, r1
     20c:	e3 10       	cpse	r14, r3
     20e:	e1 10       	cpse	r14, r1
     210:	e3 10       	cpse	r14, r3
     212:	e1 10       	cpse	r14, r1
     214:	f7 2d       	mov	r31, r7
     216:	fe 2d       	mov	r31, r14
     218:	52 2f       	mov	r21, r18
     21a:	6f 2e       	mov	r6, r31
     21c:	52 2f       	mov	r21, r18
     21e:	52 2f       	mov	r21, r18
     220:	52 2f       	mov	r21, r18
     222:	49 2f       	mov	r20, r25
     224:	52 2f       	mov	r21, r18
     226:	52 2f       	mov	r21, r18
     228:	52 2f       	mov	r21, r18
     22a:	52 2f       	mov	r21, r18
     22c:	52 2f       	mov	r21, r18
     22e:	52 2f       	mov	r21, r18
     230:	52 2f       	mov	r21, r18
     232:	52 2f       	mov	r21, r18
     234:	52 2f       	mov	r21, r18
     236:	52 2f       	mov	r21, r18
     238:	52 2f       	mov	r21, r18
     23a:	52 2f       	mov	r21, r18
     23c:	52 2f       	mov	r21, r18
     23e:	52 2f       	mov	r21, r18
     240:	52 2f       	mov	r21, r18
     242:	52 2f       	mov	r21, r18
     244:	52 2f       	mov	r21, r18
     246:	52 2f       	mov	r21, r18
     248:	52 2f       	mov	r21, r18
     24a:	52 2f       	mov	r21, r18
     24c:	52 2f       	mov	r21, r18
     24e:	52 2f       	mov	r21, r18
     250:	52 2f       	mov	r21, r18
     252:	52 2f       	mov	r21, r18
     254:	52 2f       	mov	r21, r18
     256:	52 2f       	mov	r21, r18
     258:	52 2f       	mov	r21, r18
     25a:	52 2f       	mov	r21, r18
     25c:	52 2f       	mov	r21, r18
     25e:	52 2f       	mov	r21, r18
     260:	52 2f       	mov	r21, r18
     262:	52 2f       	mov	r21, r18
     264:	52 2f       	mov	r21, r18
     266:	52 2f       	mov	r21, r18
     268:	52 2f       	mov	r21, r18
     26a:	52 2f       	mov	r21, r18
     26c:	52 2f       	mov	r21, r18
     26e:	52 2f       	mov	r21, r18
     270:	52 2f       	mov	r21, r18
     272:	52 2f       	mov	r21, r18
     274:	52 2f       	mov	r21, r18
     276:	52 2f       	mov	r21, r18
     278:	fb 2e       	mov	r15, r27
     27a:	01 2f       	mov	r16, r17
     27c:	12 2f       	mov	r17, r18
     27e:	23 2f       	mov	r18, r19
     280:	37 2f       	mov	r19, r23

00000282 <__trampolines_end>:
     282:	00 00       	nop
     284:	00 00       	nop
     286:	00 00       	nop
     288:	20 50       	subi	r18, 0x00	; 0
     28a:	70 50       	subi	r23, 0x00	; 0
     28c:	20 00       	.word	0x0020	; ????
     28e:	20 70       	andi	r18, 0x00	; 0
     290:	50 70       	andi	r21, 0x00	; 0
     292:	20 00       	.word	0x0020	; ????
     294:	00 50       	subi	r16, 0x00	; 0
     296:	70 70       	andi	r23, 0x00	; 0
     298:	20 00       	.word	0x0020	; ????
     29a:	00 20       	and	r0, r0
     29c:	70 70       	andi	r23, 0x00	; 0
     29e:	20 00       	.word	0x0020	; ????
     2a0:	20 70       	andi	r18, 0x00	; 0
     2a2:	70 20       	and	r7, r0
     2a4:	70 00       	.word	0x0070	; ????
     2a6:	20 20       	and	r2, r0
     2a8:	70 20       	and	r7, r0
     2aa:	70 00       	.word	0x0070	; ????
     2ac:	00 00       	nop
     2ae:	20 00       	.word	0x0020	; ????
     2b0:	00 00       	nop
     2b2:	f0 f0       	brcs	.+60     	; 0x2f0 <__trampolines_end+0x6e>
     2b4:	d0 f0       	brcs	.+52     	; 0x2ea <__trampolines_end+0x68>
     2b6:	f0 f0       	brcs	.+60     	; 0x2f4 <__trampolines_end+0x72>
     2b8:	00 70       	andi	r16, 0x00	; 0
     2ba:	50 70       	andi	r21, 0x00	; 0
     2bc:	00 00       	nop
     2be:	f0 80       	ld	r15, Z
     2c0:	a0 80       	ld	r10, Z
     2c2:	f0 f0       	brcs	.+60     	; 0x300 <__trampolines_end+0x7e>
     2c4:	00 30       	cpi	r16, 0x00	; 0
     2c6:	10 60       	ori	r17, 0x00	; 0
     2c8:	60 00       	.word	0x0060	; ????
     2ca:	20 50       	subi	r18, 0x00	; 0
     2cc:	20 70       	andi	r18, 0x00	; 0
     2ce:	20 00       	.word	0x0020	; ????
     2d0:	20 30       	cpi	r18, 0x00	; 0
     2d2:	20 20       	and	r2, r0
     2d4:	60 00       	.word	0x0060	; ????
     2d6:	20 30       	cpi	r18, 0x00	; 0
     2d8:	50 10       	cpse	r5, r0
     2da:	20 00       	.word	0x0020	; ????
     2dc:	20 70       	andi	r18, 0x00	; 0
     2de:	50 70       	andi	r21, 0x00	; 0
     2e0:	20 00       	.word	0x0020	; ????
     2e2:	40 60       	ori	r20, 0x00	; 0
     2e4:	70 60       	ori	r23, 0x00	; 0
     2e6:	40 00       	.word	0x0040	; ????
     2e8:	10 30       	cpi	r17, 0x00	; 0
     2ea:	70 30       	cpi	r23, 0x00	; 0
     2ec:	10 00       	.word	0x0010	; ????
     2ee:	20 70       	andi	r18, 0x00	; 0
     2f0:	20 70       	andi	r18, 0x00	; 0
     2f2:	20 00       	.word	0x0020	; ????
     2f4:	50 50       	subi	r21, 0x00	; 0
     2f6:	50 00       	.word	0x0050	; ????
     2f8:	50 00       	.word	0x0050	; ????
     2fa:	70 d0       	rcall	.+224    	; 0x3dc <__trampolines_end+0x15a>
     2fc:	d0 50       	subi	r29, 0x00	; 0
     2fe:	50 00       	.word	0x0050	; ????
     300:	30 60       	ori	r19, 0x00	; 0
     302:	50 30       	cpi	r21, 0x00	; 0
     304:	60 00       	.word	0x0060	; ????
     306:	00 00       	nop
     308:	00 00       	nop
     30a:	70 00       	.word	0x0070	; ????
     30c:	20 70       	andi	r18, 0x00	; 0
     30e:	20 70       	andi	r18, 0x00	; 0
     310:	20 70       	andi	r18, 0x00	; 0
     312:	20 70       	andi	r18, 0x00	; 0
     314:	20 20       	and	r2, r0
     316:	20 00       	.word	0x0020	; ????
     318:	20 20       	and	r2, r0
     31a:	20 70       	andi	r18, 0x00	; 0
     31c:	20 00       	.word	0x0020	; ????
     31e:	00 20       	and	r0, r0
     320:	f0 20       	and	r15, r0
     322:	00 00       	nop
     324:	00 40       	sbci	r16, 0x00	; 0
     326:	f0 40       	sbci	r31, 0x00	; 0
     328:	00 00       	nop
     32a:	00 00       	nop
     32c:	40 70       	andi	r20, 0x00	; 0
     32e:	00 00       	nop
     330:	00 50       	subi	r16, 0x00	; 0
     332:	70 50       	subi	r23, 0x00	; 0
     334:	00 00       	nop
     336:	00 20       	and	r0, r0
     338:	70 70       	andi	r23, 0x00	; 0
     33a:	00 00       	nop
     33c:	00 70       	andi	r16, 0x00	; 0
     33e:	70 20       	and	r7, r0
	...
     348:	20 20       	and	r2, r0
     34a:	20 00       	.word	0x0020	; ????
     34c:	20 00       	.word	0x0020	; ????
     34e:	50 50       	subi	r21, 0x00	; 0
     350:	00 00       	nop
     352:	00 00       	nop
     354:	50 70       	andi	r21, 0x00	; 0
     356:	50 70       	andi	r21, 0x00	; 0
     358:	50 00       	.word	0x0050	; ????
     35a:	20 30       	cpi	r18, 0x00	; 0
     35c:	60 30       	cpi	r22, 0x00	; 0
     35e:	60 20       	and	r6, r0
     360:	40 10       	cpse	r4, r0
     362:	20 40       	sbci	r18, 0x00	; 0
     364:	10 00       	.word	0x0010	; ????
     366:	20 50       	subi	r18, 0x00	; 0
     368:	30 50       	subi	r19, 0x00	; 0
     36a:	70 00       	.word	0x0070	; ????
     36c:	60 40       	sbci	r22, 0x00	; 0
     36e:	00 00       	nop
     370:	00 00       	nop
     372:	20 40       	sbci	r18, 0x00	; 0
     374:	40 40       	sbci	r20, 0x00	; 0
     376:	20 00       	.word	0x0020	; ????
     378:	40 20       	and	r4, r0
     37a:	20 20       	and	r2, r0
     37c:	40 00       	.word	0x0040	; ????
     37e:	50 20       	and	r5, r0
     380:	70 20       	and	r7, r0
     382:	50 00       	.word	0x0050	; ????
     384:	00 20       	and	r0, r0
     386:	70 20       	and	r7, r0
     388:	00 00       	nop
     38a:	00 00       	nop
     38c:	00 00       	nop
     38e:	60 40       	sbci	r22, 0x00	; 0
     390:	00 00       	nop
     392:	70 00       	.word	0x0070	; ????
     394:	00 00       	nop
     396:	00 00       	nop
     398:	00 00       	nop
     39a:	20 00       	.word	0x0020	; ????
     39c:	10 10       	cpse	r1, r0
     39e:	20 40       	sbci	r18, 0x00	; 0
     3a0:	40 00       	.word	0x0040	; ????
     3a2:	20 50       	subi	r18, 0x00	; 0
     3a4:	50 50       	subi	r21, 0x00	; 0
     3a6:	20 00       	.word	0x0020	; ????
     3a8:	20 60       	ori	r18, 0x00	; 0
     3aa:	20 20       	and	r2, r0
     3ac:	70 00       	.word	0x0070	; ????
     3ae:	60 10       	cpse	r6, r0
     3b0:	20 40       	sbci	r18, 0x00	; 0
     3b2:	70 00       	.word	0x0070	; ????
     3b4:	60 10       	cpse	r6, r0
     3b6:	20 10       	cpse	r2, r0
     3b8:	60 00       	.word	0x0060	; ????
     3ba:	10 50       	subi	r17, 0x00	; 0
     3bc:	70 10       	cpse	r7, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	70 40       	sbci	r23, 0x00	; 0
     3c2:	60 10       	cpse	r6, r0
     3c4:	60 00       	.word	0x0060	; ????
     3c6:	20 40       	sbci	r18, 0x00	; 0
     3c8:	60 50       	subi	r22, 0x00	; 0
     3ca:	20 00       	.word	0x0020	; ????
     3cc:	70 10       	cpse	r7, r0
     3ce:	30 20       	and	r3, r0
     3d0:	20 00       	.word	0x0020	; ????
     3d2:	20 50       	subi	r18, 0x00	; 0
     3d4:	20 50       	subi	r18, 0x00	; 0
     3d6:	20 00       	.word	0x0020	; ????
     3d8:	20 50       	subi	r18, 0x00	; 0
     3da:	30 10       	cpse	r3, r0
     3dc:	20 00       	.word	0x0020	; ????
     3de:	00 00       	nop
     3e0:	20 00       	.word	0x0020	; ????
     3e2:	20 00       	.word	0x0020	; ????
     3e4:	00 00       	nop
     3e6:	20 00       	.word	0x0020	; ????
     3e8:	60 40       	sbci	r22, 0x00	; 0
     3ea:	10 20       	and	r1, r0
     3ec:	40 20       	and	r4, r0
     3ee:	10 00       	.word	0x0010	; ????
     3f0:	00 00       	nop
     3f2:	70 00       	.word	0x0070	; ????
     3f4:	70 00       	.word	0x0070	; ????
     3f6:	40 20       	and	r4, r0
     3f8:	10 20       	and	r1, r0
     3fa:	40 00       	.word	0x0040	; ????
     3fc:	60 10       	cpse	r6, r0
     3fe:	20 00       	.word	0x0020	; ????
     400:	20 00       	.word	0x0020	; ????
     402:	70 50       	subi	r23, 0x00	; 0
     404:	50 40       	sbci	r21, 0x00	; 0
     406:	70 00       	.word	0x0070	; ????
     408:	20 50       	subi	r18, 0x00	; 0
     40a:	70 50       	subi	r23, 0x00	; 0
     40c:	50 00       	.word	0x0050	; ????
     40e:	60 50       	subi	r22, 0x00	; 0
     410:	60 50       	subi	r22, 0x00	; 0
     412:	60 00       	.word	0x0060	; ????
     414:	30 40       	sbci	r19, 0x00	; 0
     416:	40 40       	sbci	r20, 0x00	; 0
     418:	30 00       	.word	0x0030	; ????
     41a:	60 50       	subi	r22, 0x00	; 0
     41c:	50 50       	subi	r21, 0x00	; 0
     41e:	60 00       	.word	0x0060	; ????
     420:	70 40       	sbci	r23, 0x00	; 0
     422:	60 40       	sbci	r22, 0x00	; 0
     424:	70 00       	.word	0x0070	; ????
     426:	70 40       	sbci	r23, 0x00	; 0
     428:	60 40       	sbci	r22, 0x00	; 0
     42a:	40 00       	.word	0x0040	; ????
     42c:	30 40       	sbci	r19, 0x00	; 0
     42e:	50 50       	subi	r21, 0x00	; 0
     430:	30 00       	.word	0x0030	; ????
     432:	50 50       	subi	r21, 0x00	; 0
     434:	70 50       	subi	r23, 0x00	; 0
     436:	50 00       	.word	0x0050	; ????
     438:	70 20       	and	r7, r0
     43a:	20 20       	and	r2, r0
     43c:	70 00       	.word	0x0070	; ????
     43e:	10 10       	cpse	r1, r0
     440:	10 50       	subi	r17, 0x00	; 0
     442:	20 00       	.word	0x0020	; ????
     444:	50 50       	subi	r21, 0x00	; 0
     446:	60 50       	subi	r22, 0x00	; 0
     448:	50 00       	.word	0x0050	; ????
     44a:	40 40       	sbci	r20, 0x00	; 0
     44c:	40 40       	sbci	r20, 0x00	; 0
     44e:	70 00       	.word	0x0070	; ????
     450:	50 70       	andi	r21, 0x00	; 0
     452:	70 50       	subi	r23, 0x00	; 0
     454:	50 00       	.word	0x0050	; ????
     456:	60 50       	subi	r22, 0x00	; 0
     458:	50 50       	subi	r21, 0x00	; 0
     45a:	50 00       	.word	0x0050	; ????
     45c:	70 50       	subi	r23, 0x00	; 0
     45e:	50 50       	subi	r21, 0x00	; 0
     460:	70 00       	.word	0x0070	; ????
     462:	60 50       	subi	r22, 0x00	; 0
     464:	60 40       	sbci	r22, 0x00	; 0
     466:	40 00       	.word	0x0040	; ????
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	50 70       	andi	r21, 0x00	; 0
     46c:	30 00       	.word	0x0030	; ????
     46e:	60 50       	subi	r22, 0x00	; 0
     470:	60 50       	subi	r22, 0x00	; 0
     472:	50 00       	.word	0x0050	; ????
     474:	30 40       	sbci	r19, 0x00	; 0
     476:	70 10       	cpse	r7, r0
     478:	60 00       	.word	0x0060	; ????
     47a:	70 20       	and	r7, r0
     47c:	20 20       	and	r2, r0
     47e:	20 00       	.word	0x0020	; ????
     480:	50 50       	subi	r21, 0x00	; 0
     482:	50 50       	subi	r21, 0x00	; 0
     484:	70 00       	.word	0x0070	; ????
     486:	50 50       	subi	r21, 0x00	; 0
     488:	50 50       	subi	r21, 0x00	; 0
     48a:	20 00       	.word	0x0020	; ????
     48c:	50 50       	subi	r21, 0x00	; 0
     48e:	70 70       	andi	r23, 0x00	; 0
     490:	50 00       	.word	0x0050	; ????
     492:	50 50       	subi	r21, 0x00	; 0
     494:	20 50       	subi	r18, 0x00	; 0
     496:	50 00       	.word	0x0050	; ????
     498:	50 50       	subi	r21, 0x00	; 0
     49a:	20 20       	and	r2, r0
     49c:	20 00       	.word	0x0020	; ????
     49e:	70 10       	cpse	r7, r0
     4a0:	20 40       	sbci	r18, 0x00	; 0
     4a2:	70 00       	.word	0x0070	; ????
     4a4:	60 40       	sbci	r22, 0x00	; 0
     4a6:	40 40       	sbci	r20, 0x00	; 0
     4a8:	60 00       	.word	0x0060	; ????
     4aa:	40 40       	sbci	r20, 0x00	; 0
     4ac:	20 10       	cpse	r2, r0
     4ae:	10 00       	.word	0x0010	; ????
     4b0:	60 20       	and	r6, r0
     4b2:	20 20       	and	r2, r0
     4b4:	60 00       	.word	0x0060	; ????
     4b6:	20 50       	subi	r18, 0x00	; 0
	...
     4c0:	00 f0       	brcs	.+0      	; 0x4c2 <__trampolines_end+0x240>
     4c2:	60 20       	and	r6, r0
     4c4:	00 00       	nop
     4c6:	00 00       	nop
     4c8:	00 00       	nop
     4ca:	30 50       	subi	r19, 0x00	; 0
     4cc:	70 00       	.word	0x0070	; ????
     4ce:	40 40       	sbci	r20, 0x00	; 0
     4d0:	60 50       	subi	r22, 0x00	; 0
     4d2:	60 00       	.word	0x0060	; ????
     4d4:	00 00       	nop
     4d6:	30 40       	sbci	r19, 0x00	; 0
     4d8:	30 00       	.word	0x0030	; ????
     4da:	10 10       	cpse	r1, r0
     4dc:	30 50       	subi	r19, 0x00	; 0
     4de:	30 00       	.word	0x0030	; ????
     4e0:	00 00       	nop
     4e2:	70 60       	ori	r23, 0x00	; 0
     4e4:	30 00       	.word	0x0030	; ????
     4e6:	10 20       	and	r1, r0
     4e8:	70 20       	and	r7, r0
     4ea:	20 00       	.word	0x0020	; ????
     4ec:	00 00       	nop
     4ee:	70 50       	subi	r23, 0x00	; 0
     4f0:	10 70       	andi	r17, 0x00	; 0
     4f2:	40 40       	sbci	r20, 0x00	; 0
     4f4:	60 50       	subi	r22, 0x00	; 0
     4f6:	50 00       	.word	0x0050	; ????
     4f8:	20 00       	.word	0x0020	; ????
     4fa:	20 20       	and	r2, r0
     4fc:	20 00       	.word	0x0020	; ????
     4fe:	20 00       	.word	0x0020	; ????
     500:	20 20       	and	r2, r0
     502:	20 60       	ori	r18, 0x00	; 0
     504:	40 40       	sbci	r20, 0x00	; 0
     506:	50 60       	ori	r21, 0x00	; 0
     508:	50 00       	.word	0x0050	; ????
     50a:	20 20       	and	r2, r0
     50c:	20 20       	and	r2, r0
     50e:	20 00       	.word	0x0020	; ????
     510:	00 00       	nop
     512:	70 70       	andi	r23, 0x00	; 0
     514:	50 00       	.word	0x0050	; ????
     516:	00 00       	nop
     518:	60 50       	subi	r22, 0x00	; 0
     51a:	50 00       	.word	0x0050	; ????
     51c:	00 00       	nop
     51e:	20 50       	subi	r18, 0x00	; 0
     520:	20 00       	.word	0x0020	; ????
     522:	00 00       	nop
     524:	60 50       	subi	r22, 0x00	; 0
     526:	60 40       	sbci	r22, 0x00	; 0
     528:	00 00       	nop
     52a:	30 50       	subi	r19, 0x00	; 0
     52c:	30 10       	cpse	r3, r0
     52e:	00 00       	nop
     530:	60 40       	sbci	r22, 0x00	; 0
     532:	40 00       	.word	0x0040	; ????
     534:	00 00       	nop
     536:	30 20       	and	r3, r0
     538:	60 00       	.word	0x0060	; ????
     53a:	00 20       	and	r0, r0
     53c:	70 20       	and	r7, r0
     53e:	30 00       	.word	0x0030	; ????
     540:	00 00       	nop
     542:	50 50       	subi	r21, 0x00	; 0
     544:	70 00       	.word	0x0070	; ????
     546:	00 00       	nop
     548:	50 50       	subi	r21, 0x00	; 0
     54a:	20 00       	.word	0x0020	; ????
     54c:	00 00       	nop
     54e:	50 70       	andi	r21, 0x00	; 0
     550:	70 00       	.word	0x0070	; ????
     552:	00 00       	nop
     554:	50 20       	and	r5, r0
     556:	50 00       	.word	0x0050	; ????
     558:	00 00       	nop
     55a:	50 50       	subi	r21, 0x00	; 0
     55c:	20 40       	sbci	r18, 0x00	; 0
     55e:	00 00       	nop
     560:	60 20       	and	r6, r0
     562:	30 00       	.word	0x0030	; ????
     564:	30 20       	and	r3, r0
     566:	60 20       	and	r6, r0
     568:	30 00       	.word	0x0030	; ????
     56a:	20 20       	and	r2, r0
     56c:	20 20       	and	r2, r0
     56e:	20 00       	.word	0x0020	; ????
     570:	60 20       	and	r6, r0
     572:	30 20       	and	r3, r0
     574:	60 00       	.word	0x0060	; ????
     576:	50 a0       	ldd	r5, Z+32	; 0x20
     578:	00 00       	nop
     57a:	00 00       	nop
     57c:	00 20       	and	r0, r0
     57e:	50 70       	andi	r21, 0x00	; 0
     580:	00 00       	nop
     582:	30 40       	sbci	r19, 0x00	; 0
     584:	40 70       	andi	r20, 0x00	; 0
     586:	20 40       	sbci	r18, 0x00	; 0
     588:	50 00       	.word	0x0050	; ????
     58a:	50 50       	subi	r21, 0x00	; 0
     58c:	30 00       	.word	0x0030	; ????
     58e:	10 20       	and	r1, r0
     590:	70 60       	ori	r23, 0x00	; 0
     592:	30 00       	.word	0x0030	; ????
     594:	20 50       	subi	r18, 0x00	; 0
     596:	30 50       	subi	r19, 0x00	; 0
     598:	70 00       	.word	0x0070	; ????
     59a:	50 00       	.word	0x0050	; ????
     59c:	30 50       	subi	r19, 0x00	; 0
     59e:	70 00       	.word	0x0070	; ????
     5a0:	40 20       	and	r4, r0
     5a2:	30 50       	subi	r19, 0x00	; 0
     5a4:	70 00       	.word	0x0070	; ????
     5a6:	20 00       	.word	0x0020	; ????
     5a8:	30 50       	subi	r19, 0x00	; 0
     5aa:	70 00       	.word	0x0070	; ????
     5ac:	00 70       	andi	r16, 0x00	; 0
     5ae:	40 70       	andi	r20, 0x00	; 0
     5b0:	20 60       	ori	r18, 0x00	; 0
     5b2:	20 50       	subi	r18, 0x00	; 0
     5b4:	70 60       	ori	r23, 0x00	; 0
     5b6:	30 00       	.word	0x0030	; ????
     5b8:	50 00       	.word	0x0050	; ????
     5ba:	70 60       	ori	r23, 0x00	; 0
     5bc:	30 00       	.word	0x0030	; ????
     5be:	40 20       	and	r4, r0
     5c0:	70 60       	ori	r23, 0x00	; 0
     5c2:	30 00       	.word	0x0030	; ????
     5c4:	50 00       	.word	0x0050	; ????
     5c6:	20 20       	and	r2, r0
     5c8:	20 00       	.word	0x0020	; ????
     5ca:	20 50       	subi	r18, 0x00	; 0
     5cc:	00 20       	and	r0, r0
     5ce:	20 00       	.word	0x0020	; ????
     5d0:	40 20       	and	r4, r0
     5d2:	00 20       	and	r0, r0
     5d4:	20 00       	.word	0x0020	; ????
     5d6:	50 20       	and	r5, r0
     5d8:	50 70       	andi	r21, 0x00	; 0
     5da:	50 00       	.word	0x0050	; ????
     5dc:	20 20       	and	r2, r0
     5de:	50 70       	andi	r21, 0x00	; 0
     5e0:	50 00       	.word	0x0050	; ????
     5e2:	10 20       	and	r1, r0
     5e4:	70 60       	ori	r23, 0x00	; 0
     5e6:	70 00       	.word	0x0070	; ????
     5e8:	00 00       	nop
     5ea:	30 70       	andi	r19, 0x00	; 0
     5ec:	60 00       	.word	0x0060	; ????
     5ee:	30 60       	ori	r19, 0x00	; 0
     5f0:	70 60       	ori	r23, 0x00	; 0
     5f2:	70 00       	.word	0x0070	; ????
     5f4:	20 50       	subi	r18, 0x00	; 0
     5f6:	20 50       	subi	r18, 0x00	; 0
     5f8:	20 00       	.word	0x0020	; ????
     5fa:	50 00       	.word	0x0050	; ????
     5fc:	20 50       	subi	r18, 0x00	; 0
     5fe:	20 00       	.word	0x0020	; ????
     600:	40 20       	and	r4, r0
     602:	20 50       	subi	r18, 0x00	; 0
     604:	20 00       	.word	0x0020	; ????
     606:	20 50       	subi	r18, 0x00	; 0
     608:	00 50       	subi	r16, 0x00	; 0
     60a:	70 00       	.word	0x0070	; ????
     60c:	40 20       	and	r4, r0
     60e:	50 50       	subi	r21, 0x00	; 0
     610:	70 00       	.word	0x0070	; ????
     612:	50 00       	.word	0x0050	; ????
     614:	50 50       	subi	r21, 0x00	; 0
     616:	20 40       	sbci	r18, 0x00	; 0
     618:	50 20       	and	r5, r0
     61a:	50 50       	subi	r21, 0x00	; 0
     61c:	20 00       	.word	0x0020	; ????
     61e:	50 00       	.word	0x0050	; ????
     620:	50 50       	subi	r21, 0x00	; 0
     622:	70 00       	.word	0x0070	; ????
     624:	20 70       	andi	r18, 0x00	; 0
     626:	40 70       	andi	r20, 0x00	; 0
     628:	20 00       	.word	0x0020	; ????
     62a:	10 20       	and	r1, r0
     62c:	70 20       	and	r7, r0
     62e:	70 00       	.word	0x0070	; ????
     630:	50 70       	andi	r21, 0x00	; 0
     632:	20 70       	andi	r18, 0x00	; 0
     634:	20 00       	.word	0x0020	; ????
     636:	00 60       	ori	r16, 0x00	; 0
     638:	60 50       	subi	r22, 0x00	; 0
     63a:	50 00       	.word	0x0050	; ????
     63c:	30 20       	and	r3, r0
     63e:	30 20       	and	r3, r0
     640:	60 00       	.word	0x0060	; ????
     642:	10 20       	and	r1, r0
     644:	30 50       	subi	r19, 0x00	; 0
     646:	70 00       	.word	0x0070	; ????
     648:	10 20       	and	r1, r0
     64a:	00 20       	and	r0, r0
     64c:	20 00       	.word	0x0020	; ????
     64e:	10 20       	and	r1, r0
     650:	70 50       	subi	r23, 0x00	; 0
     652:	70 00       	.word	0x0070	; ????
     654:	10 20       	and	r1, r0
     656:	00 50       	subi	r16, 0x00	; 0
     658:	70 00       	.word	0x0070	; ????
     65a:	70 00       	.word	0x0070	; ????
     65c:	70 50       	subi	r23, 0x00	; 0
     65e:	50 00       	.word	0x0050	; ????
     660:	70 00       	.word	0x0070	; ????
     662:	50 70       	andi	r21, 0x00	; 0
     664:	50 00       	.word	0x0050	; ????
     666:	30 50       	subi	r19, 0x00	; 0
     668:	70 00       	.word	0x0070	; ????
     66a:	70 00       	.word	0x0070	; ????
     66c:	20 50       	subi	r18, 0x00	; 0
     66e:	20 00       	.word	0x0020	; ????
     670:	70 00       	.word	0x0070	; ????
     672:	20 00       	.word	0x0020	; ????
     674:	20 40       	sbci	r18, 0x00	; 0
     676:	30 00       	.word	0x0030	; ????
     678:	00 70       	andi	r16, 0x00	; 0
     67a:	40 40       	sbci	r20, 0x00	; 0
     67c:	00 00       	nop
     67e:	00 e0       	ldi	r16, 0x00	; 0
     680:	20 20       	and	r2, r0
     682:	00 00       	nop
     684:	40 50       	subi	r20, 0x00	; 0
     686:	20 50       	subi	r18, 0x00	; 0
     688:	30 00       	.word	0x0030	; ????
     68a:	40 50       	subi	r20, 0x00	; 0
     68c:	20 70       	andi	r18, 0x00	; 0
     68e:	10 00       	.word	0x0010	; ????
     690:	20 00       	.word	0x0020	; ????
     692:	20 20       	and	r2, r0
     694:	20 00       	.word	0x0020	; ????
     696:	00 50       	subi	r16, 0x00	; 0
     698:	a0 50       	subi	r26, 0x00	; 0
     69a:	00 00       	nop
     69c:	00 a0       	ldd	r0, Z+32	; 0x20
     69e:	50 a0       	ldd	r5, Z+32	; 0x20
     6a0:	00 00       	nop
     6a2:	40 10       	cpse	r4, r0
     6a4:	40 10       	cpse	r4, r0
     6a6:	40 10       	cpse	r4, r0
     6a8:	50 a0       	ldd	r5, Z+32	; 0x20
     6aa:	50 a0       	ldd	r5, Z+32	; 0x20
     6ac:	50 a0       	ldd	r5, Z+32	; 0x20
     6ae:	b0 e0       	ldi	r27, 0x00	; 0
     6b0:	b0 e0       	ldi	r27, 0x00	; 0
     6b2:	b0 e0       	ldi	r27, 0x00	; 0
     6b4:	20 20       	and	r2, r0
     6b6:	20 20       	and	r2, r0
     6b8:	20 20       	and	r2, r0
     6ba:	20 20       	and	r2, r0
     6bc:	e0 20       	and	r14, r0
     6be:	20 20       	and	r2, r0
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	20 20       	and	r2, r0
     6c6:	50 50       	subi	r21, 0x00	; 0
     6c8:	d0 50       	subi	r29, 0x00	; 0
     6ca:	50 50       	subi	r21, 0x00	; 0
     6cc:	00 00       	nop
     6ce:	f0 50       	subi	r31, 0x00	; 0
     6d0:	50 50       	subi	r21, 0x00	; 0
     6d2:	00 e0       	ldi	r16, 0x00	; 0
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	20 20       	and	r2, r0
     6d8:	50 d0       	rcall	.+160    	; 0x77a <__trampolines_end+0x4f8>
     6da:	10 d0       	rcall	.+32     	; 0x6fc <__trampolines_end+0x47a>
     6dc:	50 50       	subi	r21, 0x00	; 0
     6de:	50 50       	subi	r21, 0x00	; 0
     6e0:	50 50       	subi	r21, 0x00	; 0
     6e2:	50 50       	subi	r21, 0x00	; 0
     6e4:	00 f0       	brcs	.+0      	; 0x6e6 <__trampolines_end+0x464>
     6e6:	10 d0       	rcall	.+32     	; 0x708 <__trampolines_end+0x486>
     6e8:	50 50       	subi	r21, 0x00	; 0
     6ea:	50 d0       	rcall	.+160    	; 0x78c <__trampolines_end+0x50a>
     6ec:	10 f0       	brcs	.+4      	; 0x6f2 <__trampolines_end+0x470>
     6ee:	00 00       	nop
     6f0:	50 50       	subi	r21, 0x00	; 0
     6f2:	f0 00       	.word	0x00f0	; ????
     6f4:	00 00       	nop
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	00 00       	nop
     6fc:	00 00       	nop
     6fe:	e0 20       	and	r14, r0
     700:	20 20       	and	r2, r0
     702:	20 20       	and	r2, r0
     704:	30 00       	.word	0x0030	; ????
     706:	00 00       	nop
     708:	20 20       	and	r2, r0
     70a:	f0 00       	.word	0x00f0	; ????
     70c:	00 00       	nop
     70e:	00 00       	nop
     710:	f0 20       	and	r15, r0
     712:	20 20       	and	r2, r0
     714:	20 20       	and	r2, r0
     716:	30 20       	and	r3, r0
     718:	20 20       	and	r2, r0
     71a:	00 00       	nop
     71c:	f0 00       	.word	0x00f0	; ????
     71e:	00 00       	nop
     720:	20 20       	and	r2, r0
     722:	f0 20       	and	r15, r0
     724:	20 20       	and	r2, r0
     726:	20 30       	cpi	r18, 0x00	; 0
     728:	20 30       	cpi	r18, 0x00	; 0
     72a:	20 20       	and	r2, r0
     72c:	50 50       	subi	r21, 0x00	; 0
     72e:	50 50       	subi	r21, 0x00	; 0
     730:	50 50       	subi	r21, 0x00	; 0
     732:	50 50       	subi	r21, 0x00	; 0
     734:	40 70       	andi	r20, 0x00	; 0
     736:	00 00       	nop
     738:	00 70       	andi	r16, 0x00	; 0
     73a:	40 50       	subi	r20, 0x00	; 0
     73c:	50 50       	subi	r21, 0x00	; 0
     73e:	50 d0       	rcall	.+160    	; 0x7e0 <__trampolines_end+0x55e>
     740:	00 f0       	brcs	.+0      	; 0x742 <__trampolines_end+0x4c0>
     742:	00 00       	nop
     744:	00 f0       	brcs	.+0      	; 0x746 <__trampolines_end+0x4c4>
     746:	00 d0       	rcall	.+0      	; 0x748 <__trampolines_end+0x4c6>
     748:	50 50       	subi	r21, 0x00	; 0
     74a:	50 50       	subi	r21, 0x00	; 0
     74c:	40 50       	subi	r20, 0x00	; 0
     74e:	50 50       	subi	r21, 0x00	; 0
     750:	00 f0       	brcs	.+0      	; 0x752 <__trampolines_end+0x4d0>
     752:	00 f0       	brcs	.+0      	; 0x754 <__trampolines_end+0x4d2>
     754:	00 00       	nop
     756:	50 d0       	rcall	.+160    	; 0x7f8 <__trampolines_end+0x576>
     758:	00 d0       	rcall	.+0      	; 0x75a <__trampolines_end+0x4d8>
     75a:	50 50       	subi	r21, 0x00	; 0
     75c:	20 f0       	brcs	.+8      	; 0x766 <__trampolines_end+0x4e4>
     75e:	00 f0       	brcs	.+0      	; 0x760 <__trampolines_end+0x4de>
     760:	00 00       	nop
     762:	50 50       	subi	r21, 0x00	; 0
     764:	f0 00       	.word	0x00f0	; ????
     766:	00 00       	nop
     768:	00 f0       	brcs	.+0      	; 0x76a <__trampolines_end+0x4e8>
     76a:	00 f0       	brcs	.+0      	; 0x76c <__trampolines_end+0x4ea>
     76c:	20 20       	and	r2, r0
     76e:	00 00       	nop
     770:	f0 50       	subi	r31, 0x00	; 0
     772:	50 50       	subi	r21, 0x00	; 0
     774:	50 50       	subi	r21, 0x00	; 0
     776:	70 00       	.word	0x0070	; ????
     778:	00 00       	nop
     77a:	20 30       	cpi	r18, 0x00	; 0
     77c:	20 30       	cpi	r18, 0x00	; 0
     77e:	00 00       	nop
     780:	00 30       	cpi	r16, 0x00	; 0
     782:	20 30       	cpi	r18, 0x00	; 0
     784:	20 20       	and	r2, r0
     786:	00 00       	nop
     788:	70 50       	subi	r23, 0x00	; 0
     78a:	50 50       	subi	r21, 0x00	; 0
     78c:	50 50       	subi	r21, 0x00	; 0
     78e:	d0 50       	subi	r29, 0x00	; 0
     790:	50 50       	subi	r21, 0x00	; 0
     792:	20 f0       	brcs	.+8      	; 0x79c <__trampolines_end+0x51a>
     794:	00 f0       	brcs	.+0      	; 0x796 <__trampolines_end+0x514>
     796:	20 20       	and	r2, r0
     798:	20 20       	and	r2, r0
     79a:	e0 00       	.word	0x00e0	; ????
     79c:	00 00       	nop
     79e:	00 00       	nop
     7a0:	30 20       	and	r3, r0
     7a2:	20 20       	and	r2, r0
     7a4:	f0 f0       	brcs	.+60     	; 0x7e2 <__trampolines_end+0x560>
     7a6:	f0 f0       	brcs	.+60     	; 0x7e4 <__trampolines_end+0x562>
     7a8:	f0 f0       	brcs	.+60     	; 0x7e6 <__trampolines_end+0x564>
     7aa:	00 00       	nop
     7ac:	00 f0       	brcs	.+0      	; 0x7ae <__trampolines_end+0x52c>
     7ae:	f0 f0       	brcs	.+60     	; 0x7ec <__trampolines_end+0x56a>
     7b0:	c0 c0       	rjmp	.+384    	; 0x932 <font_5x7+0xb0>
     7b2:	c0 c0       	rjmp	.+384    	; 0x934 <font_5x7+0xb2>
     7b4:	c0 c0       	rjmp	.+384    	; 0x936 <font_5x7+0xb4>
     7b6:	30 30       	cpi	r19, 0x00	; 0
     7b8:	30 30       	cpi	r19, 0x00	; 0
     7ba:	30 30       	cpi	r19, 0x00	; 0
     7bc:	f0 f0       	brcs	.+60     	; 0x7fa <__trampolines_end+0x578>
     7be:	f0 00       	.word	0x00f0	; ????
     7c0:	00 00       	nop
     7c2:	00 00       	nop
     7c4:	70 60       	ori	r23, 0x00	; 0
     7c6:	70 00       	.word	0x0070	; ????
     7c8:	20 50       	subi	r18, 0x00	; 0
     7ca:	60 50       	subi	r22, 0x00	; 0
     7cc:	60 40       	sbci	r22, 0x00	; 0
     7ce:	70 50       	subi	r23, 0x00	; 0
     7d0:	40 40       	sbci	r20, 0x00	; 0
     7d2:	40 00       	.word	0x0040	; ????
     7d4:	70 50       	subi	r23, 0x00	; 0
     7d6:	50 50       	subi	r21, 0x00	; 0
     7d8:	50 00       	.word	0x0050	; ????
     7da:	70 40       	sbci	r23, 0x00	; 0
     7dc:	20 40       	sbci	r18, 0x00	; 0
     7de:	70 00       	.word	0x0070	; ????
     7e0:	00 00       	nop
     7e2:	30 50       	subi	r19, 0x00	; 0
     7e4:	20 00       	.word	0x0020	; ????
     7e6:	00 00       	nop
     7e8:	50 50       	subi	r21, 0x00	; 0
     7ea:	70 40       	sbci	r23, 0x00	; 0
     7ec:	00 10       	cpse	r0, r0
     7ee:	60 20       	and	r6, r0
     7f0:	20 00       	.word	0x0020	; ????
     7f2:	70 20       	and	r7, r0
     7f4:	50 20       	and	r5, r0
     7f6:	70 00       	.word	0x0070	; ????
     7f8:	20 50       	subi	r18, 0x00	; 0
     7fa:	70 50       	subi	r23, 0x00	; 0
     7fc:	20 00       	.word	0x0020	; ????
     7fe:	00 20       	and	r0, r0
     800:	50 50       	subi	r21, 0x00	; 0
     802:	50 00       	.word	0x0050	; ????
     804:	30 40       	sbci	r19, 0x00	; 0
     806:	20 50       	subi	r18, 0x00	; 0
     808:	20 00       	.word	0x0020	; ????
     80a:	00 00       	nop
     80c:	70 50       	subi	r23, 0x00	; 0
     80e:	70 00       	.word	0x0070	; ????
     810:	20 70       	andi	r18, 0x00	; 0
     812:	50 70       	andi	r21, 0x00	; 0
     814:	20 00       	.word	0x0020	; ????
     816:	30 40       	sbci	r19, 0x00	; 0
     818:	70 40       	sbci	r23, 0x00	; 0
     81a:	30 00       	.word	0x0030	; ????
     81c:	20 50       	subi	r18, 0x00	; 0
     81e:	50 50       	subi	r21, 0x00	; 0
     820:	50 00       	.word	0x0050	; ????
     822:	70 00       	.word	0x0070	; ????
     824:	70 00       	.word	0x0070	; ????
     826:	70 00       	.word	0x0070	; ????
     828:	20 70       	andi	r18, 0x00	; 0
     82a:	20 00       	.word	0x0020	; ????
     82c:	70 00       	.word	0x0070	; ????
     82e:	60 10       	cpse	r6, r0
     830:	60 00       	.word	0x0060	; ????
     832:	70 00       	.word	0x0070	; ????
     834:	30 40       	sbci	r19, 0x00	; 0
     836:	30 00       	.word	0x0030	; ????
     838:	70 00       	.word	0x0070	; ????
     83a:	00 10       	cpse	r0, r0
     83c:	20 20       	and	r2, r0
     83e:	20 20       	and	r2, r0
     840:	20 20       	and	r2, r0
     842:	20 20       	and	r2, r0
     844:	40 00       	.word	0x0040	; ????
     846:	20 00       	.word	0x0020	; ????
     848:	70 00       	.word	0x0070	; ????
     84a:	20 00       	.word	0x0020	; ????
     84c:	00 50       	subi	r16, 0x00	; 0
     84e:	a0 50       	subi	r26, 0x00	; 0
     850:	a0 00       	.word	0x00a0	; ????
     852:	20 50       	subi	r18, 0x00	; 0
     854:	20 00       	.word	0x0020	; ????
     856:	00 00       	nop
     858:	00 20       	and	r0, r0
     85a:	70 20       	and	r7, r0
     85c:	00 00       	nop
     85e:	00 00       	nop
     860:	20 00       	.word	0x0020	; ????
     862:	00 00       	nop
     864:	30 20       	and	r3, r0
     866:	20 60       	ori	r18, 0x00	; 0
     868:	20 00       	.word	0x0020	; ????
     86a:	70 50       	subi	r23, 0x00	; 0
     86c:	50 00       	.word	0x0050	; ????
     86e:	00 00       	nop
     870:	60 20       	and	r6, r0
     872:	40 60       	ori	r20, 0x00	; 0
     874:	00 00       	nop
     876:	00 00       	nop
     878:	60 60       	ori	r22, 0x00	; 0
	...

00000882 <font_5x7>:
     882:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     892:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     8a2:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     8b2:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     8c2:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     8d2:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     8e2:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     8f2:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     902:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     912:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     922:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     932:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     942:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     952:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     962:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     972:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     982:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     992:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     9a2:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     9b2:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     9c2:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     9d2:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     9e2:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     9f2:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     a02:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     a12:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     a22:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     a32:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     a42:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     a52:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     a62:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     a72:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     a82:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     a92:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     aa2:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     ab2:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     ac2:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     ad2:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     ae2:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     af2:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     b02:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     b12:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
     b22:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     b32:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     b42:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
     b52:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     b62:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
     b72:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
     b82:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
     b92:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     ba2:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     bb2:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     bc2:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     bd2:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     be2:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     bf2:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
     c02:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
     c12:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
     c22:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
     c32:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
     c42:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
     c52:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
     c62:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
     c72:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
     c82:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
     c92:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
     ca2:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
     cb2:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
     cc2:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
     cd2:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
     ce2:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
     cf2:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
     d02:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
     d12:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
     d22:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
     d32:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
     d42:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
     d52:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
     d62:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
     d72:	12 00 3c 3c 3c 3c 00 00 00 00 00 00                 ..<<<<......

00000d7e <_StackPaint>:
 *  the maximum stack usage of the running application.
 */
void _StackPaint(void) __attribute__((naked)) __attribute__((optimize("O3"))) __attribute__((section (".init1")));
void _StackPaint(void)
{
	uint32_t* fill_start = (uint32_t*)__ALIGN32_UPWARDS(&_end);
     d7e:	e6 e6       	ldi	r30, 0x66	; 102
     d80:	f7 e2       	ldi	r31, 0x27	; 39
     d82:	e3 70       	andi	r30, 0x03	; 3
     d84:	ff 27       	eor	r31, r31
     d86:	ea 59       	subi	r30, 0x9A	; 154
     d88:	f8 4d       	sbci	r31, 0xD8	; 216
	uint32_t* fill_end   = (uint32_t*)__ALIGN32_DOWNWARDS(&__stack);
     d8a:	2f ef       	ldi	r18, 0xFF	; 255
     d8c:	3f e2       	ldi	r19, 0x2F	; 47
     d8e:	2c 7f       	andi	r18, 0xFC	; 252
	
	for (uint32_t* fill_pos = fill_start; fill_pos < fill_end; fill_pos++)
     d90:	e2 17       	cp	r30, r18
     d92:	f3 07       	cpc	r31, r19
     d94:	58 f4       	brcc	.+22     	; 0xdac <_StackPaint+0x2e>
		*fill_pos = __SWAP_ENDIAN32(0xDEADBEEF);
     d96:	8e ed       	ldi	r24, 0xDE	; 222
     d98:	9d ea       	ldi	r25, 0xAD	; 173
     d9a:	ae eb       	ldi	r26, 0xBE	; 190
     d9c:	bf ee       	ldi	r27, 0xEF	; 239
     d9e:	81 93       	st	Z+, r24
     da0:	91 93       	st	Z+, r25
     da2:	a1 93       	st	Z+, r26
     da4:	b1 93       	st	Z+, r27
void _StackPaint(void)
{
	uint32_t* fill_start = (uint32_t*)__ALIGN32_UPWARDS(&_end);
	uint32_t* fill_end   = (uint32_t*)__ALIGN32_DOWNWARDS(&__stack);
	
	for (uint32_t* fill_pos = fill_start; fill_pos < fill_end; fill_pos++)
     da6:	e2 17       	cp	r30, r18
     da8:	f3 07       	cpc	r31, r19
     daa:	c8 f3       	brcs	.-14     	; 0xd9e <_StackPaint+0x20>
     dac:	11 24       	eor	r1, r1
     dae:	1f be       	out	0x3f, r1	; 63
     db0:	cf ef       	ldi	r28, 0xFF	; 255
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	df e2       	ldi	r29, 0x2F	; 47
     db6:	de bf       	out	0x3e, r29	; 62

00000db8 <__do_copy_data>:
     db8:	14 e2       	ldi	r17, 0x24	; 36
     dba:	a0 e0       	ldi	r26, 0x00	; 0
     dbc:	b0 e2       	ldi	r27, 0x20	; 32
     dbe:	ea e7       	ldi	r30, 0x7A	; 122
     dc0:	fb e6       	ldi	r31, 0x6B	; 107
     dc2:	00 e0       	ldi	r16, 0x00	; 0
     dc4:	0b bf       	out	0x3b, r16	; 59
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <__do_copy_data+0x14>
     dc8:	07 90       	elpm	r0, Z+
     dca:	0d 92       	st	X+, r0
     dcc:	a4 34       	cpi	r26, 0x44	; 68
     dce:	b1 07       	cpc	r27, r17
     dd0:	d9 f7       	brne	.-10     	; 0xdc8 <__do_copy_data+0x10>

00000dd2 <__do_clear_bss>:
     dd2:	27 e2       	ldi	r18, 0x27	; 39
     dd4:	a4 e4       	ldi	r26, 0x44	; 68
     dd6:	b4 e2       	ldi	r27, 0x24	; 36
     dd8:	01 c0       	rjmp	.+2      	; 0xddc <.do_clear_bss_start>

00000dda <.do_clear_bss_loop>:
     dda:	1d 92       	st	X+, r1

00000ddc <.do_clear_bss_start>:
     ddc:	a6 36       	cpi	r26, 0x66	; 102
     dde:	b2 07       	cpc	r27, r18
     de0:	e1 f7       	brne	.-8      	; 0xdda <.do_clear_bss_loop>
     de2:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <main>
     de6:	0c 94 bb 35 	jmp	0x6b76	; 0x6b76 <_exit>

00000dea <__bad_interrupt>:
     dea:	0a c9       	rjmp	.-3564   	; 0x0 <__vectors>

00000dec <clock_setup_32_mhz>:
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
}

void clock_setup_32_mhz(void) {
	
	OSC.CTRL |= OSC_RC32MEN_bm;
     dec:	e0 e5       	ldi	r30, 0x50	; 80
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	82 60       	ori	r24, 0x02	; 2
     df4:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
     df6:	81 81       	ldd	r24, Z+1	; 0x01
     df8:	81 ff       	sbrs	r24, 1
     dfa:	fd cf       	rjmp	.-6      	; 0xdf6 <clock_setup_32_mhz+0xa>
	CCP = CCP_IOREG_gc;
     dfc:	88 ed       	ldi	r24, 0xD8	; 216
     dfe:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	80 93 40 00 	sts	0x0040, r24
     e06:	08 95       	ret

00000e08 <__vector_6>:
}
*/

//! DMA CH0 Interrupt service routine. Clear interrupt flags after check. 
ISR(DMA_CH0_vect)
{
     e08:	1f 92       	push	r1
     e0a:	0f 92       	push	r0
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	0f 92       	push	r0
     e10:	11 24       	eor	r1, r1
     e12:	0b b6       	in	r0, 0x3b	; 59
     e14:	0f 92       	push	r0
     e16:	8f 93       	push	r24
     e18:	ef 93       	push	r30
     e1a:	ff 93       	push	r31
	if (DMA.CH0.CTRLB & DMA_CH_ERRIF_bm) {
     e1c:	e0 e0       	ldi	r30, 0x00	; 0
     e1e:	f1 e0       	ldi	r31, 0x01	; 1
     e20:	81 89       	ldd	r24, Z+17	; 0x11
     e22:	85 ff       	sbrs	r24, 5
     e24:	06 c0       	rjmp	.+12     	; 0xe32 <__vector_6+0x2a>
		DMA.CH0.CTRLB |= DMA_CH_ERRIF_bm;
     e26:	81 89       	ldd	r24, Z+17	; 0x11
     e28:	80 62       	ori	r24, 0x20	; 32
     e2a:	81 8b       	std	Z+17, r24	; 0x11
		gStatus = false;
     e2c:	10 92 42 26 	sts	0x2642, r1
     e30:	08 c0       	rjmp	.+16     	; 0xe42 <__vector_6+0x3a>
	} else {
		DMA.CH0.CTRLB |= DMA_CH_TRNIF_bm;
     e32:	e0 e0       	ldi	r30, 0x00	; 0
     e34:	f1 e0       	ldi	r31, 0x01	; 1
     e36:	81 89       	ldd	r24, Z+17	; 0x11
     e38:	80 61       	ori	r24, 0x10	; 16
     e3a:	81 8b       	std	Z+17, r24	; 0x11
		gStatus = true;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	80 93 42 26 	sts	0x2642, r24
	}
	gInterruptDone = true;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	80 93 43 26 	sts	0x2643, r24
}
     e48:	ff 91       	pop	r31
     e4a:	ef 91       	pop	r30
     e4c:	8f 91       	pop	r24
     e4e:	0f 90       	pop	r0
     e50:	0b be       	out	0x3b, r0	; 59
     e52:	0f 90       	pop	r0
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	0f 90       	pop	r0
     e58:	1f 90       	pop	r1
     e5a:	18 95       	reti

00000e5c <EEPROM_WaitForNVM>:
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
	NVM_EXEC();
}
     e5c:	e0 ec       	ldi	r30, 0xC0	; 192
     e5e:	f1 e0       	ldi	r31, 0x01	; 1
     e60:	87 85       	ldd	r24, Z+15	; 0x0f
     e62:	88 23       	and	r24, r24
     e64:	ec f3       	brlt	.-6      	; 0xe60 <EEPROM_WaitForNVM+0x4>
     e66:	08 95       	ret

00000e68 <EEPROM_FlushBuffer>:
     e68:	f9 df       	rcall	.-14     	; 0xe5c <EEPROM_WaitForNVM>
     e6a:	e0 ec       	ldi	r30, 0xC0	; 192
     e6c:	f1 e0       	ldi	r31, 0x01	; 1
     e6e:	87 85       	ldd	r24, Z+15	; 0x0f
     e70:	81 ff       	sbrs	r24, 1
     e72:	10 c0       	rjmp	.+32     	; 0xe94 <EEPROM_FlushBuffer+0x2c>
     e74:	86 e3       	ldi	r24, 0x36	; 54
     e76:	82 87       	std	Z+10, r24	; 0x0a
     e78:	ef 93       	push	r30
     e7a:	ff 93       	push	r31
     e7c:	0f 93       	push	r16
     e7e:	2f 93       	push	r18
     e80:	eb ec       	ldi	r30, 0xCB	; 203
     e82:	f1 e0       	ldi	r31, 0x01	; 1
     e84:	08 ed       	ldi	r16, 0xD8	; 216
     e86:	21 e0       	ldi	r18, 0x01	; 1
     e88:	04 bf       	out	0x34, r16	; 52
     e8a:	20 83       	st	Z, r18
     e8c:	2f 91       	pop	r18
     e8e:	0f 91       	pop	r16
     e90:	ff 91       	pop	r31
     e92:	ef 91       	pop	r30
     e94:	08 95       	ret

00000e96 <EEPROM_WriteByte>:
     e96:	1f 93       	push	r17
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	18 2f       	mov	r17, r24
     e9e:	d6 2f       	mov	r29, r22
     ea0:	c4 2f       	mov	r28, r20
     ea2:	e2 df       	rcall	.-60     	; 0xe68 <EEPROM_FlushBuffer>
     ea4:	e0 ec       	ldi	r30, 0xC0	; 192
     ea6:	f1 e0       	ldi	r31, 0x01	; 1
     ea8:	83 e3       	ldi	r24, 0x33	; 51
     eaa:	82 87       	std	Z+10, r24	; 0x0a
     eac:	20 e2       	ldi	r18, 0x20	; 32
     eae:	12 9f       	mul	r17, r18
     eb0:	c0 01       	movw	r24, r0
     eb2:	11 24       	eor	r1, r1
     eb4:	df 71       	andi	r29, 0x1F	; 31
     eb6:	8d 2b       	or	r24, r29
     eb8:	80 83       	st	Z, r24
     eba:	89 2f       	mov	r24, r25
     ebc:	8f 71       	andi	r24, 0x1F	; 31
     ebe:	81 83       	std	Z+1, r24	; 0x01
     ec0:	12 82       	std	Z+2, r1	; 0x02
     ec2:	c4 83       	std	Z+4, r28	; 0x04
     ec4:	85 e3       	ldi	r24, 0x35	; 53
     ec6:	82 87       	std	Z+10, r24	; 0x0a
     ec8:	ef 93       	push	r30
     eca:	ff 93       	push	r31
     ecc:	0f 93       	push	r16
     ece:	2f 93       	push	r18
     ed0:	eb ec       	ldi	r30, 0xCB	; 203
     ed2:	f1 e0       	ldi	r31, 0x01	; 1
     ed4:	08 ed       	ldi	r16, 0xD8	; 216
     ed6:	21 e0       	ldi	r18, 0x01	; 1
     ed8:	04 bf       	out	0x34, r16	; 52
     eda:	20 83       	st	Z, r18
     edc:	2f 91       	pop	r18
     ede:	0f 91       	pop	r16
     ee0:	ff 91       	pop	r31
     ee2:	ef 91       	pop	r30
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	08 95       	ret

00000eec <EEPROM_EraseAll>:
 *  This function erases the entire EEPROM memory block to 0xFF.
 */
void EEPROM_EraseAll( void )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
     eec:	b7 df       	rcall	.-146    	; 0xe5c <EEPROM_WaitForNVM>

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
     eee:	80 e3       	ldi	r24, 0x30	; 48
     ef0:	e0 ec       	ldi	r30, 0xC0	; 192
     ef2:	f1 e0       	ldi	r31, 0x01	; 1
     ef4:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
     ef6:	ef 93       	push	r30
     ef8:	ff 93       	push	r31
     efa:	0f 93       	push	r16
     efc:	2f 93       	push	r18
     efe:	eb ec       	ldi	r30, 0xCB	; 203
     f00:	f1 e0       	ldi	r31, 0x01	; 1
     f02:	08 ed       	ldi	r16, 0xD8	; 216
     f04:	21 e0       	ldi	r18, 0x01	; 1
     f06:	04 bf       	out	0x34, r16	; 52
     f08:	20 83       	st	Z, r18
     f0a:	2f 91       	pop	r18
     f0c:	0f 91       	pop	r16
     f0e:	ff 91       	pop	r31
     f10:	ef 91       	pop	r30
     f12:	08 95       	ret

00000f14 <EEPROM_WriteEnv>:
}

uint8_t EEPROM_WriteEnv(void) {
     f14:	af 92       	push	r10
     f16:	bf 92       	push	r11
     f18:	cf 92       	push	r12
     f1a:	df 92       	push	r13
     f1c:	ef 92       	push	r14
     f1e:	ff 92       	push	r15
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	cf 55       	subi	r28, 0x5F	; 95
     f2e:	d1 09       	sbc	r29, r1
     f30:	cd bf       	out	0x3d, r28	; 61
     f32:	de bf       	out	0x3e, r29	; 62
	
	uint8_t b[sizeof(env_var)];
	uint16_t page_addr;
	uint8_t page;
	
	EEPROM_FlushBuffer();
     f34:	99 df       	rcall	.-206    	; 0xe68 <EEPROM_FlushBuffer>
	EEPROM_DisableMapping();
     f36:	e0 ec       	ldi	r30, 0xC0	; 192
     f38:	f1 e0       	ldi	r31, 0x01	; 1
     f3a:	84 85       	ldd	r24, Z+12	; 0x0c
     f3c:	87 7f       	andi	r24, 0xF7	; 247
     f3e:	84 87       	std	Z+12, r24	; 0x0c
	memcpy(b, &env_var, sizeof(env_var));
     f40:	8f e5       	ldi	r24, 0x5F	; 95
     f42:	ef e7       	ldi	r30, 0x7F	; 127
     f44:	f5 e2       	ldi	r31, 0x25	; 37
     f46:	9e 01       	movw	r18, r28
     f48:	2f 5f       	subi	r18, 0xFF	; 255
     f4a:	3f 4f       	sbci	r19, 0xFF	; 255
     f4c:	d9 01       	movw	r26, r18
     f4e:	01 90       	ld	r0, Z+
     f50:	0d 92       	st	X+, r0
     f52:	8a 95       	dec	r24
     f54:	e1 f7       	brne	.-8      	; 0xf4e <EEPROM_WriteEnv+0x3a>
     f56:	69 01       	movw	r12, r18
     f58:	a1 2c       	mov	r10, r1
     f5a:	79 01       	movw	r14, r18
     f5c:	e0 94       	com	r14
     f5e:	f0 94       	com	r15
     f60:	17 c0       	rjmp	.+46     	; 0xf90 <EEPROM_WriteEnv+0x7c>
	
	for(page_addr = 0; page_addr < (sizeof(env_var)/EEPROM_PAGE_SIZE) + 1; page_addr += 1) {
		for(page = 0; page < EEPROM_PAGE_SIZE; page++) {
			EEPROM_WriteByte(page_addr,page,b[page+(page_addr*EEPROM_PAGE_SIZE)]);
     f62:	f8 01       	movw	r30, r16
     f64:	41 91       	ld	r20, Z+
     f66:	8f 01       	movw	r16, r30
     f68:	6b 2d       	mov	r22, r11
     f6a:	8a 2d       	mov	r24, r10
     f6c:	94 df       	rcall	.-216    	; 0xe96 <EEPROM_WriteByte>
     f6e:	97 01       	movw	r18, r14
     f70:	20 0f       	add	r18, r16
     f72:	31 1f       	adc	r19, r17
			if (page+(page_addr*EEPROM_PAGE_SIZE) >= sizeof(env_var)) {
     f74:	2f 35       	cpi	r18, 0x5F	; 95
     f76:	31 05       	cpc	r19, r1
     f78:	20 f4       	brcc	.+8      	; 0xf82 <EEPROM_WriteEnv+0x6e>
	EEPROM_FlushBuffer();
	EEPROM_DisableMapping();
	memcpy(b, &env_var, sizeof(env_var));
	
	for(page_addr = 0; page_addr < (sizeof(env_var)/EEPROM_PAGE_SIZE) + 1; page_addr += 1) {
		for(page = 0; page < EEPROM_PAGE_SIZE; page++) {
     f7a:	b3 94       	inc	r11
     f7c:	f0 e2       	ldi	r31, 0x20	; 32
     f7e:	bf 12       	cpse	r11, r31
     f80:	f0 cf       	rjmp	.-32     	; 0xf62 <EEPROM_WriteEnv+0x4e>
     f82:	80 e2       	ldi	r24, 0x20	; 32
     f84:	c8 0e       	add	r12, r24
     f86:	d1 1c       	adc	r13, r1
     f88:	a3 94       	inc	r10
	
	EEPROM_FlushBuffer();
	EEPROM_DisableMapping();
	memcpy(b, &env_var, sizeof(env_var));
	
	for(page_addr = 0; page_addr < (sizeof(env_var)/EEPROM_PAGE_SIZE) + 1; page_addr += 1) {
     f8a:	e3 e0       	ldi	r30, 0x03	; 3
     f8c:	ae 16       	cp	r10, r30
     f8e:	19 f0       	breq	.+6      	; 0xf96 <EEPROM_WriteEnv+0x82>
	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
	NVM_EXEC();
}

uint8_t EEPROM_WriteEnv(void) {
     f90:	86 01       	movw	r16, r12
     f92:	b1 2c       	mov	r11, r1
     f94:	e6 cf       	rjmp	.-52     	; 0xf62 <EEPROM_WriteEnv+0x4e>
			}
		}
	}
	
	return 1;
}
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	c1 5a       	subi	r28, 0xA1	; 161
     f9a:	df 4f       	sbci	r29, 0xFF	; 255
     f9c:	cd bf       	out	0x3d, r28	; 61
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	df 91       	pop	r29
     fa2:	cf 91       	pop	r28
     fa4:	1f 91       	pop	r17
     fa6:	0f 91       	pop	r16
     fa8:	ff 90       	pop	r15
     faa:	ef 90       	pop	r14
     fac:	df 90       	pop	r13
     fae:	cf 90       	pop	r12
     fb0:	bf 90       	pop	r11
     fb2:	af 90       	pop	r10
     fb4:	08 95       	ret

00000fb6 <at_cipsend2>:
	}
	
	esp8266_send_cmd("AT+CIPCLOSE",50);
	
	return ESP8266_SUCCESS;
}
     fb6:	df 92       	push	r13
     fb8:	ef 92       	push	r14
     fba:	ff 92       	push	r15
     fbc:	0f 93       	push	r16
     fbe:	1f 93       	push	r17
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	c4 55       	subi	r28, 0x54	; 84
     fca:	d6 40       	sbci	r29, 0x06	; 6
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	10 92 22 25 	sts	0x2522, r1
     fd4:	40 e0       	ldi	r20, 0x00	; 0
     fd6:	61 e0       	ldi	r22, 0x01	; 1
     fd8:	74 e2       	ldi	r23, 0x24	; 36
     fda:	ce 01       	movw	r24, r28
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	0e 94 7e 28 	call	0x50fc	; 0x50fc <f_mount>
     fe2:	fe 01       	movw	r30, r28
     fe4:	eb 5a       	subi	r30, 0xAB	; 171
     fe6:	fd 4f       	sbci	r31, 0xFD	; 253
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	94 e0       	ldi	r25, 0x04	; 4
     fec:	df 01       	movw	r26, r30
     fee:	9c 01       	movw	r18, r24
     ff0:	1d 92       	st	X+, r1
     ff2:	21 50       	subi	r18, 0x01	; 1
     ff4:	30 40       	sbci	r19, 0x00	; 0
     ff6:	e1 f7       	brne	.-8      	; 0xff0 <at_cipsend2+0x3a>
     ff8:	41 e0       	ldi	r20, 0x01	; 1
     ffa:	61 ec       	ldi	r22, 0xC1	; 193
     ffc:	70 e2       	ldi	r23, 0x20	; 32
     ffe:	ce 01       	movw	r24, r28
    1000:	8d 5c       	subi	r24, 0xCD	; 205
    1002:	9d 4f       	sbci	r25, 0xFD	; 253
    1004:	0e 94 ce 28 	call	0x519c	; 0x519c <f_open>
    1008:	81 11       	cpse	r24, r1
    100a:	56 c0       	rjmp	.+172    	; 0x10b8 <at_cipsend2+0x102>
    100c:	8e 01       	movw	r16, r28
    100e:	0b 5a       	subi	r16, 0xAB	; 171
    1010:	1d 4f       	sbci	r17, 0xFD	; 253
    1012:	0f 2e       	mov	r0, r31
    1014:	f7 e0       	ldi	r31, 0x07	; 7
    1016:	df 2e       	mov	r13, r31
    1018:	f0 2d       	mov	r31, r0
    101a:	0f 2e       	mov	r0, r31
    101c:	fd ed       	ldi	r31, 0xDD	; 221
    101e:	ef 2e       	mov	r14, r31
    1020:	f0 e2       	ldi	r31, 0x20	; 32
    1022:	ff 2e       	mov	r15, r31
    1024:	f0 2d       	mov	r31, r0
    1026:	9e 01       	movw	r18, r28
    1028:	2d 5a       	subi	r18, 0xAD	; 173
    102a:	3d 4f       	sbci	r19, 0xFD	; 253
    102c:	40 e0       	ldi	r20, 0x00	; 0
    102e:	54 e0       	ldi	r21, 0x04	; 4
    1030:	b8 01       	movw	r22, r16
    1032:	ce 01       	movw	r24, r28
    1034:	8d 5c       	subi	r24, 0xCD	; 205
    1036:	9d 4f       	sbci	r25, 0xFD	; 253
    1038:	0e 94 de 29 	call	0x53bc	; 0x53bc <f_read>
    103c:	d0 92 12 27 	sts	0x2712, r13
    1040:	8a ec       	ldi	r24, 0xCA	; 202
    1042:	90 e2       	ldi	r25, 0x20	; 32
    1044:	0e 94 cd 30 	call	0x619a	; 0x619a <uart_write_str>
    1048:	3f ef       	ldi	r19, 0xFF	; 255
    104a:	80 e7       	ldi	r24, 0x70	; 112
    104c:	92 e0       	ldi	r25, 0x02	; 2
    104e:	31 50       	subi	r19, 0x01	; 1
    1050:	80 40       	sbci	r24, 0x00	; 0
    1052:	90 40       	sbci	r25, 0x00	; 0
    1054:	e1 f7       	brne	.-8      	; 0x104e <at_cipsend2+0x98>
    1056:	00 c0       	rjmp	.+0      	; 0x1058 <at_cipsend2+0xa2>
    1058:	00 00       	nop
    105a:	1f 93       	push	r17
    105c:	0f 93       	push	r16
    105e:	ff 92       	push	r15
    1060:	ef 92       	push	r14
    1062:	0e 94 ef 32 	call	0x65de	; 0x65de <printf>
    1066:	af ef       	ldi	r26, 0xFF	; 255
    1068:	b0 e7       	ldi	r27, 0x70	; 112
    106a:	22 e0       	ldi	r18, 0x02	; 2
    106c:	a1 50       	subi	r26, 0x01	; 1
    106e:	b0 40       	sbci	r27, 0x00	; 0
    1070:	20 40       	sbci	r18, 0x00	; 0
    1072:	e1 f7       	brne	.-8      	; 0x106c <at_cipsend2+0xb6>
    1074:	00 c0       	rjmp	.+0      	; 0x1076 <at_cipsend2+0xc0>
    1076:	00 00       	nop
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	c7 5c       	subi	r28, 0xC7	; 199
    1082:	dd 4f       	sbci	r29, 0xFD	; 253
    1084:	48 81       	ld	r20, Y
    1086:	59 81       	ldd	r21, Y+1	; 0x01
    1088:	6a 81       	ldd	r22, Y+2	; 0x02
    108a:	7b 81       	ldd	r23, Y+3	; 0x03
    108c:	c9 53       	subi	r28, 0x39	; 57
    108e:	d2 40       	sbci	r29, 0x02	; 2
    1090:	c3 5c       	subi	r28, 0xC3	; 195
    1092:	dd 4f       	sbci	r29, 0xFD	; 253
    1094:	88 81       	ld	r24, Y
    1096:	99 81       	ldd	r25, Y+1	; 0x01
    1098:	aa 81       	ldd	r26, Y+2	; 0x02
    109a:	bb 81       	ldd	r27, Y+3	; 0x03
    109c:	cd 53       	subi	r28, 0x3D	; 61
    109e:	d2 40       	sbci	r29, 0x02	; 2
    10a0:	48 17       	cp	r20, r24
    10a2:	59 07       	cpc	r21, r25
    10a4:	6a 07       	cpc	r22, r26
    10a6:	7b 07       	cpc	r23, r27
    10a8:	09 f0       	breq	.+2      	; 0x10ac <at_cipsend2+0xf6>
    10aa:	bd cf       	rjmp	.-134    	; 0x1026 <at_cipsend2+0x70>
    10ac:	ce 01       	movw	r24, r28
    10ae:	8d 5c       	subi	r24, 0xCD	; 205
    10b0:	9d 4f       	sbci	r25, 0xFD	; 253
    10b2:	0e 94 5c 2b 	call	0x56b8	; 0x56b8 <f_close>
    10b6:	04 c0       	rjmp	.+8      	; 0x10c0 <at_cipsend2+0x10a>
    10b8:	80 ee       	ldi	r24, 0xE0	; 224
    10ba:	90 e2       	ldi	r25, 0x20	; 32
    10bc:	0e 94 cd 30 	call	0x619a	; 0x619a <uart_write_str>
    10c0:	41 e0       	ldi	r20, 0x01	; 1
    10c2:	6c ef       	ldi	r22, 0xFC	; 252
    10c4:	70 e2       	ldi	r23, 0x20	; 32
    10c6:	ce 01       	movw	r24, r28
    10c8:	8d 5c       	subi	r24, 0xCD	; 205
    10ca:	9d 4f       	sbci	r25, 0xFD	; 253
    10cc:	0e 94 ce 28 	call	0x519c	; 0x519c <f_open>
    10d0:	81 11       	cpse	r24, r1
    10d2:	4f c0       	rjmp	.+158    	; 0x1172 <at_cipsend2+0x1bc>
    10d4:	8e 01       	movw	r16, r28
    10d6:	0b 5a       	subi	r16, 0xAB	; 171
    10d8:	1d 4f       	sbci	r17, 0xFD	; 253
    10da:	0f 2e       	mov	r0, r31
    10dc:	f7 e0       	ldi	r31, 0x07	; 7
    10de:	df 2e       	mov	r13, r31
    10e0:	f0 2d       	mov	r31, r0
    10e2:	0f 2e       	mov	r0, r31
    10e4:	fd ed       	ldi	r31, 0xDD	; 221
    10e6:	ef 2e       	mov	r14, r31
    10e8:	f0 e2       	ldi	r31, 0x20	; 32
    10ea:	ff 2e       	mov	r15, r31
    10ec:	f0 2d       	mov	r31, r0
    10ee:	9e 01       	movw	r18, r28
    10f0:	2d 5a       	subi	r18, 0xAD	; 173
    10f2:	3d 4f       	sbci	r19, 0xFD	; 253
    10f4:	40 e0       	ldi	r20, 0x00	; 0
    10f6:	54 e0       	ldi	r21, 0x04	; 4
    10f8:	b8 01       	movw	r22, r16
    10fa:	ce 01       	movw	r24, r28
    10fc:	8d 5c       	subi	r24, 0xCD	; 205
    10fe:	9d 4f       	sbci	r25, 0xFD	; 253
    1100:	0e 94 de 29 	call	0x53bc	; 0x53bc <f_read>
    1104:	d0 92 12 27 	sts	0x2712, r13
    1108:	8a ec       	ldi	r24, 0xCA	; 202
    110a:	90 e2       	ldi	r25, 0x20	; 32
    110c:	0e 94 cd 30 	call	0x619a	; 0x619a <uart_write_str>
    1110:	80 91 12 27 	lds	r24, 0x2712
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	09 f0       	breq	.+2      	; 0x111a <at_cipsend2+0x164>
    1118:	ff cf       	rjmp	.-2      	; 0x1118 <at_cipsend2+0x162>
    111a:	d0 92 12 27 	sts	0x2712, r13
    111e:	1f 93       	push	r17
    1120:	0f 93       	push	r16
    1122:	ff 92       	push	r15
    1124:	ef 92       	push	r14
    1126:	0e 94 ef 32 	call	0x65de	; 0x65de <printf>
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	80 91 12 27 	lds	r24, 0x2712
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	09 f0       	breq	.+2      	; 0x113c <at_cipsend2+0x186>
    113a:	ff cf       	rjmp	.-2      	; 0x113a <at_cipsend2+0x184>
    113c:	c7 5c       	subi	r28, 0xC7	; 199
    113e:	dd 4f       	sbci	r29, 0xFD	; 253
    1140:	48 81       	ld	r20, Y
    1142:	59 81       	ldd	r21, Y+1	; 0x01
    1144:	6a 81       	ldd	r22, Y+2	; 0x02
    1146:	7b 81       	ldd	r23, Y+3	; 0x03
    1148:	c9 53       	subi	r28, 0x39	; 57
    114a:	d2 40       	sbci	r29, 0x02	; 2
    114c:	c3 5c       	subi	r28, 0xC3	; 195
    114e:	dd 4f       	sbci	r29, 0xFD	; 253
    1150:	88 81       	ld	r24, Y
    1152:	99 81       	ldd	r25, Y+1	; 0x01
    1154:	aa 81       	ldd	r26, Y+2	; 0x02
    1156:	bb 81       	ldd	r27, Y+3	; 0x03
    1158:	cd 53       	subi	r28, 0x3D	; 61
    115a:	d2 40       	sbci	r29, 0x02	; 2
    115c:	48 17       	cp	r20, r24
    115e:	59 07       	cpc	r21, r25
    1160:	6a 07       	cpc	r22, r26
    1162:	7b 07       	cpc	r23, r27
    1164:	21 f6       	brne	.-120    	; 0x10ee <at_cipsend2+0x138>
    1166:	ce 01       	movw	r24, r28
    1168:	8d 5c       	subi	r24, 0xCD	; 205
    116a:	9d 4f       	sbci	r25, 0xFD	; 253
    116c:	0e 94 5c 2b 	call	0x56b8	; 0x56b8 <f_close>
    1170:	04 c0       	rjmp	.+8      	; 0x117a <at_cipsend2+0x1c4>
    1172:	80 ee       	ldi	r24, 0xE0	; 224
    1174:	90 e2       	ldi	r25, 0x20	; 32
    1176:	0e 94 cd 30 	call	0x619a	; 0x619a <uart_write_str>
    117a:	cc 5a       	subi	r28, 0xAC	; 172
    117c:	d9 4f       	sbci	r29, 0xF9	; 249
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	ff 90       	pop	r15
    118c:	ef 90       	pop	r14
    118e:	df 90       	pop	r13
    1190:	08 95       	ret

00001192 <esp8266_on>:
    1192:	e0 e6       	ldi	r30, 0x60	; 96
    1194:	f6 e0       	ldi	r31, 0x06	; 6
    1196:	80 e2       	ldi	r24, 0x20	; 32
    1198:	81 83       	std	Z+1, r24	; 0x01
    119a:	85 83       	std	Z+5, r24	; 0x05
    119c:	2f ef       	ldi	r18, 0xFF	; 255
    119e:	83 ec       	ldi	r24, 0xC3	; 195
    11a0:	99 e0       	ldi	r25, 0x09	; 9
    11a2:	21 50       	subi	r18, 0x01	; 1
    11a4:	80 40       	sbci	r24, 0x00	; 0
    11a6:	90 40       	sbci	r25, 0x00	; 0
    11a8:	e1 f7       	brne	.-8      	; 0x11a2 <esp8266_on+0x10>
    11aa:	00 c0       	rjmp	.+0      	; 0x11ac <esp8266_on+0x1a>
    11ac:	00 00       	nop
    11ae:	08 95       	ret

000011b0 <esp8266_off>:
    11b0:	80 e2       	ldi	r24, 0x20	; 32
    11b2:	e0 e6       	ldi	r30, 0x60	; 96
    11b4:	f6 e0       	ldi	r31, 0x06	; 6
    11b6:	86 83       	std	Z+6, r24	; 0x06
    11b8:	08 95       	ret

000011ba <esp8266_join_ap>:
    11ba:	ef 92       	push	r14
    11bc:	ff 92       	push	r15
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	c4 56       	subi	r28, 0x64	; 100
    11cc:	d1 09       	sbc	r29, r1
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	7b 01       	movw	r14, r22
    11d4:	2b e0       	ldi	r18, 0x0B	; 11
    11d6:	ef e4       	ldi	r30, 0x4F	; 79
    11d8:	f1 e2       	ldi	r31, 0x21	; 33
    11da:	8e 01       	movw	r16, r28
    11dc:	0f 5f       	subi	r16, 0xFF	; 255
    11de:	1f 4f       	sbci	r17, 0xFF	; 255
    11e0:	d8 01       	movw	r26, r16
    11e2:	01 90       	ld	r0, Z+
    11e4:	0d 92       	st	X+, r0
    11e6:	2a 95       	dec	r18
    11e8:	e1 f7       	brne	.-8      	; 0x11e2 <esp8266_join_ap+0x28>
    11ea:	bc 01       	movw	r22, r24
    11ec:	c8 01       	movw	r24, r16
    11ee:	0e 94 b0 32 	call	0x6560	; 0x6560 <strcat>
    11f2:	f8 01       	movw	r30, r16
    11f4:	01 90       	ld	r0, Z+
    11f6:	00 20       	and	r0, r0
    11f8:	e9 f7       	brne	.-6      	; 0x11f4 <esp8266_join_ap+0x3a>
    11fa:	31 97       	sbiw	r30, 0x01	; 1
    11fc:	42 e2       	ldi	r20, 0x22	; 34
    11fe:	5c e2       	ldi	r21, 0x2C	; 44
    1200:	62 e2       	ldi	r22, 0x22	; 34
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	40 83       	st	Z, r20
    1206:	51 83       	std	Z+1, r21	; 0x01
    1208:	62 83       	std	Z+2, r22	; 0x02
    120a:	73 83       	std	Z+3, r23	; 0x03
    120c:	b7 01       	movw	r22, r14
    120e:	c8 01       	movw	r24, r16
    1210:	0e 94 b0 32 	call	0x6560	; 0x6560 <strcat>
    1214:	f8 01       	movw	r30, r16
    1216:	01 90       	ld	r0, Z+
    1218:	00 20       	and	r0, r0
    121a:	e9 f7       	brne	.-6      	; 0x1216 <esp8266_join_ap+0x5c>
    121c:	31 97       	sbiw	r30, 0x01	; 1
    121e:	82 e2       	ldi	r24, 0x22	; 34
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	80 83       	st	Z, r24
    1224:	91 83       	std	Z+1, r25	; 0x01
    1226:	87 e0       	ldi	r24, 0x07	; 7
    1228:	80 93 12 27 	sts	0x2712, r24
    122c:	c8 01       	movw	r24, r16
    122e:	0e 94 cd 30 	call	0x619a	; 0x619a <uart_write_str>
    1232:	2f ef       	ldi	r18, 0xFF	; 255
    1234:	43 ec       	ldi	r20, 0xC3	; 195
    1236:	89 e0       	ldi	r24, 0x09	; 9
    1238:	21 50       	subi	r18, 0x01	; 1
    123a:	40 40       	sbci	r20, 0x00	; 0
    123c:	80 40       	sbci	r24, 0x00	; 0
    123e:	e1 f7       	brne	.-8      	; 0x1238 <esp8266_join_ap+0x7e>
    1240:	00 c0       	rjmp	.+0      	; 0x1242 <esp8266_join_ap+0x88>
    1242:	00 00       	nop
    1244:	28 e9       	ldi	r18, 0x98	; 152
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	12 c0       	rjmp	.+36     	; 0x126e <esp8266_join_ap+0xb4>
    124a:	9f ef       	ldi	r25, 0xFF	; 255
    124c:	47 e8       	ldi	r20, 0x87	; 135
    124e:	83 e1       	ldi	r24, 0x13	; 19
    1250:	91 50       	subi	r25, 0x01	; 1
    1252:	40 40       	sbci	r20, 0x00	; 0
    1254:	80 40       	sbci	r24, 0x00	; 0
    1256:	e1 f7       	brne	.-8      	; 0x1250 <esp8266_join_ap+0x96>
    1258:	00 c0       	rjmp	.+0      	; 0x125a <esp8266_join_ap+0xa0>
    125a:	00 00       	nop
    125c:	21 50       	subi	r18, 0x01	; 1
    125e:	31 09       	sbc	r19, r1
    1260:	21 15       	cp	r18, r1
    1262:	31 05       	cpc	r19, r1
    1264:	d9 f0       	breq	.+54     	; 0x129c <esp8266_join_ap+0xe2>
    1266:	80 91 12 27 	lds	r24, 0x2712
    126a:	88 23       	and	r24, r24
    126c:	c1 f0       	breq	.+48     	; 0x129e <esp8266_join_ap+0xe4>
    126e:	80 91 12 27 	lds	r24, 0x2712
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	51 f7       	brne	.-44     	; 0x124a <esp8266_join_ap+0x90>
    1276:	87 e0       	ldi	r24, 0x07	; 7
    1278:	80 93 12 27 	sts	0x2712, r24
    127c:	8a e5       	ldi	r24, 0x5A	; 90
    127e:	91 e2       	ldi	r25, 0x21	; 33
    1280:	0e 94 cd 30 	call	0x619a	; 0x619a <uart_write_str>
    1284:	9f ef       	ldi	r25, 0xFF	; 255
    1286:	23 ec       	ldi	r18, 0xC3	; 195
    1288:	49 e0       	ldi	r20, 0x09	; 9
    128a:	91 50       	subi	r25, 0x01	; 1
    128c:	20 40       	sbci	r18, 0x00	; 0
    128e:	40 40       	sbci	r20, 0x00	; 0
    1290:	e1 f7       	brne	.-8      	; 0x128a <esp8266_join_ap+0xd0>
    1292:	00 c0       	rjmp	.+0      	; 0x1294 <esp8266_join_ap+0xda>
    1294:	00 00       	nop
    1296:	80 91 12 27 	lds	r24, 0x2712
    129a:	01 c0       	rjmp	.+2      	; 0x129e <esp8266_join_ap+0xe4>
    129c:	83 e0       	ldi	r24, 0x03	; 3
    129e:	cc 59       	subi	r28, 0x9C	; 156
    12a0:	df 4f       	sbci	r29, 0xFF	; 255
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	ff 90       	pop	r15
    12b0:	ef 90       	pop	r14
    12b2:	08 95       	ret

000012b4 <esp8266_setup_webserver>:

esp8266_status_t esp8266_setup_webserver(bool telnet, bool ap) {
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	c8 2f       	mov	r28, r24
    12ba:	d6 2f       	mov	r29, r22
char internet_time[35];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    12bc:	97 e0       	ldi	r25, 0x07	; 7
    12be:	90 93 12 27 	sts	0x2712, r25
	uart_write_str(str);
    12c2:	86 ea       	ldi	r24, 0xA6	; 166
    12c4:	91 e2       	ldi	r25, 0x21	; 33
    12c6:	0e 94 cd 30 	call	0x619a	; 0x619a <uart_write_str>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12ca:	2f ef       	ldi	r18, 0xFF	; 255
    12cc:	87 ea       	ldi	r24, 0xA7	; 167
    12ce:	91 e6       	ldi	r25, 0x61	; 97
    12d0:	21 50       	subi	r18, 0x01	; 1
    12d2:	80 40       	sbci	r24, 0x00	; 0
    12d4:	90 40       	sbci	r25, 0x00	; 0
    12d6:	e1 f7       	brne	.-8      	; 0x12d0 <esp8266_setup_webserver+0x1c>
    12d8:	00 c0       	rjmp	.+0      	; 0x12da <esp8266_setup_webserver+0x26>
    12da:	00 00       	nop
esp8266_status_t esp8266_setup_webserver(bool telnet, bool ap) {
	
	//Reset module
	esp8266_send_cmd("AT+RST\r",1000);
	
	if (status != ESP8266_SUCCESS) {
    12dc:	90 91 12 27 	lds	r25, 0x2712
    12e0:	91 30       	cpi	r25, 0x01	; 1
    12e2:	09 f0       	breq	.+2      	; 0x12e6 <esp8266_setup_webserver+0x32>
    12e4:	b1 c0       	rjmp	.+354    	; 0x1448 <esp8266_setup_webserver+0x194>
		return status;
	}
	
	//Select mode
	if (telnet) {
    12e6:	cc 23       	and	r28, r28
    12e8:	b1 f0       	breq	.+44     	; 0x1316 <esp8266_setup_webserver+0x62>
char internet_time[35];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    12ea:	87 e0       	ldi	r24, 0x07	; 7
    12ec:	80 93 12 27 	sts	0x2712, r24
	uart_write_str(str);
    12f0:	8e ea       	ldi	r24, 0xAE	; 174
    12f2:	91 e2       	ldi	r25, 0x21	; 33
    12f4:	0e 94 cd 30 	call	0x619a	; 0x619a <uart_write_str>
    12f8:	2f ef       	ldi	r18, 0xFF	; 255
    12fa:	83 ec       	ldi	r24, 0xC3	; 195
    12fc:	99 e0       	ldi	r25, 0x09	; 9
    12fe:	21 50       	subi	r18, 0x01	; 1
    1300:	80 40       	sbci	r24, 0x00	; 0
    1302:	90 40       	sbci	r25, 0x00	; 0
    1304:	e1 f7       	brne	.-8      	; 0x12fe <esp8266_setup_webserver+0x4a>
    1306:	00 c0       	rjmp	.+0      	; 0x1308 <esp8266_setup_webserver+0x54>
    1308:	00 00       	nop
		esp8266_send_cmd("AT+CWMODE=2",100);
	} else {
		esp8266_send_cmd("AT+CWMODE=1",100);
	}
	
	if (status != ESP8266_SUCCESS) {
    130a:	c0 91 12 27 	lds	r28, 0x2712
    130e:	c1 30       	cpi	r28, 0x01	; 1
    1310:	09 f0       	breq	.+2      	; 0x1314 <esp8266_setup_webserver+0x60>
    1312:	9c c0       	rjmp	.+312    	; 0x144c <esp8266_setup_webserver+0x198>
    1314:	5f c0       	rjmp	.+190    	; 0x13d4 <esp8266_setup_webserver+0x120>
	}
	
	//Select mode
	if (telnet) {
		esp8266_send_cmd("AT+CWMODE=3",100);
	} else if (ap) {
    1316:	dd 23       	and	r29, r29
    1318:	89 f0       	breq	.+34     	; 0x133c <esp8266_setup_webserver+0x88>
char internet_time[35];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    131a:	87 e0       	ldi	r24, 0x07	; 7
    131c:	80 93 12 27 	sts	0x2712, r24
	uart_write_str(str);
    1320:	8a eb       	ldi	r24, 0xBA	; 186
    1322:	91 e2       	ldi	r25, 0x21	; 33
    1324:	0e 94 cd 30 	call	0x619a	; 0x619a <uart_write_str>
    1328:	2f ef       	ldi	r18, 0xFF	; 255
    132a:	83 ec       	ldi	r24, 0xC3	; 195
    132c:	99 e0       	ldi	r25, 0x09	; 9
    132e:	21 50       	subi	r18, 0x01	; 1
    1330:	80 40       	sbci	r24, 0x00	; 0
    1332:	90 40       	sbci	r25, 0x00	; 0
    1334:	e1 f7       	brne	.-8      	; 0x132e <esp8266_setup_webserver+0x7a>
    1336:	00 c0       	rjmp	.+0      	; 0x1338 <esp8266_setup_webserver+0x84>
    1338:	00 00       	nop
    133a:	8c c0       	rjmp	.+280    	; 0x1454 <esp8266_setup_webserver+0x1a0>
char internet_time[35];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    133c:	87 e0       	ldi	r24, 0x07	; 7
    133e:	80 93 12 27 	sts	0x2712, r24
	uart_write_str(str);
    1342:	8d e2       	ldi	r24, 0x2D	; 45
    1344:	91 e2       	ldi	r25, 0x21	; 33
    1346:	0e 94 cd 30 	call	0x619a	; 0x619a <uart_write_str>
    134a:	2f ef       	ldi	r18, 0xFF	; 255
    134c:	83 ec       	ldi	r24, 0xC3	; 195
    134e:	99 e0       	ldi	r25, 0x09	; 9
    1350:	21 50       	subi	r18, 0x01	; 1
    1352:	80 40       	sbci	r24, 0x00	; 0
    1354:	90 40       	sbci	r25, 0x00	; 0
    1356:	e1 f7       	brne	.-8      	; 0x1350 <esp8266_setup_webserver+0x9c>
    1358:	00 c0       	rjmp	.+0      	; 0x135a <esp8266_setup_webserver+0xa6>
    135a:	00 00       	nop
    135c:	7b c0       	rjmp	.+246    	; 0x1454 <esp8266_setup_webserver+0x1a0>
		esp8266_send_cmd("AT+CWSAP=\"SMART_CLOCK\",\"1234\",0,3",100);
	}
	*/
	if (!telnet) {
		//Join access point
		esp8266_join_ap(env_var.wifi_ssid,env_var.wifi_pswd);
    135e:	63 eb       	ldi	r22, 0xB3	; 179
    1360:	75 e2       	ldi	r23, 0x25	; 37
    1362:	87 ec       	ldi	r24, 0xC7	; 199
    1364:	95 e2       	ldi	r25, 0x25	; 37
    1366:	29 df       	rcall	.-430    	; 0x11ba <esp8266_join_ap>
char internet_time[35];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    1368:	97 e0       	ldi	r25, 0x07	; 7
    136a:	90 93 12 27 	sts	0x2712, r25
	uart_write_str(str);
    136e:	86 ec       	ldi	r24, 0xC6	; 198
    1370:	91 e2       	ldi	r25, 0x21	; 33
    1372:	0e 94 cd 30 	call	0x619a	; 0x619a <uart_write_str>
    1376:	2f ef       	ldi	r18, 0xFF	; 255
    1378:	83 ec       	ldi	r24, 0xC3	; 195
    137a:	99 e0       	ldi	r25, 0x09	; 9
    137c:	21 50       	subi	r18, 0x01	; 1
    137e:	80 40       	sbci	r24, 0x00	; 0
    1380:	90 40       	sbci	r25, 0x00	; 0
    1382:	e1 f7       	brne	.-8      	; 0x137c <esp8266_setup_webserver+0xc8>
    1384:	00 c0       	rjmp	.+0      	; 0x1386 <esp8266_setup_webserver+0xd2>
    1386:	00 00       	nop
	
	//List ip addresses
	esp8266_send_cmd("AT+CIFSR", 100);
	
	//Show ip address to user
	ht1632c_scroll_print(ip_address,false);
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	88 ea       	ldi	r24, 0xA8	; 168
    138c:	96 e2       	ldi	r25, 0x26	; 38
    138e:	8d d4       	rcall	.+2330   	; 0x1caa <ht1632c_scroll_print>
char internet_time[35];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    1390:	97 e0       	ldi	r25, 0x07	; 7
    1392:	90 93 12 27 	sts	0x2712, r25
	uart_write_str(str);
    1396:	8f ec       	ldi	r24, 0xCF	; 207
    1398:	91 e2       	ldi	r25, 0x21	; 33
    139a:	0e 94 cd 30 	call	0x619a	; 0x619a <uart_write_str>
    139e:	2f ef       	ldi	r18, 0xFF	; 255
    13a0:	83 ec       	ldi	r24, 0xC3	; 195
    13a2:	99 e0       	ldi	r25, 0x09	; 9
    13a4:	21 50       	subi	r18, 0x01	; 1
    13a6:	80 40       	sbci	r24, 0x00	; 0
    13a8:	90 40       	sbci	r25, 0x00	; 0
    13aa:	e1 f7       	brne	.-8      	; 0x13a4 <esp8266_setup_webserver+0xf0>
    13ac:	00 c0       	rjmp	.+0      	; 0x13ae <esp8266_setup_webserver+0xfa>
    13ae:	00 00       	nop
char internet_time[35];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    13b0:	97 e0       	ldi	r25, 0x07	; 7
    13b2:	90 93 12 27 	sts	0x2712, r25
	uart_write_str(str);
    13b6:	8b ed       	ldi	r24, 0xDB	; 219
    13b8:	91 e2       	ldi	r25, 0x21	; 33
    13ba:	0e 94 cd 30 	call	0x619a	; 0x619a <uart_write_str>
    13be:	2f ef       	ldi	r18, 0xFF	; 255
    13c0:	83 ec       	ldi	r24, 0xC3	; 195
    13c2:	99 e0       	ldi	r25, 0x09	; 9
    13c4:	21 50       	subi	r18, 0x01	; 1
    13c6:	80 40       	sbci	r24, 0x00	; 0
    13c8:	90 40       	sbci	r25, 0x00	; 0
    13ca:	e1 f7       	brne	.-8      	; 0x13c4 <esp8266_setup_webserver+0x110>
    13cc:	00 c0       	rjmp	.+0      	; 0x13ce <esp8266_setup_webserver+0x11a>
    13ce:	00 00       	nop
		ht1632c_scroll_print("TELNET ON",false);	
	} else {
		esp8266_send_cmd("AT+CIPSERVER=1,80",100);	
	}
	
	return ESP8266_SUCCESS;
    13d0:	8c 2f       	mov	r24, r28
    13d2:	45 c0       	rjmp	.+138    	; 0x145e <esp8266_setup_webserver+0x1aa>
char internet_time[35];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    13d4:	87 e0       	ldi	r24, 0x07	; 7
    13d6:	80 93 12 27 	sts	0x2712, r24
	uart_write_str(str);
    13da:	86 ec       	ldi	r24, 0xC6	; 198
    13dc:	91 e2       	ldi	r25, 0x21	; 33
    13de:	0e 94 cd 30 	call	0x619a	; 0x619a <uart_write_str>
    13e2:	2f ef       	ldi	r18, 0xFF	; 255
    13e4:	83 ec       	ldi	r24, 0xC3	; 195
    13e6:	99 e0       	ldi	r25, 0x09	; 9
    13e8:	21 50       	subi	r18, 0x01	; 1
    13ea:	80 40       	sbci	r24, 0x00	; 0
    13ec:	90 40       	sbci	r25, 0x00	; 0
    13ee:	e1 f7       	brne	.-8      	; 0x13e8 <esp8266_setup_webserver+0x134>
    13f0:	00 c0       	rjmp	.+0      	; 0x13f2 <esp8266_setup_webserver+0x13e>
    13f2:	00 00       	nop
	
	//List ip addresses
	esp8266_send_cmd("AT+CIFSR", 100);
	
	//Show ip address to user
	ht1632c_scroll_print(ip_address,false);
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	88 ea       	ldi	r24, 0xA8	; 168
    13f8:	96 e2       	ldi	r25, 0x26	; 38
    13fa:	57 d4       	rcall	.+2222   	; 0x1caa <ht1632c_scroll_print>
char internet_time[35];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    13fc:	87 e0       	ldi	r24, 0x07	; 7
    13fe:	80 93 12 27 	sts	0x2712, r24
	uart_write_str(str);
    1402:	8f ec       	ldi	r24, 0xCF	; 207
    1404:	91 e2       	ldi	r25, 0x21	; 33
    1406:	0e 94 cd 30 	call	0x619a	; 0x619a <uart_write_str>
    140a:	2f ef       	ldi	r18, 0xFF	; 255
    140c:	83 ec       	ldi	r24, 0xC3	; 195
    140e:	99 e0       	ldi	r25, 0x09	; 9
    1410:	21 50       	subi	r18, 0x01	; 1
    1412:	80 40       	sbci	r24, 0x00	; 0
    1414:	90 40       	sbci	r25, 0x00	; 0
    1416:	e1 f7       	brne	.-8      	; 0x1410 <esp8266_setup_webserver+0x15c>
    1418:	00 c0       	rjmp	.+0      	; 0x141a <esp8266_setup_webserver+0x166>
    141a:	00 00       	nop
char internet_time[35];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    141c:	87 e0       	ldi	r24, 0x07	; 7
    141e:	80 93 12 27 	sts	0x2712, r24
	uart_write_str(str);
    1422:	8d ee       	ldi	r24, 0xED	; 237
    1424:	91 e2       	ldi	r25, 0x21	; 33
    1426:	0e 94 cd 30 	call	0x619a	; 0x619a <uart_write_str>
    142a:	2f ef       	ldi	r18, 0xFF	; 255
    142c:	83 ec       	ldi	r24, 0xC3	; 195
    142e:	99 e0       	ldi	r25, 0x09	; 9
    1430:	21 50       	subi	r18, 0x01	; 1
    1432:	80 40       	sbci	r24, 0x00	; 0
    1434:	90 40       	sbci	r25, 0x00	; 0
    1436:	e1 f7       	brne	.-8      	; 0x1430 <esp8266_setup_webserver+0x17c>
    1438:	00 c0       	rjmp	.+0      	; 0x143a <esp8266_setup_webserver+0x186>
    143a:	00 00       	nop
	esp8266_send_cmd("AT+CIPMUX=1",100);
	
	//Start server
	if (telnet) {
		esp8266_send_cmd("AT+CIPSERVER=1,8888",100);
		ht1632c_scroll_print("TELNET ON",false);	
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	92 e2       	ldi	r25, 0x22	; 34
    1442:	33 d4       	rcall	.+2150   	; 0x1caa <ht1632c_scroll_print>
	} else {
		esp8266_send_cmd("AT+CIPSERVER=1,80",100);	
	}
	
	return ESP8266_SUCCESS;
    1444:	8c 2f       	mov	r24, r28
    1446:	0b c0       	rjmp	.+22     	; 0x145e <esp8266_setup_webserver+0x1aa>
	
	//Reset module
	esp8266_send_cmd("AT+RST\r",1000);
	
	if (status != ESP8266_SUCCESS) {
		return status;
    1448:	89 2f       	mov	r24, r25
    144a:	09 c0       	rjmp	.+18     	; 0x145e <esp8266_setup_webserver+0x1aa>
		esp8266_send_cmd("AT+CWMODE=2",100);
	} else {
		esp8266_send_cmd("AT+CWMODE=1",100);
	}
	
	if (status != ESP8266_SUCCESS) {
    144c:	8c 2f       	mov	r24, r28
    144e:	07 c0       	rjmp	.+14     	; 0x145e <esp8266_setup_webserver+0x1aa>
    1450:	8c 2f       	mov	r24, r28
    1452:	05 c0       	rjmp	.+10     	; 0x145e <esp8266_setup_webserver+0x1aa>
    1454:	c0 91 12 27 	lds	r28, 0x2712
    1458:	c1 30       	cpi	r28, 0x01	; 1
    145a:	d1 f7       	brne	.-12     	; 0x1450 <esp8266_setup_webserver+0x19c>
    145c:	80 cf       	rjmp	.-256    	; 0x135e <esp8266_setup_webserver+0xaa>
	} else {
		esp8266_send_cmd("AT+CIPSERVER=1,80",100);	
	}
	
	return ESP8266_SUCCESS;
}
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	08 95       	ret

00001464 <esp8266_run_simple_webserver>:
	}
}
*/
esp8266_status_t esp8266_run_simple_webserver(void) 
{
	if(rx_ptr > 100) // check if the ESP8266 is sending data
    1464:	80 91 20 25 	lds	r24, 0x2520
    1468:	90 91 21 25 	lds	r25, 0x2521
    146c:	85 36       	cpi	r24, 0x65	; 101
    146e:	91 05       	cpc	r25, r1
    1470:	38 f1       	brcs	.+78     	; 0x14c0 <esp8266_run_simple_webserver+0x5c>
    1472:	2f ef       	ldi	r18, 0xFF	; 255
    1474:	37 ea       	ldi	r19, 0xA7	; 167
    1476:	81 e6       	ldi	r24, 0x61	; 97
    1478:	21 50       	subi	r18, 0x01	; 1
    147a:	30 40       	sbci	r19, 0x00	; 0
    147c:	80 40       	sbci	r24, 0x00	; 0
    147e:	e1 f7       	brne	.-8      	; 0x1478 <esp8266_run_simple_webserver+0x14>
    1480:	00 c0       	rjmp	.+0      	; 0x1482 <esp8266_run_simple_webserver+0x1e>
    1482:	00 00       	nop
	//if (status = ESP8266_CONNECT)
	{
		_delay_ms(1000);
		at_cipsend2();
    1484:	98 dd       	rcall	.-1232   	; 0xfb6 <at_cipsend2>
    1486:	94 e5       	ldi	r25, 0x54	; 84
    1488:	2d ec       	ldi	r18, 0xCD	; 205
    148a:	3d e2       	ldi	r19, 0x2D	; 45
    148c:	83 e0       	ldi	r24, 0x03	; 3
    148e:	91 50       	subi	r25, 0x01	; 1
    1490:	20 40       	sbci	r18, 0x00	; 0
    1492:	30 40       	sbci	r19, 0x00	; 0
    1494:	80 40       	sbci	r24, 0x00	; 0
    1496:	d9 f7       	brne	.-10     	; 0x148e <esp8266_run_simple_webserver+0x2a>
    1498:	00 c0       	rjmp	.+0      	; 0x149a <esp8266_run_simple_webserver+0x36>
    149a:	00 c0       	rjmp	.+0      	; 0x149c <esp8266_run_simple_webserver+0x38>
    149c:	00 00       	nop
char internet_time[35];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    149e:	87 e0       	ldi	r24, 0x07	; 7
    14a0:	80 93 12 27 	sts	0x2712, r24
	uart_write_str(str);
    14a4:	8b e0       	ldi	r24, 0x0B	; 11
    14a6:	92 e2       	ldi	r25, 0x22	; 34
    14a8:	0e 94 cd 30 	call	0x619a	; 0x619a <uart_write_str>
    14ac:	9f ef       	ldi	r25, 0xFF	; 255
    14ae:	23 ec       	ldi	r18, 0xC3	; 195
    14b0:	39 e0       	ldi	r19, 0x09	; 9
    14b2:	91 50       	subi	r25, 0x01	; 1
    14b4:	20 40       	sbci	r18, 0x00	; 0
    14b6:	30 40       	sbci	r19, 0x00	; 0
    14b8:	e1 f7       	brne	.-8      	; 0x14b2 <esp8266_run_simple_webserver+0x4e>
    14ba:	00 c0       	rjmp	.+0      	; 0x14bc <esp8266_run_simple_webserver+0x58>
    14bc:	00 00       	nop
    14be:	ff cf       	rjmp	.-2      	; 0x14be <esp8266_run_simple_webserver+0x5a>
		at_cipsend2();
		_delay_ms(10000);
		esp8266_send_cmd("AT+CIPCLOSE=0\r", 100);
		while (1);
	}
}
    14c0:	08 95       	ret

000014c2 <__vector_88>:

ISR(USARTD0_RXC_vect) {
    14c2:	1f 92       	push	r1
    14c4:	0f 92       	push	r0
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	0f 92       	push	r0
    14ca:	11 24       	eor	r1, r1
    14cc:	0b b6       	in	r0, 0x3b	; 59
    14ce:	0f 92       	push	r0
    14d0:	2f 93       	push	r18
    14d2:	3f 93       	push	r19
    14d4:	4f 93       	push	r20
    14d6:	5f 93       	push	r21
    14d8:	6f 93       	push	r22
    14da:	7f 93       	push	r23
    14dc:	8f 93       	push	r24
    14de:	9f 93       	push	r25
    14e0:	af 93       	push	r26
    14e2:	bf 93       	push	r27
    14e4:	ef 93       	push	r30
    14e6:	ff 93       	push	r31
	
	char rx_temp = USARTD0.DATA;
    14e8:	40 91 a0 09 	lds	r20, 0x09A0
	
	if (rx_temp == '\n') {
    14ec:	4a 30       	cpi	r20, 0x0A	; 10
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <__vector_88+0x30>
    14f0:	91 c0       	rjmp	.+290    	; 0x1614 <__vector_88+0x152>
		if (strstr(rx_buffer,"OK") || strstr(rx_buffer,"ready")) {
    14f2:	6a e1       	ldi	r22, 0x1A	; 26
    14f4:	72 e2       	ldi	r23, 0x22	; 34
    14f6:	84 e4       	ldi	r24, 0x44	; 68
    14f8:	94 e2       	ldi	r25, 0x24	; 36
    14fa:	0e 94 d5 32 	call	0x65aa	; 0x65aa <strstr>
    14fe:	89 2b       	or	r24, r25
    1500:	41 f4       	brne	.+16     	; 0x1512 <__vector_88+0x50>
    1502:	6d e1       	ldi	r22, 0x1D	; 29
    1504:	72 e2       	ldi	r23, 0x22	; 34
    1506:	84 e4       	ldi	r24, 0x44	; 68
    1508:	94 e2       	ldi	r25, 0x24	; 36
    150a:	0e 94 d5 32 	call	0x65aa	; 0x65aa <strstr>
    150e:	89 2b       	or	r24, r25
    1510:	21 f0       	breq	.+8      	; 0x151a <__vector_88+0x58>
			status = ESP8266_SUCCESS;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	80 93 12 27 	sts	0x2712, r24
    1518:	65 c0       	rjmp	.+202    	; 0x15e4 <__vector_88+0x122>
		} else if (strstr(rx_buffer,"ERROR") || strstr(rx_buffer,"FAIL")) {
    151a:	63 e2       	ldi	r22, 0x23	; 35
    151c:	72 e2       	ldi	r23, 0x22	; 34
    151e:	84 e4       	ldi	r24, 0x44	; 68
    1520:	94 e2       	ldi	r25, 0x24	; 36
    1522:	0e 94 d5 32 	call	0x65aa	; 0x65aa <strstr>
    1526:	89 2b       	or	r24, r25
    1528:	41 f4       	brne	.+16     	; 0x153a <__vector_88+0x78>
    152a:	69 e2       	ldi	r22, 0x29	; 41
    152c:	72 e2       	ldi	r23, 0x22	; 34
    152e:	84 e4       	ldi	r24, 0x44	; 68
    1530:	94 e2       	ldi	r25, 0x24	; 36
    1532:	0e 94 d5 32 	call	0x65aa	; 0x65aa <strstr>
    1536:	89 2b       	or	r24, r25
    1538:	19 f0       	breq	.+6      	; 0x1540 <__vector_88+0x7e>
			status = ESP8266_ERROR;
    153a:	10 92 12 27 	sts	0x2712, r1
    153e:	52 c0       	rjmp	.+164    	; 0x15e4 <__vector_88+0x122>
		} else if (strstr(rx_buffer,"CONNECT")) {
    1540:	6e e2       	ldi	r22, 0x2E	; 46
    1542:	72 e2       	ldi	r23, 0x22	; 34
    1544:	84 e4       	ldi	r24, 0x44	; 68
    1546:	94 e2       	ldi	r25, 0x24	; 36
    1548:	0e 94 d5 32 	call	0x65aa	; 0x65aa <strstr>
    154c:	89 2b       	or	r24, r25
    154e:	21 f0       	breq	.+8      	; 0x1558 <__vector_88+0x96>
			status = ESP8266_CONNECT;
    1550:	84 e0       	ldi	r24, 0x04	; 4
    1552:	80 93 12 27 	sts	0x2712, r24
    1556:	46 c0       	rjmp	.+140    	; 0x15e4 <__vector_88+0x122>
		} else if (strstr(rx_buffer,"CLOSED")) {
    1558:	66 e3       	ldi	r22, 0x36	; 54
    155a:	72 e2       	ldi	r23, 0x22	; 34
    155c:	84 e4       	ldi	r24, 0x44	; 68
    155e:	94 e2       	ldi	r25, 0x24	; 36
    1560:	0e 94 d5 32 	call	0x65aa	; 0x65aa <strstr>
    1564:	89 2b       	or	r24, r25
    1566:	21 f0       	breq	.+8      	; 0x1570 <__vector_88+0xae>
			status = ESP8266_CLOSED;
    1568:	86 e0       	ldi	r24, 0x06	; 6
    156a:	80 93 12 27 	sts	0x2712, r24
    156e:	3a c0       	rjmp	.+116    	; 0x15e4 <__vector_88+0x122>
		} else if (strstr(rx_buffer,"Date")) {
    1570:	6d e3       	ldi	r22, 0x3D	; 61
    1572:	72 e2       	ldi	r23, 0x22	; 34
    1574:	84 e4       	ldi	r24, 0x44	; 68
    1576:	94 e2       	ldi	r25, 0x24	; 36
    1578:	0e 94 d5 32 	call	0x65aa	; 0x65aa <strstr>
    157c:	89 2b       	or	r24, r25
    157e:	49 f0       	breq	.+18     	; 0x1592 <__vector_88+0xd0>
			strncpy(internet_time,rx_buffer,35);
    1580:	43 e2       	ldi	r20, 0x23	; 35
    1582:	50 e0       	ldi	r21, 0x00	; 0
    1584:	64 e4       	ldi	r22, 0x44	; 68
    1586:	74 e2       	ldi	r23, 0x24	; 36
    1588:	8f ee       	ldi	r24, 0xEF	; 239
    158a:	96 e2       	ldi	r25, 0x26	; 38
    158c:	0e 94 c6 32 	call	0x658c	; 0x658c <strncpy>
    1590:	29 c0       	rjmp	.+82     	; 0x15e4 <__vector_88+0x122>
		} else if (strstr(rx_buffer,"192")) {
    1592:	62 e4       	ldi	r22, 0x42	; 66
    1594:	72 e2       	ldi	r23, 0x22	; 34
    1596:	84 e4       	ldi	r24, 0x44	; 68
    1598:	94 e2       	ldi	r25, 0x24	; 36
    159a:	0e 94 d5 32 	call	0x65aa	; 0x65aa <strstr>
    159e:	89 2b       	or	r24, r25
    15a0:	71 f0       	breq	.+28     	; 0x15be <__vector_88+0xfc>
			strncpy(ip_address,strchr(rx_buffer,'\"'),19);
    15a2:	62 e2       	ldi	r22, 0x22	; 34
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	84 e4       	ldi	r24, 0x44	; 68
    15a8:	94 e2       	ldi	r25, 0x24	; 36
    15aa:	0e 94 bb 32 	call	0x6576	; 0x6576 <strchr>
    15ae:	43 e1       	ldi	r20, 0x13	; 19
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	bc 01       	movw	r22, r24
    15b4:	88 ea       	ldi	r24, 0xA8	; 168
    15b6:	96 e2       	ldi	r25, 0x26	; 38
    15b8:	0e 94 c6 32 	call	0x658c	; 0x658c <strncpy>
    15bc:	13 c0       	rjmp	.+38     	; 0x15e4 <__vector_88+0x122>
		//This might be error prone...
		} else if (strstr(rx_buffer,"+IPD")) {
    15be:	66 e4       	ldi	r22, 0x46	; 70
    15c0:	72 e2       	ldi	r23, 0x22	; 34
    15c2:	84 e4       	ldi	r24, 0x44	; 68
    15c4:	94 e2       	ldi	r25, 0x24	; 36
    15c6:	0e 94 d5 32 	call	0x65aa	; 0x65aa <strstr>
    15ca:	89 2b       	or	r24, r25
    15cc:	59 f0       	breq	.+22     	; 0x15e4 <__vector_88+0x122>
			got_reply = true;
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	80 93 22 25 	sts	0x2522, r24
			strncpy(telnet_cmd,rx_buffer,50);
    15d4:	42 e3       	ldi	r20, 0x32	; 50
    15d6:	50 e0       	ldi	r21, 0x00	; 0
    15d8:	64 e4       	ldi	r22, 0x44	; 68
    15da:	74 e2       	ldi	r23, 0x24	; 36
    15dc:	8c eb       	ldi	r24, 0xBC	; 188
    15de:	96 e2       	ldi	r25, 0x26	; 38
    15e0:	0e 94 c6 32 	call	0x658c	; 0x658c <strncpy>
		}
		
		if (strstr(rx_buffer,"{")) {
    15e4:	6b e7       	ldi	r22, 0x7B	; 123
    15e6:	70 e0       	ldi	r23, 0x00	; 0
    15e8:	84 e4       	ldi	r24, 0x44	; 68
    15ea:	94 e2       	ldi	r25, 0x24	; 36
    15ec:	0e 94 bb 32 	call	0x6576	; 0x6576 <strchr>
    15f0:	89 2b       	or	r24, r25
    15f2:	21 f0       	breq	.+8      	; 0x15fc <__vector_88+0x13a>
			json_found = true;	
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	80 93 23 25 	sts	0x2523, r24
    15fa:	26 c0       	rjmp	.+76     	; 0x1648 <__vector_88+0x186>
		} else {
			//Flush buffer
			rx_ptr = 0;
    15fc:	10 92 20 25 	sts	0x2520, r1
    1600:	10 92 21 25 	sts	0x2521, r1
			memset(rx_buffer, 0, RX_BUFFER);	
    1604:	8c ed       	ldi	r24, 0xDC	; 220
    1606:	e4 e4       	ldi	r30, 0x44	; 68
    1608:	f4 e2       	ldi	r31, 0x24	; 36
    160a:	df 01       	movw	r26, r30
    160c:	1d 92       	st	X+, r1
    160e:	8a 95       	dec	r24
    1610:	e9 f7       	brne	.-6      	; 0x160c <__vector_88+0x14a>
    1612:	1a c0       	rjmp	.+52     	; 0x1648 <__vector_88+0x186>
		}
	} else {
		rx_buffer[rx_ptr++] = rx_temp;
    1614:	80 91 20 25 	lds	r24, 0x2520
    1618:	90 91 21 25 	lds	r25, 0x2521
    161c:	9c 01       	movw	r18, r24
    161e:	2f 5f       	subi	r18, 0xFF	; 255
    1620:	3f 4f       	sbci	r19, 0xFF	; 255
    1622:	20 93 20 25 	sts	0x2520, r18
    1626:	30 93 21 25 	sts	0x2521, r19
    162a:	fc 01       	movw	r30, r24
    162c:	ec 5b       	subi	r30, 0xBC	; 188
    162e:	fb 4d       	sbci	r31, 0xDB	; 219
    1630:	40 83       	st	Z, r20
		//Buffer overflow guard
		if (rx_ptr == RX_BUFFER) {
    1632:	80 91 20 25 	lds	r24, 0x2520
    1636:	90 91 21 25 	lds	r25, 0x2521
    163a:	8c 3d       	cpi	r24, 0xDC	; 220
    163c:	91 05       	cpc	r25, r1
    163e:	21 f4       	brne	.+8      	; 0x1648 <__vector_88+0x186>
			rx_ptr = 0;
    1640:	10 92 20 25 	sts	0x2520, r1
    1644:	10 92 21 25 	sts	0x2521, r1
		}
	}
    1648:	ff 91       	pop	r31
    164a:	ef 91       	pop	r30
    164c:	bf 91       	pop	r27
    164e:	af 91       	pop	r26
    1650:	9f 91       	pop	r25
    1652:	8f 91       	pop	r24
    1654:	7f 91       	pop	r23
    1656:	6f 91       	pop	r22
    1658:	5f 91       	pop	r21
    165a:	4f 91       	pop	r20
    165c:	3f 91       	pop	r19
    165e:	2f 91       	pop	r18
    1660:	0f 90       	pop	r0
    1662:	0b be       	out	0x3b, r0	; 59
    1664:	0f 90       	pop	r0
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	0f 90       	pop	r0
    166a:	1f 90       	pop	r1
    166c:	18 95       	reti

0000166e <ht1632c_draw_pixel>:
			color ^= 1;
	}
	ht1632c_draw_filled_rect(x,y,1,1,1);
	ht1632c_refresh_screen();

}
    166e:	9c 01       	movw	r18, r24
    1670:	80 31       	cpi	r24, 0x10	; 16
    1672:	91 05       	cpc	r25, r1
    1674:	0c f0       	brlt	.+2      	; 0x1678 <ht1632c_draw_pixel+0xa>
    1676:	6a c0       	rjmp	.+212    	; 0x174c <ht1632c_draw_pixel+0xde>
    1678:	60 31       	cpi	r22, 0x10	; 16
    167a:	71 05       	cpc	r23, r1
    167c:	0c f0       	brlt	.+2      	; 0x1680 <ht1632c_draw_pixel+0x12>
    167e:	66 c0       	rjmp	.+204    	; 0x174c <ht1632c_draw_pixel+0xde>
    1680:	8f e0       	ldi	r24, 0x0F	; 15
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	86 1b       	sub	r24, r22
    1686:	97 0b       	sbc	r25, r23
    1688:	68 e1       	ldi	r22, 0x18	; 24
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	0e 94 00 31 	call	0x6200	; 0x6200 <__divmodhi4>
    1690:	88 30       	cpi	r24, 0x08	; 8
    1692:	91 05       	cpc	r25, r1
    1694:	34 f0       	brlt	.+12     	; 0x16a2 <ht1632c_draw_pixel+0x34>
    1696:	80 31       	cpi	r24, 0x10	; 16
    1698:	91 05       	cpc	r25, r1
    169a:	34 f4       	brge	.+12     	; 0x16a8 <ht1632c_draw_pixel+0x3a>
    169c:	67 e8       	ldi	r22, 0x87	; 135
    169e:	70 e0       	ldi	r23, 0x00	; 0
    16a0:	05 c0       	rjmp	.+10     	; 0x16ac <ht1632c_draw_pixel+0x3e>
    16a2:	67 e0       	ldi	r22, 0x07	; 7
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <ht1632c_draw_pixel+0x3e>
    16a8:	67 e0       	ldi	r22, 0x07	; 7
    16aa:	71 e0       	ldi	r23, 0x01	; 1
    16ac:	87 70       	andi	r24, 0x07	; 7
    16ae:	90 78       	andi	r25, 0x80	; 128
    16b0:	99 23       	and	r25, r25
    16b2:	24 f4       	brge	.+8      	; 0x16bc <ht1632c_draw_pixel+0x4e>
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	88 6f       	ori	r24, 0xF8	; 248
    16b8:	9f 6f       	ori	r25, 0xFF	; 255
    16ba:	01 96       	adiw	r24, 0x01	; 1
    16bc:	fb 01       	movw	r30, r22
    16be:	e8 1b       	sub	r30, r24
    16c0:	f9 0b       	sbc	r31, r25
    16c2:	cf 01       	movw	r24, r30
    16c4:	28 30       	cpi	r18, 0x08	; 8
    16c6:	31 05       	cpc	r19, r1
    16c8:	1c f4       	brge	.+6      	; 0x16d0 <ht1632c_draw_pixel+0x62>
    16ca:	22 0f       	add	r18, r18
    16cc:	33 1f       	adc	r19, r19
    16ce:	04 c0       	rjmp	.+8      	; 0x16d8 <ht1632c_draw_pixel+0x6a>
    16d0:	22 0f       	add	r18, r18
    16d2:	33 1f       	adc	r19, r19
    16d4:	2f 50       	subi	r18, 0x0F	; 15
    16d6:	31 09       	sbc	r19, r1
    16d8:	22 0f       	add	r18, r18
    16da:	33 1f       	adc	r19, r19
    16dc:	22 0f       	add	r18, r18
    16de:	33 1f       	adc	r19, r19
    16e0:	22 0f       	add	r18, r18
    16e2:	33 1f       	adc	r19, r19
    16e4:	28 0f       	add	r18, r24
    16e6:	39 1f       	adc	r19, r25
    16e8:	44 23       	and	r20, r20
    16ea:	c1 f0       	breq	.+48     	; 0x171c <ht1632c_draw_pixel+0xae>
    16ec:	f9 01       	movw	r30, r18
    16ee:	f6 95       	lsr	r31
    16f0:	e7 95       	ror	r30
    16f2:	f6 95       	lsr	r31
    16f4:	e7 95       	ror	r30
    16f6:	f6 95       	lsr	r31
    16f8:	e7 95       	ror	r30
    16fa:	ec 5d       	subi	r30, 0xDC	; 220
    16fc:	fa 4d       	sbci	r31, 0xDA	; 218
    16fe:	27 70       	andi	r18, 0x07	; 7
    1700:	33 27       	eor	r19, r19
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	ac 01       	movw	r20, r24
    1708:	02 c0       	rjmp	.+4      	; 0x170e <ht1632c_draw_pixel+0xa0>
    170a:	44 0f       	add	r20, r20
    170c:	55 1f       	adc	r21, r21
    170e:	2a 95       	dec	r18
    1710:	e2 f7       	brpl	.-8      	; 0x170a <ht1632c_draw_pixel+0x9c>
    1712:	9a 01       	movw	r18, r20
    1714:	80 81       	ld	r24, Z
    1716:	28 2b       	or	r18, r24
    1718:	20 83       	st	Z, r18
    171a:	08 95       	ret
    171c:	f9 01       	movw	r30, r18
    171e:	f6 95       	lsr	r31
    1720:	e7 95       	ror	r30
    1722:	f6 95       	lsr	r31
    1724:	e7 95       	ror	r30
    1726:	f6 95       	lsr	r31
    1728:	e7 95       	ror	r30
    172a:	ec 5d       	subi	r30, 0xDC	; 220
    172c:	fa 4d       	sbci	r31, 0xDA	; 218
    172e:	27 70       	andi	r18, 0x07	; 7
    1730:	33 27       	eor	r19, r19
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	ac 01       	movw	r20, r24
    1738:	02 c0       	rjmp	.+4      	; 0x173e <ht1632c_draw_pixel+0xd0>
    173a:	44 0f       	add	r20, r20
    173c:	55 1f       	adc	r21, r21
    173e:	2a 95       	dec	r18
    1740:	e2 f7       	brpl	.-8      	; 0x173a <ht1632c_draw_pixel+0xcc>
    1742:	9a 01       	movw	r18, r20
    1744:	20 95       	com	r18
    1746:	80 81       	ld	r24, Z
    1748:	28 23       	and	r18, r24
    174a:	20 83       	st	Z, r18
    174c:	08 95       	ret

0000174e <ht1632c_draw_filled_rect>:
    174e:	8f 92       	push	r8
    1750:	9f 92       	push	r9
    1752:	af 92       	push	r10
    1754:	bf 92       	push	r11
    1756:	cf 92       	push	r12
    1758:	df 92       	push	r13
    175a:	ef 92       	push	r14
    175c:	ff 92       	push	r15
    175e:	0f 93       	push	r16
    1760:	1f 93       	push	r17
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
    1766:	98 2e       	mov	r9, r24
    1768:	c8 2f       	mov	r28, r24
    176a:	d0 e0       	ldi	r29, 0x00	; 0
    176c:	5e 01       	movw	r10, r28
    176e:	a4 0e       	add	r10, r20
    1770:	b1 1c       	adc	r11, r1
    1772:	ca 15       	cp	r28, r10
    1774:	db 05       	cpc	r29, r11
    1776:	e4 f4       	brge	.+56     	; 0x17b0 <ht1632c_draw_filled_rect+0x62>
    1778:	c6 2e       	mov	r12, r22
    177a:	d1 2c       	mov	r13, r1
    177c:	76 01       	movw	r14, r12
    177e:	e2 0e       	add	r14, r18
    1780:	f1 1c       	adc	r15, r1
    1782:	86 2e       	mov	r8, r22
    1784:	0f c0       	rjmp	.+30     	; 0x17a4 <ht1632c_draw_filled_rect+0x56>
    1786:	40 2f       	mov	r20, r16
    1788:	ce 01       	movw	r24, r28
    178a:	71 df       	rcall	.-286    	; 0x166e <ht1632c_draw_pixel>
    178c:	1f 5f       	subi	r17, 0xFF	; 255
    178e:	61 2f       	mov	r22, r17
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	6e 15       	cp	r22, r14
    1794:	7f 05       	cpc	r23, r15
    1796:	bc f3       	brlt	.-18     	; 0x1786 <ht1632c_draw_filled_rect+0x38>
    1798:	93 94       	inc	r9
    179a:	c9 2d       	mov	r28, r9
    179c:	d0 e0       	ldi	r29, 0x00	; 0
    179e:	ca 15       	cp	r28, r10
    17a0:	db 05       	cpc	r29, r11
    17a2:	34 f4       	brge	.+12     	; 0x17b0 <ht1632c_draw_filled_rect+0x62>
    17a4:	b6 01       	movw	r22, r12
    17a6:	ce 14       	cp	r12, r14
    17a8:	df 04       	cpc	r13, r15
    17aa:	b4 f7       	brge	.-20     	; 0x1798 <ht1632c_draw_filled_rect+0x4a>
    17ac:	18 2d       	mov	r17, r8
    17ae:	eb cf       	rjmp	.-42     	; 0x1786 <ht1632c_draw_filled_rect+0x38>
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	1f 91       	pop	r17
    17b6:	0f 91       	pop	r16
    17b8:	ff 90       	pop	r15
    17ba:	ef 90       	pop	r14
    17bc:	df 90       	pop	r13
    17be:	cf 90       	pop	r12
    17c0:	bf 90       	pop	r11
    17c2:	af 90       	pop	r10
    17c4:	9f 90       	pop	r9
    17c6:	8f 90       	pop	r8
    17c8:	08 95       	ret

000017ca <ht1632c_write_data>:
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	28 e0       	ldi	r18, 0x08	; 8
    17d0:	e0 e8       	ldi	r30, 0x80	; 128
    17d2:	f6 e0       	ldi	r31, 0x06	; 6
    17d4:	21 83       	std	Z+1, r18	; 0x01
    17d6:	66 23       	and	r22, r22
    17d8:	c1 f0       	breq	.+48     	; 0x180a <ht1632c_write_data+0x40>
    17da:	74 e0       	ldi	r23, 0x04	; 4
    17dc:	41 e0       	ldi	r20, 0x01	; 1
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	a8 e0       	ldi	r26, 0x08	; 8
    17e2:	76 83       	std	Z+6, r23	; 0x06
    17e4:	2f ef       	ldi	r18, 0xFF	; 255
    17e6:	26 0f       	add	r18, r22
    17e8:	ea 01       	movw	r28, r20
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <ht1632c_write_data+0x26>
    17ec:	cc 0f       	add	r28, r28
    17ee:	dd 1f       	adc	r29, r29
    17f0:	2a 95       	dec	r18
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <ht1632c_write_data+0x22>
    17f4:	9e 01       	movw	r18, r28
    17f6:	28 23       	and	r18, r24
    17f8:	39 23       	and	r19, r25
    17fa:	23 2b       	or	r18, r19
    17fc:	11 f0       	breq	.+4      	; 0x1802 <ht1632c_write_data+0x38>
    17fe:	a5 83       	std	Z+5, r26	; 0x05
    1800:	01 c0       	rjmp	.+2      	; 0x1804 <ht1632c_write_data+0x3a>
    1802:	a6 83       	std	Z+6, r26	; 0x06
    1804:	75 83       	std	Z+5, r23	; 0x05
    1806:	61 50       	subi	r22, 0x01	; 1
    1808:	61 f7       	brne	.-40     	; 0x17e2 <ht1632c_write_data+0x18>
    180a:	88 e0       	ldi	r24, 0x08	; 8
    180c:	e0 e8       	ldi	r30, 0x80	; 128
    180e:	f6 e0       	ldi	r31, 0x06	; 6
    1810:	86 83       	std	Z+6, r24	; 0x06
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	08 95       	ret

00001818 <ht1632c_refresh_screen>:
    1818:	0f 93       	push	r16
    181a:	1f 93       	push	r17
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	e0 e8       	ldi	r30, 0x80	; 128
    1824:	f6 e0       	ldi	r31, 0x06	; 6
    1826:	86 83       	std	Z+6, r24	; 0x06
    1828:	63 e0       	ldi	r22, 0x03	; 3
    182a:	85 e0       	ldi	r24, 0x05	; 5
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	cd df       	rcall	.-102    	; 0x17ca <ht1632c_write_data>
    1830:	67 e0       	ldi	r22, 0x07	; 7
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	c9 df       	rcall	.-110    	; 0x17ca <ht1632c_write_data>
    1838:	c5 e2       	ldi	r28, 0x25	; 37
    183a:	d5 e2       	ldi	r29, 0x25	; 37
    183c:	05 e4       	ldi	r16, 0x45	; 69
    183e:	15 e2       	ldi	r17, 0x25	; 37
    1840:	fe 01       	movw	r30, r28
    1842:	31 97       	sbiw	r30, 0x01	; 1
    1844:	80 81       	ld	r24, Z
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	98 2f       	mov	r25, r24
    184a:	88 27       	eor	r24, r24
    184c:	28 81       	ld	r18, Y
    184e:	60 e1       	ldi	r22, 0x10	; 16
    1850:	82 2b       	or	r24, r18
    1852:	bb df       	rcall	.-138    	; 0x17ca <ht1632c_write_data>
    1854:	22 96       	adiw	r28, 0x02	; 2
    1856:	c0 17       	cp	r28, r16
    1858:	d1 07       	cpc	r29, r17
    185a:	91 f7       	brne	.-28     	; 0x1840 <ht1632c_refresh_screen+0x28>
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	e0 e8       	ldi	r30, 0x80	; 128
    1860:	f6 e0       	ldi	r31, 0x06	; 6
    1862:	85 83       	std	Z+5, r24	; 0x05
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	1f 91       	pop	r17
    186a:	0f 91       	pop	r16
    186c:	08 95       	ret

0000186e <ht1632c_clear_screen>:
    186e:	e4 e2       	ldi	r30, 0x24	; 36
    1870:	f5 e2       	ldi	r31, 0x25	; 37
    1872:	84 e4       	ldi	r24, 0x44	; 68
    1874:	95 e2       	ldi	r25, 0x25	; 37
    1876:	11 92       	st	Z+, r1
    1878:	e8 17       	cp	r30, r24
    187a:	f9 07       	cpc	r31, r25
    187c:	e1 f7       	brne	.-8      	; 0x1876 <ht1632c_clear_screen+0x8>
    187e:	cc cf       	rjmp	.-104    	; 0x1818 <ht1632c_refresh_screen>
    1880:	08 95       	ret

00001882 <ht1632c_send_command>:
    1882:	1f 93       	push	r17
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	94 60       	ori	r25, 0x04	; 4
    188c:	c0 e8       	ldi	r28, 0x80	; 128
    188e:	d6 e0       	ldi	r29, 0x06	; 6
    1890:	11 e0       	ldi	r17, 0x01	; 1
    1892:	1e 83       	std	Y+6, r17	; 0x06
    1894:	6c e0       	ldi	r22, 0x0C	; 12
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	97 df       	rcall	.-210    	; 0x17ca <ht1632c_write_data>
    189c:	1d 83       	std	Y+5, r17	; 0x05
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	1f 91       	pop	r17
    18a4:	08 95       	ret

000018a6 <ht1632c_setup>:
    18a6:	cf 93       	push	r28
    18a8:	c8 2f       	mov	r28, r24
    18aa:	e0 e8       	ldi	r30, 0x80	; 128
    18ac:	f6 e0       	ldi	r31, 0x06	; 6
    18ae:	91 e0       	ldi	r25, 0x01	; 1
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	95 83       	std	Z+5, r25	; 0x05
    18b4:	94 e0       	ldi	r25, 0x04	; 4
    18b6:	91 83       	std	Z+1, r25	; 0x01
    18b8:	95 83       	std	Z+5, r25	; 0x05
    18ba:	88 e0       	ldi	r24, 0x08	; 8
    18bc:	81 83       	std	Z+1, r24	; 0x01
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	e0 df       	rcall	.-64     	; 0x1882 <ht1632c_send_command>
    18c2:	83 e0       	ldi	r24, 0x03	; 3
    18c4:	de df       	rcall	.-68     	; 0x1882 <ht1632c_send_command>
    18c6:	88 e0       	ldi	r24, 0x08	; 8
    18c8:	dc df       	rcall	.-72     	; 0x1882 <ht1632c_send_command>
    18ca:	84 e1       	ldi	r24, 0x14	; 20
    18cc:	da df       	rcall	.-76     	; 0x1882 <ht1632c_send_command>
    18ce:	88 e1       	ldi	r24, 0x18	; 24
    18d0:	d8 df       	rcall	.-80     	; 0x1882 <ht1632c_send_command>
    18d2:	8c 2f       	mov	r24, r28
    18d4:	d6 df       	rcall	.-84     	; 0x1882 <ht1632c_send_command>
    18d6:	81 ea       	ldi	r24, 0xA1	; 161
    18d8:	d4 df       	rcall	.-88     	; 0x1882 <ht1632c_send_command>
    18da:	cf 91       	pop	r28
    18dc:	08 95       	ret

000018de <ht1632c_set_brightness>:
    18de:	88 23       	and	r24, r24
    18e0:	0c f4       	brge	.+2      	; 0x18e4 <ht1632c_set_brightness+0x6>
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	80 31       	cpi	r24, 0x10	; 16
    18e6:	0c f0       	brlt	.+2      	; 0x18ea <ht1632c_set_brightness+0xc>
    18e8:	8f e0       	ldi	r24, 0x0F	; 15
    18ea:	80 6a       	ori	r24, 0xA0	; 160
    18ec:	ca cf       	rjmp	.-108    	; 0x1882 <ht1632c_send_command>
    18ee:	08 95       	ret

000018f0 <ht1632c_draw_char_to_buffer>:
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	9b 01       	movw	r18, r22
    18f4:	22 0f       	add	r18, r18
    18f6:	33 1f       	adc	r19, r19
    18f8:	22 0f       	add	r18, r18
    18fa:	33 1f       	adc	r19, r19
    18fc:	62 0f       	add	r22, r18
    18fe:	73 1f       	adc	r23, r19
    1900:	fb 01       	movw	r30, r22
    1902:	ee 57       	subi	r30, 0x7E	; 126
    1904:	f7 4f       	sbci	r31, 0xF7	; 247
    1906:	da 01       	movw	r26, r20
    1908:	a8 0f       	add	r26, r24
    190a:	b9 1f       	adc	r27, r25
    190c:	cb 01       	movw	r24, r22
    190e:	89 57       	subi	r24, 0x79	; 121
    1910:	97 4f       	sbci	r25, 0xF7	; 247
    1912:	34 91       	lpm	r19, Z
    1914:	32 95       	swap	r19
    1916:	43 2f       	mov	r20, r19
    1918:	43 73       	andi	r20, 0x33	; 51
    191a:	44 0f       	add	r20, r20
    191c:	44 0f       	add	r20, r20
    191e:	23 2f       	mov	r18, r19
    1920:	2c 7c       	andi	r18, 0xCC	; 204
    1922:	26 95       	lsr	r18
    1924:	26 95       	lsr	r18
    1926:	24 2b       	or	r18, r20
    1928:	32 2f       	mov	r19, r18
    192a:	35 75       	andi	r19, 0x55	; 85
    192c:	33 0f       	add	r19, r19
    192e:	2a 7a       	andi	r18, 0xAA	; 170
    1930:	26 95       	lsr	r18
    1932:	23 2b       	or	r18, r19
    1934:	2d 93       	st	X+, r18
    1936:	31 96       	adiw	r30, 0x01	; 1
    1938:	e8 17       	cp	r30, r24
    193a:	f9 07       	cpc	r31, r25
    193c:	51 f7       	brne	.-44     	; 0x1912 <ht1632c_draw_char_to_buffer+0x22>
    193e:	08 95       	ret

00001940 <ht1632c_draw_char>:
    1940:	2f 92       	push	r2
    1942:	3f 92       	push	r3
    1944:	4f 92       	push	r4
    1946:	5f 92       	push	r5
    1948:	6f 92       	push	r6
    194a:	7f 92       	push	r7
    194c:	8f 92       	push	r8
    194e:	9f 92       	push	r9
    1950:	af 92       	push	r10
    1952:	bf 92       	push	r11
    1954:	cf 92       	push	r12
    1956:	df 92       	push	r13
    1958:	ef 92       	push	r14
    195a:	ff 92       	push	r15
    195c:	0f 93       	push	r16
    195e:	1f 93       	push	r17
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	00 d0       	rcall	.+0      	; 0x1966 <ht1632c_draw_char+0x26>
    1966:	1f 92       	push	r1
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    196c:	22 2e       	mov	r2, r18
    196e:	40 2e       	mov	r4, r16
    1970:	50 e0       	ldi	r21, 0x00	; 0
    1972:	5a 01       	movw	r10, r20
    1974:	aa 0c       	add	r10, r10
    1976:	bb 1c       	adc	r11, r11
    1978:	aa 0c       	add	r10, r10
    197a:	bb 1c       	adc	r11, r11
    197c:	4a 0d       	add	r20, r10
    197e:	5b 1d       	adc	r21, r11
    1980:	9a 01       	movw	r18, r20
    1982:	2e 57       	subi	r18, 0x7E	; 126
    1984:	37 4f       	sbci	r19, 0xF7	; 247
    1986:	59 01       	movw	r10, r18
    1988:	c8 2e       	mov	r12, r24
    198a:	d9 2e       	mov	r13, r25
    198c:	38 2e       	mov	r3, r24
    198e:	36 01       	movw	r6, r12
    1990:	35 e0       	ldi	r19, 0x05	; 5
    1992:	63 0e       	add	r6, r19
    1994:	71 1c       	adc	r7, r1
    1996:	80 2f       	mov	r24, r16
    1998:	88 0f       	add	r24, r24
    199a:	88 0f       	add	r24, r24
    199c:	88 0f       	add	r24, r24
    199e:	80 1b       	sub	r24, r16
    19a0:	4b 01       	movw	r8, r22
    19a2:	96 e0       	ldi	r25, 0x06	; 6
    19a4:	89 0e       	add	r8, r25
    19a6:	91 1c       	adc	r9, r1
    19a8:	7b 01       	movw	r14, r22
    19aa:	e1 e0       	ldi	r30, 0x01	; 1
    19ac:	ee 1a       	sub	r14, r30
    19ae:	f1 08       	sbc	r15, r1
    19b0:	86 0f       	add	r24, r22
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	f5 01       	movw	r30, r10
    19b6:	14 91       	lpm	r17, Z
    19b8:	8a 82       	std	Y+2, r8	; 0x02
    19ba:	9b 82       	std	Y+3, r9	; 0x03
    19bc:	59 80       	ldd	r5, Y+1	; 0x01
    19be:	10 ff       	sbrs	r17, 0
    19c0:	11 c0       	rjmp	.+34     	; 0x19e4 <ht1632c_draw_char+0xa4>
    19c2:	f1 e0       	ldi	r31, 0x01	; 1
    19c4:	4f 12       	cpse	r4, r31
    19c6:	08 c0       	rjmp	.+16     	; 0x19d8 <ht1632c_draw_char+0x98>
    19c8:	dd 20       	and	r13, r13
    19ca:	64 f0       	brlt	.+24     	; 0x19e4 <ht1632c_draw_char+0xa4>
    19cc:	42 2d       	mov	r20, r2
    19ce:	6a 81       	ldd	r22, Y+2	; 0x02
    19d0:	7b 81       	ldd	r23, Y+3	; 0x03
    19d2:	c6 01       	movw	r24, r12
    19d4:	4c de       	rcall	.-872    	; 0x166e <ht1632c_draw_pixel>
    19d6:	06 c0       	rjmp	.+12     	; 0x19e4 <ht1632c_draw_char+0xa4>
    19d8:	02 2d       	mov	r16, r2
    19da:	24 2d       	mov	r18, r4
    19dc:	44 2d       	mov	r20, r4
    19de:	65 2d       	mov	r22, r5
    19e0:	83 2d       	mov	r24, r3
    19e2:	b5 de       	rcall	.-662    	; 0x174e <ht1632c_draw_filled_rect>
    19e4:	16 95       	lsr	r17
    19e6:	2a 81       	ldd	r18, Y+2	; 0x02
    19e8:	3b 81       	ldd	r19, Y+3	; 0x03
    19ea:	21 50       	subi	r18, 0x01	; 1
    19ec:	31 09       	sbc	r19, r1
    19ee:	2a 83       	std	Y+2, r18	; 0x02
    19f0:	3b 83       	std	Y+3, r19	; 0x03
    19f2:	54 18       	sub	r5, r4
    19f4:	2e 15       	cp	r18, r14
    19f6:	3f 05       	cpc	r19, r15
    19f8:	11 f7       	brne	.-60     	; 0x19be <ht1632c_draw_char+0x7e>
    19fa:	3f ef       	ldi	r19, 0xFF	; 255
    19fc:	a3 1a       	sub	r10, r19
    19fe:	b3 0a       	sbc	r11, r19
    1a00:	8f ef       	ldi	r24, 0xFF	; 255
    1a02:	c8 1a       	sub	r12, r24
    1a04:	d8 0a       	sbc	r13, r24
    1a06:	34 0c       	add	r3, r4
    1a08:	c6 14       	cp	r12, r6
    1a0a:	d7 04       	cpc	r13, r7
    1a0c:	99 f6       	brne	.-90     	; 0x19b4 <ht1632c_draw_char+0x74>
    1a0e:	23 96       	adiw	r28, 0x03	; 3
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	de bf       	out	0x3e, r29	; 62
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	ff 90       	pop	r15
    1a1e:	ef 90       	pop	r14
    1a20:	df 90       	pop	r13
    1a22:	cf 90       	pop	r12
    1a24:	bf 90       	pop	r11
    1a26:	af 90       	pop	r10
    1a28:	9f 90       	pop	r9
    1a2a:	8f 90       	pop	r8
    1a2c:	7f 90       	pop	r7
    1a2e:	6f 90       	pop	r6
    1a30:	5f 90       	pop	r5
    1a32:	4f 90       	pop	r4
    1a34:	3f 90       	pop	r3
    1a36:	2f 90       	pop	r2
    1a38:	08 95       	ret

00001a3a <ht1632c_draw_small_char_to_buffer>:
    1a3a:	cf 92       	push	r12
    1a3c:	df 92       	push	r13
    1a3e:	ef 92       	push	r14
    1a40:	ff 92       	push	r15
    1a42:	0f 93       	push	r16
    1a44:	1f 93       	push	r17
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	25 97       	sbiw	r28, 0x05	; 5
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	de bf       	out	0x3e, r29	; 62
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	fb 01       	movw	r30, r22
    1a58:	ee 0f       	add	r30, r30
    1a5a:	ff 1f       	adc	r31, r31
    1a5c:	6e 0f       	add	r22, r30
    1a5e:	7f 1f       	adc	r23, r31
    1a60:	fb 01       	movw	r30, r22
    1a62:	ee 0f       	add	r30, r30
    1a64:	ff 1f       	adc	r31, r31
    1a66:	ee 57       	subi	r30, 0x7E	; 126
    1a68:	fd 4f       	sbci	r31, 0xFD	; 253
    1a6a:	9e 01       	movw	r18, r28
    1a6c:	2f 5f       	subi	r18, 0xFF	; 255
    1a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a70:	69 01       	movw	r12, r18
    1a72:	65 e0       	ldi	r22, 0x05	; 5
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	03 96       	adiw	r24, 0x03	; 3
    1a78:	48 0f       	add	r20, r24
    1a7a:	59 1f       	adc	r21, r25
    1a7c:	84 91       	lpm	r24, Z
    1a7e:	82 95       	swap	r24
    1a80:	8f 70       	andi	r24, 0x0F	; 15
    1a82:	d6 01       	movw	r26, r12
    1a84:	8d 93       	st	X+, r24
    1a86:	6d 01       	movw	r12, r26
    1a88:	da 01       	movw	r26, r20
    1a8a:	23 e0       	ldi	r18, 0x03	; 3
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	08 2f       	mov	r16, r24
    1a90:	01 70       	andi	r16, 0x01	; 1
    1a92:	10 e0       	ldi	r17, 0x00	; 0
    1a94:	78 01       	movw	r14, r16
    1a96:	06 2e       	mov	r0, r22
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <ht1632c_draw_small_char_to_buffer+0x64>
    1a9a:	ee 0c       	add	r14, r14
    1a9c:	ff 1c       	adc	r15, r15
    1a9e:	0a 94       	dec	r0
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <ht1632c_draw_small_char_to_buffer+0x60>
    1aa2:	9e 91       	ld	r25, -X
    1aa4:	e9 2a       	or	r14, r25
    1aa6:	ec 92       	st	X, r14
    1aa8:	86 95       	lsr	r24
    1aaa:	21 50       	subi	r18, 0x01	; 1
    1aac:	31 09       	sbc	r19, r1
    1aae:	21 15       	cp	r18, r1
    1ab0:	31 05       	cpc	r19, r1
    1ab2:	69 f7       	brne	.-38     	; 0x1a8e <ht1632c_draw_small_char_to_buffer+0x54>
    1ab4:	61 50       	subi	r22, 0x01	; 1
    1ab6:	71 09       	sbc	r23, r1
    1ab8:	31 96       	adiw	r30, 0x01	; 1
    1aba:	61 15       	cp	r22, r1
    1abc:	71 05       	cpc	r23, r1
    1abe:	f1 f6       	brne	.-68     	; 0x1a7c <ht1632c_draw_small_char_to_buffer+0x42>
    1ac0:	25 96       	adiw	r28, 0x05	; 5
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	de bf       	out	0x3e, r29	; 62
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	ff 90       	pop	r15
    1ad0:	ef 90       	pop	r14
    1ad2:	df 90       	pop	r13
    1ad4:	cf 90       	pop	r12
    1ad6:	08 95       	ret

00001ad8 <ht1632c_loading2>:
    1ad8:	0f 93       	push	r16
    1ada:	cf 93       	push	r28
    1adc:	df 93       	push	r29
    1ade:	c0 91 0c 20 	lds	r28, 0x200C
    1ae2:	d0 91 0b 20 	lds	r29, 0x200B
    1ae6:	01 e0       	ldi	r16, 0x01	; 1
    1ae8:	21 e0       	ldi	r18, 0x01	; 1
    1aea:	41 e0       	ldi	r20, 0x01	; 1
    1aec:	6c 2f       	mov	r22, r28
    1aee:	8d 2f       	mov	r24, r29
    1af0:	2e de       	rcall	.-932    	; 0x174e <ht1632c_draw_filled_rect>
    1af2:	c7 30       	cpi	r28, 0x07	; 7
    1af4:	30 f0       	brcs	.+12     	; 0x1b02 <ht1632c_loading2+0x2a>
    1af6:	d9 30       	cpi	r29, 0x09	; 9
    1af8:	21 f4       	brne	.+8      	; 0x1b02 <ht1632c_loading2+0x2a>
    1afa:	c1 50       	subi	r28, 0x01	; 1
    1afc:	c0 93 0c 20 	sts	0x200C, r28
    1b00:	1f c0       	rjmp	.+62     	; 0x1b40 <ht1632c_loading2+0x68>
    1b02:	c6 30       	cpi	r28, 0x06	; 6
    1b04:	31 f4       	brne	.+12     	; 0x1b12 <ht1632c_loading2+0x3a>
    1b06:	d7 30       	cpi	r29, 0x07	; 7
    1b08:	30 f0       	brcs	.+12     	; 0x1b16 <ht1632c_loading2+0x3e>
    1b0a:	d1 50       	subi	r29, 0x01	; 1
    1b0c:	d0 93 0b 20 	sts	0x200B, r29
    1b10:	17 c0       	rjmp	.+46     	; 0x1b40 <ht1632c_loading2+0x68>
    1b12:	c9 30       	cpi	r28, 0x09	; 9
    1b14:	30 f4       	brcc	.+12     	; 0x1b22 <ht1632c_loading2+0x4a>
    1b16:	d6 30       	cpi	r29, 0x06	; 6
    1b18:	21 f4       	brne	.+8      	; 0x1b22 <ht1632c_loading2+0x4a>
    1b1a:	cf 5f       	subi	r28, 0xFF	; 255
    1b1c:	c0 93 0c 20 	sts	0x200C, r28
    1b20:	0f c0       	rjmp	.+30     	; 0x1b40 <ht1632c_loading2+0x68>
    1b22:	c9 30       	cpi	r28, 0x09	; 9
    1b24:	69 f4       	brne	.+26     	; 0x1b40 <ht1632c_loading2+0x68>
    1b26:	d9 30       	cpi	r29, 0x09	; 9
    1b28:	58 f4       	brcc	.+22     	; 0x1b40 <ht1632c_loading2+0x68>
    1b2a:	df 5f       	subi	r29, 0xFF	; 255
    1b2c:	d0 93 0b 20 	sts	0x200B, r29
    1b30:	d9 30       	cpi	r29, 0x09	; 9
    1b32:	31 f4       	brne	.+12     	; 0x1b40 <ht1632c_loading2+0x68>
    1b34:	90 91 0a 20 	lds	r25, 0x200A
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	89 27       	eor	r24, r25
    1b3c:	80 93 0a 20 	sts	0x200A, r24
    1b40:	00 e0       	ldi	r16, 0x00	; 0
    1b42:	21 e0       	ldi	r18, 0x01	; 1
    1b44:	41 e0       	ldi	r20, 0x01	; 1
    1b46:	60 91 0c 20 	lds	r22, 0x200C
    1b4a:	80 91 0b 20 	lds	r24, 0x200B
    1b4e:	ff dd       	rcall	.-1026   	; 0x174e <ht1632c_draw_filled_rect>
    1b50:	63 de       	rcall	.-826    	; 0x1818 <ht1632c_refresh_screen>
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	0f 91       	pop	r16
    1b58:	08 95       	ret

00001b5a <ht1632c_shift_left>:

void ht1632c_shift_left(void) {
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	32 e0       	ldi	r19, 0x02	; 2
    1b60:	20 e0       	ldi	r18, 0x00	; 0
	
	int8_t i;
	
	for (i = 0; i <= 30; i += 2) {
		if (i == 14) {
			ledmatrix[14] = ledmatrix[1];
    1b62:	c2 e3       	ldi	r28, 0x32	; 50
    1b64:	d5 e2       	ldi	r29, 0x25	; 37
    1b66:	a5 e2       	ldi	r26, 0x25	; 37
    1b68:	b5 e2       	ldi	r27, 0x25	; 37
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <ht1632c_shift_left+0x16>
    1b6c:	2e 5f       	subi	r18, 0xFE	; 254
    1b6e:	3e 5f       	subi	r19, 0xFE	; 254
    1b70:	e2 2f       	mov	r30, r18
void ht1632c_shift_left(void) {
	
	int8_t i;
	
	for (i = 0; i <= 30; i += 2) {
		if (i == 14) {
    1b72:	2e 30       	cpi	r18, 0x0E	; 14
    1b74:	19 f4       	brne	.+6      	; 0x1b7c <ht1632c_shift_left+0x22>
			ledmatrix[14] = ledmatrix[1];
    1b76:	4c 91       	ld	r20, X
    1b78:	48 83       	st	Y, r20
    1b7a:	f8 cf       	rjmp	.-16     	; 0x1b6c <ht1632c_shift_left+0x12>
		} else if(i == 30) {
    1b7c:	2e 31       	cpi	r18, 0x1E	; 30
    1b7e:	29 f4       	brne	.+10     	; 0x1b8a <ht1632c_shift_left+0x30>
			ledmatrix[30] = ledmatrix[17];
    1b80:	80 91 35 25 	lds	r24, 0x2535
    1b84:	80 93 42 25 	sts	0x2542, r24
    1b88:	09 c0       	rjmp	.+18     	; 0x1b9c <ht1632c_shift_left+0x42>
		} else {
			ledmatrix[i] = ledmatrix[i+2];
    1b8a:	ff 27       	eor	r31, r31
    1b8c:	e7 fd       	sbrc	r30, 7
    1b8e:	f0 95       	com	r31
    1b90:	ec 5d       	subi	r30, 0xDC	; 220
    1b92:	fa 4d       	sbci	r31, 0xDA	; 218
    1b94:	42 81       	ldd	r20, Z+2	; 0x02
    1b96:	40 83       	st	Z, r20

void ht1632c_shift_left(void) {
	
	int8_t i;
	
	for (i = 0; i <= 30; i += 2) {
    1b98:	3f 31       	cpi	r19, 0x1F	; 31
    1b9a:	44 f3       	brlt	.-48     	; 0x1b6c <ht1632c_shift_left+0x12>
	ht1632c_draw_filled_rect(x,y,1,1,1);
	ht1632c_refresh_screen();

}

void ht1632c_shift_left(void) {
    1b9c:	93 e0       	ldi	r25, 0x03	; 3
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	for (i = 1; i <= 31; i += 2) {
		if (i == 15) {
			ledmatrix[15] = 0;
    1ba0:	a3 e3       	ldi	r26, 0x33	; 51
    1ba2:	b5 e2       	ldi	r27, 0x25	; 37
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <ht1632c_shift_left+0x50>
    1ba6:	8e 5f       	subi	r24, 0xFE	; 254
    1ba8:	9e 5f       	subi	r25, 0xFE	; 254
    1baa:	e8 2f       	mov	r30, r24
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
	
	for (i = 1; i <= 31; i += 2) {
		if (i == 15) {
    1bac:	8f 30       	cpi	r24, 0x0F	; 15
    1bae:	11 f4       	brne	.+4      	; 0x1bb4 <ht1632c_shift_left+0x5a>
			ledmatrix[15] = 0;
    1bb0:	1c 92       	st	X, r1
    1bb2:	f9 cf       	rjmp	.-14     	; 0x1ba6 <ht1632c_shift_left+0x4c>
		} else if (i == 31) {
    1bb4:	8f 31       	cpi	r24, 0x1F	; 31
    1bb6:	19 f4       	brne	.+6      	; 0x1bbe <ht1632c_shift_left+0x64>
			ledmatrix[31] = 0;
    1bb8:	10 92 43 25 	sts	0x2543, r1
    1bbc:	09 c0       	rjmp	.+18     	; 0x1bd0 <ht1632c_shift_left+0x76>
		} else {
			ledmatrix[i] = ledmatrix[i+2];
    1bbe:	ff 27       	eor	r31, r31
    1bc0:	e7 fd       	sbrc	r30, 7
    1bc2:	f0 95       	com	r31
    1bc4:	ec 5d       	subi	r30, 0xDC	; 220
    1bc6:	fa 4d       	sbci	r31, 0xDA	; 218
    1bc8:	22 81       	ldd	r18, Z+2	; 0x02
    1bca:	20 83       	st	Z, r18
		} else {
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
	
	for (i = 1; i <= 31; i += 2) {
    1bcc:	90 32       	cpi	r25, 0x20	; 32
    1bce:	5c f3       	brlt	.-42     	; 0x1ba6 <ht1632c_shift_left+0x4c>
		} else {
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
	
	ht1632c_refresh_screen();
    1bd0:	23 de       	rcall	.-954    	; 0x1818 <ht1632c_refresh_screen>
    1bd2:	2f ef       	ldi	r18, 0xFF	; 255
    1bd4:	89 ef       	ldi	r24, 0xF9	; 249
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	21 50       	subi	r18, 0x01	; 1
    1bda:	80 40       	sbci	r24, 0x00	; 0
    1bdc:	90 40       	sbci	r25, 0x00	; 0
    1bde:	e1 f7       	brne	.-8      	; 0x1bd8 <ht1632c_shift_left+0x7e>
    1be0:	00 c0       	rjmp	.+0      	; 0x1be2 <ht1632c_shift_left+0x88>
    1be2:	00 00       	nop
	_delay_ms(10);
}
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	08 95       	ret

00001bea <ht1632c_print_buffer>:
	}
	
	//rtc_enable_time_render();
}

void ht1632c_print_buffer(char *buffer, uint8_t length) {
    1bea:	9f 92       	push	r9
    1bec:	af 92       	push	r10
    1bee:	bf 92       	push	r11
    1bf0:	cf 92       	push	r12
    1bf2:	df 92       	push	r13
    1bf4:	ef 92       	push	r14
    1bf6:	ff 92       	push	r15
    1bf8:	0f 93       	push	r16
    1bfa:	1f 93       	push	r17
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	96 2e       	mov	r9, r22

	uint16_t i;
	
	//Shift buffer into visible area
	for (i = 0; i < (length); i++)
    1c02:	e6 2e       	mov	r14, r22
    1c04:	f1 2c       	mov	r15, r1
    1c06:	e1 14       	cp	r14, r1
    1c08:	f1 04       	cpc	r15, r1
    1c0a:	61 f1       	breq	.+88     	; 0x1c64 <ht1632c_print_buffer+0x7a>
    1c0c:	c8 2f       	mov	r28, r24
    1c0e:	d9 2f       	mov	r29, r25
    1c10:	00 e0       	ldi	r16, 0x00	; 0
    1c12:	10 e0       	ldi	r17, 0x00	; 0
	{
		ht1632c_shift_left();
		ledmatrix[15] = buffer[i] >> 3;
    1c14:	0f 2e       	mov	r0, r31
    1c16:	f3 e3       	ldi	r31, 0x33	; 51
    1c18:	af 2e       	mov	r10, r31
    1c1a:	f5 e2       	ldi	r31, 0x25	; 37
    1c1c:	bf 2e       	mov	r11, r31
    1c1e:	f0 2d       	mov	r31, r0
		ledmatrix[31] = buffer[i] << 5;
    1c20:	0f 2e       	mov	r0, r31
    1c22:	f3 e4       	ldi	r31, 0x43	; 67
    1c24:	cf 2e       	mov	r12, r31
    1c26:	f5 e2       	ldi	r31, 0x25	; 37
    1c28:	df 2e       	mov	r13, r31
    1c2a:	f0 2d       	mov	r31, r0
	uint16_t i;
	
	//Shift buffer into visible area
	for (i = 0; i < (length); i++)
	{
		ht1632c_shift_left();
    1c2c:	96 df       	rcall	.-212    	; 0x1b5a <ht1632c_shift_left>
    1c2e:	fe 01       	movw	r30, r28
		ledmatrix[15] = buffer[i] >> 3;
    1c30:	89 91       	ld	r24, Y+
    1c32:	86 95       	lsr	r24
    1c34:	86 95       	lsr	r24
    1c36:	86 95       	lsr	r24
    1c38:	d5 01       	movw	r26, r10
    1c3a:	8c 93       	st	X, r24
		ledmatrix[31] = buffer[i] << 5;
    1c3c:	80 81       	ld	r24, Z
    1c3e:	82 95       	swap	r24
    1c40:	88 0f       	add	r24, r24
    1c42:	80 7e       	andi	r24, 0xE0	; 224
    1c44:	f6 01       	movw	r30, r12
    1c46:	80 83       	st	Z, r24
    1c48:	ff ef       	ldi	r31, 0xFF	; 255
    1c4a:	2a e6       	ldi	r18, 0x6A	; 106
    1c4c:	83 e0       	ldi	r24, 0x03	; 3
    1c4e:	f1 50       	subi	r31, 0x01	; 1
    1c50:	20 40       	sbci	r18, 0x00	; 0
    1c52:	80 40       	sbci	r24, 0x00	; 0
    1c54:	e1 f7       	brne	.-8      	; 0x1c4e <ht1632c_print_buffer+0x64>
    1c56:	00 c0       	rjmp	.+0      	; 0x1c58 <ht1632c_print_buffer+0x6e>
    1c58:	00 00       	nop
void ht1632c_print_buffer(char *buffer, uint8_t length) {

	uint16_t i;
	
	//Shift buffer into visible area
	for (i = 0; i < (length); i++)
    1c5a:	0f 5f       	subi	r16, 0xFF	; 255
    1c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5e:	0e 15       	cp	r16, r14
    1c60:	1f 05       	cpc	r17, r15
    1c62:	20 f3       	brcs	.-56     	; 0x1c2c <ht1632c_print_buffer+0x42>
		ledmatrix[31] = buffer[i] << 5;
		_delay_ms(35);
	}
	
	//Shift buffer out of visible area
	for (i = 0; i < (length/4); i++)
    1c64:	96 94       	lsr	r9
    1c66:	96 94       	lsr	r9
    1c68:	09 2d       	mov	r16, r9
    1c6a:	10 e0       	ldi	r17, 0x00	; 0
    1c6c:	01 15       	cp	r16, r1
    1c6e:	11 05       	cpc	r17, r1
    1c70:	81 f0       	breq	.+32     	; 0x1c92 <ht1632c_print_buffer+0xa8>
    1c72:	c0 e0       	ldi	r28, 0x00	; 0
    1c74:	d0 e0       	ldi	r29, 0x00	; 0
	{
		ht1632c_shift_left();
    1c76:	71 df       	rcall	.-286    	; 0x1b5a <ht1632c_shift_left>
    1c78:	9f ef       	ldi	r25, 0xFF	; 255
    1c7a:	aa e6       	ldi	r26, 0x6A	; 106
    1c7c:	b3 e0       	ldi	r27, 0x03	; 3
    1c7e:	91 50       	subi	r25, 0x01	; 1
    1c80:	a0 40       	sbci	r26, 0x00	; 0
    1c82:	b0 40       	sbci	r27, 0x00	; 0
    1c84:	e1 f7       	brne	.-8      	; 0x1c7e <ht1632c_print_buffer+0x94>
    1c86:	00 c0       	rjmp	.+0      	; 0x1c88 <ht1632c_print_buffer+0x9e>
    1c88:	00 00       	nop
		ledmatrix[31] = buffer[i] << 5;
		_delay_ms(35);
	}
	
	//Shift buffer out of visible area
	for (i = 0; i < (length/4); i++)
    1c8a:	21 96       	adiw	r28, 0x01	; 1
    1c8c:	c0 17       	cp	r28, r16
    1c8e:	d1 07       	cpc	r29, r17
    1c90:	90 f3       	brcs	.-28     	; 0x1c76 <ht1632c_print_buffer+0x8c>
	{
		ht1632c_shift_left();
		_delay_ms(35);
	}
}
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	1f 91       	pop	r17
    1c98:	0f 91       	pop	r16
    1c9a:	ff 90       	pop	r15
    1c9c:	ef 90       	pop	r14
    1c9e:	df 90       	pop	r13
    1ca0:	cf 90       	pop	r12
    1ca2:	bf 90       	pop	r11
    1ca4:	af 90       	pop	r10
    1ca6:	9f 90       	pop	r9
    1ca8:	08 95       	ret

00001caa <ht1632c_scroll_print>:
		}
	}
	ht1632c_refresh_screen();
}

void ht1632c_scroll_print(char *str, bool big_font) {
    1caa:	9f 92       	push	r9
    1cac:	af 92       	push	r10
    1cae:	bf 92       	push	r11
    1cb0:	cf 92       	push	r12
    1cb2:	df 92       	push	r13
    1cb4:	ef 92       	push	r14
    1cb6:	ff 92       	push	r15
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	ec 01       	movw	r28, r24
    1cc2:	96 2e       	mov	r9, r22
	uint16_t i = 0;
	uint16_t length;
	
	//Calculate length of buffer based on string size
	if (big_font) {
    1cc4:	66 23       	and	r22, r22
    1cc6:	81 f0       	breq	.+32     	; 0x1ce8 <ht1632c_scroll_print+0x3e>
		length = strlen(str)*6;
    1cc8:	fc 01       	movw	r30, r24
    1cca:	01 90       	ld	r0, Z+
    1ccc:	00 20       	and	r0, r0
    1cce:	e9 f7       	brne	.-6      	; 0x1cca <ht1632c_scroll_print+0x20>
    1cd0:	31 97       	sbiw	r30, 0x01	; 1
    1cd2:	e8 1b       	sub	r30, r24
    1cd4:	f9 0b       	sbc	r31, r25
    1cd6:	5f 01       	movw	r10, r30
    1cd8:	aa 0c       	add	r10, r10
    1cda:	bb 1c       	adc	r11, r11
    1cdc:	ea 0d       	add	r30, r10
    1cde:	fb 1d       	adc	r31, r11
    1ce0:	5f 01       	movw	r10, r30
    1ce2:	aa 0c       	add	r10, r10
    1ce4:	bb 1c       	adc	r11, r11
    1ce6:	0c c0       	rjmp	.+24     	; 0x1d00 <ht1632c_scroll_print+0x56>
	} else {
		length = strlen(str)*4;
    1ce8:	fc 01       	movw	r30, r24
    1cea:	01 90       	ld	r0, Z+
    1cec:	00 20       	and	r0, r0
    1cee:	e9 f7       	brne	.-6      	; 0x1cea <ht1632c_scroll_print+0x40>
    1cf0:	31 97       	sbiw	r30, 0x01	; 1
    1cf2:	e8 1b       	sub	r30, r24
    1cf4:	f9 0b       	sbc	r31, r25
    1cf6:	5f 01       	movw	r10, r30
    1cf8:	aa 0c       	add	r10, r10
    1cfa:	bb 1c       	adc	r11, r11
    1cfc:	aa 0c       	add	r10, r10
    1cfe:	bb 1c       	adc	r11, r11
	}
	
	//This is a potential stack overflow...
	char *buffer;
	buffer = (char *) calloc(length,sizeof(char));
    1d00:	61 e0       	ldi	r22, 0x01	; 1
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	c5 01       	movw	r24, r10
    1d06:	0e 94 68 31 	call	0x62d0	; 0x62d0 <calloc>
    1d0a:	6c 01       	movw	r12, r24
    1d0c:	7e 01       	movw	r14, r28
	//char buffer[100];
	//memset(buffer,0,100);
	
	//Fill buffer with text
	while(*str) {
    1d0e:	00 e0       	ldi	r16, 0x00	; 0
    1d10:	10 e0       	ldi	r17, 0x00	; 0
    1d12:	c0 e0       	ldi	r28, 0x00	; 0
    1d14:	d0 e0       	ldi	r29, 0x00	; 0
    1d16:	0c c0       	rjmp	.+24     	; 0x1d30 <ht1632c_scroll_print+0x86>
		if (big_font) {
    1d18:	99 20       	and	r9, r9
    1d1a:	21 f0       	breq	.+8      	; 0x1d24 <ht1632c_scroll_print+0x7a>
			ht1632c_draw_char_to_buffer(6*(i++), *str++, buffer);
    1d1c:	a6 01       	movw	r20, r12
    1d1e:	ce 01       	movw	r24, r28
    1d20:	e7 dd       	rcall	.-1074   	; 0x18f0 <ht1632c_draw_char_to_buffer>
    1d22:	03 c0       	rjmp	.+6      	; 0x1d2a <ht1632c_scroll_print+0x80>
		} else {
			ht1632c_draw_small_char_to_buffer(4*(i++), *str++, buffer);		
    1d24:	a6 01       	movw	r20, r12
    1d26:	c8 01       	movw	r24, r16
    1d28:	88 de       	rcall	.-752    	; 0x1a3a <ht1632c_draw_small_char_to_buffer>
    1d2a:	26 96       	adiw	r28, 0x06	; 6
    1d2c:	0c 5f       	subi	r16, 0xFC	; 252
    1d2e:	1f 4f       	sbci	r17, 0xFF	; 255
	buffer = (char *) calloc(length,sizeof(char));
	//char buffer[100];
	//memset(buffer,0,100);
	
	//Fill buffer with text
	while(*str) {
    1d30:	f7 01       	movw	r30, r14
    1d32:	61 91       	ld	r22, Z+
    1d34:	7f 01       	movw	r14, r30
    1d36:	61 11       	cpse	r22, r1
    1d38:	ef cf       	rjmp	.-34     	; 0x1d18 <ht1632c_scroll_print+0x6e>
		} else {
			ht1632c_draw_small_char_to_buffer(4*(i++), *str++, buffer);		
		}	
	}
	
	ht1632c_print_buffer(buffer, length);
    1d3a:	6a 2d       	mov	r22, r10
    1d3c:	c6 01       	movw	r24, r12
    1d3e:	55 df       	rcall	.-342    	; 0x1bea <ht1632c_print_buffer>
	
	free(buffer);
    1d40:	c6 01       	movw	r24, r12
    1d42:	0e 94 1a 32 	call	0x6434	; 0x6434 <free>
}
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	1f 91       	pop	r17
    1d4c:	0f 91       	pop	r16
    1d4e:	ff 90       	pop	r15
    1d50:	ef 90       	pop	r14
    1d52:	df 90       	pop	r13
    1d54:	cf 90       	pop	r12
    1d56:	bf 90       	pop	r11
    1d58:	af 90       	pop	r10
    1d5a:	9f 90       	pop	r9
    1d5c:	08 95       	ret

00001d5e <btn_setup>:
void btn_top_setup(void) {
	
	PORTC.DIRCLR |= PIN2_bm;
	PORTC.PIN2CTRL |= PORT_OPC_PULLDOWN_gc | PORT_ISC_RISING_gc;
	PORTC.INT0MASK |= PIN2_bm;
	PORTC.INTCTRL |= PORT_INT0LVL_HI_gc;
    1d5e:	e0 e0       	ldi	r30, 0x00	; 0
    1d60:	f6 e0       	ldi	r31, 0x06	; 6
    1d62:	92 81       	ldd	r25, Z+2	; 0x02
    1d64:	90 6e       	ori	r25, 0xE0	; 224
    1d66:	92 83       	std	Z+2, r25	; 0x02
    1d68:	e0 e2       	ldi	r30, 0x20	; 32
    1d6a:	f6 e0       	ldi	r31, 0x06	; 6
    1d6c:	92 81       	ldd	r25, Z+2	; 0x02
    1d6e:	91 60       	ori	r25, 0x01	; 1
    1d70:	92 83       	std	Z+2, r25	; 0x02
    1d72:	88 23       	and	r24, r24
    1d74:	41 f1       	breq	.+80     	; 0x1dc6 <btn_setup+0x68>
    1d76:	e0 e0       	ldi	r30, 0x00	; 0
    1d78:	f6 e0       	ldi	r31, 0x06	; 6
    1d7a:	85 89       	ldd	r24, Z+21	; 0x15
    1d7c:	82 60       	ori	r24, 0x02	; 2
    1d7e:	85 8b       	std	Z+21, r24	; 0x15
    1d80:	86 89       	ldd	r24, Z+22	; 0x16
    1d82:	82 60       	ori	r24, 0x02	; 2
    1d84:	86 8b       	std	Z+22, r24	; 0x16
    1d86:	87 89       	ldd	r24, Z+23	; 0x17
    1d88:	82 60       	ori	r24, 0x02	; 2
    1d8a:	87 8b       	std	Z+23, r24	; 0x17
    1d8c:	a0 e2       	ldi	r26, 0x20	; 32
    1d8e:	b6 e0       	ldi	r27, 0x06	; 6
    1d90:	50 96       	adiw	r26, 0x10	; 16
    1d92:	8c 91       	ld	r24, X
    1d94:	50 97       	sbiw	r26, 0x10	; 16
    1d96:	82 60       	ori	r24, 0x02	; 2
    1d98:	50 96       	adiw	r26, 0x10	; 16
    1d9a:	8c 93       	st	X, r24
    1d9c:	50 97       	sbiw	r26, 0x10	; 16
    1d9e:	82 85       	ldd	r24, Z+10	; 0x0a
    1da0:	80 6e       	ori	r24, 0xE0	; 224
    1da2:	82 87       	std	Z+10, r24	; 0x0a
    1da4:	1a 96       	adiw	r26, 0x0a	; 10
    1da6:	8c 91       	ld	r24, X
    1da8:	1a 97       	sbiw	r26, 0x0a	; 10
    1daa:	81 60       	ori	r24, 0x01	; 1
    1dac:	1a 96       	adiw	r26, 0x0a	; 10
    1dae:	8c 93       	st	X, r24
    1db0:	1a 97       	sbiw	r26, 0x0a	; 10
    1db2:	81 85       	ldd	r24, Z+9	; 0x09
    1db4:	83 60       	ori	r24, 0x03	; 3
    1db6:	81 87       	std	Z+9, r24	; 0x09
    1db8:	19 96       	adiw	r26, 0x09	; 9
    1dba:	8c 91       	ld	r24, X
    1dbc:	19 97       	sbiw	r26, 0x09	; 9
    1dbe:	83 60       	ori	r24, 0x03	; 3
    1dc0:	19 96       	adiw	r26, 0x09	; 9
    1dc2:	8c 93       	st	X, r24
    1dc4:	08 95       	ret
    1dc6:	e0 e0       	ldi	r30, 0x00	; 0
    1dc8:	f6 e0       	ldi	r31, 0x06	; 6
    1dca:	85 89       	ldd	r24, Z+21	; 0x15
    1dcc:	8d 7f       	andi	r24, 0xFD	; 253
    1dce:	85 8b       	std	Z+21, r24	; 0x15
    1dd0:	86 89       	ldd	r24, Z+22	; 0x16
    1dd2:	8d 7f       	andi	r24, 0xFD	; 253
    1dd4:	86 8b       	std	Z+22, r24	; 0x16
    1dd6:	87 89       	ldd	r24, Z+23	; 0x17
    1dd8:	8d 7f       	andi	r24, 0xFD	; 253
    1dda:	87 8b       	std	Z+23, r24	; 0x17
    1ddc:	a0 e2       	ldi	r26, 0x20	; 32
    1dde:	b6 e0       	ldi	r27, 0x06	; 6
    1de0:	50 96       	adiw	r26, 0x10	; 16
    1de2:	8c 91       	ld	r24, X
    1de4:	50 97       	sbiw	r26, 0x10	; 16
    1de6:	8d 7f       	andi	r24, 0xFD	; 253
    1de8:	50 96       	adiw	r26, 0x10	; 16
    1dea:	8c 93       	st	X, r24
    1dec:	50 97       	sbiw	r26, 0x10	; 16
    1dee:	82 85       	ldd	r24, Z+10	; 0x0a
    1df0:	8f 71       	andi	r24, 0x1F	; 31
    1df2:	82 87       	std	Z+10, r24	; 0x0a
    1df4:	1a 96       	adiw	r26, 0x0a	; 10
    1df6:	8c 91       	ld	r24, X
    1df8:	1a 97       	sbiw	r26, 0x0a	; 10
    1dfa:	8e 7f       	andi	r24, 0xFE	; 254
    1dfc:	1a 96       	adiw	r26, 0x0a	; 10
    1dfe:	8c 93       	st	X, r24
    1e00:	1a 97       	sbiw	r26, 0x0a	; 10
    1e02:	81 85       	ldd	r24, Z+9	; 0x09
    1e04:	8c 7f       	andi	r24, 0xFC	; 252
    1e06:	81 87       	std	Z+9, r24	; 0x09
    1e08:	19 96       	adiw	r26, 0x09	; 9
    1e0a:	8c 91       	ld	r24, X
    1e0c:	19 97       	sbiw	r26, 0x09	; 9
    1e0e:	8c 7f       	andi	r24, 0xFC	; 252
    1e10:	19 96       	adiw	r26, 0x09	; 9
    1e12:	8c 93       	st	X, r24
    1e14:	08 95       	ret

00001e16 <btn_si114x_enable_interrupt>:
    1e16:	e0 e0       	ldi	r30, 0x00	; 0
    1e18:	f6 e0       	ldi	r31, 0x06	; 6
    1e1a:	82 81       	ldd	r24, Z+2	; 0x02
    1e1c:	84 60       	ori	r24, 0x04	; 4
    1e1e:	82 83       	std	Z+2, r24	; 0x02
    1e20:	82 89       	ldd	r24, Z+18	; 0x12
    1e22:	82 60       	ori	r24, 0x02	; 2
    1e24:	82 8b       	std	Z+18, r24	; 0x12
    1e26:	83 85       	ldd	r24, Z+11	; 0x0b
    1e28:	84 60       	ori	r24, 0x04	; 4
    1e2a:	83 87       	std	Z+11, r24	; 0x0b
    1e2c:	81 85       	ldd	r24, Z+9	; 0x09
    1e2e:	8c 60       	ori	r24, 0x0C	; 12
    1e30:	81 87       	std	Z+9, r24	; 0x09
    1e32:	08 95       	ret

00001e34 <btn_check_press>:
	
}

button_t btn_check_press(void) {
    1e34:	cf 93       	push	r28
    1e36:	df 93       	push	r29
	
	if (!(PORTA.IN & BUTTON0)) {
    1e38:	e0 e0       	ldi	r30, 0x00	; 0
    1e3a:	f6 e0       	ldi	r31, 0x06	; 6
    1e3c:	80 85       	ldd	r24, Z+8	; 0x08
    1e3e:	85 fd       	sbrc	r24, 5
    1e40:	0b c0       	rjmp	.+22     	; 0x1e58 <btn_check_press+0x24>
		uwrite_hex(DACB.CH0OFFSETCAL);
    1e42:	c0 e2       	ldi	r28, 0x20	; 32
    1e44:	d3 e0       	ldi	r29, 0x03	; 3
    1e46:	89 85       	ldd	r24, Y+9	; 0x09
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	0e 94 df 30 	call	0x61be	; 0x61be <uwrite_hex>
		DACB.CH0OFFSETCAL += 1;
    1e4e:	89 85       	ldd	r24, Y+9	; 0x09
    1e50:	8f 5f       	subi	r24, 0xFF	; 255
    1e52:	89 87       	std	Y+9, r24	; 0x09
		return BTN1;
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	31 c0       	rjmp	.+98     	; 0x1eba <btn_check_press+0x86>
	} else if (!(PORTA.IN & BUTTON1)) {
    1e58:	e0 e0       	ldi	r30, 0x00	; 0
    1e5a:	f6 e0       	ldi	r31, 0x06	; 6
    1e5c:	80 85       	ldd	r24, Z+8	; 0x08
    1e5e:	86 fd       	sbrc	r24, 6
    1e60:	0b c0       	rjmp	.+22     	; 0x1e78 <btn_check_press+0x44>
		uwrite_hex(DACB.CH0OFFSETCAL);
    1e62:	c0 e2       	ldi	r28, 0x20	; 32
    1e64:	d3 e0       	ldi	r29, 0x03	; 3
    1e66:	89 85       	ldd	r24, Y+9	; 0x09
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	0e 94 df 30 	call	0x61be	; 0x61be <uwrite_hex>
		DACB.CH0OFFSETCAL -= 1;
    1e6e:	89 85       	ldd	r24, Y+9	; 0x09
    1e70:	81 50       	subi	r24, 0x01	; 1
    1e72:	89 87       	std	Y+9, r24	; 0x09
		return BTN2;
    1e74:	82 e0       	ldi	r24, 0x02	; 2
    1e76:	21 c0       	rjmp	.+66     	; 0x1eba <btn_check_press+0x86>
	} else if (!(PORTA.IN & BUTTON2)) {
    1e78:	e0 e0       	ldi	r30, 0x00	; 0
    1e7a:	f6 e0       	ldi	r31, 0x06	; 6
    1e7c:	80 85       	ldd	r24, Z+8	; 0x08
    1e7e:	88 23       	and	r24, r24
    1e80:	5c f0       	brlt	.+22     	; 0x1e98 <btn_check_press+0x64>
		uwrite_hex(DACB.CH0GAINCAL);
    1e82:	c0 e2       	ldi	r28, 0x20	; 32
    1e84:	d3 e0       	ldi	r29, 0x03	; 3
    1e86:	88 85       	ldd	r24, Y+8	; 0x08
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	0e 94 df 30 	call	0x61be	; 0x61be <uwrite_hex>
		DACB.CH0GAINCAL += 1;
    1e8e:	88 85       	ldd	r24, Y+8	; 0x08
    1e90:	8f 5f       	subi	r24, 0xFF	; 255
    1e92:	88 87       	std	Y+8, r24	; 0x08
		return BTN3;
    1e94:	83 e0       	ldi	r24, 0x03	; 3
    1e96:	11 c0       	rjmp	.+34     	; 0x1eba <btn_check_press+0x86>
	} else if (!(PORTB.IN & BUTTON3)) {
    1e98:	e0 e2       	ldi	r30, 0x20	; 32
    1e9a:	f6 e0       	ldi	r31, 0x06	; 6
    1e9c:	80 85       	ldd	r24, Z+8	; 0x08
    1e9e:	80 fd       	sbrc	r24, 0
    1ea0:	0b c0       	rjmp	.+22     	; 0x1eb8 <btn_check_press+0x84>
		uwrite_hex(DACB.CH0GAINCAL);
    1ea2:	c0 e2       	ldi	r28, 0x20	; 32
    1ea4:	d3 e0       	ldi	r29, 0x03	; 3
    1ea6:	88 85       	ldd	r24, Y+8	; 0x08
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	0e 94 df 30 	call	0x61be	; 0x61be <uwrite_hex>
		DACB.CH0GAINCAL -= 1;
    1eae:	88 85       	ldd	r24, Y+8	; 0x08
    1eb0:	81 50       	subi	r24, 0x01	; 1
    1eb2:	88 87       	std	Y+8, r24	; 0x08
		return BTN4;
    1eb4:	84 e0       	ldi	r24, 0x04	; 4
    1eb6:	01 c0       	rjmp	.+2      	; 0x1eba <btn_check_press+0x86>
	} else {
		return NONE;
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1eba:	df 91       	pop	r29
    1ebc:	cf 91       	pop	r28
    1ebe:	08 95       	ret

00001ec0 <__vector_66>:

ISR(PORTA_INT0_vect) {
    1ec0:	1f 92       	push	r1
    1ec2:	0f 92       	push	r0
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	0f 92       	push	r0
    1ec8:	11 24       	eor	r1, r1
    1eca:	0b b6       	in	r0, 0x3b	; 59
    1ecc:	0f 92       	push	r0
    1ece:	2f 93       	push	r18
    1ed0:	3f 93       	push	r19
    1ed2:	4f 93       	push	r20
    1ed4:	5f 93       	push	r21
    1ed6:	6f 93       	push	r22
    1ed8:	7f 93       	push	r23
    1eda:	8f 93       	push	r24
    1edc:	9f 93       	push	r25
    1ede:	af 93       	push	r26
    1ee0:	bf 93       	push	r27
    1ee2:	ef 93       	push	r30
    1ee4:	ff 93       	push	r31
	btn_status = btn_check_press();
    1ee6:	a6 df       	rcall	.-180    	; 0x1e34 <btn_check_press>
    1ee8:	80 93 bb 26 	sts	0x26BB, r24
	//printf("%d",btn_status);
}
    1eec:	ff 91       	pop	r31
    1eee:	ef 91       	pop	r30
    1ef0:	bf 91       	pop	r27
    1ef2:	af 91       	pop	r26
    1ef4:	9f 91       	pop	r25
    1ef6:	8f 91       	pop	r24
    1ef8:	7f 91       	pop	r23
    1efa:	6f 91       	pop	r22
    1efc:	5f 91       	pop	r21
    1efe:	4f 91       	pop	r20
    1f00:	3f 91       	pop	r19
    1f02:	2f 91       	pop	r18
    1f04:	0f 90       	pop	r0
    1f06:	0b be       	out	0x3b, r0	; 59
    1f08:	0f 90       	pop	r0
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	0f 90       	pop	r0
    1f0e:	1f 90       	pop	r1
    1f10:	18 95       	reti

00001f12 <__vector_34>:

ISR(PORTB_INT0_vect) {
    1f12:	1f 92       	push	r1
    1f14:	0f 92       	push	r0
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	0f 92       	push	r0
    1f1a:	11 24       	eor	r1, r1
    1f1c:	0b b6       	in	r0, 0x3b	; 59
    1f1e:	0f 92       	push	r0
    1f20:	2f 93       	push	r18
    1f22:	3f 93       	push	r19
    1f24:	4f 93       	push	r20
    1f26:	5f 93       	push	r21
    1f28:	6f 93       	push	r22
    1f2a:	7f 93       	push	r23
    1f2c:	8f 93       	push	r24
    1f2e:	9f 93       	push	r25
    1f30:	af 93       	push	r26
    1f32:	bf 93       	push	r27
    1f34:	ef 93       	push	r30
    1f36:	ff 93       	push	r31
	btn_status = btn_check_press();
    1f38:	7d df       	rcall	.-262    	; 0x1e34 <btn_check_press>
    1f3a:	80 93 bb 26 	sts	0x26BB, r24
	printf("%d",btn_status);
    1f3e:	80 91 bb 26 	lds	r24, 0x26BB
    1f42:	1f 92       	push	r1
    1f44:	8f 93       	push	r24
    1f46:	8b e4       	ldi	r24, 0x4B	; 75
    1f48:	92 e2       	ldi	r25, 0x22	; 34
    1f4a:	9f 93       	push	r25
    1f4c:	8f 93       	push	r24
    1f4e:	0e 94 ef 32 	call	0x65de	; 0x65de <printf>
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
}
    1f5a:	ff 91       	pop	r31
    1f5c:	ef 91       	pop	r30
    1f5e:	bf 91       	pop	r27
    1f60:	af 91       	pop	r26
    1f62:	9f 91       	pop	r25
    1f64:	8f 91       	pop	r24
    1f66:	7f 91       	pop	r23
    1f68:	6f 91       	pop	r22
    1f6a:	5f 91       	pop	r21
    1f6c:	4f 91       	pop	r20
    1f6e:	3f 91       	pop	r19
    1f70:	2f 91       	pop	r18
    1f72:	0f 90       	pop	r0
    1f74:	0b be       	out	0x3b, r0	; 59
    1f76:	0f 90       	pop	r0
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	0f 90       	pop	r0
    1f7c:	1f 90       	pop	r1
    1f7e:	18 95       	reti

00001f80 <__vector_67>:

ISR(PORTA_INT1_vect) {
    1f80:	1f 92       	push	r1
    1f82:	0f 92       	push	r0
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	0f 92       	push	r0
    1f88:	11 24       	eor	r1, r1
    1f8a:	0b b6       	in	r0, 0x3b	; 59
    1f8c:	0f 92       	push	r0
    1f8e:	ef 92       	push	r14
    1f90:	ff 92       	push	r15
    1f92:	0f 93       	push	r16
    1f94:	1f 93       	push	r17
    1f96:	2f 93       	push	r18
    1f98:	3f 93       	push	r19
    1f9a:	4f 93       	push	r20
    1f9c:	5f 93       	push	r21
    1f9e:	6f 93       	push	r22
    1fa0:	7f 93       	push	r23
    1fa2:	8f 93       	push	r24
    1fa4:	9f 93       	push	r25
    1fa6:	af 93       	push	r26
    1fa8:	bf 93       	push	r27
    1faa:	ef 93       	push	r30
    1fac:	ff 93       	push	r31
    1fae:	cf 93       	push	r28
    1fb0:	df 93       	push	r29
    1fb2:	00 d0       	rcall	.+0      	; 0x1fb4 <__vector_67+0x34>
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t data[2];
	twi_read_packet(&TWIC,SI114X_ADDR,50,REG_IRQ_STATUS,data,1);
    1fb8:	ee 24       	eor	r14, r14
    1fba:	e3 94       	inc	r14
    1fbc:	f1 2c       	mov	r15, r1
    1fbe:	8e 01       	movw	r16, r28
    1fc0:	0f 5f       	subi	r16, 0xFF	; 255
    1fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc4:	21 e2       	ldi	r18, 0x21	; 33
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	42 e3       	ldi	r20, 0x32	; 50
    1fca:	50 e0       	ldi	r21, 0x00	; 0
    1fcc:	6a e5       	ldi	r22, 0x5A	; 90
    1fce:	70 e0       	ldi	r23, 0x00	; 0
    1fd0:	80 e8       	ldi	r24, 0x80	; 128
    1fd2:	94 e0       	ldi	r25, 0x04	; 4
    1fd4:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <twi_read_packet>
	si114x_status = data[0];
    1fd8:	89 81       	ldd	r24, Y+1	; 0x01
    1fda:	80 93 ee 26 	sts	0x26EE, r24
	//data[0] = 0x00;
	//twi_write_packet(&TWIC,SI114X_ADDR,50,REG_IRQ_STATUS,data,1);

	puts("Interrupt from Si114x! \n");
    1fde:	8e e4       	ldi	r24, 0x4E	; 78
    1fe0:	92 e2       	ldi	r25, 0x22	; 34
    1fe2:	0e 94 00 33 	call	0x6600	; 0x6600 <puts>
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	ff 91       	pop	r31
    1ff0:	ef 91       	pop	r30
    1ff2:	bf 91       	pop	r27
    1ff4:	af 91       	pop	r26
    1ff6:	9f 91       	pop	r25
    1ff8:	8f 91       	pop	r24
    1ffa:	7f 91       	pop	r23
    1ffc:	6f 91       	pop	r22
    1ffe:	5f 91       	pop	r21
    2000:	4f 91       	pop	r20
    2002:	3f 91       	pop	r19
    2004:	2f 91       	pop	r18
    2006:	1f 91       	pop	r17
    2008:	0f 91       	pop	r16
    200a:	ff 90       	pop	r15
    200c:	ef 90       	pop	r14
    200e:	0f 90       	pop	r0
    2010:	0b be       	out	0x3b, r0	; 59
    2012:	0f 90       	pop	r0
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	0f 90       	pop	r0
    2018:	1f 90       	pop	r1
    201a:	18 95       	reti

0000201c <rtc_setup>:
	} else if (strstr(month,"Dec")) {
		return 12;
	} else {
		return 0;
	}
}
    201c:	88 ed       	ldi	r24, 0xD8	; 216
    201e:	84 bf       	out	0x34, r24	; 52
    2020:	8b e0       	ldi	r24, 0x0B	; 11
    2022:	e0 e4       	ldi	r30, 0x40	; 64
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	83 83       	std	Z+3, r24	; 0x03
    2028:	e0 e0       	ldi	r30, 0x00	; 0
    202a:	f4 e0       	ldi	r31, 0x04	; 4
    202c:	81 81       	ldd	r24, Z+1	; 0x01
    202e:	80 fd       	sbrc	r24, 0
    2030:	fd cf       	rjmp	.-6      	; 0x202c <rtc_setup+0x10>
    2032:	e0 e0       	ldi	r30, 0x00	; 0
    2034:	f4 e0       	ldi	r31, 0x04	; 4
    2036:	80 e8       	ldi	r24, 0x80	; 128
    2038:	97 e0       	ldi	r25, 0x07	; 7
    203a:	82 87       	std	Z+10, r24	; 0x0a
    203c:	93 87       	std	Z+11, r25	; 0x0b
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	82 83       	std	Z+2, r24	; 0x02
    2042:	10 86       	std	Z+8, r1	; 0x08
    2044:	11 86       	std	Z+9, r1	; 0x09
    2046:	14 86       	std	Z+12, r1	; 0x0c
    2048:	15 86       	std	Z+13, r1	; 0x0d
    204a:	87 e0       	ldi	r24, 0x07	; 7
    204c:	80 83       	st	Z, r24
    204e:	08 95       	ret

00002050 <rtc_update_display>:
    2050:	6f 92       	push	r6
    2052:	7f 92       	push	r7
    2054:	8f 92       	push	r8
    2056:	9f 92       	push	r9
    2058:	af 92       	push	r10
    205a:	bf 92       	push	r11
    205c:	cf 92       	push	r12
    205e:	df 92       	push	r13
    2060:	ef 92       	push	r14
    2062:	ff 92       	push	r15
    2064:	0f 93       	push	r16
    2066:	1f 93       	push	r17
    2068:	cf 93       	push	r28
    206a:	df 93       	push	r29
    206c:	00 d0       	rcall	.+0      	; 0x206e <rtc_update_display+0x1e>
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
    2072:	78 2e       	mov	r7, r24
    2074:	66 2e       	mov	r6, r22
    2076:	70 e0       	ldi	r23, 0x00	; 0
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	8e 01       	movw	r16, r28
    207e:	0f 5f       	subi	r16, 0xFF	; 255
    2080:	1f 4f       	sbci	r17, 0xFF	; 255
    2082:	0f 2e       	mov	r0, r31
    2084:	fa e0       	ldi	r31, 0x0A	; 10
    2086:	8f 2e       	mov	r8, r31
    2088:	91 2c       	mov	r9, r1
    208a:	a1 2c       	mov	r10, r1
    208c:	b1 2c       	mov	r11, r1
    208e:	f0 2d       	mov	r31, r0
    2090:	78 01       	movw	r14, r16
    2092:	2f ef       	ldi	r18, 0xFF	; 255
    2094:	e2 1a       	sub	r14, r18
    2096:	f2 0a       	sbc	r15, r18
    2098:	67 01       	movw	r12, r14
    209a:	a5 01       	movw	r20, r10
    209c:	94 01       	movw	r18, r8
    209e:	0e 94 13 31 	call	0x6226	; 0x6226 <__udivmodsi4>
    20a2:	60 5d       	subi	r22, 0xD0	; 208
    20a4:	f8 01       	movw	r30, r16
    20a6:	60 83       	st	Z, r22
    20a8:	62 2f       	mov	r22, r18
    20aa:	73 2f       	mov	r23, r19
    20ac:	84 2f       	mov	r24, r20
    20ae:	95 2f       	mov	r25, r21
    20b0:	61 15       	cp	r22, r1
    20b2:	71 05       	cpc	r23, r1
    20b4:	81 05       	cpc	r24, r1
    20b6:	91 05       	cpc	r25, r1
    20b8:	11 f0       	breq	.+4      	; 0x20be <rtc_update_display+0x6e>
    20ba:	87 01       	movw	r16, r14
    20bc:	e9 cf       	rjmp	.-46     	; 0x2090 <rtc_update_display+0x40>
    20be:	ce 01       	movw	r24, r28
    20c0:	01 96       	adiw	r24, 0x01	; 1
    20c2:	c8 1a       	sub	r12, r24
    20c4:	d9 0a       	sbc	r13, r25
    20c6:	c6 01       	movw	r24, r12
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	18 16       	cp	r1, r24
    20cc:	19 06       	cpc	r1, r25
    20ce:	a4 f4       	brge	.+40     	; 0x20f8 <rtc_update_display+0xa8>
    20d0:	a1 e0       	ldi	r26, 0x01	; 1
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	ac 0f       	add	r26, r28
    20d6:	bd 1f       	adc	r27, r29
    20d8:	ac 0d       	add	r26, r12
    20da:	bd 1d       	adc	r27, r13
    20dc:	fe 01       	movw	r30, r28
    20de:	31 96       	adiw	r30, 0x01	; 1
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	40 81       	ld	r20, Z
    20e6:	5e 91       	ld	r21, -X
    20e8:	51 93       	st	Z+, r21
    20ea:	4c 93       	st	X, r20
    20ec:	2f 5f       	subi	r18, 0xFF	; 255
    20ee:	3f 4f       	sbci	r19, 0xFF	; 255
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	28 17       	cp	r18, r24
    20f4:	39 07       	cpc	r19, r25
    20f6:	b4 f3       	brlt	.-20     	; 0x20e4 <rtc_update_display+0x94>
    20f8:	f9 e0       	ldi	r31, 0x09	; 9
    20fa:	f6 15       	cp	r31, r6
    20fc:	20 f0       	brcs	.+8      	; 0x2106 <rtc_update_display+0xb6>
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	90 e3       	ldi	r25, 0x30	; 48
    2102:	99 83       	std	Y+1, r25	; 0x01
    2104:	8a 83       	std	Y+2, r24	; 0x02
    2106:	71 10       	cpse	r7, r1
    2108:	07 c0       	rjmp	.+14     	; 0x2118 <rtc_update_display+0xc8>
    210a:	00 e0       	ldi	r16, 0x00	; 0
    210c:	28 e0       	ldi	r18, 0x08	; 8
    210e:	40 e1       	ldi	r20, 0x10	; 16
    2110:	60 e0       	ldi	r22, 0x00	; 0
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	1c db       	rcall	.-2504   	; 0x174e <ht1632c_draw_filled_rect>
    2116:	06 c0       	rjmp	.+12     	; 0x2124 <rtc_update_display+0xd4>
    2118:	00 e0       	ldi	r16, 0x00	; 0
    211a:	29 e0       	ldi	r18, 0x09	; 9
    211c:	40 e1       	ldi	r20, 0x10	; 16
    211e:	67 e0       	ldi	r22, 0x07	; 7
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	15 db       	rcall	.-2518   	; 0x174e <ht1632c_draw_filled_rect>
    2124:	e7 2c       	mov	r14, r7
    2126:	f1 2c       	mov	r15, r1
    2128:	01 e0       	ldi	r16, 0x01	; 1
    212a:	21 e0       	ldi	r18, 0x01	; 1
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	49 81       	ldd	r20, Y+1	; 0x01
    2130:	b7 01       	movw	r22, r14
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	04 dc       	rcall	.-2040   	; 0x1940 <ht1632c_draw_char>
    2138:	21 e0       	ldi	r18, 0x01	; 1
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	4a 81       	ldd	r20, Y+2	; 0x02
    213e:	b7 01       	movw	r22, r14
    2140:	89 e0       	ldi	r24, 0x09	; 9
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	fd db       	rcall	.-2054   	; 0x1940 <ht1632c_draw_char>
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	df 91       	pop	r29
    214c:	cf 91       	pop	r28
    214e:	1f 91       	pop	r17
    2150:	0f 91       	pop	r16
    2152:	ff 90       	pop	r15
    2154:	ef 90       	pop	r14
    2156:	df 90       	pop	r13
    2158:	cf 90       	pop	r12
    215a:	bf 90       	pop	r11
    215c:	af 90       	pop	r10
    215e:	9f 90       	pop	r9
    2160:	8f 90       	pop	r8
    2162:	7f 90       	pop	r7
    2164:	6f 90       	pop	r6
    2166:	08 95       	ret

00002168 <rtc_enable_time_render>:
    2168:	10 92 db 25 	sts	0x25DB, r1
    216c:	60 91 8c 25 	lds	r22, 0x258C
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	6e df       	rcall	.-292    	; 0x2050 <rtc_update_display>
    2174:	60 91 8d 25 	lds	r22, 0x258D
    2178:	89 e0       	ldi	r24, 0x09	; 9
    217a:	6a df       	rcall	.-300    	; 0x2050 <rtc_update_display>
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	80 93 0d 20 	sts	0x200D, r24
    2182:	08 95       	ret

00002184 <get_days_in_month>:

uint8_t get_days_in_month(months_t month, uint16_t year) 
{
    2184:	9b 01       	movw	r18, r22
	switch (month)
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	fc 01       	movw	r30, r24
    218a:	31 97       	sbiw	r30, 0x01	; 1
    218c:	ec 30       	cpi	r30, 0x0C	; 12
    218e:	f1 05       	cpc	r31, r1
    2190:	b8 f4       	brcc	.+46     	; 0x21c0 <get_days_in_month+0x3c>
    2192:	e2 50       	subi	r30, 0x02	; 2
    2194:	ff 4f       	sbci	r31, 0xFF	; 255
    2196:	0c 94 35 31 	jmp	0x626a	; 0x626a <__tablejump2__>
	{
		case January: return 31;
		case Februrary: 
		if (is_leap_year(year))
    219a:	86 2f       	mov	r24, r22
    219c:	93 2f       	mov	r25, r19

#define CLOCK_NAME "MARK"
#define CLOCK_ID   1

static inline bool is_leap_year(int year) {
	if ((year & 3) == 0 && ((year % 25) != 0 || (year & 15) == 0)) {
    219e:	ab 01       	movw	r20, r22
    21a0:	43 70       	andi	r20, 0x03	; 3
    21a2:	55 27       	eor	r21, r21
    21a4:	45 2b       	or	r20, r21
    21a6:	89 f4       	brne	.+34     	; 0x21ca <get_days_in_month+0x46>
    21a8:	69 e1       	ldi	r22, 0x19	; 25
    21aa:	70 e0       	ldi	r23, 0x00	; 0
    21ac:	0e 94 00 31 	call	0x6200	; 0x6200 <__divmodhi4>
    21b0:	89 2b       	or	r24, r25
    21b2:	69 f4       	brne	.+26     	; 0x21ce <get_days_in_month+0x4a>
    21b4:	2f 70       	andi	r18, 0x0F	; 15
    21b6:	33 27       	eor	r19, r19
    21b8:	23 2b       	or	r18, r19
    21ba:	59 f0       	breq	.+22     	; 0x21d2 <get_days_in_month+0x4e>
			return 29;
		else
			return 28;
    21bc:	8c e1       	ldi	r24, 0x1C	; 28
    21be:	08 95       	ret
    21c0:	08 95       	ret

uint8_t get_days_in_month(months_t month, uint16_t year) 
{
	switch (month)
	{
		case January: return 31;
    21c2:	8f e1       	ldi	r24, 0x1F	; 31
    21c4:	08 95       	ret
		if (is_leap_year(year))
			return 29;
		else
			return 28;
		case March: return 31;
		case April: return 30;
    21c6:	8e e1       	ldi	r24, 0x1E	; 30
    21c8:	08 95       	ret
		case January: return 31;
		case Februrary: 
		if (is_leap_year(year))
			return 29;
		else
			return 28;
    21ca:	8c e1       	ldi	r24, 0x1C	; 28
    21cc:	08 95       	ret
	switch (month)
	{
		case January: return 31;
		case Februrary: 
		if (is_leap_year(year))
			return 29;
    21ce:	8d e1       	ldi	r24, 0x1D	; 29
    21d0:	08 95       	ret
    21d2:	8d e1       	ldi	r24, 0x1D	; 29
		case September: return 30;
		case October: return 31;
		case November: return 30;
		case December: return 31;
	}
}
    21d4:	08 95       	ret

000021d6 <__vector_10>:

ISR(RTC_OVF_vect) {
    21d6:	1f 92       	push	r1
    21d8:	0f 92       	push	r0
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	0f 92       	push	r0
    21de:	11 24       	eor	r1, r1
    21e0:	0b b6       	in	r0, 0x3b	; 59
    21e2:	0f 92       	push	r0
    21e4:	0f 93       	push	r16
    21e6:	1f 93       	push	r17
    21e8:	2f 93       	push	r18
    21ea:	3f 93       	push	r19
    21ec:	4f 93       	push	r20
    21ee:	5f 93       	push	r21
    21f0:	6f 93       	push	r22
    21f2:	7f 93       	push	r23
    21f4:	8f 93       	push	r24
    21f6:	9f 93       	push	r25
    21f8:	af 93       	push	r26
    21fa:	bf 93       	push	r27
    21fc:	cf 93       	push	r28
    21fe:	df 93       	push	r29
    2200:	ef 93       	push	r30
    2202:	ff 93       	push	r31
	if (++env_var.time.minutes == 60) {
    2204:	ec e8       	ldi	r30, 0x8C	; 140
    2206:	f5 e2       	ldi	r31, 0x25	; 37
    2208:	60 81       	ld	r22, Z
    220a:	6f 5f       	subi	r22, 0xFF	; 255
    220c:	60 83       	st	Z, r22
    220e:	6c 33       	cpi	r22, 0x3C	; 60
    2210:	09 f0       	breq	.+2      	; 0x2214 <__vector_10+0x3e>
    2212:	5e c0       	rjmp	.+188    	; 0x22d0 <__vector_10+0xfa>
		
		env_var.time.minutes = 0;
    2214:	10 92 8c 25 	sts	0x258C, r1
		if (disp_time) {
    2218:	80 91 0d 20 	lds	r24, 0x200D
    221c:	88 23       	and	r24, r24
    221e:	21 f0       	breq	.+8      	; 0x2228 <__vector_10+0x52>
			rtc_update_display(BOTTOM,env_var.time.minutes);
    2220:	60 e0       	ldi	r22, 0x00	; 0
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	15 df       	rcall	.-470    	; 0x2050 <rtc_update_display>
			ht1632c_refresh_screen();
    2226:	f8 da       	rcall	.-2576   	; 0x1818 <ht1632c_refresh_screen>
		}
		
		//Todo: implement DST - Daylight Saving Time
		
		if (++env_var.time.hours == 24) {
    2228:	ed e8       	ldi	r30, 0x8D	; 141
    222a:	f5 e2       	ldi	r31, 0x25	; 37
    222c:	60 81       	ld	r22, Z
    222e:	6f 5f       	subi	r22, 0xFF	; 255
    2230:	60 83       	st	Z, r22
    2232:	68 31       	cpi	r22, 0x18	; 24
    2234:	09 f0       	breq	.+2      	; 0x2238 <__vector_10+0x62>
    2236:	42 c0       	rjmp	.+132    	; 0x22bc <__vector_10+0xe6>
			//This might crash...
			if (env_var.time.weekday++ == Saturday) {
    2238:	80 91 8f 25 	lds	r24, 0x258F
    223c:	86 30       	cpi	r24, 0x06	; 6
    223e:	21 f0       	breq	.+8      	; 0x2248 <__vector_10+0x72>
    2240:	8f 5f       	subi	r24, 0xFF	; 255
    2242:	80 93 8f 25 	sts	0x258F, r24
    2246:	0d c0       	rjmp	.+26     	; 0x2262 <__vector_10+0x8c>
				env_var.time.weekday = Sunday;
    2248:	10 92 8f 25 	sts	0x258F, r1
				if (env_var.time.week++ == 52) {
    224c:	80 91 90 25 	lds	r24, 0x2590
    2250:	84 33       	cpi	r24, 0x34	; 52
    2252:	21 f0       	breq	.+8      	; 0x225c <__vector_10+0x86>
    2254:	8f 5f       	subi	r24, 0xFF	; 255
    2256:	80 93 90 25 	sts	0x2590, r24
    225a:	03 c0       	rjmp	.+6      	; 0x2262 <__vector_10+0x8c>
					env_var.time.week = 1;
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	80 93 90 25 	sts	0x2590, r24
				}
			}
			if (env_var.time.day++ == get_days_in_month(env_var.time.month,env_var.time.year)) {
    2262:	ee e8       	ldi	r30, 0x8E	; 142
    2264:	f5 e2       	ldi	r31, 0x25	; 37
    2266:	10 81       	ld	r17, Z
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	81 0f       	add	r24, r17
    226c:	80 83       	st	Z, r24
    226e:	c0 91 92 25 	lds	r28, 0x2592
    2272:	d0 91 93 25 	lds	r29, 0x2593
    2276:	00 91 91 25 	lds	r16, 0x2591
    227a:	be 01       	movw	r22, r28
    227c:	80 2f       	mov	r24, r16
    227e:	82 df       	rcall	.-252    	; 0x2184 <get_days_in_month>
    2280:	18 13       	cpse	r17, r24
    2282:	11 c0       	rjmp	.+34     	; 0x22a6 <__vector_10+0xd0>
				env_var.time.day = 1;
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	80 93 8e 25 	sts	0x258E, r24
				if (env_var.time.month++ == December) {
    228a:	0c 30       	cpi	r16, 0x0C	; 12
    228c:	21 f0       	breq	.+8      	; 0x2296 <__vector_10+0xc0>
    228e:	0f 5f       	subi	r16, 0xFF	; 255
    2290:	00 93 91 25 	sts	0x2591, r16
    2294:	08 c0       	rjmp	.+16     	; 0x22a6 <__vector_10+0xd0>
					env_var.time.month = January;
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	80 93 91 25 	sts	0x2591, r24
					env_var.time.year++;
    229c:	21 96       	adiw	r28, 0x01	; 1
    229e:	c0 93 92 25 	sts	0x2592, r28
    22a2:	d0 93 93 25 	sts	0x2593, r29
				}
			}

			env_var.time.hours = 0;
    22a6:	10 92 8d 25 	sts	0x258D, r1
			if (disp_time) {
    22aa:	80 91 0d 20 	lds	r24, 0x200D
    22ae:	88 23       	and	r24, r24
    22b0:	61 f0       	breq	.+24     	; 0x22ca <__vector_10+0xf4>
				rtc_update_display(TOP,env_var.time.hours);
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	89 e0       	ldi	r24, 0x09	; 9
    22b6:	cc de       	rcall	.-616    	; 0x2050 <rtc_update_display>
				ht1632c_refresh_screen();
    22b8:	af da       	rcall	.-2722   	; 0x1818 <ht1632c_refresh_screen>
    22ba:	07 c0       	rjmp	.+14     	; 0x22ca <__vector_10+0xf4>
			}
			} else {
			if (disp_time) {
    22bc:	80 91 0d 20 	lds	r24, 0x200D
    22c0:	88 23       	and	r24, r24
    22c2:	19 f0       	breq	.+6      	; 0x22ca <__vector_10+0xf4>
				rtc_update_display(TOP,env_var.time.hours);
    22c4:	89 e0       	ldi	r24, 0x09	; 9
    22c6:	c4 de       	rcall	.-632    	; 0x2050 <rtc_update_display>
				ht1632c_refresh_screen();
    22c8:	a7 da       	rcall	.-2738   	; 0x1818 <ht1632c_refresh_screen>
			}
		}
		env_var.time.minutes = 0;
    22ca:	10 92 8c 25 	sts	0x258C, r1
    22ce:	07 c0       	rjmp	.+14     	; 0x22de <__vector_10+0x108>
		} else {
		if (disp_time) {
    22d0:	80 91 0d 20 	lds	r24, 0x200D
    22d4:	88 23       	and	r24, r24
    22d6:	19 f0       	breq	.+6      	; 0x22de <__vector_10+0x108>
			rtc_update_display(BOTTOM,env_var.time.minutes);
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	ba de       	rcall	.-652    	; 0x2050 <rtc_update_display>
			ht1632c_refresh_screen();
    22dc:	9d da       	rcall	.-2758   	; 0x1818 <ht1632c_refresh_screen>
		}
	}
    22de:	ff 91       	pop	r31
    22e0:	ef 91       	pop	r30
    22e2:	df 91       	pop	r29
    22e4:	cf 91       	pop	r28
    22e6:	bf 91       	pop	r27
    22e8:	af 91       	pop	r26
    22ea:	9f 91       	pop	r25
    22ec:	8f 91       	pop	r24
    22ee:	7f 91       	pop	r23
    22f0:	6f 91       	pop	r22
    22f2:	5f 91       	pop	r21
    22f4:	4f 91       	pop	r20
    22f6:	3f 91       	pop	r19
    22f8:	2f 91       	pop	r18
    22fa:	1f 91       	pop	r17
    22fc:	0f 91       	pop	r16
    22fe:	0f 90       	pop	r0
    2300:	0b be       	out	0x3b, r0	; 59
    2302:	0f 90       	pop	r0
    2304:	0f be       	out	0x3f, r0	; 63
    2306:	0f 90       	pop	r0
    2308:	1f 90       	pop	r1
    230a:	18 95       	reti

0000230c <_sendCmd>:
	u8 code ucoef[4] = { 0x7B, 0x6B, 0x01, 0x00 } ;
	
	// This will write 4 bytes starting with I2C address 0x13
	response = Si114xBlockWrite( si114x_handle, REG_UCOEF0, 4, &ucoef[0] );
	return response;
}
    230c:	df 92       	push	r13
    230e:	ef 92       	push	r14
    2310:	ff 92       	push	r15
    2312:	0f 93       	push	r16
    2314:	1f 93       	push	r17
    2316:	cf 93       	push	r28
    2318:	df 93       	push	r29
    231a:	ec 01       	movw	r28, r24
    231c:	d6 2e       	mov	r13, r22
    231e:	60 e2       	ldi	r22, 0x20	; 32
    2320:	3c d6       	rcall	.+3192   	; 0x2f9a <Si114xReadFromRegister>
    2322:	8c 01       	movw	r16, r24
    2324:	99 23       	and	r25, r25
    2326:	34 f1       	brlt	.+76     	; 0x2374 <_sendCmd+0x68>
    2328:	60 e3       	ldi	r22, 0x30	; 48
    232a:	ce 01       	movw	r24, r28
    232c:	36 d6       	rcall	.+3180   	; 0x2f9a <Si114xReadFromRegister>
    232e:	81 30       	cpi	r24, 0x01	; 1
    2330:	91 05       	cpc	r25, r1
    2332:	81 f1       	breq	.+96     	; 0x2394 <_sendCmd+0x88>
    2334:	99 23       	and	r25, r25
    2336:	c4 f7       	brge	.-16     	; 0x2328 <_sendCmd+0x1c>
    2338:	39 c0       	rjmp	.+114    	; 0x23ac <_sendCmd+0xa0>
    233a:	60 e2       	ldi	r22, 0x20	; 32
    233c:	ce 01       	movw	r24, r28
    233e:	2d d6       	rcall	.+3162   	; 0x2f9a <Si114xReadFromRegister>
    2340:	80 17       	cp	r24, r16
    2342:	91 07       	cpc	r25, r17
    2344:	51 f1       	breq	.+84     	; 0x239a <_sendCmd+0x8e>
    2346:	99 23       	and	r25, r25
    2348:	8c f1       	brlt	.+98     	; 0x23ac <_sendCmd+0xa0>
    234a:	8c 01       	movw	r16, r24
    234c:	ed cf       	rjmp	.-38     	; 0x2328 <_sendCmd+0x1c>
    234e:	78 01       	movw	r14, r16
    2350:	4d 2d       	mov	r20, r13
    2352:	68 e1       	ldi	r22, 0x18	; 24
    2354:	ce 01       	movw	r24, r28
    2356:	04 d6       	rcall	.+3080   	; 0x2f60 <Si114xWriteToRegister>
    2358:	9c 01       	movw	r18, r24
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	69 f4       	brne	.+26     	; 0x2378 <_sendCmd+0x6c>
    235e:	dd 20       	and	r13, r13
    2360:	69 f0       	breq	.+26     	; 0x237c <_sendCmd+0x70>
    2362:	60 e2       	ldi	r22, 0x20	; 32
    2364:	ce 01       	movw	r24, r28
    2366:	19 d6       	rcall	.+3122   	; 0x2f9a <Si114xReadFromRegister>
    2368:	8e 15       	cp	r24, r14
    236a:	9f 05       	cpc	r25, r15
    236c:	51 f4       	brne	.+20     	; 0x2382 <_sendCmd+0x76>
    236e:	11 23       	and	r17, r17
    2370:	c4 f7       	brge	.-16     	; 0x2362 <_sendCmd+0x56>
    2372:	0a c0       	rjmp	.+20     	; 0x2388 <_sendCmd+0x7c>
    2374:	91 2f       	mov	r25, r17
    2376:	1a c0       	rjmp	.+52     	; 0x23ac <_sendCmd+0xa0>
    2378:	93 2f       	mov	r25, r19
    237a:	18 c0       	rjmp	.+48     	; 0x23ac <_sendCmd+0xa0>
    237c:	80 e0       	ldi	r24, 0x00	; 0
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	15 c0       	rjmp	.+42     	; 0x23ac <_sendCmd+0xa0>
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	12 c0       	rjmp	.+36     	; 0x23ac <_sendCmd+0xa0>
    2388:	80 2f       	mov	r24, r16
    238a:	91 2f       	mov	r25, r17
    238c:	0f c0       	rjmp	.+30     	; 0x23ac <_sendCmd+0xa0>
    238e:	82 2f       	mov	r24, r18
    2390:	93 2f       	mov	r25, r19
    2392:	0c c0       	rjmp	.+24     	; 0x23ac <_sendCmd+0xa0>
    2394:	d1 10       	cpse	r13, r1
    2396:	d1 cf       	rjmp	.-94     	; 0x233a <_sendCmd+0x2e>
    2398:	da cf       	rjmp	.-76     	; 0x234e <_sendCmd+0x42>
    239a:	78 01       	movw	r14, r16
    239c:	4d 2d       	mov	r20, r13
    239e:	68 e1       	ldi	r22, 0x18	; 24
    23a0:	ce 01       	movw	r24, r28
    23a2:	de d5       	rcall	.+3004   	; 0x2f60 <Si114xWriteToRegister>
    23a4:	9c 01       	movw	r18, r24
    23a6:	00 97       	sbiw	r24, 0x00	; 0
    23a8:	e1 f2       	breq	.-72     	; 0x2362 <_sendCmd+0x56>
    23aa:	f1 cf       	rjmp	.-30     	; 0x238e <_sendCmd+0x82>
    23ac:	df 91       	pop	r29
    23ae:	cf 91       	pop	r28
    23b0:	1f 91       	pop	r17
    23b2:	0f 91       	pop	r16
    23b4:	ff 90       	pop	r15
    23b6:	ef 90       	pop	r14
    23b8:	df 90       	pop	r13
    23ba:	08 95       	ret

000023bc <si114x_get_data>:
    23bc:	cf 92       	push	r12
    23be:	df 92       	push	r13
    23c0:	ef 92       	push	r14
    23c2:	0f 93       	push	r16
    23c4:	1f 93       	push	r17
    23c6:	cf 93       	push	r28
    23c8:	df 93       	push	r29
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <si114x_get_data+0x10>
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	6c 01       	movw	r12, r24
    23d2:	80 91 44 25 	lds	r24, 0x2544
    23d6:	90 91 45 25 	lds	r25, 0x2545
    23da:	f6 01       	movw	r30, r12
    23dc:	82 83       	std	Z+2, r24	; 0x02
    23de:	93 83       	std	Z+3, r25	; 0x03
    23e0:	68 94       	set
    23e2:	ee 24       	eor	r14, r14
    23e4:	e1 f8       	bld	r14, 1
    23e6:	8e 01       	movw	r16, r28
    23e8:	0f 5f       	subi	r16, 0xFF	; 255
    23ea:	1f 4f       	sbci	r17, 0xFF	; 255
    23ec:	26 e2       	ldi	r18, 0x26	; 38
    23ee:	42 e3       	ldi	r20, 0x32	; 50
    23f0:	6a e5       	ldi	r22, 0x5A	; 90
    23f2:	80 e8       	ldi	r24, 0x80	; 128
    23f4:	94 e0       	ldi	r25, 0x04	; 4
    23f6:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <twi_read_packet>
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	98 2f       	mov	r25, r24
    2400:	88 27       	eor	r24, r24
    2402:	29 81       	ldd	r18, Y+1	; 0x01
    2404:	82 2b       	or	r24, r18
    2406:	f6 01       	movw	r30, r12
    2408:	82 87       	std	Z+10, r24	; 0x0a
    240a:	93 87       	std	Z+11, r25	; 0x0b
    240c:	28 e2       	ldi	r18, 0x28	; 40
    240e:	42 e3       	ldi	r20, 0x32	; 50
    2410:	6a e5       	ldi	r22, 0x5A	; 90
    2412:	80 e8       	ldi	r24, 0x80	; 128
    2414:	94 e0       	ldi	r25, 0x04	; 4
    2416:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <twi_read_packet>
    241a:	8a 81       	ldd	r24, Y+2	; 0x02
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	98 2f       	mov	r25, r24
    2420:	88 27       	eor	r24, r24
    2422:	29 81       	ldd	r18, Y+1	; 0x01
    2424:	82 2b       	or	r24, r18
    2426:	f6 01       	movw	r30, r12
    2428:	84 87       	std	Z+12, r24	; 0x0c
    242a:	95 87       	std	Z+13, r25	; 0x0d
    242c:	2a e2       	ldi	r18, 0x2A	; 42
    242e:	42 e3       	ldi	r20, 0x32	; 50
    2430:	6a e5       	ldi	r22, 0x5A	; 90
    2432:	80 e8       	ldi	r24, 0x80	; 128
    2434:	94 e0       	ldi	r25, 0x04	; 4
    2436:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <twi_read_packet>
    243a:	8a 81       	ldd	r24, Y+2	; 0x02
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	98 2f       	mov	r25, r24
    2440:	88 27       	eor	r24, r24
    2442:	29 81       	ldd	r18, Y+1	; 0x01
    2444:	82 2b       	or	r24, r18
    2446:	f6 01       	movw	r30, r12
    2448:	86 87       	std	Z+14, r24	; 0x0e
    244a:	97 87       	std	Z+15, r25	; 0x0f
    244c:	24 e2       	ldi	r18, 0x24	; 36
    244e:	42 e3       	ldi	r20, 0x32	; 50
    2450:	6a e5       	ldi	r22, 0x5A	; 90
    2452:	80 e8       	ldi	r24, 0x80	; 128
    2454:	94 e0       	ldi	r25, 0x04	; 4
    2456:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <twi_read_packet>
    245a:	8a 81       	ldd	r24, Y+2	; 0x02
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	98 2f       	mov	r25, r24
    2460:	88 27       	eor	r24, r24
    2462:	29 81       	ldd	r18, Y+1	; 0x01
    2464:	82 2b       	or	r24, r18
    2466:	f6 01       	movw	r30, r12
    2468:	80 87       	std	Z+8, r24	; 0x08
    246a:	91 87       	std	Z+9, r25	; 0x09
    246c:	22 e2       	ldi	r18, 0x22	; 34
    246e:	42 e3       	ldi	r20, 0x32	; 50
    2470:	6a e5       	ldi	r22, 0x5A	; 90
    2472:	80 e8       	ldi	r24, 0x80	; 128
    2474:	94 e0       	ldi	r25, 0x04	; 4
    2476:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <twi_read_packet>
    247a:	8a 81       	ldd	r24, Y+2	; 0x02
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	98 2f       	mov	r25, r24
    2480:	88 27       	eor	r24, r24
    2482:	29 81       	ldd	r18, Y+1	; 0x01
    2484:	82 2b       	or	r24, r18
    2486:	f6 01       	movw	r30, r12
    2488:	86 83       	std	Z+6, r24	; 0x06
    248a:	97 83       	std	Z+7, r25	; 0x07
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	1f 91       	pop	r17
    2498:	0f 91       	pop	r16
    249a:	ef 90       	pop	r14
    249c:	df 90       	pop	r13
    249e:	cf 90       	pop	r12
    24a0:	08 95       	ret

000024a2 <Si114xNop>:
    24a2:	60 e0       	ldi	r22, 0x00	; 0
    24a4:	33 cf       	rjmp	.-410    	; 0x230c <_sendCmd>
    24a6:	08 95       	ret

000024a8 <Si114xPsAuto>:
    24a8:	6d e0       	ldi	r22, 0x0D	; 13
    24aa:	30 cf       	rjmp	.-416    	; 0x230c <_sendCmd>
    24ac:	08 95       	ret

000024ae <Si114xPsAlsAuto>:
    24ae:	6f e0       	ldi	r22, 0x0F	; 15
    24b0:	2d cf       	rjmp	.-422    	; 0x230c <_sendCmd>
    24b2:	08 95       	ret

000024b4 <Si114xParamSet>:
    24b4:	cf 92       	push	r12
    24b6:	df 92       	push	r13
    24b8:	ef 92       	push	r14
    24ba:	ff 92       	push	r15
    24bc:	0f 93       	push	r16
    24be:	1f 93       	push	r17
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	00 d0       	rcall	.+0      	; 0x24c6 <Si114xParamSet+0x12>
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	8c 01       	movw	r16, r24
    24cc:	d6 2e       	mov	r13, r22
    24ce:	c4 2e       	mov	r12, r20
    24d0:	60 e3       	ldi	r22, 0x30	; 48
    24d2:	c8 01       	movw	r24, r16
    24d4:	62 d5       	rcall	.+2756   	; 0x2f9a <Si114xReadFromRegister>
    24d6:	81 30       	cpi	r24, 0x01	; 1
    24d8:	91 05       	cpc	r25, r1
    24da:	79 f0       	breq	.+30     	; 0x24fa <Si114xParamSet+0x46>
    24dc:	99 23       	and	r25, r25
    24de:	c4 f7       	brge	.-16     	; 0x24d0 <Si114xParamSet+0x1c>
    24e0:	1e c0       	rjmp	.+60     	; 0x251e <Si114xParamSet+0x6a>
    24e2:	60 e2       	ldi	r22, 0x20	; 32
    24e4:	c8 01       	movw	r24, r16
    24e6:	59 d5       	rcall	.+2738   	; 0x2f9a <Si114xReadFromRegister>
    24e8:	8e 15       	cp	r24, r14
    24ea:	9f 05       	cpc	r25, r15
    24ec:	d1 f3       	breq	.-12     	; 0x24e2 <Si114xParamSet+0x2e>
    24ee:	18 16       	cp	r1, r24
    24f0:	19 06       	cpc	r1, r25
    24f2:	ac f4       	brge	.+42     	; 0x251e <Si114xParamSet+0x6a>
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	12 c0       	rjmp	.+36     	; 0x251e <Si114xParamSet+0x6a>
    24fa:	60 e2       	ldi	r22, 0x20	; 32
    24fc:	c8 01       	movw	r24, r16
    24fe:	4d d5       	rcall	.+2714   	; 0x2f9a <Si114xReadFromRegister>
    2500:	7c 01       	movw	r14, r24
    2502:	c9 82       	std	Y+1, r12	; 0x01
    2504:	8d 2d       	mov	r24, r13
    2506:	8f 71       	andi	r24, 0x1F	; 31
    2508:	80 56       	subi	r24, 0x60	; 96
    250a:	8a 83       	std	Y+2, r24	; 0x02
    250c:	9e 01       	movw	r18, r28
    250e:	2f 5f       	subi	r18, 0xFF	; 255
    2510:	3f 4f       	sbci	r19, 0xFF	; 255
    2512:	42 e0       	ldi	r20, 0x02	; 2
    2514:	67 e1       	ldi	r22, 0x17	; 23
    2516:	c8 01       	movw	r24, r16
    2518:	5c d5       	rcall	.+2744   	; 0x2fd2 <Si114xBlockWrite>
    251a:	00 97       	sbiw	r24, 0x00	; 0
    251c:	11 f3       	breq	.-60     	; 0x24e2 <Si114xParamSet+0x2e>
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	1f 91       	pop	r17
    2528:	0f 91       	pop	r16
    252a:	ff 90       	pop	r15
    252c:	ef 90       	pop	r14
    252e:	df 90       	pop	r13
    2530:	cf 90       	pop	r12
    2532:	08 95       	ret

00002534 <Si114xPauseAll>:
    2534:	cf 93       	push	r28
    2536:	df 93       	push	r29
    2538:	ec 01       	movw	r28, r24
    253a:	60 e2       	ldi	r22, 0x20	; 32
    253c:	ce 01       	movw	r24, r28
    253e:	2d d5       	rcall	.+2650   	; 0x2f9a <Si114xReadFromRegister>
    2540:	89 2b       	or	r24, r25
    2542:	19 f0       	breq	.+6      	; 0x254a <Si114xPauseAll+0x16>
    2544:	ce 01       	movw	r24, r28
    2546:	ad df       	rcall	.-166    	; 0x24a2 <Si114xNop>
    2548:	f8 cf       	rjmp	.-16     	; 0x253a <Si114xPauseAll+0x6>
    254a:	6b e0       	ldi	r22, 0x0B	; 11
    254c:	ce 01       	movw	r24, r28
    254e:	de de       	rcall	.-580    	; 0x230c <_sendCmd>
    2550:	60 e2       	ldi	r22, 0x20	; 32
    2552:	ce 01       	movw	r24, r28
    2554:	22 d5       	rcall	.+2628   	; 0x2f9a <Si114xReadFromRegister>
    2556:	89 2b       	or	r24, r25
    2558:	d9 f3       	breq	.-10     	; 0x2550 <Si114xPauseAll+0x1c>
    255a:	60 e2       	ldi	r22, 0x20	; 32
    255c:	ce 01       	movw	r24, r28
    255e:	1d d5       	rcall	.+2618   	; 0x2f9a <Si114xReadFromRegister>
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	59 f7       	brne	.-42     	; 0x253a <Si114xPauseAll+0x6>
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	df 91       	pop	r29
    256a:	cf 91       	pop	r28
    256c:	08 95       	ret

0000256e <si114x_reset>:
    256e:	0f 93       	push	r16
    2570:	1f 93       	push	r17
    2572:	cf 93       	push	r28
    2574:	df 93       	push	r29
    2576:	ec 01       	movw	r28, r24
    2578:	40 e0       	ldi	r20, 0x00	; 0
    257a:	68 e0       	ldi	r22, 0x08	; 8
    257c:	f1 d4       	rcall	.+2530   	; 0x2f60 <Si114xWriteToRegister>
    257e:	8c 01       	movw	r16, r24
    2580:	ce 01       	movw	r24, r28
    2582:	d8 df       	rcall	.-80     	; 0x2534 <Si114xPauseAll>
    2584:	08 0f       	add	r16, r24
    2586:	19 1f       	adc	r17, r25
    2588:	40 e0       	ldi	r20, 0x00	; 0
    258a:	68 e0       	ldi	r22, 0x08	; 8
    258c:	ce 01       	movw	r24, r28
    258e:	e8 d4       	rcall	.+2512   	; 0x2f60 <Si114xWriteToRegister>
    2590:	08 0f       	add	r16, r24
    2592:	19 1f       	adc	r17, r25
    2594:	40 e0       	ldi	r20, 0x00	; 0
    2596:	64 e0       	ldi	r22, 0x04	; 4
    2598:	ce 01       	movw	r24, r28
    259a:	e2 d4       	rcall	.+2500   	; 0x2f60 <Si114xWriteToRegister>
    259c:	08 0f       	add	r16, r24
    259e:	19 1f       	adc	r17, r25
    25a0:	40 e0       	ldi	r20, 0x00	; 0
    25a2:	65 e0       	ldi	r22, 0x05	; 5
    25a4:	ce 01       	movw	r24, r28
    25a6:	dc d4       	rcall	.+2488   	; 0x2f60 <Si114xWriteToRegister>
    25a8:	08 0f       	add	r16, r24
    25aa:	19 1f       	adc	r17, r25
    25ac:	40 e0       	ldi	r20, 0x00	; 0
    25ae:	66 e0       	ldi	r22, 0x06	; 6
    25b0:	ce 01       	movw	r24, r28
    25b2:	d6 d4       	rcall	.+2476   	; 0x2f60 <Si114xWriteToRegister>
    25b4:	08 0f       	add	r16, r24
    25b6:	19 1f       	adc	r17, r25
    25b8:	40 e0       	ldi	r20, 0x00	; 0
    25ba:	63 e0       	ldi	r22, 0x03	; 3
    25bc:	ce 01       	movw	r24, r28
    25be:	d0 d4       	rcall	.+2464   	; 0x2f60 <Si114xWriteToRegister>
    25c0:	08 0f       	add	r16, r24
    25c2:	19 1f       	adc	r17, r25
    25c4:	4f ef       	ldi	r20, 0xFF	; 255
    25c6:	61 e2       	ldi	r22, 0x21	; 33
    25c8:	ce 01       	movw	r24, r28
    25ca:	ca d4       	rcall	.+2452   	; 0x2f60 <Si114xWriteToRegister>
    25cc:	08 0f       	add	r16, r24
    25ce:	19 1f       	adc	r17, r25
    25d0:	41 e0       	ldi	r20, 0x01	; 1
    25d2:	68 e1       	ldi	r22, 0x18	; 24
    25d4:	ce 01       	movw	r24, r28
    25d6:	c4 d4       	rcall	.+2440   	; 0x2f60 <Si114xWriteToRegister>
    25d8:	08 0f       	add	r16, r24
    25da:	19 1f       	adc	r17, r25
    25dc:	0a d5       	rcall	.+2580   	; 0x2ff2 <delay_10ms>
    25de:	47 e1       	ldi	r20, 0x17	; 23
    25e0:	67 e0       	ldi	r22, 0x07	; 7
    25e2:	ce 01       	movw	r24, r28
    25e4:	bd d4       	rcall	.+2426   	; 0x2f60 <Si114xWriteToRegister>
    25e6:	80 0f       	add	r24, r16
    25e8:	91 1f       	adc	r25, r17
    25ea:	df 91       	pop	r29
    25ec:	cf 91       	pop	r28
    25ee:	1f 91       	pop	r17
    25f0:	0f 91       	pop	r16
    25f2:	08 95       	ret

000025f4 <si114x_init_ps1>:
    25f4:	0f 93       	push	r16
    25f6:	1f 93       	push	r17
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
    25fc:	ec 01       	movw	r28, r24
    25fe:	40 e0       	ldi	r20, 0x00	; 0
    2600:	68 e0       	ldi	r22, 0x08	; 8
    2602:	ae d4       	rcall	.+2396   	; 0x2f60 <Si114xWriteToRegister>
    2604:	8c 01       	movw	r16, r24
    2606:	40 e0       	ldi	r20, 0x00	; 0
    2608:	6a e0       	ldi	r22, 0x0A	; 10
    260a:	ce 01       	movw	r24, r28
    260c:	a9 d4       	rcall	.+2386   	; 0x2f60 <Si114xWriteToRegister>
    260e:	08 0f       	add	r16, r24
    2610:	19 1f       	adc	r17, r25
    2612:	40 e0       	ldi	r20, 0x00	; 0
    2614:	69 e0       	ldi	r22, 0x09	; 9
    2616:	ce 01       	movw	r24, r28
    2618:	a3 d4       	rcall	.+2374   	; 0x2f60 <Si114xWriteToRegister>
    261a:	08 0f       	add	r16, r24
    261c:	19 1f       	adc	r17, r25
    261e:	ce 01       	movw	r24, r28
    2620:	a6 df       	rcall	.-180    	; 0x256e <si114x_reset>
    2622:	08 0f       	add	r16, r24
    2624:	19 1f       	adc	r17, r25
    2626:	4f e0       	ldi	r20, 0x0F	; 15
    2628:	6f e0       	ldi	r22, 0x0F	; 15
    262a:	ce 01       	movw	r24, r28
    262c:	99 d4       	rcall	.+2354   	; 0x2f60 <Si114xWriteToRegister>
    262e:	08 0f       	add	r16, r24
    2630:	19 1f       	adc	r17, r25
    2632:	41 e0       	ldi	r20, 0x01	; 1
    2634:	61 e0       	ldi	r22, 0x01	; 1
    2636:	ce 01       	movw	r24, r28
    2638:	3d df       	rcall	.-390    	; 0x24b4 <Si114xParamSet>
    263a:	08 0f       	add	r16, r24
    263c:	19 1f       	adc	r17, r25
    263e:	43 e0       	ldi	r20, 0x03	; 3
    2640:	63 e0       	ldi	r22, 0x03	; 3
    2642:	ce 01       	movw	r24, r28
    2644:	8d d4       	rcall	.+2330   	; 0x2f60 <Si114xWriteToRegister>
    2646:	08 0f       	add	r16, r24
    2648:	19 1f       	adc	r17, r25
    264a:	44 e0       	ldi	r20, 0x04	; 4
    264c:	64 e0       	ldi	r22, 0x04	; 4
    264e:	ce 01       	movw	r24, r28
    2650:	87 d4       	rcall	.+2318   	; 0x2f60 <Si114xWriteToRegister>
    2652:	08 0f       	add	r16, r24
    2654:	19 1f       	adc	r17, r25
    2656:	40 e3       	ldi	r20, 0x30	; 48
    2658:	65 e0       	ldi	r22, 0x05	; 5
    265a:	ce 01       	movw	r24, r28
    265c:	81 d4       	rcall	.+2306   	; 0x2f60 <Si114xWriteToRegister>
    265e:	08 0f       	add	r16, r24
    2660:	19 1f       	adc	r17, r25
    2662:	43 e0       	ldi	r20, 0x03	; 3
    2664:	67 e0       	ldi	r22, 0x07	; 7
    2666:	ce 01       	movw	r24, r28
    2668:	25 df       	rcall	.-438    	; 0x24b4 <Si114xParamSet>
    266a:	08 0f       	add	r16, r24
    266c:	19 1f       	adc	r17, r25
    266e:	43 e0       	ldi	r20, 0x03	; 3
    2670:	6e e0       	ldi	r22, 0x0E	; 14
    2672:	ce 01       	movw	r24, r28
    2674:	1f df       	rcall	.-450    	; 0x24b4 <Si114xParamSet>
    2676:	08 0f       	add	r16, r24
    2678:	19 1f       	adc	r17, r25
    267a:	40 e0       	ldi	r20, 0x00	; 0
    267c:	6b e0       	ldi	r22, 0x0B	; 11
    267e:	ce 01       	movw	r24, r28
    2680:	19 df       	rcall	.-462    	; 0x24b4 <Si114xParamSet>
    2682:	08 0f       	add	r16, r24
    2684:	19 1f       	adc	r17, r25
    2686:	41 e0       	ldi	r20, 0x01	; 1
    2688:	62 e0       	ldi	r22, 0x02	; 2
    268a:	ce 01       	movw	r24, r28
    268c:	13 df       	rcall	.-474    	; 0x24b4 <Si114xParamSet>
    268e:	08 0f       	add	r16, r24
    2690:	19 1f       	adc	r17, r25
    2692:	40 e7       	ldi	r20, 0x70	; 112
    2694:	6a e0       	ldi	r22, 0x0A	; 10
    2696:	ce 01       	movw	r24, r28
    2698:	0d df       	rcall	.-486    	; 0x24b4 <Si114xParamSet>
    269a:	08 0f       	add	r16, r24
    269c:	19 1f       	adc	r17, r25
    269e:	44 e0       	ldi	r20, 0x04	; 4
    26a0:	6c e0       	ldi	r22, 0x0C	; 12
    26a2:	ce 01       	movw	r24, r28
    26a4:	07 df       	rcall	.-498    	; 0x24b4 <Si114xParamSet>
    26a6:	08 0f       	add	r16, r24
    26a8:	19 1f       	adc	r17, r25
    26aa:	40 e8       	ldi	r20, 0x80	; 128
    26ac:	61 e1       	ldi	r22, 0x11	; 17
    26ae:	ce 01       	movw	r24, r28
    26b0:	57 d4       	rcall	.+2222   	; 0x2f60 <Si114xWriteToRegister>
    26b2:	08 0f       	add	r16, r24
    26b4:	19 1f       	adc	r17, r25
    26b6:	4c e0       	ldi	r20, 0x0C	; 12
    26b8:	62 e1       	ldi	r22, 0x12	; 18
    26ba:	ce 01       	movw	r24, r28
    26bc:	51 d4       	rcall	.+2210   	; 0x2f60 <Si114xWriteToRegister>
    26be:	08 0f       	add	r16, r24
    26c0:	19 1f       	adc	r17, r25
    26c2:	44 e9       	ldi	r20, 0x94	; 148
    26c4:	68 e0       	ldi	r22, 0x08	; 8
    26c6:	ce 01       	movw	r24, r28
    26c8:	4b d4       	rcall	.+2198   	; 0x2f60 <Si114xWriteToRegister>
    26ca:	08 0f       	add	r16, r24
    26cc:	19 1f       	adc	r17, r25
    26ce:	48 e0       	ldi	r20, 0x08	; 8
    26d0:	6a e0       	ldi	r22, 0x0A	; 10
    26d2:	ce 01       	movw	r24, r28
    26d4:	45 d4       	rcall	.+2186   	; 0x2f60 <Si114xWriteToRegister>
    26d6:	08 0f       	add	r16, r24
    26d8:	19 1f       	adc	r17, r25
    26da:	ce 01       	movw	r24, r28
    26dc:	e5 de       	rcall	.-566    	; 0x24a8 <Si114xPsAuto>
    26de:	80 0f       	add	r24, r16
    26e0:	91 1f       	adc	r25, r17
    26e2:	df 91       	pop	r29
    26e4:	cf 91       	pop	r28
    26e6:	1f 91       	pop	r17
    26e8:	0f 91       	pop	r16
    26ea:	08 95       	ret

000026ec <si114x_setup_ps1_only>:
    26ec:	8a e5       	ldi	r24, 0x5A	; 90
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	3e df       	rcall	.-388    	; 0x256e <si114x_reset>
    26f2:	2f ef       	ldi	r18, 0xFF	; 255
    26f4:	81 ee       	ldi	r24, 0xE1	; 225
    26f6:	94 e0       	ldi	r25, 0x04	; 4
    26f8:	21 50       	subi	r18, 0x01	; 1
    26fa:	80 40       	sbci	r24, 0x00	; 0
    26fc:	90 40       	sbci	r25, 0x00	; 0
    26fe:	e1 f7       	brne	.-8      	; 0x26f8 <si114x_setup_ps1_only+0xc>
    2700:	00 c0       	rjmp	.+0      	; 0x2702 <si114x_setup_ps1_only+0x16>
    2702:	00 00       	nop
    2704:	8a e5       	ldi	r24, 0x5A	; 90
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	75 df       	rcall	.-278    	; 0x25f4 <si114x_init_ps1>
    270a:	85 cb       	rjmp	.-2294   	; 0x1e16 <btn_si114x_enable_interrupt>
    270c:	08 95       	ret

0000270e <si114x_init>:
    270e:	0f 93       	push	r16
    2710:	1f 93       	push	r17
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	ec 01       	movw	r28, r24
    2718:	40 e0       	ldi	r20, 0x00	; 0
    271a:	68 e0       	ldi	r22, 0x08	; 8
    271c:	21 d4       	rcall	.+2114   	; 0x2f60 <Si114xWriteToRegister>
    271e:	8c 01       	movw	r16, r24
    2720:	40 e0       	ldi	r20, 0x00	; 0
    2722:	6a e0       	ldi	r22, 0x0A	; 10
    2724:	ce 01       	movw	r24, r28
    2726:	1c d4       	rcall	.+2104   	; 0x2f60 <Si114xWriteToRegister>
    2728:	08 0f       	add	r16, r24
    272a:	19 1f       	adc	r17, r25
    272c:	40 e0       	ldi	r20, 0x00	; 0
    272e:	69 e0       	ldi	r22, 0x09	; 9
    2730:	ce 01       	movw	r24, r28
    2732:	16 d4       	rcall	.+2092   	; 0x2f60 <Si114xWriteToRegister>
    2734:	08 0f       	add	r16, r24
    2736:	19 1f       	adc	r17, r25
    2738:	ce 01       	movw	r24, r28
    273a:	19 df       	rcall	.-462    	; 0x256e <si114x_reset>
    273c:	08 0f       	add	r16, r24
    273e:	19 1f       	adc	r17, r25
    2740:	4f ef       	ldi	r20, 0xFF	; 255
    2742:	6f e0       	ldi	r22, 0x0F	; 15
    2744:	ce 01       	movw	r24, r28
    2746:	0c d4       	rcall	.+2072   	; 0x2f60 <Si114xWriteToRegister>
    2748:	08 0f       	add	r16, r24
    274a:	19 1f       	adc	r17, r25
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	60 e1       	ldi	r22, 0x10	; 16
    2750:	ce 01       	movw	r24, r28
    2752:	06 d4       	rcall	.+2060   	; 0x2f60 <Si114xWriteToRegister>
    2754:	08 0f       	add	r16, r24
    2756:	19 1f       	adc	r17, r25
    2758:	47 e7       	ldi	r20, 0x77	; 119
    275a:	61 e0       	ldi	r22, 0x01	; 1
    275c:	ce 01       	movw	r24, r28
    275e:	aa de       	rcall	.-684    	; 0x24b4 <Si114xParamSet>
    2760:	08 0f       	add	r16, r24
    2762:	19 1f       	adc	r17, r25
    2764:	41 e0       	ldi	r20, 0x01	; 1
    2766:	63 e0       	ldi	r22, 0x03	; 3
    2768:	ce 01       	movw	r24, r28
    276a:	fa d3       	rcall	.+2036   	; 0x2f60 <Si114xWriteToRegister>
    276c:	08 0f       	add	r16, r24
    276e:	19 1f       	adc	r17, r25
    2770:	4d e1       	ldi	r20, 0x1D	; 29
    2772:	64 e0       	ldi	r22, 0x04	; 4
    2774:	ce 01       	movw	r24, r28
    2776:	f4 d3       	rcall	.+2024   	; 0x2f60 <Si114xWriteToRegister>
    2778:	08 0f       	add	r16, r24
    277a:	19 1f       	adc	r17, r25
    277c:	40 e0       	ldi	r20, 0x00	; 0
    277e:	65 e0       	ldi	r22, 0x05	; 5
    2780:	ce 01       	movw	r24, r28
    2782:	ee d3       	rcall	.+2012   	; 0x2f60 <Si114xWriteToRegister>
    2784:	08 0f       	add	r16, r24
    2786:	19 1f       	adc	r17, r25
    2788:	40 e0       	ldi	r20, 0x00	; 0
    278a:	66 e0       	ldi	r22, 0x06	; 6
    278c:	ce 01       	movw	r24, r28
    278e:	e8 d3       	rcall	.+2000   	; 0x2f60 <Si114xWriteToRegister>
    2790:	08 0f       	add	r16, r24
    2792:	19 1f       	adc	r17, r25
    2794:	43 e0       	ldi	r20, 0x03	; 3
    2796:	67 e0       	ldi	r22, 0x07	; 7
    2798:	ce 01       	movw	r24, r28
    279a:	8c de       	rcall	.-744    	; 0x24b4 <Si114xParamSet>
    279c:	08 0f       	add	r16, r24
    279e:	19 1f       	adc	r17, r25
    27a0:	43 e0       	ldi	r20, 0x03	; 3
    27a2:	68 e0       	ldi	r22, 0x08	; 8
    27a4:	ce 01       	movw	r24, r28
    27a6:	86 de       	rcall	.-756    	; 0x24b4 <Si114xParamSet>
    27a8:	08 0f       	add	r16, r24
    27aa:	19 1f       	adc	r17, r25
    27ac:	43 e0       	ldi	r20, 0x03	; 3
    27ae:	69 e0       	ldi	r22, 0x09	; 9
    27b0:	ce 01       	movw	r24, r28
    27b2:	80 de       	rcall	.-768    	; 0x24b4 <Si114xParamSet>
    27b4:	08 0f       	add	r16, r24
    27b6:	19 1f       	adc	r17, r25
    27b8:	43 e0       	ldi	r20, 0x03	; 3
    27ba:	6e e0       	ldi	r22, 0x0E	; 14
    27bc:	ce 01       	movw	r24, r28
    27be:	7a de       	rcall	.-780    	; 0x24b4 <Si114xParamSet>
    27c0:	08 0f       	add	r16, r24
    27c2:	19 1f       	adc	r17, r25
    27c4:	40 e0       	ldi	r20, 0x00	; 0
    27c6:	6b e0       	ldi	r22, 0x0B	; 11
    27c8:	ce 01       	movw	r24, r28
    27ca:	74 de       	rcall	.-792    	; 0x24b4 <Si114xParamSet>
    27cc:	08 0f       	add	r16, r24
    27ce:	19 1f       	adc	r17, r25
    27d0:	40 e0       	ldi	r20, 0x00	; 0
    27d2:	6e e1       	ldi	r22, 0x1E	; 30
    27d4:	ce 01       	movw	r24, r28
    27d6:	6e de       	rcall	.-804    	; 0x24b4 <Si114xParamSet>
    27d8:	08 0f       	add	r16, r24
    27da:	19 1f       	adc	r17, r25
    27dc:	40 e0       	ldi	r20, 0x00	; 0
    27de:	61 e1       	ldi	r22, 0x11	; 17
    27e0:	ce 01       	movw	r24, r28
    27e2:	68 de       	rcall	.-816    	; 0x24b4 <Si114xParamSet>
    27e4:	08 0f       	add	r16, r24
    27e6:	19 1f       	adc	r17, r25
    27e8:	41 e2       	ldi	r20, 0x21	; 33
    27ea:	62 e0       	ldi	r22, 0x02	; 2
    27ec:	ce 01       	movw	r24, r28
    27ee:	62 de       	rcall	.-828    	; 0x24b4 <Si114xParamSet>
    27f0:	08 0f       	add	r16, r24
    27f2:	19 1f       	adc	r17, r25
    27f4:	44 e0       	ldi	r20, 0x04	; 4
    27f6:	63 e0       	ldi	r22, 0x03	; 3
    27f8:	ce 01       	movw	r24, r28
    27fa:	5c de       	rcall	.-840    	; 0x24b4 <Si114xParamSet>
    27fc:	08 0f       	add	r16, r24
    27fe:	19 1f       	adc	r17, r25
    2800:	40 e7       	ldi	r20, 0x70	; 112
    2802:	6a e0       	ldi	r22, 0x0A	; 10
    2804:	ce 01       	movw	r24, r28
    2806:	56 de       	rcall	.-852    	; 0x24b4 <Si114xParamSet>
    2808:	08 0f       	add	r16, r24
    280a:	19 1f       	adc	r17, r25
    280c:	40 e7       	ldi	r20, 0x70	; 112
    280e:	6d e1       	ldi	r22, 0x1D	; 29
    2810:	ce 01       	movw	r24, r28
    2812:	50 de       	rcall	.-864    	; 0x24b4 <Si114xParamSet>
    2814:	08 0f       	add	r16, r24
    2816:	19 1f       	adc	r17, r25
    2818:	40 e7       	ldi	r20, 0x70	; 112
    281a:	60 e1       	ldi	r22, 0x10	; 16
    281c:	ce 01       	movw	r24, r28
    281e:	4a de       	rcall	.-876    	; 0x24b4 <Si114xParamSet>
    2820:	08 0f       	add	r16, r24
    2822:	19 1f       	adc	r17, r25
    2824:	44 e0       	ldi	r20, 0x04	; 4
    2826:	6c e0       	ldi	r22, 0x0C	; 12
    2828:	ce 01       	movw	r24, r28
    282a:	44 de       	rcall	.-888    	; 0x24b4 <Si114xParamSet>
    282c:	08 0f       	add	r16, r24
    282e:	19 1f       	adc	r17, r25
    2830:	40 e2       	ldi	r20, 0x20	; 32
    2832:	6f e1       	ldi	r22, 0x1F	; 31
    2834:	ce 01       	movw	r24, r28
    2836:	3e de       	rcall	.-900    	; 0x24b4 <Si114xParamSet>
    2838:	08 0f       	add	r16, r24
    283a:	19 1f       	adc	r17, r25
    283c:	40 e2       	ldi	r20, 0x20	; 32
    283e:	62 e1       	ldi	r22, 0x12	; 18
    2840:	ce 01       	movw	r24, r28
    2842:	38 de       	rcall	.-912    	; 0x24b4 <Si114xParamSet>
    2844:	08 0f       	add	r16, r24
    2846:	19 1f       	adc	r17, r25
    2848:	44 e9       	ldi	r20, 0x94	; 148
    284a:	68 e0       	ldi	r22, 0x08	; 8
    284c:	ce 01       	movw	r24, r28
    284e:	88 d3       	rcall	.+1808   	; 0x2f60 <Si114xWriteToRegister>
    2850:	08 0f       	add	r16, r24
    2852:	19 1f       	adc	r17, r25
    2854:	48 e0       	ldi	r20, 0x08	; 8
    2856:	6a e0       	ldi	r22, 0x0A	; 10
    2858:	ce 01       	movw	r24, r28
    285a:	82 d3       	rcall	.+1796   	; 0x2f60 <Si114xWriteToRegister>
    285c:	08 0f       	add	r16, r24
    285e:	19 1f       	adc	r17, r25
    2860:	48 e0       	ldi	r20, 0x08	; 8
    2862:	69 e0       	ldi	r22, 0x09	; 9
    2864:	ce 01       	movw	r24, r28
    2866:	7c d3       	rcall	.+1784   	; 0x2f60 <Si114xWriteToRegister>
    2868:	08 0f       	add	r16, r24
    286a:	19 1f       	adc	r17, r25
    286c:	ce 01       	movw	r24, r28
    286e:	1f de       	rcall	.-962    	; 0x24ae <Si114xPsAlsAuto>
    2870:	80 0f       	add	r24, r16
    2872:	91 1f       	adc	r25, r17
    2874:	df 91       	pop	r29
    2876:	cf 91       	pop	r28
    2878:	1f 91       	pop	r17
    287a:	0f 91       	pop	r16
    287c:	08 95       	ret

0000287e <si114x_setup>:
    287e:	e0 e4       	ldi	r30, 0x40	; 64
    2880:	f8 e0       	ldi	r31, 0x08	; 8
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	80 83       	st	Z, r24
    2886:	90 e8       	ldi	r25, 0x80	; 128
    2888:	96 a3       	std	Z+38, r25	; 0x26
    288a:	9c e0       	ldi	r25, 0x0C	; 12
    288c:	97 a3       	std	Z+39, r25	; 0x27
    288e:	86 83       	std	Z+6, r24	; 0x06
    2890:	8a e5       	ldi	r24, 0x5A	; 90
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	6c de       	rcall	.-808    	; 0x256e <si114x_reset>
    2896:	2f ef       	ldi	r18, 0xFF	; 255
    2898:	81 ee       	ldi	r24, 0xE1	; 225
    289a:	94 e0       	ldi	r25, 0x04	; 4
    289c:	21 50       	subi	r18, 0x01	; 1
    289e:	80 40       	sbci	r24, 0x00	; 0
    28a0:	90 40       	sbci	r25, 0x00	; 0
    28a2:	e1 f7       	brne	.-8      	; 0x289c <si114x_setup+0x1e>
    28a4:	00 c0       	rjmp	.+0      	; 0x28a6 <si114x_setup+0x28>
    28a6:	00 00       	nop
    28a8:	8a e5       	ldi	r24, 0x5A	; 90
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	30 cf       	rjmp	.-416    	; 0x270e <si114x_init>
    28ae:	08 95       	ret

000028b0 <si114x_baseline_calibration>:
    28b0:	ef 92       	push	r14
    28b2:	ff 92       	push	r15
    28b4:	0f 93       	push	r16
    28b6:	1f 93       	push	r17
    28b8:	cf 93       	push	r28
    28ba:	df 93       	push	r29
    28bc:	ec 01       	movw	r28, r24
    28be:	df df       	rcall	.-66     	; 0x287e <si114x_setup>
    28c0:	80 e8       	ldi	r24, 0x80	; 128
    28c2:	80 93 0e 20 	sts	0x200E, r24
    28c6:	0f 2e       	mov	r0, r31
    28c8:	f2 ee       	ldi	r31, 0xE2	; 226
    28ca:	ef 2e       	mov	r14, r31
    28cc:	f2 e2       	ldi	r31, 0x22	; 34
    28ce:	ff 2e       	mov	r15, r31
    28d0:	f0 2d       	mov	r31, r0
    28d2:	01 e0       	ldi	r16, 0x01	; 1
    28d4:	21 e0       	ldi	r18, 0x01	; 1
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	48 e5       	ldi	r20, 0x58	; 88
    28da:	65 e0       	ldi	r22, 0x05	; 5
    28dc:	70 e0       	ldi	r23, 0x00	; 0
    28de:	85 e0       	ldi	r24, 0x05	; 5
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	2e d8       	rcall	.-4004   	; 0x1940 <ht1632c_draw_char>
    28e4:	0e 94 0c 0c 	call	0x1818	; 0x1818 <ht1632c_refresh_screen>
    28e8:	ce 01       	movw	r24, r28
    28ea:	68 dd       	rcall	.-1328   	; 0x23bc <si114x_get_data>
    28ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    28ee:	8f 93       	push	r24
    28f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    28f2:	8f 93       	push	r24
    28f4:	ff 92       	push	r15
    28f6:	ef 92       	push	r14
    28f8:	0e 94 ef 32 	call	0x65de	; 0x65de <printf>
    28fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    28fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2900:	0f 90       	pop	r0
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	81 38       	cpi	r24, 0x81	; 129
    290a:	2c e0       	ldi	r18, 0x0C	; 12
    290c:	92 07       	cpc	r25, r18
    290e:	08 f7       	brcc	.-62     	; 0x28d2 <si114x_baseline_calibration+0x22>
    2910:	80 93 b1 25 	sts	0x25B1, r24
    2914:	90 93 b2 25 	sts	0x25B2, r25
    2918:	8f ef       	ldi	r24, 0xFF	; 255
    291a:	97 ea       	ldi	r25, 0xA7	; 167
    291c:	21 e6       	ldi	r18, 0x61	; 97
    291e:	81 50       	subi	r24, 0x01	; 1
    2920:	90 40       	sbci	r25, 0x00	; 0
    2922:	20 40       	sbci	r18, 0x00	; 0
    2924:	e1 f7       	brne	.-8      	; 0x291e <si114x_baseline_calibration+0x6e>
    2926:	00 c0       	rjmp	.+0      	; 0x2928 <si114x_baseline_calibration+0x78>
    2928:	00 00       	nop
    292a:	00 e8       	ldi	r16, 0x80	; 128
    292c:	10 e0       	ldi	r17, 0x00	; 0
    292e:	80 91 44 25 	lds	r24, 0x2544
    2932:	90 91 45 25 	lds	r25, 0x2545
    2936:	8a 83       	std	Y+2, r24	; 0x02
    2938:	9b 83       	std	Y+3, r25	; 0x03
    293a:	ce 01       	movw	r24, r28
    293c:	3f dd       	rcall	.-1410   	; 0x23bc <si114x_get_data>
    293e:	be 01       	movw	r22, r28
    2940:	8a e5       	ldi	r24, 0x5A	; 90
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	17 d2       	rcall	.+1070   	; 0x2d74 <si114x_process_samples>
    2946:	01 50       	subi	r16, 0x01	; 1
    2948:	11 09       	sbc	r17, r1
    294a:	01 15       	cp	r16, r1
    294c:	11 05       	cpc	r17, r1
    294e:	79 f7       	brne	.-34     	; 0x292e <si114x_baseline_calibration+0x7e>
    2950:	df 91       	pop	r29
    2952:	cf 91       	pop	r28
    2954:	1f 91       	pop	r17
    2956:	0f 91       	pop	r16
    2958:	ff 90       	pop	r15
    295a:	ef 90       	pop	r14
    295c:	08 95       	ret

0000295e <__vector_20>:

ISR(TCC1_OVF_vect) {
    295e:	1f 92       	push	r1
    2960:	0f 92       	push	r0
    2962:	0f b6       	in	r0, 0x3f	; 63
    2964:	0f 92       	push	r0
    2966:	11 24       	eor	r1, r1
    2968:	8f 93       	push	r24
    296a:	9f 93       	push	r25
	counter++;
    296c:	80 91 44 25 	lds	r24, 0x2544
    2970:	90 91 45 25 	lds	r25, 0x2545
    2974:	01 96       	adiw	r24, 0x01	; 1
    2976:	80 93 44 25 	sts	0x2544, r24
    297a:	90 93 45 25 	sts	0x2545, r25
}
    297e:	9f 91       	pop	r25
    2980:	8f 91       	pop	r24
    2982:	0f 90       	pop	r0
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	0f 90       	pop	r0
    2988:	1f 90       	pop	r1
    298a:	18 95       	reti

0000298c <isIRStable>:
        }
    }
}

char isIRStable( SI114X_IRQ_SAMPLE *samples)
{
    298c:	cf 92       	push	r12
    298e:	df 92       	push	r13
    2990:	ef 92       	push	r14
    2992:	ff 92       	push	r15
    2994:	0f 93       	push	r16
    2996:	1f 93       	push	r17
                                        //
    u32 xdata IR = (u32) samples->ir; // Make a copy of ALS IR Reading
    
    // Initialize IRlast to the ALS IR reading if it does not contain 
    // information from a previous measurement cycle
    if( IRlast == 0) IRlast = samples->ir; 
    2998:	40 91 55 25 	lds	r20, 0x2555
    299c:	50 91 56 25 	lds	r21, 0x2556
    29a0:	60 91 57 25 	lds	r22, 0x2557
    29a4:	70 91 58 25 	lds	r23, 0x2558
    29a8:	45 2b       	or	r20, r21
    29aa:	46 2b       	or	r20, r22
    29ac:	47 2b       	or	r20, r23
    29ae:	71 f4       	brne	.+28     	; 0x29cc <isIRStable+0x40>
    29b0:	fc 01       	movw	r30, r24
    29b2:	40 85       	ldd	r20, Z+8	; 0x08
    29b4:	51 85       	ldd	r21, Z+9	; 0x09
    29b6:	60 e0       	ldi	r22, 0x00	; 0
    29b8:	70 e0       	ldi	r23, 0x00	; 0
    29ba:	40 93 55 25 	sts	0x2555, r20
    29be:	50 93 56 25 	sts	0x2556, r21
    29c2:	60 93 57 25 	sts	0x2557, r22
    29c6:	70 93 58 25 	sts	0x2558, r23
    29ca:	07 c0       	rjmp	.+14     	; 0x29da <isIRStable+0x4e>

    // If ALS IR is saturated, return false immediately
    else if( samples->ir > 48000 ) return 0; 
    29cc:	fc 01       	movw	r30, r24
    29ce:	20 85       	ldd	r18, Z+8	; 0x08
    29d0:	31 85       	ldd	r19, Z+9	; 0x09
    29d2:	21 38       	cpi	r18, 0x81	; 129
    29d4:	3b 4b       	sbci	r19, 0xBB	; 187
    29d6:	08 f0       	brcs	.+2      	; 0x29da <isIRStable+0x4e>
    29d8:	53 c0       	rjmp	.+166    	; 0x2a80 <isIRStable+0xf4>

    if( samples->ir < (IRlast + IRlast/2) && samples->ir > (IRlast - IRlast/2))
    29da:	fc 01       	movw	r30, r24
    29dc:	40 85       	ldd	r20, Z+8	; 0x08
    29de:	51 85       	ldd	r21, Z+9	; 0x09
    29e0:	60 e0       	ldi	r22, 0x00	; 0
    29e2:	70 e0       	ldi	r23, 0x00	; 0
    29e4:	80 91 55 25 	lds	r24, 0x2555
    29e8:	90 91 56 25 	lds	r25, 0x2556
    29ec:	a0 91 57 25 	lds	r26, 0x2557
    29f0:	b0 91 58 25 	lds	r27, 0x2558
    29f4:	8c 01       	movw	r16, r24
    29f6:	9d 01       	movw	r18, r26
    29f8:	36 95       	lsr	r19
    29fa:	27 95       	ror	r18
    29fc:	17 95       	ror	r17
    29fe:	07 95       	ror	r16
    2a00:	68 01       	movw	r12, r16
    2a02:	79 01       	movw	r14, r18
    2a04:	c8 0e       	add	r12, r24
    2a06:	d9 1e       	adc	r13, r25
    2a08:	ea 1e       	adc	r14, r26
    2a0a:	fb 1e       	adc	r15, r27
    2a0c:	4c 15       	cp	r20, r12
    2a0e:	5d 05       	cpc	r21, r13
    2a10:	6e 05       	cpc	r22, r14
    2a12:	7f 05       	cpc	r23, r15
    2a14:	58 f5       	brcc	.+86     	; 0x2a6c <isIRStable+0xe0>
    2a16:	6c 01       	movw	r12, r24
    2a18:	7d 01       	movw	r14, r26
    2a1a:	c0 1a       	sub	r12, r16
    2a1c:	d1 0a       	sbc	r13, r17
    2a1e:	e2 0a       	sbc	r14, r18
    2a20:	f3 0a       	sbc	r15, r19
    2a22:	c4 16       	cp	r12, r20
    2a24:	d5 06       	cpc	r13, r21
    2a26:	e6 06       	cpc	r14, r22
    2a28:	f7 06       	cpc	r15, r23
    2a2a:	00 f5       	brcc	.+64     	; 0x2a6c <isIRStable+0xe0>
    {
        // If IR is within 3 dB, declare it stable
        // and perform some averaging
        IRlast = (samples->ir + (IRlast*3)) / 4;
    2a2c:	8c 01       	movw	r16, r24
    2a2e:	9d 01       	movw	r18, r26
    2a30:	00 0f       	add	r16, r16
    2a32:	11 1f       	adc	r17, r17
    2a34:	22 1f       	adc	r18, r18
    2a36:	33 1f       	adc	r19, r19
    2a38:	80 0f       	add	r24, r16
    2a3a:	91 1f       	adc	r25, r17
    2a3c:	a2 1f       	adc	r26, r18
    2a3e:	b3 1f       	adc	r27, r19
    2a40:	48 0f       	add	r20, r24
    2a42:	59 1f       	adc	r21, r25
    2a44:	6a 1f       	adc	r22, r26
    2a46:	7b 1f       	adc	r23, r27
    2a48:	76 95       	lsr	r23
    2a4a:	67 95       	ror	r22
    2a4c:	57 95       	ror	r21
    2a4e:	47 95       	ror	r20
    2a50:	76 95       	lsr	r23
    2a52:	67 95       	ror	r22
    2a54:	57 95       	ror	r21
    2a56:	47 95       	ror	r20
    2a58:	40 93 55 25 	sts	0x2555, r20
    2a5c:	50 93 56 25 	sts	0x2556, r21
    2a60:	60 93 57 25 	sts	0x2557, r22
    2a64:	70 93 58 25 	sts	0x2558, r23
        return 1;
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	0b c0       	rjmp	.+22     	; 0x2a82 <isIRStable+0xf6>
    }
    else
    {
        // Otherwise, return false and update
        // new IRlast value for next time
        IRlast = samples->ir;
    2a6c:	40 93 55 25 	sts	0x2555, r20
    2a70:	50 93 56 25 	sts	0x2556, r21
    2a74:	60 93 57 25 	sts	0x2557, r22
    2a78:	70 93 58 25 	sts	0x2558, r23
        return 0;
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
    2a7e:	01 c0       	rjmp	.+2      	; 0x2a82 <isIRStable+0xf6>
    // Initialize IRlast to the ALS IR reading if it does not contain 
    // information from a previous measurement cycle
    if( IRlast == 0) IRlast = samples->ir; 

    // If ALS IR is saturated, return false immediately
    else if( samples->ir > 48000 ) return 0; 
    2a80:	80 e0       	ldi	r24, 0x00	; 0
        // new IRlast value for next time
        IRlast = samples->ir;
        return 0;
    }
    return 0;
}
    2a82:	1f 91       	pop	r17
    2a84:	0f 91       	pop	r16
    2a86:	ff 90       	pop	r15
    2a88:	ef 90       	pop	r14
    2a8a:	df 90       	pop	r13
    2a8c:	cf 90       	pop	r12
    2a8e:	08 95       	ret

00002a90 <IRCompensation>:
//             use { 11, 33, 33 }
//          Sm PD, PSRANGE = 1 
//             use { 23, 64, 56 }
////////////////////////////////////////////////////////////////////////////////
void IRCompensation(u8 proxChannel, SI114X_IRQ_SAMPLE *samples, u8 ircorrection[])
{
    2a90:	0f 93       	push	r16
    2a92:	1f 93       	push	r17
    2a94:	cf 93       	push	r28
    2a96:	df 93       	push	r29
    2a98:	eb 01       	movw	r28, r22
    // Calculate correction factor based on the ALS IR + PS reading 
    // subtracting out the 256 count offset contained in both measurements
    // Full equation comes out to:
    // Correction = ( (ALS_IR - 256) + (PS - 256) ) * IRcorrectionfactor
    //  where IRcorrectionfactor = IRCORRECTION / 10000    
    switch(proxChannel)
    2a9a:	81 30       	cpi	r24, 0x01	; 1
    2a9c:	29 f1       	breq	.+74     	; 0x2ae8 <IRCompensation+0x58>
    2a9e:	20 f0       	brcs	.+8      	; 0x2aa8 <IRCompensation+0x18>
    2aa0:	82 30       	cpi	r24, 0x02	; 2
    2aa2:	09 f4       	brne	.+2      	; 0x2aa6 <IRCompensation+0x16>
    2aa4:	41 c0       	rjmp	.+130    	; 0x2b28 <IRCompensation+0x98>
    2aa6:	5f c0       	rjmp	.+190    	; 0x2b66 <IRCompensation+0xd6>
    {
        case 0:
            Correction = ((u32)samples->ir + (u32)(samples->ps1) - 512) * (u32) ircorrection[proxChannel];
    2aa8:	0a 85       	ldd	r16, Y+10	; 0x0a
    2aaa:	1b 85       	ldd	r17, Y+11	; 0x0b
    2aac:	fa 01       	movw	r30, r20
    2aae:	a0 81       	ld	r26, Z
    2ab0:	88 85       	ldd	r24, Y+8	; 0x08
    2ab2:	99 85       	ldd	r25, Y+9	; 0x09
    2ab4:	a8 01       	movw	r20, r16
    2ab6:	60 e0       	ldi	r22, 0x00	; 0
    2ab8:	70 e0       	ldi	r23, 0x00	; 0
    2aba:	48 0f       	add	r20, r24
    2abc:	59 1f       	adc	r21, r25
    2abe:	61 1d       	adc	r22, r1
    2ac0:	71 1d       	adc	r23, r1
    2ac2:	9a 01       	movw	r18, r20
    2ac4:	ab 01       	movw	r20, r22
    2ac6:	32 50       	subi	r19, 0x02	; 2
    2ac8:	41 09       	sbc	r20, r1
    2aca:	51 09       	sbc	r21, r1
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	0e 94 4a 31 	call	0x6294	; 0x6294 <__muluhisi3>
            Correction = Correction/10000;
    2ad2:	20 e1       	ldi	r18, 0x10	; 16
    2ad4:	37 e2       	ldi	r19, 0x27	; 39
    2ad6:	40 e0       	ldi	r20, 0x00	; 0
    2ad8:	50 e0       	ldi	r21, 0x00	; 0
    2ada:	0e 94 13 31 	call	0x6226	; 0x6226 <__udivmodsi4>
            samples->ps1 = samples->ps1 + Correction;    
    2ade:	20 0f       	add	r18, r16
    2ae0:	31 1f       	adc	r19, r17
    2ae2:	2a 87       	std	Y+10, r18	; 0x0a
    2ae4:	3b 87       	std	Y+11, r19	; 0x0b
            break;
    2ae6:	3f c0       	rjmp	.+126    	; 0x2b66 <IRCompensation+0xd6>
        case 1:
            Correction = ((u32)samples->ir + (u32)(samples->ps2) - 512) * (u32) ircorrection[proxChannel];
    2ae8:	0c 85       	ldd	r16, Y+12	; 0x0c
    2aea:	1d 85       	ldd	r17, Y+13	; 0x0d
    2aec:	fa 01       	movw	r30, r20
    2aee:	a1 81       	ldd	r26, Z+1	; 0x01
    2af0:	88 85       	ldd	r24, Y+8	; 0x08
    2af2:	99 85       	ldd	r25, Y+9	; 0x09
    2af4:	a8 01       	movw	r20, r16
    2af6:	60 e0       	ldi	r22, 0x00	; 0
    2af8:	70 e0       	ldi	r23, 0x00	; 0
    2afa:	48 0f       	add	r20, r24
    2afc:	59 1f       	adc	r21, r25
    2afe:	61 1d       	adc	r22, r1
    2b00:	71 1d       	adc	r23, r1
    2b02:	9a 01       	movw	r18, r20
    2b04:	ab 01       	movw	r20, r22
    2b06:	32 50       	subi	r19, 0x02	; 2
    2b08:	41 09       	sbc	r20, r1
    2b0a:	51 09       	sbc	r21, r1
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	0e 94 4a 31 	call	0x6294	; 0x6294 <__muluhisi3>
            Correction = Correction/10000;
    2b12:	20 e1       	ldi	r18, 0x10	; 16
    2b14:	37 e2       	ldi	r19, 0x27	; 39
    2b16:	40 e0       	ldi	r20, 0x00	; 0
    2b18:	50 e0       	ldi	r21, 0x00	; 0
    2b1a:	0e 94 13 31 	call	0x6226	; 0x6226 <__udivmodsi4>
            samples->ps2 = samples->ps2 + Correction;            
    2b1e:	20 0f       	add	r18, r16
    2b20:	31 1f       	adc	r19, r17
    2b22:	2c 87       	std	Y+12, r18	; 0x0c
    2b24:	3d 87       	std	Y+13, r19	; 0x0d
            break;
    2b26:	1f c0       	rjmp	.+62     	; 0x2b66 <IRCompensation+0xd6>
		case 2:
			Correction = ((u32)samples->ir + (u32)(samples->ps3) - 512) * (u32) ircorrection[proxChannel];
    2b28:	0e 85       	ldd	r16, Y+14	; 0x0e
    2b2a:	1f 85       	ldd	r17, Y+15	; 0x0f
    2b2c:	fa 01       	movw	r30, r20
    2b2e:	a2 81       	ldd	r26, Z+2	; 0x02
    2b30:	88 85       	ldd	r24, Y+8	; 0x08
    2b32:	99 85       	ldd	r25, Y+9	; 0x09
    2b34:	a8 01       	movw	r20, r16
    2b36:	60 e0       	ldi	r22, 0x00	; 0
    2b38:	70 e0       	ldi	r23, 0x00	; 0
    2b3a:	48 0f       	add	r20, r24
    2b3c:	59 1f       	adc	r21, r25
    2b3e:	61 1d       	adc	r22, r1
    2b40:	71 1d       	adc	r23, r1
    2b42:	9a 01       	movw	r18, r20
    2b44:	ab 01       	movw	r20, r22
    2b46:	32 50       	subi	r19, 0x02	; 2
    2b48:	41 09       	sbc	r20, r1
    2b4a:	51 09       	sbc	r21, r1
    2b4c:	b0 e0       	ldi	r27, 0x00	; 0
    2b4e:	0e 94 4a 31 	call	0x6294	; 0x6294 <__muluhisi3>
			Correction = Correction/10000;
    2b52:	20 e1       	ldi	r18, 0x10	; 16
    2b54:	37 e2       	ldi	r19, 0x27	; 39
    2b56:	40 e0       	ldi	r20, 0x00	; 0
    2b58:	50 e0       	ldi	r21, 0x00	; 0
    2b5a:	0e 94 13 31 	call	0x6226	; 0x6226 <__udivmodsi4>
			samples->ps3 = samples->ps3 + Correction;
    2b5e:	20 0f       	add	r18, r16
    2b60:	31 1f       	adc	r19, r17
    2b62:	2e 87       	std	Y+14, r18	; 0x0e
    2b64:	3f 87       	std	Y+15, r19	; 0x0f
			break;
        default:
            break;
    }
}
    2b66:	df 91       	pop	r29
    2b68:	cf 91       	pop	r28
    2b6a:	1f 91       	pop	r17
    2b6c:	0f 91       	pop	r16
    2b6e:	08 95       	ret

00002b70 <calcBaseline>:
//          50  = Lg PD, PSRANGE=0, 180 mA 
//          10  = Lg PD, PSRANGE=1, 360 mA 
//          4  = Sm PD, PSRANGE=1, 360 mA 
////////////////////////////////////////////////////////////////////////////////
void calcBaseline(u8 proxChannel, SI114X_IRQ_SAMPLE *samples, u16 noise_margin)
{
    2b70:	0f 93       	push	r16
    2b72:	1f 93       	push	r17
    2b74:	cf 93       	push	r28
    2b76:	df 93       	push	r29

    static u16 xdata dynamic_baseline[3] = {0,0,0};

    u16 xdata *pPS;

    switch(proxChannel)
    2b78:	81 30       	cpi	r24, 0x01	; 1
    2b7a:	39 f0       	breq	.+14     	; 0x2b8a <calcBaseline+0x1a>
    2b7c:	18 f0       	brcs	.+6      	; 0x2b84 <calcBaseline+0x14>
    2b7e:	82 30       	cpi	r24, 0x02	; 2
    2b80:	39 f0       	breq	.+14     	; 0x2b90 <calcBaseline+0x20>
    2b82:	09 c0       	rjmp	.+18     	; 0x2b96 <calcBaseline+0x26>
    {
        case 0:
            pPS = &samples->ps1;
    2b84:	fb 01       	movw	r30, r22
    2b86:	3a 96       	adiw	r30, 0x0a	; 10
            break;
    2b88:	25 c0       	rjmp	.+74     	; 0x2bd4 <calcBaseline+0x64>
        case 1:
            pPS = &samples->ps2;
    2b8a:	fb 01       	movw	r30, r22
    2b8c:	3c 96       	adiw	r30, 0x0c	; 12
            break;
    2b8e:	22 c0       	rjmp	.+68     	; 0x2bd4 <calcBaseline+0x64>
        case 2:
            pPS = &samples->ps3;
    2b90:	fb 01       	movw	r30, r22
    2b92:	3e 96       	adiw	r30, 0x0e	; 14
            break;
    2b94:	1f c0       	rjmp	.+62     	; 0x2bd4 <calcBaseline+0x64>
        default:
            // Invalid Prox Channel. Reset all static variables 
            // to initial values
            average    = 0;
            dynamic_baseline[0] = 0;
    2b96:	10 92 4f 25 	sts	0x254F, r1
    2b9a:	10 92 50 25 	sts	0x2550, r1
            dynamic_baseline[1] = 0;
    2b9e:	10 92 51 25 	sts	0x2551, r1
    2ba2:	10 92 52 25 	sts	0x2552, r1
			dynamic_baseline[2] = 0;
    2ba6:	10 92 53 25 	sts	0x2553, r1
    2baa:	10 92 54 25 	sts	0x2554, r1
            rollingMax[0] = 0;
    2bae:	10 92 49 25 	sts	0x2549, r1
    2bb2:	10 92 4a 25 	sts	0x254A, r1
            rollingMax[1] = 0;
    2bb6:	10 92 4b 25 	sts	0x254B, r1
    2bba:	10 92 4c 25 	sts	0x254C, r1
			rollingMax[2] = 0;
    2bbe:	10 92 4d 25 	sts	0x254D, r1
    2bc2:	10 92 4e 25 	sts	0x254E, r1
            Maxcount[0]   = 0;
    2bc6:	10 92 46 25 	sts	0x2546, r1
            Maxcount[1]   = 0;
    2bca:	10 92 47 25 	sts	0x2547, r1
			Maxcount[2]   = 0;
    2bce:	10 92 48 25 	sts	0x2548, r1
            return;
    2bd2:	cb c0       	rjmp	.+406    	; 0x2d6a <calcBaseline+0x1fa>
            break;
    }

    // If the stored baseline in dynaBaseline is still set to its initialized 
    // value of maxLeakage, then set dynaBaseline equal to the newest sample
    if ( dynamic_baseline[proxChannel] == 0 && *pPS < maxLeakage[proxChannel] )
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	aa 0f       	add	r26, r26
    2bda:	bb 1f       	adc	r27, r27
    2bdc:	a1 5b       	subi	r26, 0xB1	; 177
    2bde:	ba 4d       	sbci	r27, 0xDA	; 218
    2be0:	2d 91       	ld	r18, X+
    2be2:	3c 91       	ld	r19, X
    2be4:	23 2b       	or	r18, r19
    2be6:	d9 f4       	brne	.+54     	; 0x2c1e <calcBaseline+0xae>
    2be8:	60 81       	ld	r22, Z
    2bea:	71 81       	ldd	r23, Z+1	; 0x01
    2bec:	dc 01       	movw	r26, r24
    2bee:	aa 0f       	add	r26, r26
    2bf0:	bb 1f       	adc	r27, r27
    2bf2:	a7 5a       	subi	r26, 0xA7	; 167
    2bf4:	ba 4d       	sbci	r27, 0xDA	; 218
    2bf6:	2d 91       	ld	r18, X+
    2bf8:	3c 91       	ld	r19, X
    2bfa:	62 17       	cp	r22, r18
    2bfc:	73 07       	cpc	r23, r19
    2bfe:	40 f4       	brcc	.+16     	; 0x2c10 <calcBaseline+0xa0>
    {
       dynamic_baseline[proxChannel] = *pPS;
    2c00:	dc 01       	movw	r26, r24
    2c02:	aa 0f       	add	r26, r26
    2c04:	bb 1f       	adc	r27, r27
    2c06:	a1 5b       	subi	r26, 0xB1	; 177
    2c08:	ba 4d       	sbci	r27, 0xDA	; 218
    2c0a:	6d 93       	st	X+, r22
    2c0c:	7c 93       	st	X, r23
    2c0e:	07 c0       	rjmp	.+14     	; 0x2c1e <calcBaseline+0xae>
    } else if ( dynamic_baseline[proxChannel] == 0)
    {
       dynamic_baseline[proxChannel] = maxLeakage[proxChannel];
    2c10:	dc 01       	movw	r26, r24
    2c12:	aa 0f       	add	r26, r26
    2c14:	bb 1f       	adc	r27, r27
    2c16:	a1 5b       	subi	r26, 0xB1	; 177
    2c18:	ba 4d       	sbci	r27, 0xDA	; 218
    2c1a:	2d 93       	st	X+, r18
    2c1c:	3c 93       	st	X, r19
    } 

    // Only process samples which are below the maxLeakage values, anything 
    // higher is a signal created by an object in front of the system which 
    // should not be baselined
    if ( *pPS < maxLeakage[proxChannel] )
    2c1e:	60 81       	ld	r22, Z
    2c20:	71 81       	ldd	r23, Z+1	; 0x01
    2c22:	fc 01       	movw	r30, r24
    2c24:	ee 0f       	add	r30, r30
    2c26:	ff 1f       	adc	r31, r31
    2c28:	e7 5a       	subi	r30, 0xA7	; 167
    2c2a:	fa 4d       	sbci	r31, 0xDA	; 218
    2c2c:	20 81       	ld	r18, Z
    2c2e:	31 81       	ldd	r19, Z+1	; 0x01
    2c30:	62 17       	cp	r22, r18
    2c32:	73 07       	cpc	r23, r19
    2c34:	08 f0       	brcs	.+2      	; 0x2c38 <calcBaseline+0xc8>
    2c36:	77 c0       	rjmp	.+238    	; 0x2d26 <calcBaseline+0x1b6>
    {
        average = dynamic_baseline[proxChannel]*7;
    2c38:	fc 01       	movw	r30, r24
    2c3a:	ee 0f       	add	r30, r30
    2c3c:	ff 1f       	adc	r31, r31
    2c3e:	e1 5b       	subi	r30, 0xB1	; 177
    2c40:	fa 4d       	sbci	r31, 0xDA	; 218
    2c42:	01 90       	ld	r0, Z+
    2c44:	f0 81       	ld	r31, Z
    2c46:	e0 2d       	mov	r30, r0
    2c48:	df 01       	movw	r26, r30
    2c4a:	aa 0f       	add	r26, r26
    2c4c:	bb 1f       	adc	r27, r27
    2c4e:	aa 0f       	add	r26, r26
    2c50:	bb 1f       	adc	r27, r27
    2c52:	aa 0f       	add	r26, r26
    2c54:	bb 1f       	adc	r27, r27
    2c56:	ae 1b       	sub	r26, r30
    2c58:	bf 0b       	sbc	r27, r31
        average = average + (u32)(*pPS);
    2c5a:	8b 01       	movw	r16, r22
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	0a 0f       	add	r16, r26
    2c62:	1b 1f       	adc	r17, r27
    2c64:	21 1d       	adc	r18, r1
    2c66:	31 1d       	adc	r19, r1
        average = average/8;
    2c68:	68 94       	set
    2c6a:	12 f8       	bld	r1, 2
    2c6c:	36 95       	lsr	r19
    2c6e:	27 95       	ror	r18
    2c70:	17 95       	ror	r17
    2c72:	07 95       	ror	r16
    2c74:	16 94       	lsr	r1
    2c76:	d1 f7       	brne	.-12     	; 0x2c6c <calcBaseline+0xfc>
        // If the new sample has not changed the baseline average by a large 
        // amount, then allow the rollingMax variable to update. If the new 
        // sample did move the baseline average by a lot, then it's possible 
        // it was created by a proximity event. So, do not consider this part 
        // of the rollingMax
        if ( dynamic_baseline[proxChannel] <= (u16)average + (u16)average/64
    2c78:	d8 01       	movw	r26, r16
    2c7a:	00 24       	eor	r0, r0
    2c7c:	aa 0f       	add	r26, r26
    2c7e:	bb 1f       	adc	r27, r27
    2c80:	00 1c       	adc	r0, r0
    2c82:	aa 0f       	add	r26, r26
    2c84:	bb 1f       	adc	r27, r27
    2c86:	00 1c       	adc	r0, r0
    2c88:	ab 2f       	mov	r26, r27
    2c8a:	b0 2d       	mov	r27, r0
    2c8c:	ed 01       	movw	r28, r26
    2c8e:	c0 0f       	add	r28, r16
    2c90:	d1 1f       	adc	r29, r17
    2c92:	ce 17       	cp	r28, r30
    2c94:	df 07       	cpc	r29, r31
    2c96:	08 f4       	brcc	.+2      	; 0x2c9a <calcBaseline+0x12a>
    2c98:	3f c0       	rjmp	.+126    	; 0x2d18 <calcBaseline+0x1a8>
            && dynamic_baseline[proxChannel] >= (u16)average - (u16)average/64)
    2c9a:	e8 01       	movw	r28, r16
    2c9c:	ca 1b       	sub	r28, r26
    2c9e:	db 0b       	sbc	r29, r27
    2ca0:	ec 17       	cp	r30, r28
    2ca2:	fd 07       	cpc	r31, r29
    2ca4:	c8 f1       	brcs	.+114    	; 0x2d18 <calcBaseline+0x1a8>
        {
            if ( rollingMax[proxChannel] == 0 )
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	ee 0f       	add	r30, r30
    2caa:	ff 1f       	adc	r31, r31
    2cac:	e7 5b       	subi	r30, 0xB7	; 183
    2cae:	fa 4d       	sbci	r31, 0xDA	; 218
    2cb0:	01 90       	ld	r0, Z+
    2cb2:	f0 81       	ld	r31, Z
    2cb4:	e0 2d       	mov	r30, r0
    2cb6:	30 97       	sbiw	r30, 0x00	; 0
    2cb8:	61 f4       	brne	.+24     	; 0x2cd2 <calcBaseline+0x162>
            {
                rollingMax[proxChannel] = *pPS;
    2cba:	fc 01       	movw	r30, r24
    2cbc:	ee 0f       	add	r30, r30
    2cbe:	ff 1f       	adc	r31, r31
    2cc0:	e7 5b       	subi	r30, 0xB7	; 183
    2cc2:	fa 4d       	sbci	r31, 0xDA	; 218
    2cc4:	60 83       	st	Z, r22
    2cc6:	71 83       	std	Z+1, r23	; 0x01
                Maxcount[proxChannel] = 0;
    2cc8:	fc 01       	movw	r30, r24
    2cca:	ea 5b       	subi	r30, 0xBA	; 186
    2ccc:	fa 4d       	sbci	r31, 0xDA	; 218
    2cce:	10 82       	st	Z, r1
    2cd0:	23 c0       	rjmp	.+70     	; 0x2d18 <calcBaseline+0x1a8>
            } 
            else if ( rollingMax[proxChannel] >= *pPS )
    2cd2:	e6 17       	cp	r30, r22
    2cd4:	f7 07       	cpc	r31, r23
    2cd6:	a8 f0       	brcs	.+42     	; 0x2d02 <calcBaseline+0x192>
            {
                (Maxcount[proxChannel]) += 1;
    2cd8:	dc 01       	movw	r26, r24
    2cda:	aa 5b       	subi	r26, 0xBA	; 186
    2cdc:	ba 4d       	sbci	r27, 0xDA	; 218
    2cde:	6c 91       	ld	r22, X
    2ce0:	6f 5f       	subi	r22, 0xFF	; 255
    2ce2:	6c 93       	st	X, r22
                if ( Maxcount[proxChannel] > 64 )
    2ce4:	61 34       	cpi	r22, 0x41	; 65
    2ce6:	c0 f0       	brcs	.+48     	; 0x2d18 <calcBaseline+0x1a8>
                {
                    (rollingMax[proxChannel]) -= 1;
    2ce8:	dc 01       	movw	r26, r24
    2cea:	aa 0f       	add	r26, r26
    2cec:	bb 1f       	adc	r27, r27
    2cee:	a7 5b       	subi	r26, 0xB7	; 183
    2cf0:	ba 4d       	sbci	r27, 0xDA	; 218
    2cf2:	31 97       	sbiw	r30, 0x01	; 1
    2cf4:	ed 93       	st	X+, r30
    2cf6:	fc 93       	st	X, r31
                    Maxcount[proxChannel] = 0;
    2cf8:	fc 01       	movw	r30, r24
    2cfa:	ea 5b       	subi	r30, 0xBA	; 186
    2cfc:	fa 4d       	sbci	r31, 0xDA	; 218
    2cfe:	10 82       	st	Z, r1
    2d00:	0b c0       	rjmp	.+22     	; 0x2d18 <calcBaseline+0x1a8>
                }
            } 
            else
            {
                rollingMax[proxChannel] = *pPS;
    2d02:	fc 01       	movw	r30, r24
    2d04:	ee 0f       	add	r30, r30
    2d06:	ff 1f       	adc	r31, r31
    2d08:	e7 5b       	subi	r30, 0xB7	; 183
    2d0a:	fa 4d       	sbci	r31, 0xDA	; 218
    2d0c:	60 83       	st	Z, r22
    2d0e:	71 83       	std	Z+1, r23	; 0x01
                Maxcount[proxChannel] = 0;
    2d10:	fc 01       	movw	r30, r24
    2d12:	ea 5b       	subi	r30, 0xBA	; 186
    2d14:	fa 4d       	sbci	r31, 0xDA	; 218
    2d16:	10 82       	st	Z, r1
            }
        }

        // Update the stored baseline average with the new value
        dynamic_baseline[proxChannel] = (u16)average;
    2d18:	fc 01       	movw	r30, r24
    2d1a:	ee 0f       	add	r30, r30
    2d1c:	ff 1f       	adc	r31, r31
    2d1e:	e1 5b       	subi	r30, 0xB1	; 177
    2d20:	fa 4d       	sbci	r31, 0xDA	; 218
    2d22:	00 83       	st	Z, r16
    2d24:	11 83       	std	Z+1, r17	; 0x01
    }

    // Use the rollingMax value to determine the baseline level
    if ( rollingMax[proxChannel] != 0 )
    2d26:	fc 01       	movw	r30, r24
    2d28:	ee 0f       	add	r30, r30
    2d2a:	ff 1f       	adc	r31, r31
    2d2c:	e7 5b       	subi	r30, 0xB7	; 183
    2d2e:	fa 4d       	sbci	r31, 0xDA	; 218
    2d30:	20 81       	ld	r18, Z
    2d32:	31 81       	ldd	r19, Z+1	; 0x01
    2d34:	21 15       	cp	r18, r1
    2d36:	31 05       	cpc	r19, r1
    2d38:	51 f0       	breq	.+20     	; 0x2d4e <calcBaseline+0x1de>
    {
        baseline[proxChannel] = rollingMax[proxChannel] + noise_margin;
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	ee 0f       	add	r30, r30
    2d3e:	ff 1f       	adc	r31, r31
    2d40:	ed 5e       	subi	r30, 0xED	; 237
    2d42:	f8 4d       	sbci	r31, 0xD8	; 216
    2d44:	42 0f       	add	r20, r18
    2d46:	53 1f       	adc	r21, r19
    2d48:	40 83       	st	Z, r20
    2d4a:	51 83       	std	Z+1, r21	; 0x01
    2d4c:	0e c0       	rjmp	.+28     	; 0x2d6a <calcBaseline+0x1fa>
    } 
    else
    {  // If the rollingMax has not been determined yet, use the average
        baseline[proxChannel] = (u16) dynamic_baseline[proxChannel] + noise_margin;
    2d4e:	88 0f       	add	r24, r24
    2d50:	99 1f       	adc	r25, r25
    2d52:	fc 01       	movw	r30, r24
    2d54:	ed 5e       	subi	r30, 0xED	; 237
    2d56:	f8 4d       	sbci	r31, 0xD8	; 216
    2d58:	dc 01       	movw	r26, r24
    2d5a:	a1 5b       	subi	r26, 0xB1	; 177
    2d5c:	ba 4d       	sbci	r27, 0xDA	; 218
    2d5e:	8d 91       	ld	r24, X+
    2d60:	9c 91       	ld	r25, X
    2d62:	48 0f       	add	r20, r24
    2d64:	59 1f       	adc	r21, r25
    2d66:	40 83       	st	Z, r20
    2d68:	51 83       	std	Z+1, r21	; 0x01
    }
}
    2d6a:	df 91       	pop	r29
    2d6c:	cf 91       	pop	r28
    2d6e:	1f 91       	pop	r17
    2d70:	0f 91       	pop	r16
    2d72:	08 95       	ret

00002d74 <si114x_process_samples>:
u16 code scale           =  3;
u8  code ircorrection[3] =  { 17, 35, 29 };
#endif

void si114x_process_samples(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples)
{
    2d74:	ef 92       	push	r14
    2d76:	ff 92       	push	r15
    2d78:	0f 93       	push	r16
    2d7a:	1f 93       	push	r17
    2d7c:	cf 93       	push	r28
    2d7e:	df 93       	push	r29
    2d80:	8c 01       	movw	r16, r24
    2d82:	eb 01       	movw	r28, r22
    if ((maxLeakage[0]==0)&&(maxLeakage[1]==0)&&(maxLeakage[2]==0)&&(initial_baseline_counter==128))
    2d84:	20 91 59 25 	lds	r18, 0x2559
    2d88:	30 91 5a 25 	lds	r19, 0x255A
    2d8c:	23 2b       	or	r18, r19
    2d8e:	c9 f4       	brne	.+50     	; 0x2dc2 <si114x_process_samples+0x4e>
    2d90:	80 91 5b 25 	lds	r24, 0x255B
    2d94:	90 91 5c 25 	lds	r25, 0x255C
    2d98:	89 2b       	or	r24, r25
    2d9a:	99 f4       	brne	.+38     	; 0x2dc2 <si114x_process_samples+0x4e>
    2d9c:	80 91 5d 25 	lds	r24, 0x255D
    2da0:	90 91 5e 25 	lds	r25, 0x255E
    2da4:	89 2b       	or	r24, r25
    2da6:	69 f4       	brne	.+26     	; 0x2dc2 <si114x_process_samples+0x4e>
    2da8:	80 91 16 20 	lds	r24, 0x2016
    2dac:	80 38       	cpi	r24, 0x80	; 128
    2dae:	49 f4       	brne	.+18     	; 0x2dc2 <si114x_process_samples+0x4e>
    {
        printf("Computing Baseline. Make sure nothing is in the vicinity of the EVB\n");
    2db0:	87 e6       	ldi	r24, 0x67	; 103
    2db2:	92 e2       	ldi	r25, 0x22	; 34
    2db4:	0e 94 00 33 	call	0x6600	; 0x6600 <puts>
        PortSet(1,0); // Turn on all lights to indicate baseline is being computed
    2db8:	60 e0       	ldi	r22, 0x00	; 0
    2dba:	70 e0       	ldi	r23, 0x00	; 0
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	ce d0       	rcall	.+412    	; 0x2f5e <PortSet>
    }

    if (initial_baseline_counter != 0)
    2dc2:	80 91 16 20 	lds	r24, 0x2016
    2dc6:	88 23       	and	r24, r24
    2dc8:	09 f4       	brne	.+2      	; 0x2dcc <si114x_process_samples+0x58>
    2dca:	7f c0       	rjmp	.+254    	; 0x2eca <si114x_process_samples+0x156>
    {
        // The first 128 samples are used to establish the initial 
        // baseline
        if ( initial_baseline_counter > 1 )
    2dcc:	82 30       	cpi	r24, 0x02	; 2
    2dce:	48 f1       	brcs	.+82     	; 0x2e22 <si114x_process_samples+0xae>
        {
            // Look for maximum
            if( maxLeakage[0] < samples->ps1) maxLeakage[0] = samples->ps1;
    2dd0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dd2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2dd4:	20 91 59 25 	lds	r18, 0x2559
    2dd8:	30 91 5a 25 	lds	r19, 0x255A
    2ddc:	28 17       	cp	r18, r24
    2dde:	39 07       	cpc	r19, r25
    2de0:	20 f4       	brcc	.+8      	; 0x2dea <si114x_process_samples+0x76>
    2de2:	80 93 59 25 	sts	0x2559, r24
    2de6:	90 93 5a 25 	sts	0x255A, r25
            if( maxLeakage[1] < samples->ps2) maxLeakage[1] = samples->ps2;
    2dea:	8c 85       	ldd	r24, Y+12	; 0x0c
    2dec:	9d 85       	ldd	r25, Y+13	; 0x0d
    2dee:	20 91 5b 25 	lds	r18, 0x255B
    2df2:	30 91 5c 25 	lds	r19, 0x255C
    2df6:	28 17       	cp	r18, r24
    2df8:	39 07       	cpc	r19, r25
    2dfa:	20 f4       	brcc	.+8      	; 0x2e04 <si114x_process_samples+0x90>
    2dfc:	80 93 5b 25 	sts	0x255B, r24
    2e00:	90 93 5c 25 	sts	0x255C, r25
			if( maxLeakage[2] < samples->ps3) maxLeakage[2] = samples->ps3;
    2e04:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e06:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e08:	20 91 5d 25 	lds	r18, 0x255D
    2e0c:	30 91 5e 25 	lds	r19, 0x255E
    2e10:	28 17       	cp	r18, r24
    2e12:	39 07       	cpc	r19, r25
    2e14:	08 f0       	brcs	.+2      	; 0x2e18 <si114x_process_samples+0xa4>
    2e16:	53 c0       	rjmp	.+166    	; 0x2ebe <si114x_process_samples+0x14a>
    2e18:	80 93 5d 25 	sts	0x255D, r24
    2e1c:	90 93 5e 25 	sts	0x255E, r25
    2e20:	4e c0       	rjmp	.+156    	; 0x2ebe <si114x_process_samples+0x14a>
        }
        else
        {
            printf("Initial Baseline Calculated, PS1 = %d, PS2 = %d, PS3 = %d \n", maxLeakage[0], maxLeakage[1],maxLeakage[2]);
    2e22:	cd e5       	ldi	r28, 0x5D	; 93
    2e24:	d5 e2       	ldi	r29, 0x25	; 37
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	8f 93       	push	r24
    2e2a:	88 81       	ld	r24, Y
    2e2c:	8f 93       	push	r24
    2e2e:	0b e5       	ldi	r16, 0x5B	; 91
    2e30:	15 e2       	ldi	r17, 0x25	; 37
    2e32:	f8 01       	movw	r30, r16
    2e34:	81 81       	ldd	r24, Z+1	; 0x01
    2e36:	8f 93       	push	r24
    2e38:	80 81       	ld	r24, Z
    2e3a:	8f 93       	push	r24
    2e3c:	0f 2e       	mov	r0, r31
    2e3e:	f9 e5       	ldi	r31, 0x59	; 89
    2e40:	ef 2e       	mov	r14, r31
    2e42:	f5 e2       	ldi	r31, 0x25	; 37
    2e44:	ff 2e       	mov	r15, r31
    2e46:	f0 2d       	mov	r31, r0
    2e48:	f7 01       	movw	r30, r14
    2e4a:	81 81       	ldd	r24, Z+1	; 0x01
    2e4c:	8f 93       	push	r24
    2e4e:	80 81       	ld	r24, Z
    2e50:	8f 93       	push	r24
    2e52:	8b ea       	ldi	r24, 0xAB	; 171
    2e54:	92 e2       	ldi	r25, 0x22	; 34
    2e56:	9f 93       	push	r25
    2e58:	8f 93       	push	r24
    2e5a:	0e 94 ef 32 	call	0x65de	; 0x65de <printf>
            PortSet(1,0xff); // Turn off all leds to indicate baseline computation is completed
    2e5e:	6f ef       	ldi	r22, 0xFF	; 255
    2e60:	70 e0       	ldi	r23, 0x00	; 0
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	7b d0       	rcall	.+246    	; 0x2f5e <PortSet>
            // Set Max Leakage 
            maxLeakage[0] = maxLeakage[0] + noise_margin*2;
    2e68:	80 91 14 20 	lds	r24, 0x2014
    2e6c:	90 91 15 20 	lds	r25, 0x2015
    2e70:	88 0f       	add	r24, r24
    2e72:	99 1f       	adc	r25, r25
    2e74:	f7 01       	movw	r30, r14
    2e76:	40 81       	ld	r20, Z
    2e78:	51 81       	ldd	r21, Z+1	; 0x01
    2e7a:	48 0f       	add	r20, r24
    2e7c:	59 1f       	adc	r21, r25
    2e7e:	40 83       	st	Z, r20
    2e80:	51 83       	std	Z+1, r21	; 0x01
            maxLeakage[1] = maxLeakage[1] + noise_margin*2;
    2e82:	f8 01       	movw	r30, r16
    2e84:	20 81       	ld	r18, Z
    2e86:	31 81       	ldd	r19, Z+1	; 0x01
    2e88:	28 0f       	add	r18, r24
    2e8a:	39 1f       	adc	r19, r25
    2e8c:	20 83       	st	Z, r18
    2e8e:	31 83       	std	Z+1, r19	; 0x01
			maxLeakage[2] = maxLeakage[2] + noise_margin*2;
    2e90:	68 81       	ld	r22, Y
    2e92:	79 81       	ldd	r23, Y+1	; 0x01
    2e94:	86 0f       	add	r24, r22
    2e96:	97 1f       	adc	r25, r23
    2e98:	88 83       	st	Y, r24
    2e9a:	99 83       	std	Y+1, r25	; 0x01

            baseline[0] = maxLeakage[0];
    2e9c:	40 93 13 27 	sts	0x2713, r20
    2ea0:	50 93 14 27 	sts	0x2714, r21
            baseline[1] = maxLeakage[1];
    2ea4:	20 93 15 27 	sts	0x2715, r18
    2ea8:	30 93 16 27 	sts	0x2716, r19
			baseline[2] = maxLeakage[2];
    2eac:	80 93 17 27 	sts	0x2717, r24
    2eb0:	90 93 18 27 	sts	0x2718, r25
    2eb4:	8d b7       	in	r24, 0x3d	; 61
    2eb6:	9e b7       	in	r25, 0x3e	; 62
    2eb8:	08 96       	adiw	r24, 0x08	; 8
    2eba:	8d bf       	out	0x3d, r24	; 61
    2ebc:	9e bf       	out	0x3e, r25	; 62
        }
        
        // Decrement counter
        initial_baseline_counter--;
    2ebe:	80 91 16 20 	lds	r24, 0x2016
    2ec2:	81 50       	subi	r24, 0x01	; 1
    2ec4:	80 93 16 20 	sts	0x2016, r24
    2ec8:	43 c0       	rjmp	.+134    	; 0x2f50 <si114x_process_samples+0x1dc>
    else
    {
        //
        // Once the baseline has been set, do the actual loop
        // The first thing that happens is to check for saturation events
        if(samples->ps1 > 48000 || samples->ps2 > 48000 || samples->ps3 > 48000)
    2eca:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ecc:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ece:	81 38       	cpi	r24, 0x81	; 129
    2ed0:	9b 4b       	sbci	r25, 0xBB	; 187
    2ed2:	50 f4       	brcc	.+20     	; 0x2ee8 <si114x_process_samples+0x174>
    2ed4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ed6:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ed8:	81 38       	cpi	r24, 0x81	; 129
    2eda:	9b 4b       	sbci	r25, 0xBB	; 187
    2edc:	28 f4       	brcc	.+10     	; 0x2ee8 <si114x_process_samples+0x174>
    2ede:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ee0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ee2:	81 38       	cpi	r24, 0x81	; 129
    2ee4:	9b 4b       	sbci	r25, 0xBB	; 187
    2ee6:	28 f0       	brcs	.+10     	; 0x2ef2 <si114x_process_samples+0x17e>
            // handle saturation events by changing ADC settings.
            //
            // For readability of this code, no changes to 
            // the settings are done.
            //
            printf("Samples are Saturated\n");
    2ee8:	87 ee       	ldi	r24, 0xE7	; 231
    2eea:	92 e2       	ldi	r25, 0x22	; 34
    2eec:	0e 94 00 33 	call	0x6600	; 0x6600 <puts>
    2ef0:	2f c0       	rjmp	.+94     	; 0x2f50 <si114x_process_samples+0x1dc>
        }
        else
        { 
            if( isIRStable( samples ) )
    2ef2:	ce 01       	movw	r24, r28
    2ef4:	4b dd       	rcall	.-1386   	; 0x298c <isIRStable>
    2ef6:	88 23       	and	r24, r24
    2ef8:	59 f1       	breq	.+86     	; 0x2f50 <si114x_process_samples+0x1dc>
            {
                IRCompensation( 0, samples, ircorrection );  // IR Ambient Compensation for PS1 Channel
    2efa:	4f e0       	ldi	r20, 0x0F	; 15
    2efc:	50 e2       	ldi	r21, 0x20	; 32
    2efe:	be 01       	movw	r22, r28
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	c6 dd       	rcall	.-1140   	; 0x2a90 <IRCompensation>
                IRCompensation( 1, samples, ircorrection );  // IR Ambient Compensation for PS2 Channel
    2f04:	4f e0       	ldi	r20, 0x0F	; 15
    2f06:	50 e2       	ldi	r21, 0x20	; 32
    2f08:	be 01       	movw	r22, r28
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	c1 dd       	rcall	.-1150   	; 0x2a90 <IRCompensation>
				IRCompensation( 2, samples, ircorrection );  // IR Ambient Compensation for PS3 Channel
    2f0e:	4f e0       	ldi	r20, 0x0F	; 15
    2f10:	50 e2       	ldi	r21, 0x20	; 32
    2f12:	be 01       	movw	r22, r28
    2f14:	82 e0       	ldi	r24, 0x02	; 2
    2f16:	bc dd       	rcall	.-1160   	; 0x2a90 <IRCompensation>

                calcBaseline( 0 , samples, noise_margin); // Calculate PS1 Baseline
    2f18:	40 91 14 20 	lds	r20, 0x2014
    2f1c:	50 91 15 20 	lds	r21, 0x2015
    2f20:	be 01       	movw	r22, r28
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	25 de       	rcall	.-950    	; 0x2b70 <calcBaseline>
                calcBaseline( 1 , samples, noise_margin); // Calculate PS2 Baseline
    2f26:	40 91 14 20 	lds	r20, 0x2014
    2f2a:	50 91 15 20 	lds	r21, 0x2015
    2f2e:	be 01       	movw	r22, r28
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	1e de       	rcall	.-964    	; 0x2b70 <calcBaseline>
				calcBaseline( 2 , samples, noise_margin); // Calculate PS3 Baseline
    2f34:	40 91 14 20 	lds	r20, 0x2014
    2f38:	50 91 15 20 	lds	r21, 0x2015
    2f3c:	be 01       	movw	r22, r28
    2f3e:	82 e0       	ldi	r24, 0x02	; 2
    2f40:	17 de       	rcall	.-978    	; 0x2b70 <calcBaseline>

                SliderAlgorithm(si114x_handle, samples, scale);
    2f42:	40 91 12 20 	lds	r20, 0x2012
    2f46:	50 91 13 20 	lds	r21, 0x2013
    2f4a:	be 01       	movw	r22, r28
    2f4c:	c8 01       	movw	r24, r16
    2f4e:	7d d1       	rcall	.+762    	; 0x324a <SliderAlgorithm>

            }
        }
    }
}
    2f50:	df 91       	pop	r29
    2f52:	cf 91       	pop	r28
    2f54:	1f 91       	pop	r17
    2f56:	0f 91       	pop	r16
    2f58:	ff 90       	pop	r15
    2f5a:	ef 90       	pop	r14
    2f5c:	08 95       	ret

00002f5e <PortSet>:

s16 Si114xBlockRead(HANDLE si114x_handle,
u8 address, u8 length, u8 *values)
{
	return twi_read_packet(&TWIC,SI114X_ADDR,1000,address,values,length);
}
    2f5e:	08 95       	ret

00002f60 <Si114xWriteToRegister>:
    2f60:	ef 92       	push	r14
    2f62:	0f 93       	push	r16
    2f64:	1f 93       	push	r17
    2f66:	cf 93       	push	r28
    2f68:	df 93       	push	r29
    2f6a:	1f 92       	push	r1
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
    2f70:	26 2f       	mov	r18, r22
    2f72:	49 83       	std	Y+1, r20	; 0x01
    2f74:	ee 24       	eor	r14, r14
    2f76:	e3 94       	inc	r14
    2f78:	8e 01       	movw	r16, r28
    2f7a:	0f 5f       	subi	r16, 0xFF	; 255
    2f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f7e:	48 ee       	ldi	r20, 0xE8	; 232
    2f80:	6a e5       	ldi	r22, 0x5A	; 90
    2f82:	80 e8       	ldi	r24, 0x80	; 128
    2f84:	94 e0       	ldi	r25, 0x04	; 4
    2f86:	5a d4       	rcall	.+2228   	; 0x383c <twi_write_packet>
    2f88:	80 e0       	ldi	r24, 0x00	; 0
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	0f 90       	pop	r0
    2f8e:	df 91       	pop	r29
    2f90:	cf 91       	pop	r28
    2f92:	1f 91       	pop	r17
    2f94:	0f 91       	pop	r16
    2f96:	ef 90       	pop	r14
    2f98:	08 95       	ret

00002f9a <Si114xReadFromRegister>:
    2f9a:	ef 92       	push	r14
    2f9c:	0f 93       	push	r16
    2f9e:	1f 93       	push	r17
    2fa0:	cf 93       	push	r28
    2fa2:	df 93       	push	r29
    2fa4:	1f 92       	push	r1
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62
    2faa:	26 2f       	mov	r18, r22
    2fac:	ee 24       	eor	r14, r14
    2fae:	e3 94       	inc	r14
    2fb0:	8e 01       	movw	r16, r28
    2fb2:	0f 5f       	subi	r16, 0xFF	; 255
    2fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb6:	48 ee       	ldi	r20, 0xE8	; 232
    2fb8:	6a e5       	ldi	r22, 0x5A	; 90
    2fba:	80 e8       	ldi	r24, 0x80	; 128
    2fbc:	94 e0       	ldi	r25, 0x04	; 4
    2fbe:	f8 d3       	rcall	.+2032   	; 0x37b0 <twi_read_packet>
    2fc0:	89 81       	ldd	r24, Y+1	; 0x01
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	0f 90       	pop	r0
    2fc6:	df 91       	pop	r29
    2fc8:	cf 91       	pop	r28
    2fca:	1f 91       	pop	r17
    2fcc:	0f 91       	pop	r16
    2fce:	ef 90       	pop	r14
    2fd0:	08 95       	ret

00002fd2 <Si114xBlockWrite>:
    2fd2:	ef 92       	push	r14
    2fd4:	0f 93       	push	r16
    2fd6:	1f 93       	push	r17
    2fd8:	89 01       	movw	r16, r18
    2fda:	e4 2e       	mov	r14, r20
    2fdc:	26 2f       	mov	r18, r22
    2fde:	48 ee       	ldi	r20, 0xE8	; 232
    2fe0:	6a e5       	ldi	r22, 0x5A	; 90
    2fe2:	80 e8       	ldi	r24, 0x80	; 128
    2fe4:	94 e0       	ldi	r25, 0x04	; 4
    2fe6:	2a d4       	rcall	.+2132   	; 0x383c <twi_write_packet>
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	1f 91       	pop	r17
    2fec:	0f 91       	pop	r16
    2fee:	ef 90       	pop	r14
    2ff0:	08 95       	ret

00002ff2 <delay_10ms>:
    2ff2:	2f ef       	ldi	r18, 0xFF	; 255
    2ff4:	89 ef       	ldi	r24, 0xF9	; 249
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	21 50       	subi	r18, 0x01	; 1
    2ffa:	80 40       	sbci	r24, 0x00	; 0
    2ffc:	90 40       	sbci	r25, 0x00	; 0
    2ffe:	e1 f7       	brne	.-8      	; 0x2ff8 <delay_10ms+0x6>
    3000:	00 c0       	rjmp	.+0      	; 0x3002 <__stack+0x3>
    3002:	00 00       	nop
    3004:	08 95       	ret

00003006 <QS_Counts_to_Distance>:
// In the IR Slider, the distance between LED to sensor is the same for each of
// the two LEDs. For this reason, it is possible to have a single counts to
// distance function. 
//
s16 QS_Counts_to_Distance (u16 counts, u8 led)
{
    3006:	ef 92       	push	r14
    3008:	ff 92       	push	r15
    300a:	0f 93       	push	r16
    300c:	1f 93       	push	r17
    300e:	cf 93       	push	r28
    3010:	df 93       	push	r29
    3012:	cd b7       	in	r28, 0x3d	; 61
    3014:	de b7       	in	r29, 0x3e	; 62
    3016:	c2 5a       	subi	r28, 0xA2	; 162
    3018:	d1 09       	sbc	r29, r1
    301a:	cd bf       	out	0x3d, r28	; 61
    301c:	de bf       	out	0x3e, r29	; 62
    u16 code   offset_1[9]    = {29, 72, 55, 75, 95, 131, 177, 238, 300};
    301e:	42 e1       	ldi	r20, 0x12	; 18
    3020:	e7 e2       	ldi	r30, 0x27	; 39
    3022:	f0 e2       	ldi	r31, 0x20	; 32
    3024:	de 01       	movw	r26, r28
    3026:	11 96       	adiw	r26, 0x01	; 1
    3028:	01 90       	ld	r0, Z+
    302a:	0d 92       	st	X+, r0
    302c:	4a 95       	dec	r20
    302e:	e1 f7       	brne	.-8      	; 0x3028 <QS_Counts_to_Distance+0x22>
    u16 code   slope_1[9]     = {29, 173, 102, 237, 429, 1215, 3012, 9990, 26214};	
    3030:	42 e1       	ldi	r20, 0x12	; 18
    3032:	e9 e3       	ldi	r30, 0x39	; 57
    3034:	f0 e2       	ldi	r31, 0x20	; 32
    3036:	de 01       	movw	r26, r28
    3038:	53 96       	adiw	r26, 0x13	; 19
    303a:	01 90       	ld	r0, Z+
    303c:	0d 92       	st	X+, r0
    303e:	4a 95       	dec	r20
    3040:	e1 f7       	brne	.-8      	; 0x303a <QS_Counts_to_Distance+0x34>
    u16 code   piecewise_brackets_1[9] = {19805, 16015, 9607, 6838, 3014, 1666, 578, 250, 125};	
    3042:	42 e1       	ldi	r20, 0x12	; 18
    3044:	eb e4       	ldi	r30, 0x4B	; 75
    3046:	f0 e2       	ldi	r31, 0x20	; 32
    3048:	de 01       	movw	r26, r28
    304a:	95 96       	adiw	r26, 0x25	; 37
    304c:	01 90       	ld	r0, Z+
    304e:	0d 92       	st	X+, r0
    3050:	4a 95       	dec	r20
    3052:	e1 f7       	brne	.-8      	; 0x304c <QS_Counts_to_Distance+0x46>

    u16 code   offset_2[9]    = {27, 39, 51, 75, 96, 132, 177, 236, 299};
    3054:	42 e1       	ldi	r20, 0x12	; 18
    3056:	ed e5       	ldi	r30, 0x5D	; 93
    3058:	f0 e2       	ldi	r31, 0x20	; 32
    305a:	de 01       	movw	r26, r28
    305c:	d7 96       	adiw	r26, 0x37	; 55
    305e:	01 90       	ld	r0, Z+
    3060:	0d 92       	st	X+, r0
    3062:	4a 95       	dec	r20
    3064:	e1 f7       	brne	.-8      	; 0x305e <QS_Counts_to_Distance+0x58>
    u16 code   slope_2[9]     = {27, 39, 95, 298, 538, 1481, 3637, 11457, 31208};	
    3066:	42 e1       	ldi	r20, 0x12	; 18
    3068:	ef e6       	ldi	r30, 0x6F	; 111
    306a:	f0 e2       	ldi	r31, 0x20	; 32
    306c:	de 01       	movw	r26, r28
    306e:	a7 5b       	subi	r26, 0xB7	; 183
    3070:	bf 4f       	sbci	r27, 0xFF	; 255
    3072:	01 90       	ld	r0, Z+
    3074:	0d 92       	st	X+, r0
    3076:	4a 95       	dec	r20
    3078:	e1 f7       	brne	.-8      	; 0x3072 <QS_Counts_to_Distance+0x6c>
    u16 code   piecewise_brackets_2[9]= {17760, 14650, 7745, 5545, 2500, 1394, 493, 207, 102};	
    307a:	42 e1       	ldi	r20, 0x12	; 18
    307c:	e1 e8       	ldi	r30, 0x81	; 129
    307e:	f0 e2       	ldi	r31, 0x20	; 32
    3080:	de 01       	movw	r26, r28
    3082:	a5 5a       	subi	r26, 0xA5	; 165
    3084:	bf 4f       	sbci	r27, 0xFF	; 255
    3086:	01 90       	ld	r0, Z+
    3088:	0d 92       	st	X+, r0
    308a:	4a 95       	dec	r20
    308c:	e1 f7       	brne	.-8      	; 0x3086 <QS_Counts_to_Distance+0x80>
		
	u16 code   offset_3[9]    = {27, 39, 51, 75, 96, 132, 177, 236, 299};
    308e:	42 e1       	ldi	r20, 0x12	; 18
    3090:	ed e5       	ldi	r30, 0x5D	; 93
    3092:	f0 e2       	ldi	r31, 0x20	; 32
    3094:	de 01       	movw	r26, r28
    3096:	a3 59       	subi	r26, 0x93	; 147
    3098:	bf 4f       	sbci	r27, 0xFF	; 255
    309a:	01 90       	ld	r0, Z+
    309c:	0d 92       	st	X+, r0
    309e:	4a 95       	dec	r20
    30a0:	e1 f7       	brne	.-8      	; 0x309a <QS_Counts_to_Distance+0x94>
	u16 code   slope_3[9]     = {27, 39, 95, 298, 538, 1481, 3637, 11457, 31208};
    30a2:	42 e1       	ldi	r20, 0x12	; 18
    30a4:	ef e6       	ldi	r30, 0x6F	; 111
    30a6:	f0 e2       	ldi	r31, 0x20	; 32
    30a8:	de 01       	movw	r26, r28
    30aa:	a1 58       	subi	r26, 0x81	; 129
    30ac:	bf 4f       	sbci	r27, 0xFF	; 255
    30ae:	01 90       	ld	r0, Z+
    30b0:	0d 92       	st	X+, r0
    30b2:	4a 95       	dec	r20
    30b4:	e1 f7       	brne	.-8      	; 0x30ae <QS_Counts_to_Distance+0xa8>
	u16 code   piecewise_brackets_3[9]= {17760, 14650, 7745, 5545, 2500, 1394, 493, 207, 102};
    30b6:	42 e1       	ldi	r20, 0x12	; 18
    30b8:	e1 e8       	ldi	r30, 0x81	; 129
    30ba:	f0 e2       	ldi	r31, 0x20	; 32
    30bc:	de 01       	movw	r26, r28
    30be:	af 56       	subi	r26, 0x6F	; 111
    30c0:	bf 4f       	sbci	r27, 0xFF	; 255
    30c2:	01 90       	ld	r0, Z+
    30c4:	0d 92       	st	X+, r0
    30c6:	4a 95       	dec	r20
    30c8:	e1 f7       	brne	.-8      	; 0x30c2 <QS_Counts_to_Distance+0xbc>

    u8 code   maxIndex = 9;
    u8 xdata   indexLinear;
    uu32 xdata distance;

    if(led==1)      
    30ca:	61 30       	cpi	r22, 0x01	; 1
    30cc:	99 f5       	brne	.+102    	; 0x3134 <QS_Counts_to_Distance+0x12e>
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
       {
           if (counts > piecewise_brackets_1[indexLinear])
    30ce:	4d a1       	ldd	r20, Y+37	; 0x25
    30d0:	5e a1       	ldd	r21, Y+38	; 0x26
    30d2:	48 17       	cp	r20, r24
    30d4:	59 07       	cpc	r21, r25
    30d6:	60 f0       	brcs	.+24     	; 0x30f0 <QS_Counts_to_Distance+0xea>
    30d8:	de 01       	movw	r26, r28
    30da:	97 96       	adiw	r26, 0x27	; 39
    30dc:	61 e0       	ldi	r22, 0x01	; 1
    30de:	70 e0       	ldi	r23, 0x00	; 0
    30e0:	e6 2f       	mov	r30, r22
    30e2:	ab 01       	movw	r20, r22
    30e4:	ed 90       	ld	r14, X+
    30e6:	fd 90       	ld	r15, X+
    30e8:	e8 16       	cp	r14, r24
    30ea:	f9 06       	cpc	r15, r25
    30ec:	d8 f4       	brcc	.+54     	; 0x3124 <QS_Counts_to_Distance+0x11e>
    30ee:	03 c0       	rjmp	.+6      	; 0x30f6 <QS_Counts_to_Distance+0xf0>
    30f0:	40 e0       	ldi	r20, 0x00	; 0
    30f2:	50 e0       	ldi	r21, 0x00	; 0
    30f4:	e0 e0       	ldi	r30, 0x00	; 0
           {
               distance.u32 = (u32)counts * (u32)slope_1[indexLinear];
    30f6:	44 0f       	add	r20, r20
    30f8:	55 1f       	adc	r21, r21
    30fa:	21 e0       	ldi	r18, 0x01	; 1
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	2c 0f       	add	r18, r28
    3100:	3d 1f       	adc	r19, r29
    3102:	42 0f       	add	r20, r18
    3104:	53 1f       	adc	r21, r19
    3106:	da 01       	movw	r26, r20
    3108:	52 96       	adiw	r26, 0x12	; 18
    310a:	2d 91       	ld	r18, X+
    310c:	3c 91       	ld	r19, X
    310e:	53 97       	sbiw	r26, 0x13	; 19
    3110:	dc 01       	movw	r26, r24
    3112:	0e 94 3b 31 	call	0x6276	; 0x6276 <__umulhisi3>
               distance.u16[LSB] = offset_1[indexLinear] - distance.u16[MSB];
    3116:	da 01       	movw	r26, r20
    3118:	4d 91       	ld	r20, X+
    311a:	5c 91       	ld	r21, X
    311c:	8a 01       	movw	r16, r20
    311e:	08 1b       	sub	r16, r24
    3120:	19 0b       	sbc	r17, r25
               break;
    3122:	7d c0       	rjmp	.+250    	; 0x321e <QS_Counts_to_Distance+0x218>
    3124:	e1 e0       	ldi	r30, 0x01	; 1
    3126:	e6 0f       	add	r30, r22
    3128:	6f 5f       	subi	r22, 0xFF	; 255
    312a:	7f 4f       	sbci	r23, 0xFF	; 255

    if(led==1)      
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
    312c:	69 30       	cpi	r22, 0x09	; 9
    312e:	71 05       	cpc	r23, r1
    3130:	b9 f6       	brne	.-82     	; 0x30e0 <QS_Counts_to_Distance+0xda>
    3132:	75 c0       	rjmp	.+234    	; 0x321e <QS_Counts_to_Distance+0x218>
               distance.u16[LSB] = offset_1[indexLinear] - distance.u16[MSB];
               break;
           }
       }
    }
    else if(led==2) 
    3134:	62 30       	cpi	r22, 0x02	; 2
    3136:	b9 f5       	brne	.+110    	; 0x31a6 <QS_Counts_to_Distance+0x1a0>
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
       {
           if (counts > piecewise_brackets_2[indexLinear])
    3138:	6d 96       	adiw	r28, 0x1d	; 29
    313a:	4e ad       	ldd	r20, Y+62	; 0x3e
    313c:	5f ad       	ldd	r21, Y+63	; 0x3f
    313e:	6d 97       	sbiw	r28, 0x1d	; 29
    3140:	48 17       	cp	r20, r24
    3142:	59 07       	cpc	r21, r25
    3144:	68 f0       	brcs	.+26     	; 0x3160 <QS_Counts_to_Distance+0x15a>
    3146:	de 01       	movw	r26, r28
    3148:	a3 5a       	subi	r26, 0xA3	; 163
    314a:	bf 4f       	sbci	r27, 0xFF	; 255
    314c:	61 e0       	ldi	r22, 0x01	; 1
    314e:	70 e0       	ldi	r23, 0x00	; 0
    3150:	e6 2f       	mov	r30, r22
    3152:	ab 01       	movw	r20, r22
    3154:	ed 90       	ld	r14, X+
    3156:	fd 90       	ld	r15, X+
    3158:	e8 16       	cp	r14, r24
    315a:	f9 06       	cpc	r15, r25
    315c:	e0 f4       	brcc	.+56     	; 0x3196 <QS_Counts_to_Distance+0x190>
    315e:	03 c0       	rjmp	.+6      	; 0x3166 <QS_Counts_to_Distance+0x160>
    3160:	40 e0       	ldi	r20, 0x00	; 0
    3162:	50 e0       	ldi	r21, 0x00	; 0
    3164:	e0 e0       	ldi	r30, 0x00	; 0
           {
               distance.u32 = (u32)counts * (u32)slope_2[indexLinear];
    3166:	44 0f       	add	r20, r20
    3168:	55 1f       	adc	r21, r21
    316a:	a9 e4       	ldi	r26, 0x49	; 73
    316c:	b0 e0       	ldi	r27, 0x00	; 0
    316e:	ac 0f       	add	r26, r28
    3170:	bd 1f       	adc	r27, r29
    3172:	a4 0f       	add	r26, r20
    3174:	b5 1f       	adc	r27, r21
    3176:	2d 91       	ld	r18, X+
    3178:	3c 91       	ld	r19, X
    317a:	dc 01       	movw	r26, r24
    317c:	0e 94 3b 31 	call	0x6276	; 0x6276 <__umulhisi3>
               distance.u16[LSB] = offset_2[indexLinear] - distance.u16[MSB];
    3180:	de 01       	movw	r26, r28
    3182:	a4 0f       	add	r26, r20
    3184:	b5 1f       	adc	r27, r21
    3186:	d7 96       	adiw	r26, 0x37	; 55
    3188:	4d 91       	ld	r20, X+
    318a:	5c 91       	ld	r21, X
    318c:	d8 97       	sbiw	r26, 0x38	; 56
    318e:	8a 01       	movw	r16, r20
    3190:	08 1b       	sub	r16, r24
    3192:	19 0b       	sbc	r17, r25
               break;
    3194:	44 c0       	rjmp	.+136    	; 0x321e <QS_Counts_to_Distance+0x218>
    3196:	e1 e0       	ldi	r30, 0x01	; 1
    3198:	e6 0f       	add	r30, r22
    319a:	6f 5f       	subi	r22, 0xFF	; 255
    319c:	7f 4f       	sbci	r23, 0xFF	; 255
    }
    else if(led==2) 
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
    319e:	69 30       	cpi	r22, 0x09	; 9
    31a0:	71 05       	cpc	r23, r1
    31a2:	b1 f6       	brne	.-84     	; 0x3150 <QS_Counts_to_Distance+0x14a>
    31a4:	3c c0       	rjmp	.+120    	; 0x321e <QS_Counts_to_Distance+0x218>
               distance.u16[LSB] = offset_2[indexLinear] - distance.u16[MSB];
               break;
           }
       }
    }
	else if(led==3) 
    31a6:	63 30       	cpi	r22, 0x03	; 3
    31a8:	09 f0       	breq	.+2      	; 0x31ac <QS_Counts_to_Distance+0x1a6>
    31aa:	42 c0       	rjmp	.+132    	; 0x3230 <QS_Counts_to_Distance+0x22a>
	{
		// Perform piecewise linear approximation
		indexLinear = 0;
		for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
		{
			if (counts > piecewise_brackets_3[indexLinear])
    31ac:	cf 56       	subi	r28, 0x6F	; 111
    31ae:	df 4f       	sbci	r29, 0xFF	; 255
    31b0:	48 81       	ld	r20, Y
    31b2:	59 81       	ldd	r21, Y+1	; 0x01
    31b4:	c1 59       	subi	r28, 0x91	; 145
    31b6:	d0 40       	sbci	r29, 0x00	; 0
    31b8:	48 17       	cp	r20, r24
    31ba:	59 07       	cpc	r21, r25
    31bc:	68 f0       	brcs	.+26     	; 0x31d8 <QS_Counts_to_Distance+0x1d2>
    31be:	de 01       	movw	r26, r28
    31c0:	ad 56       	subi	r26, 0x6D	; 109
    31c2:	bf 4f       	sbci	r27, 0xFF	; 255
    31c4:	61 e0       	ldi	r22, 0x01	; 1
    31c6:	70 e0       	ldi	r23, 0x00	; 0
    31c8:	e6 2f       	mov	r30, r22
    31ca:	ab 01       	movw	r20, r22
    31cc:	ed 90       	ld	r14, X+
    31ce:	fd 90       	ld	r15, X+
    31d0:	e8 16       	cp	r14, r24
    31d2:	f9 06       	cpc	r15, r25
    31d4:	e8 f4       	brcc	.+58     	; 0x3210 <QS_Counts_to_Distance+0x20a>
    31d6:	03 c0       	rjmp	.+6      	; 0x31de <QS_Counts_to_Distance+0x1d8>
    31d8:	40 e0       	ldi	r20, 0x00	; 0
    31da:	50 e0       	ldi	r21, 0x00	; 0
    31dc:	e0 e0       	ldi	r30, 0x00	; 0
			{
				distance.u32 = (u32)counts * (u32)slope_3[indexLinear];
    31de:	44 0f       	add	r20, r20
    31e0:	55 1f       	adc	r21, r21
    31e2:	af e7       	ldi	r26, 0x7F	; 127
    31e4:	b0 e0       	ldi	r27, 0x00	; 0
    31e6:	ac 0f       	add	r26, r28
    31e8:	bd 1f       	adc	r27, r29
    31ea:	a4 0f       	add	r26, r20
    31ec:	b5 1f       	adc	r27, r21
    31ee:	2d 91       	ld	r18, X+
    31f0:	3c 91       	ld	r19, X
    31f2:	dc 01       	movw	r26, r24
    31f4:	0e 94 3b 31 	call	0x6276	; 0x6276 <__umulhisi3>
				distance.u16[LSB] = offset_3[indexLinear] - distance.u16[MSB];
    31f8:	ad e6       	ldi	r26, 0x6D	; 109
    31fa:	b0 e0       	ldi	r27, 0x00	; 0
    31fc:	ac 0f       	add	r26, r28
    31fe:	bd 1f       	adc	r27, r29
    3200:	a4 0f       	add	r26, r20
    3202:	b5 1f       	adc	r27, r21
    3204:	4d 91       	ld	r20, X+
    3206:	5c 91       	ld	r21, X
    3208:	8a 01       	movw	r16, r20
    320a:	08 1b       	sub	r16, r24
    320c:	19 0b       	sbc	r17, r25
				break;
    320e:	07 c0       	rjmp	.+14     	; 0x321e <QS_Counts_to_Distance+0x218>
    3210:	e1 e0       	ldi	r30, 0x01	; 1
    3212:	e6 0f       	add	r30, r22
    3214:	6f 5f       	subi	r22, 0xFF	; 255
    3216:	7f 4f       	sbci	r23, 0xFF	; 255
    }
	else if(led==3) 
	{
		// Perform piecewise linear approximation
		indexLinear = 0;
		for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
    3218:	69 30       	cpi	r22, 0x09	; 9
    321a:	71 05       	cpc	r23, r1
    321c:	a9 f6       	brne	.-86     	; 0x31c8 <QS_Counts_to_Distance+0x1c2>
		}
	}
    else return -1;  /* Invalid channel number */

    // Set to a max value if above a certain level.
    if (distance.u16[LSB] > 250 || indexLinear == maxIndex)
    321e:	0b 3f       	cpi	r16, 0xFB	; 251
    3220:	11 05       	cpc	r17, r1
    3222:	10 f4       	brcc	.+4      	; 0x3228 <QS_Counts_to_Distance+0x222>
    3224:	e9 30       	cpi	r30, 0x09	; 9
    3226:	11 f4       	brne	.+4      	; 0x322c <QS_Counts_to_Distance+0x226>
    {
        distance.u16[LSB] = 250;
    3228:	0a ef       	ldi	r16, 0xFA	; 250
    322a:	10 e0       	ldi	r17, 0x00	; 0
    }
    return (distance.u16[LSB]);
    322c:	c8 01       	movw	r24, r16
    322e:	02 c0       	rjmp	.+4      	; 0x3234 <QS_Counts_to_Distance+0x22e>
				distance.u16[LSB] = offset_3[indexLinear] - distance.u16[MSB];
				break;
			}
		}
	}
    else return -1;  /* Invalid channel number */
    3230:	8f ef       	ldi	r24, 0xFF	; 255
    3232:	9f ef       	ldi	r25, 0xFF	; 255
    if (distance.u16[LSB] > 250 || indexLinear == maxIndex)
    {
        distance.u16[LSB] = 250;
    }
    return (distance.u16[LSB]);
}
    3234:	ce 55       	subi	r28, 0x5E	; 94
    3236:	df 4f       	sbci	r29, 0xFF	; 255
    3238:	cd bf       	out	0x3d, r28	; 61
    323a:	de bf       	out	0x3e, r29	; 62
    323c:	df 91       	pop	r29
    323e:	cf 91       	pop	r28
    3240:	1f 91       	pop	r17
    3242:	0f 91       	pop	r16
    3244:	ff 90       	pop	r15
    3246:	ef 90       	pop	r14
    3248:	08 95       	ret

0000324a <SliderAlgorithm>:

void SliderAlgorithm(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples, u16 scale)
{
    324a:	3f 92       	push	r3
    324c:	4f 92       	push	r4
    324e:	5f 92       	push	r5
    3250:	6f 92       	push	r6
    3252:	7f 92       	push	r7
    3254:	8f 92       	push	r8
    3256:	9f 92       	push	r9
    3258:	af 92       	push	r10
    325a:	bf 92       	push	r11
    325c:	cf 92       	push	r12
    325e:	df 92       	push	r13
    3260:	ef 92       	push	r14
    3262:	ff 92       	push	r15
    3264:	0f 93       	push	r16
    3266:	1f 93       	push	r17
    3268:	cf 93       	push	r28
    326a:	df 93       	push	r29
    326c:	cd b7       	in	r28, 0x3d	; 61
    326e:	de b7       	in	r29, 0x3e	; 62
    3270:	ae 97       	sbiw	r28, 0x2e	; 46
    3272:	cd bf       	out	0x3d, r28	; 61
    3274:	de bf       	out	0x3e, r29	; 62
    3276:	7b 01       	movw	r14, r22
    3278:	4a 01       	movw	r8, r20
	//My implementation
	static u16 previous_led_x = 0;
	static u16 previous_led_y = 0;

    // QS_GlobalCounterOverflow assumes milliseconds. Samples->timestamp is in 100 us.
    u16 xdata QS_GlobalCounterOverflow = samples->timestamp / 10;
    327a:	db 01       	movw	r26, r22
    327c:	12 96       	adiw	r26, 0x02	; 2
    327e:	2d 91       	ld	r18, X+
    3280:	3c 91       	ld	r19, X
    3282:	13 97       	sbiw	r26, 0x03	; 3
    3284:	ad ec       	ldi	r26, 0xCD	; 205
    3286:	bc ec       	ldi	r27, 0xCC	; 204
    3288:	0e 94 3b 31 	call	0x6276	; 0x6276 <__umulhisi3>
    328c:	6c 01       	movw	r12, r24
    328e:	d6 94       	lsr	r13
    3290:	c7 94       	ror	r12
    3292:	d6 94       	lsr	r13
    3294:	c7 94       	ror	r12
    3296:	d6 94       	lsr	r13
    3298:	c7 94       	ror	r12

    // x position "bucket" endpoints to determine LED states and recognize Pause gesture.
    u16 code xbucket_Array[10] = {1, 159, 272, 385, 498, 611, 724, 837, 1100, 1102};
    329a:	84 e1       	ldi	r24, 0x14	; 20
    329c:	e3 e9       	ldi	r30, 0x93	; 147
    329e:	f0 e2       	ldi	r31, 0x20	; 32
    32a0:	de 01       	movw	r26, r28
    32a2:	11 96       	adiw	r26, 0x01	; 1
    32a4:	01 90       	ld	r0, Z+
    32a6:	0d 92       	st	X+, r0
    32a8:	8a 95       	dec	r24
    32aa:	e1 f7       	brne	.-8      	; 0x32a4 <SliderAlgorithm+0x5a>

    // P1 LED values corresponding to the position buckets
    u8 code LED_P1_Vals[10] = {0xFF, 0xFE, 0xFD, 0xFB, 0xF7, 0xEF, 0xDF, 0xBF, 0x7F, 0xFF};   
    32ac:	8a e0       	ldi	r24, 0x0A	; 10
    32ae:	e7 ea       	ldi	r30, 0xA7	; 167
    32b0:	f0 e2       	ldi	r31, 0x20	; 32
    32b2:	de 01       	movw	r26, r28
    32b4:	55 96       	adiw	r26, 0x15	; 21
    32b6:	01 90       	ld	r0, Z+
    32b8:	0d 92       	st	X+, r0
    32ba:	8a 95       	dec	r24
    32bc:	e1 f7       	brne	.-8      	; 0x32b6 <SliderAlgorithm+0x6c>

    // P1 patterns for LED state machine.  Sent in reverse order, '0' bits are ON
    u8 code LED_swipe_left_pattern[8]  = 
    32be:	88 e0       	ldi	r24, 0x08	; 8
    32c0:	e1 eb       	ldi	r30, 0xB1	; 177
    32c2:	f0 e2       	ldi	r31, 0x20	; 32
    32c4:	de 01       	movw	r26, r28
    32c6:	5f 96       	adiw	r26, 0x1f	; 31
    32c8:	01 90       	ld	r0, Z+
    32ca:	0d 92       	st	X+, r0
    32cc:	8a 95       	dec	r24
    32ce:	e1 f7       	brne	.-8      	; 0x32c8 <SliderAlgorithm+0x7e>
      {0xFF, 0xFE, 0xF8, 0xE1, 0x87, 0x1F, 0x7F, 0xFF};

    u8 code LED_swipe_right_pattern[8] = 
    32d0:	88 e0       	ldi	r24, 0x08	; 8
    32d2:	e9 eb       	ldi	r30, 0xB9	; 185
    32d4:	f0 e2       	ldi	r31, 0x20	; 32
    32d6:	de 01       	movw	r26, r28
    32d8:	97 96       	adiw	r26, 0x27	; 39
    32da:	01 90       	ld	r0, Z+
    32dc:	0d 92       	st	X+, r0
    32de:	8a 95       	dec	r24
    32e0:	e1 f7       	brne	.-8      	; 0x32da <SliderAlgorithm+0x90>
    s16 xdata xdiff;
    u8 xdata swipe_speed;

    int xdata ps;

    ps = (u32) samples->ps1 - (u32)baseline[0];
    32e2:	f7 01       	movw	r30, r14
    32e4:	82 85       	ldd	r24, Z+10	; 0x0a
    32e6:	93 85       	ldd	r25, Z+11	; 0x0b
    32e8:	20 91 13 27 	lds	r18, 0x2713
    32ec:	30 91 14 27 	lds	r19, 0x2714
    32f0:	82 1b       	sub	r24, r18
    32f2:	93 0b       	sbc	r25, r19
    32f4:	12 f4       	brpl	.+4      	; 0x32fa <SliderAlgorithm+0xb0>
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    ps *= scale;

    // Raw IR sensor 0 and 1 are stored in channels 4 and 5
    // ALS is stored in channel 6
    // Calculate r1 and r2 distances; store in channels 0 and 1
    r1 = QS_Counts_to_Distance ((u16)ps, 1);
    32fa:	61 e0       	ldi	r22, 0x01	; 1
    32fc:	9c 01       	movw	r18, r24
    32fe:	82 9e       	mul	r8, r18
    3300:	c0 01       	movw	r24, r0
    3302:	83 9e       	mul	r8, r19
    3304:	90 0d       	add	r25, r0
    3306:	92 9e       	mul	r9, r18
    3308:	90 0d       	add	r25, r0
    330a:	11 24       	eor	r1, r1
    330c:	7c de       	rcall	.-776    	; 0x3006 <QS_Counts_to_Distance>
    330e:	8c 01       	movw	r16, r24
	
	//printf("r1 = %d , counts = %d \r\n",r1,(u16)ps);

    ps = (u32) samples->ps2 - (u32)baseline[1];
    3310:	d7 01       	movw	r26, r14
    3312:	1c 96       	adiw	r26, 0x0c	; 12
    3314:	8d 91       	ld	r24, X+
    3316:	9c 91       	ld	r25, X
    3318:	1d 97       	sbiw	r26, 0x0d	; 13
    331a:	20 91 15 27 	lds	r18, 0x2715
    331e:	30 91 16 27 	lds	r19, 0x2716
    3322:	82 1b       	sub	r24, r18
    3324:	93 0b       	sbc	r25, r19
    3326:	12 f4       	brpl	.+4      	; 0x332c <SliderAlgorithm+0xe2>
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	90 e0       	ldi	r25, 0x00	; 0
    if (ps < 0) ps = 0;

    // Scale it
    ps *= (u32)scale;

    r2 = QS_Counts_to_Distance ((u16)ps, 1);
    332c:	61 e0       	ldi	r22, 0x01	; 1
    332e:	fc 01       	movw	r30, r24
    3330:	8e 9e       	mul	r8, r30
    3332:	c0 01       	movw	r24, r0
    3334:	8f 9e       	mul	r8, r31
    3336:	90 0d       	add	r25, r0
    3338:	9e 9e       	mul	r9, r30
    333a:	90 0d       	add	r25, r0
    333c:	11 24       	eor	r1, r1
    333e:	63 de       	rcall	.-826    	; 0x3006 <QS_Counts_to_Distance>
    3340:	4c 01       	movw	r8, r24
   ////////////////////////////////////////////////////////////////////////////
   // Position calculation and swipe gesture detection

   // Calculate x
   //x = (r1^2 - r2^2 + d^2) / (2 * d) + offset
   x.u32 = (u32)r1 * (u32)r1;
    3342:	98 01       	movw	r18, r16
    3344:	d8 01       	movw	r26, r16
    3346:	0e 94 3b 31 	call	0x6276	; 0x6276 <__umulhisi3>
   x.u32 = x.u32 + 33000;
    334a:	2b 01       	movw	r4, r22
    334c:	3c 01       	movw	r6, r24
    334e:	f8 ee       	ldi	r31, 0xE8	; 232
    3350:	4f 0e       	add	r4, r31
    3352:	f0 e8       	ldi	r31, 0x80	; 128
    3354:	5f 1e       	adc	r5, r31
    3356:	61 1c       	adc	r6, r1
    3358:	71 1c       	adc	r7, r1
   x.s32 = x.u32 - ((u32)r2 * (u32)r2);
    335a:	94 01       	movw	r18, r8
    335c:	d4 01       	movw	r26, r8
    335e:	0e 94 3b 31 	call	0x6276	; 0x6276 <__umulhisi3>
    3362:	a3 01       	movw	r20, r6
    3364:	92 01       	movw	r18, r4
    3366:	26 1b       	sub	r18, r22
    3368:	37 0b       	sbc	r19, r23
    336a:	48 0b       	sbc	r20, r24
    336c:	59 0b       	sbc	r21, r25
   if (x.s32 < 0)
    336e:	1a f4       	brpl	.+6      	; 0x3376 <SliderAlgorithm+0x12c>
   {
     x.s32 = 0;
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	a9 01       	movw	r20, r18
   }
   x.u32 = x.u32 / 60;
    3376:	ca 01       	movw	r24, r20
    3378:	b9 01       	movw	r22, r18
    337a:	2c e3       	ldi	r18, 0x3C	; 60
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	40 e0       	ldi	r20, 0x00	; 0
    3380:	50 e0       	ldi	r21, 0x00	; 0
    3382:	0e 94 13 31 	call	0x6226	; 0x6226 <__udivmodsi4>

   // limit x to maximum for pad
   if (x.u16[LSB] > 1101)
    3386:	2e 34       	cpi	r18, 0x4E	; 78
    3388:	64 e0       	ldi	r22, 0x04	; 4
    338a:	36 07       	cpc	r19, r22
    338c:	10 f0       	brcs	.+4      	; 0x3392 <SliderAlgorithm+0x148>
   {
     x.u16[LSB] = 1101;
    338e:	2d e4       	ldi	r18, 0x4D	; 77
    3390:	34 e0       	ldi	r19, 0x04	; 4
	   y.u16[LSB] = 1101;
   }

   
   // Determine "z" and recognize whether "swipe" type gesture has occured
   if ((r1 > MAX_RADIUS) || (r2 > MAX_RADIUS))
    3392:	01 3f       	cpi	r16, 0xF1	; 241
    3394:	11 05       	cpc	r17, r1
    3396:	20 f4       	brcc	.+8      	; 0x33a0 <SliderAlgorithm+0x156>
    3398:	81 ef       	ldi	r24, 0xF1	; 241
    339a:	88 16       	cp	r8, r24
    339c:	91 04       	cpc	r9, r1
    339e:	c8 f1       	brcs	.+114    	; 0x3412 <SliderAlgorithm+0x1c8>
   {
      // check for end of swipe
      if (out_of_range == 0)
    33a0:	80 91 17 20 	lds	r24, 0x2017
    33a4:	81 11       	cpse	r24, r1
    33a6:	1e c0       	rjmp	.+60     	; 0x33e4 <SliderAlgorithm+0x19a>
      {
        xexit = xlast;
    33a8:	80 91 73 25 	lds	r24, 0x2573
    33ac:	90 91 74 25 	lds	r25, 0x2574
    33b0:	80 93 71 25 	sts	0x2571, r24
    33b4:	90 93 72 25 	sts	0x2572, r25

        // swipe must be completed in a desginated amount of time
        if (QS_GlobalCounterOverflow-SwipeStartTime < SWIPE_TIMEOUT && QS_GlobalCounterOverflow-SwipeStartTime >50)
    33b8:	60 91 6f 25 	lds	r22, 0x256F
    33bc:	70 91 70 25 	lds	r23, 0x2570
    33c0:	f6 01       	movw	r30, r12
    33c2:	e6 1b       	sub	r30, r22
    33c4:	f7 0b       	sbc	r31, r23
    33c6:	f3 97       	sbiw	r30, 0x33	; 51
    33c8:	e2 31       	cpi	r30, 0x12	; 18
    33ca:	f1 40       	sbci	r31, 0x01	; 1
    33cc:	68 f4       	brcc	.+26     	; 0x33e8 <SliderAlgorithm+0x19e>
        {
            swipe_detect = 1;   // indicate that a swipe was detected
            swipe_speed = SWIPE_TIMEOUT-(QS_GlobalCounterOverflow-SwipeStartTime);
    33ce:	6b 5b       	subi	r22, 0xBB	; 187
    33d0:	36 2e       	mov	r3, r22
    33d2:	3c 18       	sub	r3, r12
            xdiff = (s16)xenter-(s16)xexit;
    33d4:	a0 90 6d 25 	lds	r10, 0x256D
    33d8:	b0 90 6e 25 	lds	r11, 0x256E
    33dc:	a8 1a       	sub	r10, r24
    33de:	b9 0a       	sbc	r11, r25
        xexit = xlast;

        // swipe must be completed in a desginated amount of time
        if (QS_GlobalCounterOverflow-SwipeStartTime < SWIPE_TIMEOUT && QS_GlobalCounterOverflow-SwipeStartTime >50)
        {
            swipe_detect = 1;   // indicate that a swipe was detected
    33e0:	e1 e0       	ldi	r30, 0x01	; 1
    33e2:	03 c0       	rjmp	.+6      	; 0x33ea <SliderAlgorithm+0x1a0>
    u8 xdata xbucket;
    static u8 xdata last_xbucket;

    // Swipe gesture recognition variables
    static BIT out_of_range = 1;
    BIT swipe_detect = 0;
    33e4:	e0 e0       	ldi	r30, 0x00	; 0
    33e6:	01 c0       	rjmp	.+2      	; 0x33ea <SliderAlgorithm+0x1a0>
    33e8:	e0 e0       	ldi	r30, 0x00	; 0
            swipe_detect = 1;   // indicate that a swipe was detected
            swipe_speed = SWIPE_TIMEOUT-(QS_GlobalCounterOverflow-SwipeStartTime);
            xdiff = (s16)xenter-(s16)xexit;
        }
      }
      out_of_range = 1;
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	80 93 17 20 	sts	0x2017, r24
      if (xexit > 550)
    33f0:	80 91 71 25 	lds	r24, 0x2571
    33f4:	90 91 72 25 	lds	r25, 0x2572
    33f8:	87 32       	cpi	r24, 0x27	; 39
    33fa:	92 40       	sbci	r25, 0x02	; 2
    33fc:	18 f0       	brcs	.+6      	; 0x3404 <SliderAlgorithm+0x1ba>
      {
        x.u16[LSB] = 1101;
    33fe:	2d e4       	ldi	r18, 0x4D	; 77
    3400:	34 e0       	ldi	r19, 0x04	; 4
    3402:	02 c0       	rjmp	.+4      	; 0x3408 <SliderAlgorithm+0x1be>
      }
      else
      {
        x.u16[LSB] = 0;
    3404:	20 e0       	ldi	r18, 0x00	; 0
    3406:	30 e0       	ldi	r19, 0x00	; 0
      }
      z = MAX_RADIUS;
      Pause_gesture_timeout = QS_GlobalCounterOverflow;
    3408:	c0 92 6b 25 	sts	0x256B, r12
    340c:	d0 92 6c 25 	sts	0x256C, r13
    3410:	13 c0       	rjmp	.+38     	; 0x3438 <SliderAlgorithm+0x1ee>
   }
   else
   {
      // check for start of swipe
      if (out_of_range == 1)
    3412:	80 91 17 20 	lds	r24, 0x2017
    3416:	81 30       	cpi	r24, 0x01	; 1
    3418:	41 f4       	brne	.+16     	; 0x342a <SliderAlgorithm+0x1e0>
      {
        xenter = x.u16[LSB];
    341a:	20 93 6d 25 	sts	0x256D, r18
    341e:	30 93 6e 25 	sts	0x256E, r19
        SwipeStartTime = QS_GlobalCounterOverflow;
    3422:	c0 92 6f 25 	sts	0x256F, r12
    3426:	d0 92 70 25 	sts	0x2570, r13
      }
      out_of_range = 0;
    342a:	10 92 17 20 	sts	0x2017, r1

      xlast = x.u16[LSB];
    342e:	20 93 73 25 	sts	0x2573, r18
    3432:	30 93 74 25 	sts	0x2574, r19
    u8 xdata xbucket;
    static u8 xdata last_xbucket;

    // Swipe gesture recognition variables
    static BIT out_of_range = 1;
    BIT swipe_detect = 0;
    3436:	e0 e0       	ldi	r30, 0x00	; 0
      {
         z = r1;
      }
   }
   
   int16_t tmp_x = 15-((x.u16[LSB])/73);
    3438:	89 01       	movw	r16, r18
    343a:	a1 e7       	ldi	r26, 0x71	; 113
    343c:	b0 ee       	ldi	r27, 0xE0	; 224
    343e:	0e 94 3b 31 	call	0x6276	; 0x6276 <__umulhisi3>
    3442:	9c 01       	movw	r18, r24
    3444:	00 24       	eor	r0, r0
    3446:	22 0f       	add	r18, r18
    3448:	33 1f       	adc	r19, r19
    344a:	00 1c       	adc	r0, r0
    344c:	22 0f       	add	r18, r18
    344e:	33 1f       	adc	r19, r19
    3450:	00 1c       	adc	r0, r0
    3452:	23 2f       	mov	r18, r19
    3454:	30 2d       	mov	r19, r0
    3456:	8f e0       	ldi	r24, 0x0F	; 15
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	82 1b       	sub	r24, r18
    345c:	93 0b       	sbc	r25, r19
   
   if (tmp_x < 0) {
    345e:	22 f4       	brpl	.+8      	; 0x3468 <SliderAlgorithm+0x21e>
	   samples->x_axis = 0;
    3460:	d7 01       	movw	r26, r14
    3462:	53 96       	adiw	r26, 0x13	; 19
    3464:	1c 92       	st	X, r1
    3466:	0b c0       	rjmp	.+22     	; 0x347e <SliderAlgorithm+0x234>
   } else if (tmp_x > 15) {
    3468:	80 31       	cpi	r24, 0x10	; 16
    346a:	91 05       	cpc	r25, r1
    346c:	2c f0       	brlt	.+10     	; 0x3478 <SliderAlgorithm+0x22e>
	   samples->x_axis = 15;
    346e:	8f e0       	ldi	r24, 0x0F	; 15
    3470:	d7 01       	movw	r26, r14
    3472:	53 96       	adiw	r26, 0x13	; 19
    3474:	8c 93       	st	X, r24
    3476:	03 c0       	rjmp	.+6      	; 0x347e <SliderAlgorithm+0x234>
   } else {
	   samples->x_axis = tmp_x;   
    3478:	d7 01       	movw	r26, r14
    347a:	53 96       	adiw	r26, 0x13	; 19
    347c:	8c 93       	st	X, r24
   // REPLACE_0_PS3( x.u16[LSB] );
   // REPLACE_0_AUX( z );

   // If a swipe was detected, determine the direction (L/R), set up LED state machine
   // to indicate swipe gesture, and post the swipe event.
   if (swipe_detect == 1)
    347e:	e1 30       	cpi	r30, 0x01	; 1
    3480:	09 f0       	breq	.+2      	; 0x3484 <SliderAlgorithm+0x23a>
    3482:	51 c0       	rjmp	.+162    	; 0x3526 <SliderAlgorithm+0x2dc>
   {
       if (xdiff > 150)             // Left Swipe
    3484:	b7 e9       	ldi	r27, 0x97	; 151
    3486:	ab 16       	cp	r10, r27
    3488:	b1 04       	cpc	r11, r1
    348a:	14 f1       	brlt	.+68     	; 0x34d0 <SliderAlgorithm+0x286>
    348c:	fe 01       	movw	r30, r28
    348e:	7f 96       	adiw	r30, 0x1f	; 31
    3490:	a2 e6       	ldi	r26, 0x62	; 98
    3492:	b5 e2       	ldi	r27, 0x25	; 37
    3494:	ce 01       	movw	r24, r28
    3496:	87 96       	adiw	r24, 0x27	; 39
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
            {
                LED_flash_pattern[LED_State] = LED_swipe_left_pattern[LED_State];
    3498:	21 91       	ld	r18, Z+
    349a:	2d 93       	st	X+, r18
   // to indicate swipe gesture, and post the swipe event.
   if (swipe_detect == 1)
   {
       if (xdiff > 150)             // Left Swipe
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    349c:	e8 17       	cp	r30, r24
    349e:	f9 07       	cpc	r31, r25
    34a0:	d9 f7       	brne	.-10     	; 0x3498 <SliderAlgorithm+0x24e>
    34a2:	88 e0       	ldi	r24, 0x08	; 8
    34a4:	80 93 6a 25 	sts	0x256A, r24
            {
                LED_flash_pattern[LED_State] = LED_swipe_left_pattern[LED_State];
            } // LED_State should be 8 when this loop is finished

            // send LEFT_SWIPE gesture
            printf("                            %s: %d, %d\n", "LEFT_SWIPE", swipe_speed, xdiff) ;
    34a8:	bf 92       	push	r11
    34aa:	af 92       	push	r10
    34ac:	1f 92       	push	r1
    34ae:	3f 92       	push	r3
    34b0:	8d ef       	ldi	r24, 0xFD	; 253
    34b2:	92 e2       	ldi	r25, 0x22	; 34
    34b4:	9f 93       	push	r25
    34b6:	8f 93       	push	r24
    34b8:	88 e0       	ldi	r24, 0x08	; 8
    34ba:	93 e2       	ldi	r25, 0x23	; 35
    34bc:	9f 93       	push	r25
    34be:	8f 93       	push	r24
    34c0:	0e 94 ef 32 	call	0x65de	; 0x65de <printf>
			samples->gesture = LEFT_SWIPE;
    34c4:	82 e0       	ldi	r24, 0x02	; 2
    34c6:	f7 01       	movw	r30, r14
    34c8:	82 8b       	std	Z+18, r24	; 0x12
    34ca:	cd bf       	out	0x3d, r28	; 61
    34cc:	de bf       	out	0x3e, r29	; 62
    34ce:	2e c0       	rjmp	.+92     	; 0x352c <SliderAlgorithm+0x2e2>
       }
       else if (xdiff < -150)       // Right Swipe
    34d0:	3a e6       	ldi	r19, 0x6A	; 106
    34d2:	a3 16       	cp	r10, r19
    34d4:	3f ef       	ldi	r19, 0xFF	; 255
    34d6:	b3 06       	cpc	r11, r19
    34d8:	4c f5       	brge	.+82     	; 0x352c <SliderAlgorithm+0x2e2>
    34da:	fe 01       	movw	r30, r28
    34dc:	b7 96       	adiw	r30, 0x27	; 39
    34de:	a2 e6       	ldi	r26, 0x62	; 98
    34e0:	b5 e2       	ldi	r27, 0x25	; 37
    34e2:	ce 01       	movw	r24, r28
    34e4:	8f 96       	adiw	r24, 0x2f	; 47
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
            {
                LED_flash_pattern[LED_State] = LED_swipe_right_pattern[LED_State];
    34e6:	21 91       	ld	r18, Z+
    34e8:	2d 93       	st	X+, r18
            printf("                            %s: %d, %d\n", "LEFT_SWIPE", swipe_speed, xdiff) ;
			samples->gesture = LEFT_SWIPE;
       }
       else if (xdiff < -150)       // Right Swipe
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    34ea:	e8 17       	cp	r30, r24
    34ec:	f9 07       	cpc	r31, r25
    34ee:	d9 f7       	brne	.-10     	; 0x34e6 <SliderAlgorithm+0x29c>
    34f0:	88 e0       	ldi	r24, 0x08	; 8
    34f2:	80 93 6a 25 	sts	0x256A, r24
            {
                LED_flash_pattern[LED_State] = LED_swipe_right_pattern[LED_State];
            } // LED_State should be 8 when this loop is finished

            // send RIGHT_SWIPE gesture
            printf("                            %s: %d, %d\n", "RIGHT_SWIPE", swipe_speed, -xdiff) ;     
    34f6:	b1 94       	neg	r11
    34f8:	a1 94       	neg	r10
    34fa:	b1 08       	sbc	r11, r1
    34fc:	bf 92       	push	r11
    34fe:	af 92       	push	r10
    3500:	1f 92       	push	r1
    3502:	3f 92       	push	r3
    3504:	80 e3       	ldi	r24, 0x30	; 48
    3506:	93 e2       	ldi	r25, 0x23	; 35
    3508:	9f 93       	push	r25
    350a:	8f 93       	push	r24
    350c:	88 e0       	ldi	r24, 0x08	; 8
    350e:	93 e2       	ldi	r25, 0x23	; 35
    3510:	9f 93       	push	r25
    3512:	8f 93       	push	r24
    3514:	0e 94 ef 32 	call	0x65de	; 0x65de <printf>
			samples->gesture = RIGHT_SWIPE;       
    3518:	81 e0       	ldi	r24, 0x01	; 1
    351a:	d7 01       	movw	r26, r14
    351c:	52 96       	adiw	r26, 0x12	; 18
    351e:	8c 93       	st	X, r24
    3520:	cd bf       	out	0x3d, r28	; 61
    3522:	de bf       	out	0x3e, r29	; 62
    3524:	03 c0       	rjmp	.+6      	; 0x352c <SliderAlgorithm+0x2e2>
       }
   } else {
	   samples->gesture = 0;
    3526:	d7 01       	movw	r26, r14
    3528:	52 96       	adiw	r26, 0x12	; 18
    352a:	1c 92       	st	X, r1
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
   {
        if (x.u16[LSB] < xbucket_Array[xbucket])
    352c:	89 81       	ldd	r24, Y+1	; 0x01
    352e:	9a 81       	ldd	r25, Y+2	; 0x02
    3530:	08 17       	cp	r16, r24
    3532:	19 07       	cpc	r17, r25
    3534:	a8 f0       	brcs	.+42     	; 0x3560 <SliderAlgorithm+0x316>
    3536:	fe 01       	movw	r30, r28
    3538:	33 96       	adiw	r30, 0x03	; 3

   ////////////////////////////////////////////////////////////////////////////
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
    353a:	21 e0       	ldi	r18, 0x01	; 1
   {
        if (x.u16[LSB] < xbucket_Array[xbucket])
    353c:	81 91       	ld	r24, Z+
    353e:	91 91       	ld	r25, Z+
    3540:	08 17       	cp	r16, r24
    3542:	19 07       	cpc	r17, r25
    3544:	20 f0       	brcs	.+8      	; 0x354e <SliderAlgorithm+0x304>

   ////////////////////////////////////////////////////////////////////////////
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
    3546:	2f 5f       	subi	r18, 0xFF	; 255
    3548:	2a 30       	cpi	r18, 0x0A	; 10
    354a:	c1 f7       	brne	.-16     	; 0x353c <SliderAlgorithm+0x2f2>
    354c:	6e c0       	rjmp	.+220    	; 0x362a <SliderAlgorithm+0x3e0>
            break;
        }
   }

   // Reset pause gesture timer if movement detected
   if ((xbucket != last_xbucket)||(xbucket == 9)||(xbucket == 0))
    354e:	80 91 61 25 	lds	r24, 0x2561
    3552:	28 13       	cpse	r18, r24
    3554:	06 c0       	rjmp	.+12     	; 0x3562 <SliderAlgorithm+0x318>
    3556:	29 30       	cpi	r18, 0x09	; 9
    3558:	21 f0       	breq	.+8      	; 0x3562 <SliderAlgorithm+0x318>
    355a:	21 11       	cpse	r18, r1
    355c:	06 c0       	rjmp	.+12     	; 0x356a <SliderAlgorithm+0x320>
    355e:	01 c0       	rjmp	.+2      	; 0x3562 <SliderAlgorithm+0x318>

   ////////////////////////////////////////////////////////////////////////////
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
    3560:	20 e0       	ldi	r18, 0x00	; 0
   }

   // Reset pause gesture timer if movement detected
   if ((xbucket != last_xbucket)||(xbucket == 9)||(xbucket == 0))
   {
      Pause_gesture_timeout = QS_GlobalCounterOverflow;
    3562:	c0 92 6b 25 	sts	0x256B, r12
    3566:	d0 92 6c 25 	sts	0x256C, r13
   }
   last_xbucket = xbucket;  // store latest information for next comparison
    356a:	20 93 61 25 	sts	0x2561, r18

   // LED State machine - Pause gesture recognition is also integrated here 
   if (LED_State != 0)  // indicate gesture pattern
    356e:	e0 91 6a 25 	lds	r30, 0x256A
    3572:	ee 23       	and	r30, r30
    3574:	e1 f0       	breq	.+56     	; 0x35ae <SliderAlgorithm+0x364>
   {
      if ((u8)(QS_GlobalCounterOverflow - LED_flash_timeout) >= LED_STATE_TIME)
    3576:	80 91 5f 25 	lds	r24, 0x255F
    357a:	bc 2d       	mov	r27, r12
    357c:	b8 1b       	sub	r27, r24
    357e:	b7 32       	cpi	r27, 0x27	; 39
    3580:	08 f4       	brcc	.+2      	; 0x3584 <SliderAlgorithm+0x33a>
    3582:	58 c0       	rjmp	.+176    	; 0x3634 <SliderAlgorithm+0x3ea>
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
    3584:	c0 92 5f 25 	sts	0x255F, r12
    3588:	d0 92 60 25 	sts	0x2560, r13

         // Write to Port 1 of the MCU
         PortSet( 1, LED_flash_pattern[(--LED_State)%8]); 
    358c:	e1 50       	subi	r30, 0x01	; 1
    358e:	e0 93 6a 25 	sts	0x256A, r30
    3592:	e7 70       	andi	r30, 0x07	; 7
    3594:	f0 e0       	ldi	r31, 0x00	; 0
    3596:	ee 59       	subi	r30, 0x9E	; 158
    3598:	fa 4d       	sbci	r31, 0xDA	; 218
    359a:	60 81       	ld	r22, Z
    359c:	70 e0       	ldi	r23, 0x00	; 0
    359e:	81 e0       	ldi	r24, 0x01	; 1
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	dd dc       	rcall	.-1606   	; 0x2f5e <PortSet>

         Pause_gesture_timeout = QS_GlobalCounterOverflow;
    35a4:	c0 92 6b 25 	sts	0x256B, r12
    35a8:	d0 92 6c 25 	sts	0x256C, r13
    35ac:	43 c0       	rjmp	.+134    	; 0x3634 <SliderAlgorithm+0x3ea>
      //PortSet( 1, LED_P1_Vals[xbucket]);
	  //printf("x: %d \r\n",x.u16[LSB]);


      // check time stamp for pause
      if ((QS_GlobalCounterOverflow - Pause_gesture_timeout) >= PAUSE_TIMEOUT) 
    35ae:	80 91 6b 25 	lds	r24, 0x256B
    35b2:	90 91 6c 25 	lds	r25, 0x256C
    35b6:	f6 01       	movw	r30, r12
    35b8:	e8 1b       	sub	r30, r24
    35ba:	f9 0b       	sbc	r31, r25
    35bc:	cf 01       	movw	r24, r30
    35be:	8a 38       	cpi	r24, 0x8A	; 138
    35c0:	92 40       	sbci	r25, 0x02	; 2
    35c2:	c0 f1       	brcs	.+112    	; 0x3634 <SliderAlgorithm+0x3ea>
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
    35c4:	c0 92 5f 25 	sts	0x255F, r12
    35c8:	d0 92 60 25 	sts	0x2560, r13
         
         for (LED_State = 0; LED_State < 8; )
         {
            LED_flash_pattern[LED_State++] = 0xFF;
            LED_flash_pattern[LED_State++] = 0xFF;
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    35cc:	fe 01       	movw	r30, r28
    35ce:	e2 0f       	add	r30, r18
    35d0:	f1 1d       	adc	r31, r1
    35d2:	85 89       	ldd	r24, Z+21	; 0x15
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
         
         for (LED_State = 0; LED_State < 8; )
         {
            LED_flash_pattern[LED_State++] = 0xFF;
    35d4:	9f ef       	ldi	r25, 0xFF	; 255
    35d6:	90 93 62 25 	sts	0x2562, r25
            LED_flash_pattern[LED_State++] = 0xFF;
    35da:	90 93 63 25 	sts	0x2563, r25
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    35de:	80 93 64 25 	sts	0x2564, r24
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    35e2:	80 93 65 25 	sts	0x2565, r24
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
         
         for (LED_State = 0; LED_State < 8; )
         {
            LED_flash_pattern[LED_State++] = 0xFF;
    35e6:	90 93 66 25 	sts	0x2566, r25
            LED_flash_pattern[LED_State++] = 0xFF;
    35ea:	90 93 67 25 	sts	0x2567, r25
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    35ee:	80 93 68 25 	sts	0x2568, r24
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    35f2:	80 93 69 25 	sts	0x2569, r24
         } // LED_State should be 8 when this loop is finished.

         LED_State = 16; // Set LED_State to 16 to repeat the pattern twice
    35f6:	80 e1       	ldi	r24, 0x10	; 16
    35f8:	80 93 6a 25 	sts	0x256A, r24

         // Send off a PAUSE gesture to host.
         printf("                            %s: %d\n", "PAUSE", xbucket<<8) ;   
    35fc:	2f 93       	push	r18
    35fe:	1f 92       	push	r1
    3600:	8c e3       	ldi	r24, 0x3C	; 60
    3602:	93 e2       	ldi	r25, 0x23	; 35
    3604:	9f 93       	push	r25
    3606:	8f 93       	push	r24
    3608:	82 e4       	ldi	r24, 0x42	; 66
    360a:	93 e2       	ldi	r25, 0x23	; 35
    360c:	9f 93       	push	r25
    360e:	8f 93       	push	r24
    3610:	0e 94 ef 32 	call	0x65de	; 0x65de <printf>
		 samples->gesture = PAUSE;         
    3614:	83 e0       	ldi	r24, 0x03	; 3
    3616:	d7 01       	movw	r26, r14
    3618:	52 96       	adiw	r26, 0x12	; 18
    361a:	8c 93       	st	X, r24
    361c:	0f 90       	pop	r0
    361e:	0f 90       	pop	r0
    3620:	0f 90       	pop	r0
    3622:	0f 90       	pop	r0
    3624:	0f 90       	pop	r0
    3626:	0f 90       	pop	r0
    3628:	05 c0       	rjmp	.+10     	; 0x3634 <SliderAlgorithm+0x3ea>
            break;
        }
   }

   // Reset pause gesture timer if movement detected
   if ((xbucket != last_xbucket)||(xbucket == 9)||(xbucket == 0))
    362a:	80 91 61 25 	lds	r24, 0x2561
    362e:	28 13       	cpse	r18, r24
    3630:	98 cf       	rjmp	.-208    	; 0x3562 <SliderAlgorithm+0x318>
    3632:	9b cf       	rjmp	.-202    	; 0x356a <SliderAlgorithm+0x320>
       // It is best to display this than printf. Use AUX and PS3 channels
       //REPLACE_0_PS3( 0 );
       //REPLACE_0_AUX( 0 ); 
	    //printf("no touch \r\n");
   }
}
    3634:	ae 96       	adiw	r28, 0x2e	; 46
    3636:	cd bf       	out	0x3d, r28	; 61
    3638:	de bf       	out	0x3e, r29	; 62
    363a:	df 91       	pop	r29
    363c:	cf 91       	pop	r28
    363e:	1f 91       	pop	r17
    3640:	0f 91       	pop	r16
    3642:	ff 90       	pop	r15
    3644:	ef 90       	pop	r14
    3646:	df 90       	pop	r13
    3648:	cf 90       	pop	r12
    364a:	bf 90       	pop	r11
    364c:	af 90       	pop	r10
    364e:	9f 90       	pop	r9
    3650:	8f 90       	pop	r8
    3652:	7f 90       	pop	r7
    3654:	6f 90       	pop	r6
    3656:	5f 90       	pop	r5
    3658:	4f 90       	pop	r4
    365a:	3f 90       	pop	r3
    365c:	08 95       	ret

0000365e <spi_setup>:
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    365e:	e0 e4       	ldi	r30, 0x40	; 64
    3660:	f6 e0       	ldi	r31, 0x06	; 6
    3662:	80 eb       	ldi	r24, 0xB0	; 176
    3664:	81 83       	std	Z+1, r24	; 0x01
    3666:	80 e1       	ldi	r24, 0x10	; 16
    3668:	85 83       	std	Z+5, r24	; 0x05
    366a:	80 ed       	ldi	r24, 0xD0	; 208
    366c:	80 93 c0 08 	sts	0x08C0, r24
    3670:	08 95       	ret

00003672 <spi_off>:
    3672:	e0 ec       	ldi	r30, 0xC0	; 192
    3674:	f8 e0       	ldi	r31, 0x08	; 8
    3676:	80 81       	ld	r24, Z
    3678:	8f 7b       	andi	r24, 0xBF	; 191
    367a:	80 83       	st	Z, r24
    367c:	e0 e4       	ldi	r30, 0x40	; 64
    367e:	f6 e0       	ldi	r31, 0x06	; 6
    3680:	80 eb       	ldi	r24, 0xB0	; 176
    3682:	82 83       	std	Z+2, r24	; 0x02
    3684:	88 e1       	ldi	r24, 0x18	; 24
    3686:	84 8b       	std	Z+20, r24	; 0x14
    3688:	85 8b       	std	Z+21, r24	; 0x15
    368a:	86 8b       	std	Z+22, r24	; 0x16
    368c:	87 8b       	std	Z+23, r24	; 0x17
    368e:	08 95       	ret

00003690 <spi_wr_rd>:
    3690:	e0 ec       	ldi	r30, 0xC0	; 192
    3692:	f8 e0       	ldi	r31, 0x08	; 8
    3694:	83 83       	std	Z+3, r24	; 0x03
    3696:	82 81       	ldd	r24, Z+2	; 0x02
    3698:	88 23       	and	r24, r24
    369a:	ec f7       	brge	.-6      	; 0x3696 <spi_wr_rd+0x6>
    369c:	e0 ec       	ldi	r30, 0xC0	; 192
    369e:	f8 e0       	ldi	r31, 0x08	; 8
    36a0:	83 81       	ldd	r24, Z+3	; 0x03
    36a2:	08 95       	ret

000036a4 <twi_setup>:
    36a4:	e0 e8       	ldi	r30, 0x80	; 128
    36a6:	f4 e0       	ldi	r31, 0x04	; 4
    36a8:	12 82       	std	Z+2, r1	; 0x02
    36aa:	89 e0       	ldi	r24, 0x09	; 9
    36ac:	85 83       	std	Z+5, r24	; 0x05
    36ae:	88 e0       	ldi	r24, 0x08	; 8
    36b0:	81 83       	std	Z+1, r24	; 0x01
    36b2:	81 e0       	ldi	r24, 0x01	; 1
    36b4:	84 83       	std	Z+4, r24	; 0x04
    36b6:	08 95       	ret

000036b8 <twi_start_transmission>:
}

uint8_t twi_start_transmission(TWI_t* const TWI, 
const uint8_t slave_address, 
const uint8_t timeout_ms)
{
    36b8:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    36ba:	66 83       	std	Z+6, r22	; 0x06

	timeout_remaining = (timeout_ms * 100);
    36bc:	84 e6       	ldi	r24, 0x64	; 100
    36be:	48 9f       	mul	r20, r24
    36c0:	a0 01       	movw	r20, r0
    36c2:	11 24       	eor	r1, r1
	while (timeout_remaining)
    36c4:	41 15       	cp	r20, r1
    36c6:	51 05       	cpc	r21, r1
    36c8:	09 f1       	breq	.+66     	; 0x370c <twi_start_transmission+0x54>
	{
		uint8_t status = TWI->MASTER.STATUS;
    36ca:	84 81       	ldd	r24, Z+4	; 0x04

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    36cc:	98 2f       	mov	r25, r24
    36ce:	98 74       	andi	r25, 0x48	; 72
    36d0:	98 34       	cpi	r25, 0x48	; 72
    36d2:	11 f4       	brne	.+4      	; 0x36d8 <twi_start_transmission+0x20>
		{
			TWI->MASTER.ADDR = slave_address;
    36d4:	66 83       	std	Z+6, r22	; 0x06
    36d6:	0a c0       	rjmp	.+20     	; 0x36ec <twi_start_transmission+0x34>
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    36d8:	98 2f       	mov	r25, r24
    36da:	90 75       	andi	r25, 0x50	; 80
    36dc:	90 35       	cpi	r25, 0x50	; 80
    36de:	21 f4       	brne	.+8      	; 0x36e8 <twi_start_transmission+0x30>
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    36e0:	87 e0       	ldi	r24, 0x07	; 7
    36e2:	83 83       	std	Z+3, r24	; 0x03
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
    36e4:	84 e0       	ldi	r24, 0x04	; 4
    36e6:	08 95       	ret
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    36e8:	80 7c       	andi	r24, 0xC0	; 192
    36ea:	71 f4       	brne	.+28     	; 0x3708 <twi_start_transmission+0x50>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    36ec:	8a e6       	ldi	r24, 0x6A	; 106
    36ee:	8a 95       	dec	r24
    36f0:	f1 f7       	brne	.-4      	; 0x36ee <twi_start_transmission+0x36>
    36f2:	00 c0       	rjmp	.+0      	; 0x36f4 <twi_start_transmission+0x3c>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    36f4:	41 50       	subi	r20, 0x01	; 1
    36f6:	51 09       	sbc	r21, r1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    36f8:	41 15       	cp	r20, r1
    36fa:	51 05       	cpc	r21, r1
    36fc:	31 f7       	brne	.-52     	; 0x36ca <twi_start_transmission+0x12>
    36fe:	06 c0       	rjmp	.+12     	; 0x370c <twi_start_transmission+0x54>
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3700:	87 e0       	ldi	r24, 0x07	; 7
    3702:	83 83       	std	Z+3, r24	; 0x03
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
			twi_stop_transmission(TWI);
		}
	}

	return TWI_ERROR_BUS_CAP_TIMEOUT;
    3704:	83 e0       	ldi	r24, 0x03	; 3
    3706:	08 95       	ret
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
		{
			return TWI_ERROR_NO_ERROR;
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	08 95       	ret
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    370c:	84 81       	ldd	r24, Z+4	; 0x04
    370e:	85 fd       	sbrc	r24, 5
    3710:	f7 cf       	rjmp	.-18     	; 0x3700 <twi_start_transmission+0x48>
			twi_stop_transmission(TWI);
		}
	}

	return TWI_ERROR_BUS_CAP_TIMEOUT;
    3712:	83 e0       	ldi	r24, 0x03	; 3
}
    3714:	08 95       	ret

00003716 <twi_send_byte>:

uint8_t twi_send_byte(TWI_t* const TWI, 
const uint8_t timeout_ms,
const uint8_t data)
{
    3716:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;
	
	TWI->MASTER.DATA = data;
    3718:	47 83       	std	Z+7, r20	; 0x07
	
	timeout_remaining = (timeout_ms * 100);
    371a:	84 e6       	ldi	r24, 0x64	; 100
    371c:	68 9f       	mul	r22, r24
    371e:	b0 01       	movw	r22, r0
    3720:	11 24       	eor	r1, r1
	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm)&& timeout_remaining) {
    3722:	84 81       	ldd	r24, Z+4	; 0x04
    3724:	86 fd       	sbrc	r24, 6
    3726:	0f c0       	rjmp	.+30     	; 0x3746 <twi_send_byte+0x30>
    3728:	61 15       	cp	r22, r1
    372a:	71 05       	cpc	r23, r1
    372c:	61 f0       	breq	.+24     	; 0x3746 <twi_send_byte+0x30>
    372e:	8a e6       	ldi	r24, 0x6A	; 106
    3730:	8a 95       	dec	r24
    3732:	f1 f7       	brne	.-4      	; 0x3730 <twi_send_byte+0x1a>
    3734:	00 c0       	rjmp	.+0      	; 0x3736 <twi_send_byte+0x20>
		_delay_us(10);
		timeout_remaining--;
    3736:	61 50       	subi	r22, 0x01	; 1
    3738:	71 09       	sbc	r23, r1
	uint16_t timeout_remaining;
	
	TWI->MASTER.DATA = data;
	
	timeout_remaining = (timeout_ms * 100);
	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm)&& timeout_remaining) {
    373a:	84 81       	ldd	r24, Z+4	; 0x04
    373c:	86 fd       	sbrc	r24, 6
    373e:	03 c0       	rjmp	.+6      	; 0x3746 <twi_send_byte+0x30>
    3740:	61 15       	cp	r22, r1
    3742:	71 05       	cpc	r23, r1
    3744:	a1 f7       	brne	.-24     	; 0x372e <twi_send_byte+0x18>
		_delay_us(10);
		timeout_remaining--;
	}

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    3746:	84 81       	ldd	r24, Z+4	; 0x04
    3748:	86 ff       	sbrs	r24, 6
    374a:	06 c0       	rjmp	.+12     	; 0x3758 <twi_send_byte+0x42>
    374c:	94 81       	ldd	r25, Z+4	; 0x04
    374e:	92 95       	swap	r25
    3750:	91 70       	andi	r25, 0x01	; 1
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	89 27       	eor	r24, r25
    3756:	08 95       	ret
    3758:	80 e0       	ldi	r24, 0x00	; 0
}
    375a:	08 95       	ret

0000375c <twi_receive_byte>:

uint8_t twi_receive_byte(TWI_t* const TWI, 
const uint8_t timeout_ms,
uint8_t* const data, 
const uint8_t end_of_data)
{
    375c:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;
	
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
    375e:	84 81       	ldd	r24, Z+4	; 0x04
    3760:	8c 70       	andi	r24, 0x0C	; 12
    3762:	8c 30       	cpi	r24, 0x0C	; 12
    3764:	19 f1       	breq	.+70     	; 0x37ac <twi_receive_byte+0x50>
		return false;
	}
	timeout_remaining = (timeout_ms * 100);
    3766:	84 e6       	ldi	r24, 0x64	; 100
    3768:	68 9f       	mul	r22, r24
    376a:	b0 01       	movw	r22, r0
    376c:	11 24       	eor	r1, r1
	while (!(TWI->MASTER.STATUS & TWI_MASTER_RIF_bm) && timeout_remaining) {
    376e:	84 81       	ldd	r24, Z+4	; 0x04
    3770:	88 23       	and	r24, r24
    3772:	7c f0       	brlt	.+30     	; 0x3792 <twi_receive_byte+0x36>
    3774:	61 15       	cp	r22, r1
    3776:	71 05       	cpc	r23, r1
    3778:	61 f0       	breq	.+24     	; 0x3792 <twi_receive_byte+0x36>
    377a:	aa e6       	ldi	r26, 0x6A	; 106
    377c:	aa 95       	dec	r26
    377e:	f1 f7       	brne	.-4      	; 0x377c <twi_receive_byte+0x20>
    3780:	00 c0       	rjmp	.+0      	; 0x3782 <twi_receive_byte+0x26>
		_delay_us(10);
		timeout_remaining--;
    3782:	61 50       	subi	r22, 0x01	; 1
    3784:	71 09       	sbc	r23, r1
	
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
		return false;
	}
	timeout_remaining = (timeout_ms * 100);
	while (!(TWI->MASTER.STATUS & TWI_MASTER_RIF_bm) && timeout_remaining) {
    3786:	84 81       	ldd	r24, Z+4	; 0x04
    3788:	88 23       	and	r24, r24
    378a:	1c f0       	brlt	.+6      	; 0x3792 <twi_receive_byte+0x36>
    378c:	61 15       	cp	r22, r1
    378e:	71 05       	cpc	r23, r1
    3790:	a1 f7       	brne	.-24     	; 0x377a <twi_receive_byte+0x1e>
		_delay_us(10);
		timeout_remaining--;
	}

	*data = TWI->MASTER.DATA;
    3792:	87 81       	ldd	r24, Z+7	; 0x07
    3794:	da 01       	movw	r26, r20
    3796:	8c 93       	st	X, r24

	if (end_of_data)
    3798:	22 23       	and	r18, r18
    379a:	21 f0       	breq	.+8      	; 0x37a4 <twi_receive_byte+0x48>
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    379c:	87 e0       	ldi	r24, 0x07	; 7
    379e:	83 83       	std	Z+3, r24	; 0x03
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

	return true;
    37a0:	81 e0       	ldi	r24, 0x01	; 1
    37a2:	08 95       	ret
	*data = TWI->MASTER.DATA;

	if (end_of_data)
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    37a4:	82 e0       	ldi	r24, 0x02	; 2
    37a6:	83 83       	std	Z+3, r24	; 0x03

	return true;
    37a8:	81 e0       	ldi	r24, 0x01	; 1
    37aa:	08 95       	ret
const uint8_t end_of_data)
{
	uint16_t timeout_remaining;
	
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
		return false;
    37ac:	80 e0       	ldi	r24, 0x00	; 0
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

	return true;
}
    37ae:	08 95       	ret

000037b0 <twi_read_packet>:
const uint8_t slave_address,
const uint8_t timeout_ms,
const uint8_t reg,
uint8_t* data,
uint8_t length)
{
    37b0:	bf 92       	push	r11
    37b2:	cf 92       	push	r12
    37b4:	df 92       	push	r13
    37b6:	ef 92       	push	r14
    37b8:	ff 92       	push	r15
    37ba:	0f 93       	push	r16
    37bc:	1f 93       	push	r17
    37be:	cf 93       	push	r28
    37c0:	df 93       	push	r29
    37c2:	ec 01       	movw	r28, r24
    37c4:	d6 2e       	mov	r13, r22
    37c6:	f4 2e       	mov	r15, r20
    37c8:	c2 2e       	mov	r12, r18
	uint8_t error_code;
	uint8_t len = length;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    37ca:	66 0f       	add	r22, r22
    37cc:	75 df       	rcall	.-278    	; 0x36b8 <twi_start_transmission>
    37ce:	81 30       	cpi	r24, 0x01	; 1
    37d0:	41 f5       	brne	.+80     	; 0x3822 <twi_read_packet+0x72>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
    37d2:	4c 2d       	mov	r20, r12
    37d4:	6f 2d       	mov	r22, r15
    37d6:	ce 01       	movw	r24, r28
    37d8:	9e df       	rcall	.-196    	; 0x3716 <twi_send_byte>
    37da:	88 23       	and	r24, r24
    37dc:	21 f1       	breq	.+72     	; 0x3826 <twi_read_packet+0x76>
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
    37de:	6d 2d       	mov	r22, r13
    37e0:	66 0f       	add	r22, r22
    37e2:	61 60       	ori	r22, 0x01	; 1
    37e4:	4f 2d       	mov	r20, r15
    37e6:	ce 01       	movw	r24, r28
    37e8:	67 df       	rcall	.-306    	; 0x36b8 <twi_start_transmission>
    37ea:	81 30       	cpi	r24, 0x01	; 1
    37ec:	b1 f4       	brne	.+44     	; 0x381a <twi_read_packet+0x6a>
    37ee:	bb 24       	eor	r11, r11
    37f0:	ba 94       	dec	r11
    37f2:	be 0c       	add	r11, r14
    37f4:	0f c0       	rjmp	.+30     	; 0x3814 <twi_read_packet+0x64>
		timeout_ms)) == TWI_ERROR_NO_ERROR)
		{
			while (length--)
			{
				if (!(twi_receive_byte(TWI, timeout_ms, data++, (length == 0))))
    37f6:	68 01       	movw	r12, r16
    37f8:	8f ef       	ldi	r24, 0xFF	; 255
    37fa:	c8 1a       	sub	r12, r24
    37fc:	d8 0a       	sbc	r13, r24
    37fe:	21 e0       	ldi	r18, 0x01	; 1
    3800:	b1 10       	cpse	r11, r1
    3802:	20 e0       	ldi	r18, 0x00	; 0
    3804:	a8 01       	movw	r20, r16
    3806:	6f 2d       	mov	r22, r15
    3808:	ce 01       	movw	r24, r28
    380a:	a8 df       	rcall	.-176    	; 0x375c <twi_receive_byte>
    380c:	ba 94       	dec	r11
    380e:	88 23       	and	r24, r24
    3810:	21 f0       	breq	.+8      	; 0x381a <twi_read_packet+0x6a>
    3812:	86 01       	movw	r16, r12
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
		timeout_ms)) == TWI_ERROR_NO_ERROR)
		{
			while (length--)
    3814:	8f ef       	ldi	r24, 0xFF	; 255
    3816:	b8 12       	cpse	r11, r24
    3818:	ee cf       	rjmp	.-36     	; 0x37f6 <twi_read_packet+0x46>
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    381a:	87 e0       	ldi	r24, 0x07	; 7
    381c:	8b 83       	std	Y+3, r24	; 0x03
		}

		twi_stop_transmission(TWI);
	}

	return len;
    381e:	8e 2d       	mov	r24, r14
    3820:	03 c0       	rjmp	.+6      	; 0x3828 <twi_read_packet+0x78>
    3822:	8e 2d       	mov	r24, r14
    3824:	01 c0       	rjmp	.+2      	; 0x3828 <twi_read_packet+0x78>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    3826:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return len;
}
    3828:	df 91       	pop	r29
    382a:	cf 91       	pop	r28
    382c:	1f 91       	pop	r17
    382e:	0f 91       	pop	r16
    3830:	ff 90       	pop	r15
    3832:	ef 90       	pop	r14
    3834:	df 90       	pop	r13
    3836:	cf 90       	pop	r12
    3838:	bf 90       	pop	r11
    383a:	08 95       	ret

0000383c <twi_write_packet>:
const uint8_t slave_address,
const uint8_t timeout_ms,
const uint8_t reg,
const uint8_t* data,
uint8_t length)
{
    383c:	cf 92       	push	r12
    383e:	df 92       	push	r13
    3840:	ef 92       	push	r14
    3842:	ff 92       	push	r15
    3844:	0f 93       	push	r16
    3846:	1f 93       	push	r17
    3848:	cf 93       	push	r28
    384a:	df 93       	push	r29
    384c:	ec 01       	movw	r28, r24
    384e:	f4 2e       	mov	r15, r20
    3850:	d2 2e       	mov	r13, r18
	uint8_t error_code;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    3852:	66 0f       	add	r22, r22
    3854:	31 df       	rcall	.-414    	; 0x36b8 <twi_start_transmission>
    3856:	81 30       	cpi	r24, 0x01	; 1
    3858:	e1 f4       	brne	.+56     	; 0x3892 <twi_write_packet+0x56>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
    385a:	4d 2d       	mov	r20, r13
    385c:	6f 2d       	mov	r22, r15
    385e:	ce 01       	movw	r24, r28
    3860:	5a df       	rcall	.-332    	; 0x3716 <twi_send_byte>
    3862:	88 23       	and	r24, r24
    3864:	c1 f0       	breq	.+48     	; 0x3896 <twi_write_packet+0x5a>
    3866:	ea 94       	dec	r14
    3868:	c0 2e       	mov	r12, r16
    386a:	d1 2e       	mov	r13, r17
    386c:	0b c0       	rjmp	.+22     	; 0x3884 <twi_write_packet+0x48>
			return error_code;
		}

		while (length--)
		{
			if (!(twi_send_byte(TWI, timeout_ms, *(data++))))
    386e:	f6 01       	movw	r30, r12
    3870:	41 91       	ld	r20, Z+
    3872:	6f 01       	movw	r12, r30
    3874:	6f 2d       	mov	r22, r15
    3876:	ce 01       	movw	r24, r28
    3878:	4e df       	rcall	.-356    	; 0x3716 <twi_send_byte>
    387a:	9f ef       	ldi	r25, 0xFF	; 255
    387c:	9e 0d       	add	r25, r14
    387e:	88 23       	and	r24, r24
    3880:	21 f0       	breq	.+8      	; 0x388a <twi_write_packet+0x4e>
    3882:	e9 2e       	mov	r14, r25
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		while (length--)
    3884:	ff ef       	ldi	r31, 0xFF	; 255
    3886:	ef 12       	cpse	r14, r31
    3888:	f2 cf       	rjmp	.-28     	; 0x386e <twi_write_packet+0x32>
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    388a:	87 e0       	ldi	r24, 0x07	; 7
    388c:	8b 83       	std	Y+3, r24	; 0x03
    388e:	8e 2d       	mov	r24, r14
    3890:	03 c0       	rjmp	.+6      	; 0x3898 <twi_write_packet+0x5c>
    3892:	8e 2d       	mov	r24, r14
    3894:	01 c0       	rjmp	.+2      	; 0x3898 <twi_write_packet+0x5c>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    3896:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return length;
    3898:	df 91       	pop	r29
    389a:	cf 91       	pop	r28
    389c:	1f 91       	pop	r17
    389e:	0f 91       	pop	r16
    38a0:	ff 90       	pop	r15
    38a2:	ef 90       	pop	r14
    38a4:	df 90       	pop	r13
    38a6:	cf 90       	pop	r12
    38a8:	08 95       	ret

000038aa <mem_cpy>:
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
		i = (bw == (UINT)i) ? 0 : -1;
	}
	pb->idx = i;
	pb->nchr++;
}
    38aa:	0f 93       	push	r16
    38ac:	1f 93       	push	r17
    38ae:	cf 93       	push	r28
    38b0:	df 93       	push	r29
    38b2:	42 30       	cpi	r20, 0x02	; 2
    38b4:	51 05       	cpc	r21, r1
    38b6:	c0 f0       	brcs	.+48     	; 0x38e8 <mem_cpy+0x3e>
    38b8:	eb 01       	movw	r28, r22
    38ba:	fc 01       	movw	r30, r24
    38bc:	9a 01       	movw	r18, r20
    38be:	09 91       	ld	r16, Y+
    38c0:	19 91       	ld	r17, Y+
    38c2:	01 93       	st	Z+, r16
    38c4:	11 93       	st	Z+, r17
    38c6:	22 50       	subi	r18, 0x02	; 2
    38c8:	31 09       	sbc	r19, r1
    38ca:	22 30       	cpi	r18, 0x02	; 2
    38cc:	31 05       	cpc	r19, r1
    38ce:	b8 f7       	brcc	.-18     	; 0x38be <mem_cpy+0x14>
    38d0:	9a 01       	movw	r18, r20
    38d2:	22 50       	subi	r18, 0x02	; 2
    38d4:	31 09       	sbc	r19, r1
    38d6:	2e 7f       	andi	r18, 0xFE	; 254
    38d8:	2e 5f       	subi	r18, 0xFE	; 254
    38da:	3f 4f       	sbci	r19, 0xFF	; 255
    38dc:	82 0f       	add	r24, r18
    38de:	93 1f       	adc	r25, r19
    38e0:	62 0f       	add	r22, r18
    38e2:	73 1f       	adc	r23, r19
    38e4:	41 70       	andi	r20, 0x01	; 1
    38e6:	55 27       	eor	r21, r21
    38e8:	41 15       	cp	r20, r1
    38ea:	51 05       	cpc	r21, r1
    38ec:	49 f0       	breq	.+18     	; 0x3900 <mem_cpy+0x56>
    38ee:	db 01       	movw	r26, r22
    38f0:	fc 01       	movw	r30, r24
    38f2:	84 0f       	add	r24, r20
    38f4:	95 1f       	adc	r25, r21
    38f6:	2d 91       	ld	r18, X+
    38f8:	21 93       	st	Z+, r18
    38fa:	e8 17       	cp	r30, r24
    38fc:	f9 07       	cpc	r31, r25
    38fe:	d9 f7       	brne	.-10     	; 0x38f6 <mem_cpy+0x4c>
    3900:	df 91       	pop	r29
    3902:	cf 91       	pop	r28
    3904:	1f 91       	pop	r17
    3906:	0f 91       	pop	r16
    3908:	08 95       	ret

0000390a <mem_set>:
    390a:	41 15       	cp	r20, r1
    390c:	51 05       	cpc	r21, r1
    390e:	39 f0       	breq	.+14     	; 0x391e <mem_set+0x14>
    3910:	fc 01       	movw	r30, r24
    3912:	84 0f       	add	r24, r20
    3914:	95 1f       	adc	r25, r21
    3916:	61 93       	st	Z+, r22
    3918:	e8 17       	cp	r30, r24
    391a:	f9 07       	cpc	r31, r25
    391c:	e1 f7       	brne	.-8      	; 0x3916 <mem_set+0xc>
    391e:	08 95       	ret

00003920 <ld_clust>:
    3920:	0f 93       	push	r16
    3922:	1f 93       	push	r17
    3924:	dc 01       	movw	r26, r24
    3926:	fb 01       	movw	r30, r22
    3928:	62 8d       	ldd	r22, Z+26	; 0x1a
    392a:	73 8d       	ldd	r23, Z+27	; 0x1b
    392c:	80 e0       	ldi	r24, 0x00	; 0
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	2c 91       	ld	r18, X
    3932:	23 30       	cpi	r18, 0x03	; 3
    3934:	59 f4       	brne	.+22     	; 0x394c <ld_clust+0x2c>
    3936:	04 89       	ldd	r16, Z+20	; 0x14
    3938:	15 89       	ldd	r17, Z+21	; 0x15
    393a:	20 e0       	ldi	r18, 0x00	; 0
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	98 01       	movw	r18, r16
    3940:	11 27       	eor	r17, r17
    3942:	00 27       	eor	r16, r16
    3944:	60 2b       	or	r22, r16
    3946:	71 2b       	or	r23, r17
    3948:	82 2b       	or	r24, r18
    394a:	93 2b       	or	r25, r19
    394c:	1f 91       	pop	r17
    394e:	0f 91       	pop	r16
    3950:	08 95       	ret

00003952 <get_ldnumber>:
    3952:	cf 93       	push	r28
    3954:	df 93       	push	r29
    3956:	ec 01       	movw	r28, r24
    3958:	a8 81       	ld	r26, Y
    395a:	b9 81       	ldd	r27, Y+1	; 0x01
    395c:	10 97       	sbiw	r26, 0x00	; 0
    395e:	29 f1       	breq	.+74     	; 0x39aa <get_ldnumber+0x58>
    3960:	4c 91       	ld	r20, X
    3962:	41 32       	cpi	r20, 0x21	; 33
    3964:	58 f0       	brcs	.+22     	; 0x397c <get_ldnumber+0x2a>
    3966:	4a 33       	cpi	r20, 0x3A	; 58
    3968:	49 f1       	breq	.+82     	; 0x39bc <get_ldnumber+0x6a>
    396a:	fd 01       	movw	r30, r26
    396c:	31 96       	adiw	r30, 0x01	; 1
    396e:	9f 01       	movw	r18, r30
    3970:	91 91       	ld	r25, Z+
    3972:	91 32       	cpi	r25, 0x21	; 33
    3974:	28 f0       	brcs	.+10     	; 0x3980 <get_ldnumber+0x2e>
    3976:	9a 33       	cpi	r25, 0x3A	; 58
    3978:	d1 f7       	brne	.-12     	; 0x396e <get_ldnumber+0x1c>
    397a:	04 c0       	rjmp	.+8      	; 0x3984 <get_ldnumber+0x32>
    397c:	94 2f       	mov	r25, r20
    397e:	9d 01       	movw	r18, r26
    3980:	9a 33       	cpi	r25, 0x3A	; 58
    3982:	79 f4       	brne	.+30     	; 0x39a2 <get_ldnumber+0x50>
    3984:	cd 01       	movw	r24, r26
    3986:	01 96       	adiw	r24, 0x01	; 1
    3988:	28 17       	cp	r18, r24
    398a:	39 07       	cpc	r19, r25
    398c:	89 f4       	brne	.+34     	; 0x39b0 <get_ldnumber+0x5e>
    398e:	84 2f       	mov	r24, r20
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	c0 97       	sbiw	r24, 0x30	; 48
    3994:	82 30       	cpi	r24, 0x02	; 2
    3996:	91 05       	cpc	r25, r1
    3998:	70 f4       	brcc	.+28     	; 0x39b6 <get_ldnumber+0x64>
    399a:	12 96       	adiw	r26, 0x02	; 2
    399c:	a8 83       	st	Y, r26
    399e:	b9 83       	std	Y+1, r27	; 0x01
    39a0:	0f c0       	rjmp	.+30     	; 0x39c0 <get_ldnumber+0x6e>
    39a2:	80 91 75 25 	lds	r24, 0x2575
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	0b c0       	rjmp	.+22     	; 0x39c0 <get_ldnumber+0x6e>
    39aa:	8f ef       	ldi	r24, 0xFF	; 255
    39ac:	9f ef       	ldi	r25, 0xFF	; 255
    39ae:	08 c0       	rjmp	.+16     	; 0x39c0 <get_ldnumber+0x6e>
    39b0:	8f ef       	ldi	r24, 0xFF	; 255
    39b2:	9f ef       	ldi	r25, 0xFF	; 255
    39b4:	05 c0       	rjmp	.+10     	; 0x39c0 <get_ldnumber+0x6e>
    39b6:	8f ef       	ldi	r24, 0xFF	; 255
    39b8:	9f ef       	ldi	r25, 0xFF	; 255
    39ba:	02 c0       	rjmp	.+4      	; 0x39c0 <get_ldnumber+0x6e>
    39bc:	9d 01       	movw	r18, r26
    39be:	e2 cf       	rjmp	.-60     	; 0x3984 <get_ldnumber+0x32>
    39c0:	df 91       	pop	r29
    39c2:	cf 91       	pop	r28
    39c4:	08 95       	ret

000039c6 <sync_window>:
    39c6:	8f 92       	push	r8
    39c8:	9f 92       	push	r9
    39ca:	af 92       	push	r10
    39cc:	bf 92       	push	r11
    39ce:	cf 92       	push	r12
    39d0:	df 92       	push	r13
    39d2:	ef 92       	push	r14
    39d4:	ff 92       	push	r15
    39d6:	0f 93       	push	r16
    39d8:	1f 93       	push	r17
    39da:	cf 93       	push	r28
    39dc:	df 93       	push	r29
    39de:	ec 01       	movw	r28, r24
    39e0:	8c 81       	ldd	r24, Y+4	; 0x04
    39e2:	88 23       	and	r24, r24
    39e4:	09 f4       	brne	.+2      	; 0x39e8 <sync_window+0x22>
    39e6:	44 c0       	rjmp	.+136    	; 0x3a70 <sync_window+0xaa>
    39e8:	ce a4       	ldd	r12, Y+46	; 0x2e
    39ea:	df a4       	ldd	r13, Y+47	; 0x2f
    39ec:	e8 a8       	ldd	r14, Y+48	; 0x30
    39ee:	f9 a8       	ldd	r15, Y+49	; 0x31
    39f0:	5e 01       	movw	r10, r28
    39f2:	82 e3       	ldi	r24, 0x32	; 50
    39f4:	a8 0e       	add	r10, r24
    39f6:	b1 1c       	adc	r11, r1
    39f8:	01 e0       	ldi	r16, 0x01	; 1
    39fa:	10 e0       	ldi	r17, 0x00	; 0
    39fc:	a7 01       	movw	r20, r14
    39fe:	96 01       	movw	r18, r12
    3a00:	b5 01       	movw	r22, r10
    3a02:	89 81       	ldd	r24, Y+1	; 0x01
    3a04:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <disk_write>
    3a08:	81 11       	cpse	r24, r1
    3a0a:	34 c0       	rjmp	.+104    	; 0x3a74 <sync_window+0xae>
    3a0c:	1c 82       	std	Y+4, r1	; 0x04
    3a0e:	8a a1       	ldd	r24, Y+34	; 0x22
    3a10:	9b a1       	ldd	r25, Y+35	; 0x23
    3a12:	ac a1       	ldd	r26, Y+36	; 0x24
    3a14:	bd a1       	ldd	r27, Y+37	; 0x25
    3a16:	b7 01       	movw	r22, r14
    3a18:	a6 01       	movw	r20, r12
    3a1a:	48 1b       	sub	r20, r24
    3a1c:	59 0b       	sbc	r21, r25
    3a1e:	6a 0b       	sbc	r22, r26
    3a20:	7b 0b       	sbc	r23, r27
    3a22:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3a24:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3a26:	ac 8d       	ldd	r26, Y+28	; 0x1c
    3a28:	bd 8d       	ldd	r27, Y+29	; 0x1d
    3a2a:	48 17       	cp	r20, r24
    3a2c:	59 07       	cpc	r21, r25
    3a2e:	6a 07       	cpc	r22, r26
    3a30:	7b 07       	cpc	r23, r27
    3a32:	10 f5       	brcc	.+68     	; 0x3a78 <sync_window+0xb2>
    3a34:	8b 80       	ldd	r8, Y+3	; 0x03
    3a36:	91 2c       	mov	r9, r1
    3a38:	82 e0       	ldi	r24, 0x02	; 2
    3a3a:	88 16       	cp	r8, r24
    3a3c:	91 04       	cpc	r9, r1
    3a3e:	f0 f0       	brcs	.+60     	; 0x3a7c <sync_window+0xb6>
    3a40:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3a42:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3a44:	ac 8d       	ldd	r26, Y+28	; 0x1c
    3a46:	bd 8d       	ldd	r27, Y+29	; 0x1d
    3a48:	c8 0e       	add	r12, r24
    3a4a:	d9 1e       	adc	r13, r25
    3a4c:	ea 1e       	adc	r14, r26
    3a4e:	fb 1e       	adc	r15, r27
    3a50:	01 e0       	ldi	r16, 0x01	; 1
    3a52:	10 e0       	ldi	r17, 0x00	; 0
    3a54:	a7 01       	movw	r20, r14
    3a56:	96 01       	movw	r18, r12
    3a58:	b5 01       	movw	r22, r10
    3a5a:	89 81       	ldd	r24, Y+1	; 0x01
    3a5c:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <disk_write>
    3a60:	81 e0       	ldi	r24, 0x01	; 1
    3a62:	88 1a       	sub	r8, r24
    3a64:	91 08       	sbc	r9, r1
    3a66:	81 e0       	ldi	r24, 0x01	; 1
    3a68:	88 16       	cp	r8, r24
    3a6a:	91 04       	cpc	r9, r1
    3a6c:	49 f7       	brne	.-46     	; 0x3a40 <sync_window+0x7a>
    3a6e:	08 c0       	rjmp	.+16     	; 0x3a80 <sync_window+0xba>
    3a70:	80 e0       	ldi	r24, 0x00	; 0
    3a72:	07 c0       	rjmp	.+14     	; 0x3a82 <sync_window+0xbc>
    3a74:	81 e0       	ldi	r24, 0x01	; 1
    3a76:	05 c0       	rjmp	.+10     	; 0x3a82 <sync_window+0xbc>
    3a78:	80 e0       	ldi	r24, 0x00	; 0
    3a7a:	03 c0       	rjmp	.+6      	; 0x3a82 <sync_window+0xbc>
    3a7c:	80 e0       	ldi	r24, 0x00	; 0
    3a7e:	01 c0       	rjmp	.+2      	; 0x3a82 <sync_window+0xbc>
    3a80:	80 e0       	ldi	r24, 0x00	; 0
    3a82:	df 91       	pop	r29
    3a84:	cf 91       	pop	r28
    3a86:	1f 91       	pop	r17
    3a88:	0f 91       	pop	r16
    3a8a:	ff 90       	pop	r15
    3a8c:	ef 90       	pop	r14
    3a8e:	df 90       	pop	r13
    3a90:	cf 90       	pop	r12
    3a92:	bf 90       	pop	r11
    3a94:	af 90       	pop	r10
    3a96:	9f 90       	pop	r9
    3a98:	8f 90       	pop	r8
    3a9a:	08 95       	ret

00003a9c <move_window>:
    3a9c:	bf 92       	push	r11
    3a9e:	cf 92       	push	r12
    3aa0:	df 92       	push	r13
    3aa2:	ef 92       	push	r14
    3aa4:	ff 92       	push	r15
    3aa6:	0f 93       	push	r16
    3aa8:	1f 93       	push	r17
    3aaa:	cf 93       	push	r28
    3aac:	df 93       	push	r29
    3aae:	ec 01       	movw	r28, r24
    3ab0:	6a 01       	movw	r12, r20
    3ab2:	7b 01       	movw	r14, r22
    3ab4:	8e a5       	ldd	r24, Y+46	; 0x2e
    3ab6:	9f a5       	ldd	r25, Y+47	; 0x2f
    3ab8:	a8 a9       	ldd	r26, Y+48	; 0x30
    3aba:	b9 a9       	ldd	r27, Y+49	; 0x31
    3abc:	84 17       	cp	r24, r20
    3abe:	95 07       	cpc	r25, r21
    3ac0:	a6 07       	cpc	r26, r22
    3ac2:	b7 07       	cpc	r27, r23
    3ac4:	e1 f0       	breq	.+56     	; 0x3afe <move_window+0x62>
    3ac6:	ce 01       	movw	r24, r28
    3ac8:	7e df       	rcall	.-260    	; 0x39c6 <sync_window>
    3aca:	b8 2e       	mov	r11, r24
    3acc:	81 11       	cpse	r24, r1
    3ace:	18 c0       	rjmp	.+48     	; 0x3b00 <move_window+0x64>
    3ad0:	01 e0       	ldi	r16, 0x01	; 1
    3ad2:	10 e0       	ldi	r17, 0x00	; 0
    3ad4:	a7 01       	movw	r20, r14
    3ad6:	96 01       	movw	r18, r12
    3ad8:	be 01       	movw	r22, r28
    3ada:	6e 5c       	subi	r22, 0xCE	; 206
    3adc:	7f 4f       	sbci	r23, 0xFF	; 255
    3ade:	89 81       	ldd	r24, Y+1	; 0x01
    3ae0:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <disk_read>
    3ae4:	88 23       	and	r24, r24
    3ae6:	31 f0       	breq	.+12     	; 0x3af4 <move_window+0x58>
    3ae8:	bb 24       	eor	r11, r11
    3aea:	b3 94       	inc	r11
    3aec:	cc 24       	eor	r12, r12
    3aee:	ca 94       	dec	r12
    3af0:	dc 2c       	mov	r13, r12
    3af2:	76 01       	movw	r14, r12
    3af4:	ce a6       	std	Y+46, r12	; 0x2e
    3af6:	df a6       	std	Y+47, r13	; 0x2f
    3af8:	e8 aa       	std	Y+48, r14	; 0x30
    3afa:	f9 aa       	std	Y+49, r15	; 0x31
    3afc:	01 c0       	rjmp	.+2      	; 0x3b00 <move_window+0x64>
    3afe:	b1 2c       	mov	r11, r1
    3b00:	8b 2d       	mov	r24, r11
    3b02:	df 91       	pop	r29
    3b04:	cf 91       	pop	r28
    3b06:	1f 91       	pop	r17
    3b08:	0f 91       	pop	r16
    3b0a:	ff 90       	pop	r15
    3b0c:	ef 90       	pop	r14
    3b0e:	df 90       	pop	r13
    3b10:	cf 90       	pop	r12
    3b12:	bf 90       	pop	r11
    3b14:	08 95       	ret

00003b16 <check_fs>:
    3b16:	0f 93       	push	r16
    3b18:	1f 93       	push	r17
    3b1a:	cf 93       	push	r28
    3b1c:	df 93       	push	r29
    3b1e:	ec 01       	movw	r28, r24
    3b20:	1c 82       	std	Y+4, r1	; 0x04
    3b22:	0f ef       	ldi	r16, 0xFF	; 255
    3b24:	1f ef       	ldi	r17, 0xFF	; 255
    3b26:	98 01       	movw	r18, r16
    3b28:	0e a7       	std	Y+46, r16	; 0x2e
    3b2a:	1f a7       	std	Y+47, r17	; 0x2f
    3b2c:	28 ab       	std	Y+48, r18	; 0x30
    3b2e:	39 ab       	std	Y+49, r19	; 0x31
    3b30:	b5 df       	rcall	.-150    	; 0x3a9c <move_window>
    3b32:	81 11       	cpse	r24, r1
    3b34:	23 c0       	rjmp	.+70     	; 0x3b7c <check_fs+0x66>
    3b36:	fe 01       	movw	r30, r28
    3b38:	e0 5d       	subi	r30, 0xD0	; 208
    3b3a:	fd 4f       	sbci	r31, 0xFD	; 253
    3b3c:	80 81       	ld	r24, Z
    3b3e:	91 81       	ldd	r25, Z+1	; 0x01
    3b40:	85 35       	cpi	r24, 0x55	; 85
    3b42:	9a 4a       	sbci	r25, 0xAA	; 170
    3b44:	e9 f4       	brne	.+58     	; 0x3b80 <check_fs+0x6a>
    3b46:	e8 5c       	subi	r30, 0xC8	; 200
    3b48:	f1 40       	sbci	r31, 0x01	; 1
    3b4a:	40 81       	ld	r20, Z
    3b4c:	51 81       	ldd	r21, Z+1	; 0x01
    3b4e:	62 81       	ldd	r22, Z+2	; 0x02
    3b50:	73 81       	ldd	r23, Z+3	; 0x03
    3b52:	77 27       	eor	r23, r23
    3b54:	46 34       	cpi	r20, 0x46	; 70
    3b56:	51 44       	sbci	r21, 0x41	; 65
    3b58:	64 45       	sbci	r22, 0x54	; 84
    3b5a:	71 05       	cpc	r23, r1
    3b5c:	99 f0       	breq	.+38     	; 0x3b84 <check_fs+0x6e>
    3b5e:	cc 57       	subi	r28, 0x7C	; 124
    3b60:	df 4f       	sbci	r29, 0xFF	; 255
    3b62:	48 81       	ld	r20, Y
    3b64:	59 81       	ldd	r21, Y+1	; 0x01
    3b66:	6a 81       	ldd	r22, Y+2	; 0x02
    3b68:	7b 81       	ldd	r23, Y+3	; 0x03
    3b6a:	77 27       	eor	r23, r23
    3b6c:	81 e0       	ldi	r24, 0x01	; 1
    3b6e:	46 34       	cpi	r20, 0x46	; 70
    3b70:	51 44       	sbci	r21, 0x41	; 65
    3b72:	64 45       	sbci	r22, 0x54	; 84
    3b74:	71 05       	cpc	r23, r1
    3b76:	39 f4       	brne	.+14     	; 0x3b86 <check_fs+0x70>
    3b78:	80 e0       	ldi	r24, 0x00	; 0
    3b7a:	05 c0       	rjmp	.+10     	; 0x3b86 <check_fs+0x70>
    3b7c:	83 e0       	ldi	r24, 0x03	; 3
    3b7e:	03 c0       	rjmp	.+6      	; 0x3b86 <check_fs+0x70>
    3b80:	82 e0       	ldi	r24, 0x02	; 2
    3b82:	01 c0       	rjmp	.+2      	; 0x3b86 <check_fs+0x70>
    3b84:	80 e0       	ldi	r24, 0x00	; 0
    3b86:	df 91       	pop	r29
    3b88:	cf 91       	pop	r28
    3b8a:	1f 91       	pop	r17
    3b8c:	0f 91       	pop	r16
    3b8e:	08 95       	ret

00003b90 <validate>:
    3b90:	00 97       	sbiw	r24, 0x00	; 0
    3b92:	c9 f0       	breq	.+50     	; 0x3bc6 <validate+0x36>
    3b94:	dc 01       	movw	r26, r24
    3b96:	ed 91       	ld	r30, X+
    3b98:	fc 91       	ld	r31, X
    3b9a:	11 97       	sbiw	r26, 0x01	; 1
    3b9c:	30 97       	sbiw	r30, 0x00	; 0
    3b9e:	a9 f0       	breq	.+42     	; 0x3bca <validate+0x3a>
    3ba0:	20 81       	ld	r18, Z
    3ba2:	22 23       	and	r18, r18
    3ba4:	a1 f0       	breq	.+40     	; 0x3bce <validate+0x3e>
    3ba6:	26 81       	ldd	r18, Z+6	; 0x06
    3ba8:	37 81       	ldd	r19, Z+7	; 0x07
    3baa:	12 96       	adiw	r26, 0x02	; 2
    3bac:	8d 91       	ld	r24, X+
    3bae:	9c 91       	ld	r25, X
    3bb0:	13 97       	sbiw	r26, 0x03	; 3
    3bb2:	28 17       	cp	r18, r24
    3bb4:	39 07       	cpc	r19, r25
    3bb6:	69 f4       	brne	.+26     	; 0x3bd2 <validate+0x42>
    3bb8:	81 81       	ldd	r24, Z+1	; 0x01
    3bba:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <disk_status>
    3bbe:	80 ff       	sbrs	r24, 0
    3bc0:	0a c0       	rjmp	.+20     	; 0x3bd6 <validate+0x46>
    3bc2:	83 e0       	ldi	r24, 0x03	; 3
    3bc4:	08 95       	ret
    3bc6:	89 e0       	ldi	r24, 0x09	; 9
    3bc8:	08 95       	ret
    3bca:	89 e0       	ldi	r24, 0x09	; 9
    3bcc:	08 95       	ret
    3bce:	89 e0       	ldi	r24, 0x09	; 9
    3bd0:	08 95       	ret
    3bd2:	89 e0       	ldi	r24, 0x09	; 9
    3bd4:	08 95       	ret
    3bd6:	80 e0       	ldi	r24, 0x00	; 0
    3bd8:	08 95       	ret

00003bda <find_volume>:
    3bda:	2f 92       	push	r2
    3bdc:	3f 92       	push	r3
    3bde:	4f 92       	push	r4
    3be0:	5f 92       	push	r5
    3be2:	6f 92       	push	r6
    3be4:	7f 92       	push	r7
    3be6:	8f 92       	push	r8
    3be8:	9f 92       	push	r9
    3bea:	af 92       	push	r10
    3bec:	bf 92       	push	r11
    3bee:	cf 92       	push	r12
    3bf0:	df 92       	push	r13
    3bf2:	ef 92       	push	r14
    3bf4:	ff 92       	push	r15
    3bf6:	0f 93       	push	r16
    3bf8:	1f 93       	push	r17
    3bfa:	cf 93       	push	r28
    3bfc:	df 93       	push	r29
    3bfe:	cd b7       	in	r28, 0x3d	; 61
    3c00:	de b7       	in	r29, 0x3e	; 62
    3c02:	6d 97       	sbiw	r28, 0x1d	; 29
    3c04:	cd bf       	out	0x3d, r28	; 61
    3c06:	de bf       	out	0x3e, r29	; 62
    3c08:	6c 01       	movw	r12, r24
    3c0a:	cb 01       	movw	r24, r22
    3c0c:	b4 2e       	mov	r11, r20
    3c0e:	d6 01       	movw	r26, r12
    3c10:	1d 92       	st	X+, r1
    3c12:	1c 92       	st	X, r1
    3c14:	9e de       	rcall	.-708    	; 0x3952 <get_ldnumber>
    3c16:	7c 01       	movw	r14, r24
    3c18:	99 23       	and	r25, r25
    3c1a:	0c f4       	brge	.+2      	; 0x3c1e <find_volume+0x44>
    3c1c:	2b c2       	rjmp	.+1110   	; 0x4074 <find_volume+0x49a>
    3c1e:	fc 01       	movw	r30, r24
    3c20:	ee 0f       	add	r30, r30
    3c22:	ff 1f       	adc	r31, r31
    3c24:	e8 58       	subi	r30, 0x88	; 136
    3c26:	fa 4d       	sbci	r31, 0xDA	; 218
    3c28:	00 81       	ld	r16, Z
    3c2a:	11 81       	ldd	r17, Z+1	; 0x01
    3c2c:	01 15       	cp	r16, r1
    3c2e:	11 05       	cpc	r17, r1
    3c30:	09 f4       	brne	.+2      	; 0x3c34 <find_volume+0x5a>
    3c32:	22 c2       	rjmp	.+1092   	; 0x4078 <find_volume+0x49e>
    3c34:	f6 01       	movw	r30, r12
    3c36:	00 83       	st	Z, r16
    3c38:	11 83       	std	Z+1, r17	; 0x01
    3c3a:	d8 01       	movw	r26, r16
    3c3c:	8c 91       	ld	r24, X
    3c3e:	88 23       	and	r24, r24
    3c40:	69 f0       	breq	.+26     	; 0x3c5c <find_volume+0x82>
    3c42:	11 96       	adiw	r26, 0x01	; 1
    3c44:	8c 91       	ld	r24, X
    3c46:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <disk_status>
    3c4a:	80 fd       	sbrc	r24, 0
    3c4c:	07 c0       	rjmp	.+14     	; 0x3c5c <find_volume+0x82>
    3c4e:	bb 20       	and	r11, r11
    3c50:	09 f4       	brne	.+2      	; 0x3c54 <find_volume+0x7a>
    3c52:	14 c2       	rjmp	.+1064   	; 0x407c <find_volume+0x4a2>
    3c54:	82 fd       	sbrc	r24, 2
    3c56:	14 c2       	rjmp	.+1064   	; 0x4080 <find_volume+0x4a6>
    3c58:	80 e0       	ldi	r24, 0x00	; 0
    3c5a:	5d c2       	rjmp	.+1210   	; 0x4116 <find_volume+0x53c>
    3c5c:	f8 01       	movw	r30, r16
    3c5e:	10 82       	st	Z, r1
    3c60:	e1 82       	std	Z+1, r14	; 0x01
    3c62:	8e 2d       	mov	r24, r14
    3c64:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <disk_initialize>
    3c68:	80 fd       	sbrc	r24, 0
    3c6a:	0c c2       	rjmp	.+1048   	; 0x4084 <find_volume+0x4aa>
    3c6c:	bb 20       	and	r11, r11
    3c6e:	11 f0       	breq	.+4      	; 0x3c74 <find_volume+0x9a>
    3c70:	82 fd       	sbrc	r24, 2
    3c72:	0a c2       	rjmp	.+1044   	; 0x4088 <find_volume+0x4ae>
    3c74:	40 e0       	ldi	r20, 0x00	; 0
    3c76:	50 e0       	ldi	r21, 0x00	; 0
    3c78:	ba 01       	movw	r22, r20
    3c7a:	c8 01       	movw	r24, r16
    3c7c:	4c df       	rcall	.-360    	; 0x3b16 <check_fs>
    3c7e:	81 30       	cpi	r24, 0x01	; 1
    3c80:	09 f0       	breq	.+2      	; 0x3c84 <find_volume+0xaa>
    3c82:	3f c0       	rjmp	.+126    	; 0x3d02 <find_volume+0x128>
    3c84:	f8 01       	movw	r30, r16
    3c86:	ec 50       	subi	r30, 0x0C	; 12
    3c88:	fe 4f       	sbci	r31, 0xFE	; 254
    3c8a:	7e 01       	movw	r14, r28
    3c8c:	21 e1       	ldi	r18, 0x11	; 17
    3c8e:	e2 0e       	add	r14, r18
    3c90:	f1 1c       	adc	r15, r1
    3c92:	9e 01       	movw	r18, r28
    3c94:	2f 5f       	subi	r18, 0xFF	; 255
    3c96:	3f 4f       	sbci	r19, 0xFF	; 255
    3c98:	af 01       	movw	r20, r30
    3c9a:	da 01       	movw	r26, r20
    3c9c:	8c 91       	ld	r24, X
    3c9e:	88 23       	and	r24, r24
    3ca0:	39 f0       	breq	.+14     	; 0x3cb0 <find_volume+0xd6>
    3ca2:	14 96       	adiw	r26, 0x04	; 4
    3ca4:	8d 91       	ld	r24, X+
    3ca6:	9d 91       	ld	r25, X+
    3ca8:	0d 90       	ld	r0, X+
    3caa:	bc 91       	ld	r27, X
    3cac:	a0 2d       	mov	r26, r0
    3cae:	03 c0       	rjmp	.+6      	; 0x3cb6 <find_volume+0xdc>
    3cb0:	80 e0       	ldi	r24, 0x00	; 0
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	dc 01       	movw	r26, r24
    3cb6:	f9 01       	movw	r30, r18
    3cb8:	81 93       	st	Z+, r24
    3cba:	91 93       	st	Z+, r25
    3cbc:	a1 93       	st	Z+, r26
    3cbe:	b1 93       	st	Z+, r27
    3cc0:	9f 01       	movw	r18, r30
    3cc2:	40 5f       	subi	r20, 0xF0	; 240
    3cc4:	5f 4f       	sbci	r21, 0xFF	; 255
    3cc6:	ee 15       	cp	r30, r14
    3cc8:	ff 05       	cpc	r31, r15
    3cca:	39 f7       	brne	.-50     	; 0x3c9a <find_volume+0xc0>
    3ccc:	9e 01       	movw	r18, r28
    3cce:	2f 5f       	subi	r18, 0xFF	; 255
    3cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    3cd2:	69 01       	movw	r12, r18
    3cd4:	d6 01       	movw	r26, r12
    3cd6:	4d 90       	ld	r4, X+
    3cd8:	5d 90       	ld	r5, X+
    3cda:	6d 90       	ld	r6, X+
    3cdc:	7d 90       	ld	r7, X+
    3cde:	6d 01       	movw	r12, r26
    3ce0:	41 14       	cp	r4, r1
    3ce2:	51 04       	cpc	r5, r1
    3ce4:	61 04       	cpc	r6, r1
    3ce6:	71 04       	cpc	r7, r1
    3ce8:	39 f0       	breq	.+14     	; 0x3cf8 <find_volume+0x11e>
    3cea:	b3 01       	movw	r22, r6
    3cec:	a2 01       	movw	r20, r4
    3cee:	c8 01       	movw	r24, r16
    3cf0:	12 df       	rcall	.-476    	; 0x3b16 <check_fs>
    3cf2:	81 11       	cpse	r24, r1
    3cf4:	02 c0       	rjmp	.+4      	; 0x3cfa <find_volume+0x120>
    3cf6:	08 c0       	rjmp	.+16     	; 0x3d08 <find_volume+0x12e>
    3cf8:	82 e0       	ldi	r24, 0x02	; 2
    3cfa:	ce 14       	cp	r12, r14
    3cfc:	df 04       	cpc	r13, r15
    3cfe:	51 f7       	brne	.-44     	; 0x3cd4 <find_volume+0xfa>
    3d00:	03 c0       	rjmp	.+6      	; 0x3d08 <find_volume+0x12e>
    3d02:	41 2c       	mov	r4, r1
    3d04:	51 2c       	mov	r5, r1
    3d06:	32 01       	movw	r6, r4
    3d08:	83 30       	cpi	r24, 0x03	; 3
    3d0a:	09 f4       	brne	.+2      	; 0x3d0e <find_volume+0x134>
    3d0c:	bf c1       	rjmp	.+894    	; 0x408c <find_volume+0x4b2>
    3d0e:	81 11       	cpse	r24, r1
    3d10:	bf c1       	rjmp	.+894    	; 0x4090 <find_volume+0x4b6>
    3d12:	f8 01       	movw	r30, r16
    3d14:	85 ad       	ldd	r24, Z+61	; 0x3d
    3d16:	96 ad       	ldd	r25, Z+62	; 0x3e
    3d18:	81 15       	cp	r24, r1
    3d1a:	92 40       	sbci	r25, 0x02	; 2
    3d1c:	09 f0       	breq	.+2      	; 0x3d20 <find_volume+0x146>
    3d1e:	ba c1       	rjmp	.+884    	; 0x4094 <find_volume+0x4ba>
    3d20:	f8 01       	movw	r30, r16
    3d22:	e8 5b       	subi	r30, 0xB8	; 184
    3d24:	ff 4f       	sbci	r31, 0xFF	; 255
    3d26:	c0 80       	ld	r12, Z
    3d28:	d1 80       	ldd	r13, Z+1	; 0x01
    3d2a:	e1 2c       	mov	r14, r1
    3d2c:	f1 2c       	mov	r15, r1
    3d2e:	c1 14       	cp	r12, r1
    3d30:	d1 04       	cpc	r13, r1
    3d32:	e1 04       	cpc	r14, r1
    3d34:	f1 04       	cpc	r15, r1
    3d36:	29 f4       	brne	.+10     	; 0x3d42 <find_volume+0x168>
    3d38:	3e 96       	adiw	r30, 0x0e	; 14
    3d3a:	c0 80       	ld	r12, Z
    3d3c:	d1 80       	ldd	r13, Z+1	; 0x01
    3d3e:	e2 80       	ldd	r14, Z+2	; 0x02
    3d40:	f3 80       	ldd	r15, Z+3	; 0x03
    3d42:	d8 01       	movw	r26, r16
    3d44:	5a 96       	adiw	r26, 0x1a	; 26
    3d46:	cd 92       	st	X+, r12
    3d48:	dd 92       	st	X+, r13
    3d4a:	ed 92       	st	X+, r14
    3d4c:	fc 92       	st	X, r15
    3d4e:	5d 97       	sbiw	r26, 0x1d	; 29
    3d50:	f8 01       	movw	r30, r16
    3d52:	ee 5b       	subi	r30, 0xBE	; 190
    3d54:	ff 4f       	sbci	r31, 0xFF	; 255
    3d56:	a0 81       	ld	r26, Z
    3d58:	f8 01       	movw	r30, r16
    3d5a:	a3 83       	std	Z+3, r26	; 0x03
    3d5c:	8f ef       	ldi	r24, 0xFF	; 255
    3d5e:	8a 0f       	add	r24, r26
    3d60:	82 30       	cpi	r24, 0x02	; 2
    3d62:	08 f0       	brcs	.+2      	; 0x3d66 <find_volume+0x18c>
    3d64:	99 c1       	rjmp	.+818    	; 0x4098 <find_volume+0x4be>
    3d66:	f7 ad       	ldd	r31, Z+63	; 0x3f
    3d68:	f9 8b       	std	Y+17, r31	; 0x11
    3d6a:	2f 2f       	mov	r18, r31
    3d6c:	f8 01       	movw	r30, r16
    3d6e:	22 83       	std	Z+2, r18	; 0x02
    3d70:	22 23       	and	r18, r18
    3d72:	09 f4       	brne	.+2      	; 0x3d76 <find_volume+0x19c>
    3d74:	93 c1       	rjmp	.+806    	; 0x409c <find_volume+0x4c2>
    3d76:	82 2f       	mov	r24, r18
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	9c 01       	movw	r18, r24
    3d7c:	21 50       	subi	r18, 0x01	; 1
    3d7e:	31 09       	sbc	r19, r1
    3d80:	82 23       	and	r24, r18
    3d82:	93 23       	and	r25, r19
    3d84:	89 2b       	or	r24, r25
    3d86:	09 f0       	breq	.+2      	; 0x3d8a <find_volume+0x1b0>
    3d88:	8b c1       	rjmp	.+790    	; 0x40a0 <find_volume+0x4c6>
    3d8a:	ed 5b       	subi	r30, 0xBD	; 189
    3d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8e:	20 80       	ld	r2, Z
    3d90:	31 80       	ldd	r3, Z+1	; 0x01
    3d92:	f8 01       	movw	r30, r16
    3d94:	20 86       	std	Z+8, r2	; 0x08
    3d96:	31 86       	std	Z+9, r3	; 0x09
    3d98:	c1 01       	movw	r24, r2
    3d9a:	8f 70       	andi	r24, 0x0F	; 15
    3d9c:	99 27       	eor	r25, r25
    3d9e:	89 2b       	or	r24, r25
    3da0:	09 f0       	breq	.+2      	; 0x3da4 <find_volume+0x1ca>
    3da2:	80 c1       	rjmp	.+768    	; 0x40a4 <find_volume+0x4ca>
    3da4:	eb 5b       	subi	r30, 0xBB	; 187
    3da6:	ff 4f       	sbci	r31, 0xFF	; 255
    3da8:	80 80       	ld	r8, Z
    3daa:	91 80       	ldd	r9, Z+1	; 0x01
    3dac:	a1 2c       	mov	r10, r1
    3dae:	b1 2c       	mov	r11, r1
    3db0:	81 14       	cp	r8, r1
    3db2:	91 04       	cpc	r9, r1
    3db4:	a1 04       	cpc	r10, r1
    3db6:	b1 04       	cpc	r11, r1
    3db8:	29 f4       	brne	.+10     	; 0x3dc4 <find_volume+0x1ea>
    3dba:	3d 96       	adiw	r30, 0x0d	; 13
    3dbc:	80 80       	ld	r8, Z
    3dbe:	91 80       	ldd	r9, Z+1	; 0x01
    3dc0:	a2 80       	ldd	r10, Z+2	; 0x02
    3dc2:	b3 80       	ldd	r11, Z+3	; 0x03
    3dc4:	f8 01       	movw	r30, r16
    3dc6:	e0 5c       	subi	r30, 0xC0	; 192
    3dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dca:	01 90       	ld	r0, Z+
    3dcc:	f0 81       	ld	r31, Z
    3dce:	e0 2d       	mov	r30, r0
    3dd0:	30 97       	sbiw	r30, 0x00	; 0
    3dd2:	09 f4       	brne	.+2      	; 0x3dd6 <find_volume+0x1fc>
    3dd4:	69 c1       	rjmp	.+722    	; 0x40a8 <find_volume+0x4ce>
    3dd6:	b0 e0       	ldi	r27, 0x00	; 0
    3dd8:	a7 01       	movw	r20, r14
    3dda:	96 01       	movw	r18, r12
    3ddc:	0e 94 4a 31 	call	0x6294	; 0x6294 <__muluhisi3>
    3de0:	6a 8f       	std	Y+26, r22	; 0x1a
    3de2:	7b 8f       	std	Y+27, r23	; 0x1b
    3de4:	8c 8f       	std	Y+28, r24	; 0x1c
    3de6:	9d 8f       	std	Y+29, r25	; 0x1d
    3de8:	9f 01       	movw	r18, r30
    3dea:	40 e0       	ldi	r20, 0x00	; 0
    3dec:	50 e0       	ldi	r21, 0x00	; 0
    3dee:	2e 8b       	std	Y+22, r18	; 0x16
    3df0:	3f 8b       	std	Y+23, r19	; 0x17
    3df2:	48 8f       	std	Y+24, r20	; 0x18
    3df4:	59 8f       	std	Y+25, r21	; 0x19
    3df6:	c1 01       	movw	r24, r2
    3df8:	92 95       	swap	r25
    3dfa:	82 95       	swap	r24
    3dfc:	8f 70       	andi	r24, 0x0F	; 15
    3dfe:	89 27       	eor	r24, r25
    3e00:	9f 70       	andi	r25, 0x0F	; 15
    3e02:	89 27       	eor	r24, r25
    3e04:	28 0f       	add	r18, r24
    3e06:	39 1f       	adc	r19, r25
    3e08:	41 1d       	adc	r20, r1
    3e0a:	51 1d       	adc	r21, r1
    3e0c:	da 01       	movw	r26, r20
    3e0e:	c9 01       	movw	r24, r18
    3e10:	2a 8d       	ldd	r18, Y+26	; 0x1a
    3e12:	3b 8d       	ldd	r19, Y+27	; 0x1b
    3e14:	4c 8d       	ldd	r20, Y+28	; 0x1c
    3e16:	5d 8d       	ldd	r21, Y+29	; 0x1d
    3e18:	28 0f       	add	r18, r24
    3e1a:	39 1f       	adc	r19, r25
    3e1c:	4a 1f       	adc	r20, r26
    3e1e:	5b 1f       	adc	r21, r27
    3e20:	2a 8b       	std	Y+18, r18	; 0x12
    3e22:	3b 8b       	std	Y+19, r19	; 0x13
    3e24:	4c 8b       	std	Y+20, r20	; 0x14
    3e26:	5d 8b       	std	Y+21, r21	; 0x15
    3e28:	82 16       	cp	r8, r18
    3e2a:	93 06       	cpc	r9, r19
    3e2c:	a4 06       	cpc	r10, r20
    3e2e:	b5 06       	cpc	r11, r21
    3e30:	08 f4       	brcc	.+2      	; 0x3e34 <find_volume+0x25a>
    3e32:	3c c1       	rjmp	.+632    	; 0x40ac <find_volume+0x4d2>
    3e34:	c5 01       	movw	r24, r10
    3e36:	b4 01       	movw	r22, r8
    3e38:	62 1b       	sub	r22, r18
    3e3a:	73 0b       	sbc	r23, r19
    3e3c:	84 0b       	sbc	r24, r20
    3e3e:	95 0b       	sbc	r25, r21
    3e40:	e9 89       	ldd	r30, Y+17	; 0x11
    3e42:	2e 2f       	mov	r18, r30
    3e44:	30 e0       	ldi	r19, 0x00	; 0
    3e46:	40 e0       	ldi	r20, 0x00	; 0
    3e48:	50 e0       	ldi	r21, 0x00	; 0
    3e4a:	0e 94 13 31 	call	0x6226	; 0x6226 <__udivmodsi4>
    3e4e:	da 01       	movw	r26, r20
    3e50:	c9 01       	movw	r24, r18
    3e52:	21 15       	cp	r18, r1
    3e54:	31 05       	cpc	r19, r1
    3e56:	41 05       	cpc	r20, r1
    3e58:	51 05       	cpc	r21, r1
    3e5a:	09 f4       	brne	.+2      	; 0x3e5e <find_volume+0x284>
    3e5c:	29 c1       	rjmp	.+594    	; 0x40b0 <find_volume+0x4d6>
    3e5e:	26 3f       	cpi	r18, 0xF6	; 246
    3e60:	ff e0       	ldi	r31, 0x0F	; 15
    3e62:	3f 07       	cpc	r19, r31
    3e64:	41 05       	cpc	r20, r1
    3e66:	51 05       	cpc	r21, r1
    3e68:	18 f4       	brcc	.+6      	; 0x3e70 <find_volume+0x296>
    3e6a:	61 e0       	ldi	r22, 0x01	; 1
    3e6c:	69 8b       	std	Y+17, r22	; 0x11
    3e6e:	02 c0       	rjmp	.+4      	; 0x3e74 <find_volume+0x29a>
    3e70:	e2 e0       	ldi	r30, 0x02	; 2
    3e72:	e9 8b       	std	Y+17, r30	; 0x11
    3e74:	86 3f       	cpi	r24, 0xF6	; 246
    3e76:	9f 4f       	sbci	r25, 0xFF	; 255
    3e78:	a1 05       	cpc	r26, r1
    3e7a:	b1 05       	cpc	r27, r1
    3e7c:	08 f0       	brcs	.+2      	; 0x3e80 <find_volume+0x2a6>
    3e7e:	20 c1       	rjmp	.+576    	; 0x40c0 <find_volume+0x4e6>
    3e80:	49 01       	movw	r8, r18
    3e82:	5a 01       	movw	r10, r20
    3e84:	62 e0       	ldi	r22, 0x02	; 2
    3e86:	86 0e       	add	r8, r22
    3e88:	91 1c       	adc	r9, r1
    3e8a:	a1 1c       	adc	r10, r1
    3e8c:	b1 1c       	adc	r11, r1
    3e8e:	d8 01       	movw	r26, r16
    3e90:	56 96       	adiw	r26, 0x16	; 22
    3e92:	8d 92       	st	X+, r8
    3e94:	9d 92       	st	X+, r9
    3e96:	ad 92       	st	X+, r10
    3e98:	bc 92       	st	X, r11
    3e9a:	59 97       	sbiw	r26, 0x19	; 25
    3e9c:	f8 01       	movw	r30, r16
    3e9e:	46 8e       	std	Z+30, r4	; 0x1e
    3ea0:	57 8e       	std	Z+31, r5	; 0x1f
    3ea2:	60 a2       	std	Z+32, r6	; 0x20
    3ea4:	71 a2       	std	Z+33, r7	; 0x21
    3ea6:	8e 89       	ldd	r24, Y+22	; 0x16
    3ea8:	9f 89       	ldd	r25, Y+23	; 0x17
    3eaa:	a8 8d       	ldd	r26, Y+24	; 0x18
    3eac:	b9 8d       	ldd	r27, Y+25	; 0x19
    3eae:	84 0d       	add	r24, r4
    3eb0:	95 1d       	adc	r25, r5
    3eb2:	a6 1d       	adc	r26, r6
    3eb4:	b7 1d       	adc	r27, r7
    3eb6:	82 a3       	std	Z+34, r24	; 0x22
    3eb8:	93 a3       	std	Z+35, r25	; 0x23
    3eba:	a4 a3       	std	Z+36, r26	; 0x24
    3ebc:	b5 a3       	std	Z+37, r27	; 0x25
    3ebe:	4a 89       	ldd	r20, Y+18	; 0x12
    3ec0:	5b 89       	ldd	r21, Y+19	; 0x13
    3ec2:	6c 89       	ldd	r22, Y+20	; 0x14
    3ec4:	7d 89       	ldd	r23, Y+21	; 0x15
    3ec6:	44 0d       	add	r20, r4
    3ec8:	55 1d       	adc	r21, r5
    3eca:	66 1d       	adc	r22, r6
    3ecc:	77 1d       	adc	r23, r7
    3ece:	42 a7       	std	Z+42, r20	; 0x2a
    3ed0:	53 a7       	std	Z+43, r21	; 0x2b
    3ed2:	64 a7       	std	Z+44, r22	; 0x2c
    3ed4:	75 a7       	std	Z+45, r23	; 0x2d
    3ed6:	f9 89       	ldd	r31, Y+17	; 0x11
    3ed8:	f3 30       	cpi	r31, 0x03	; 3
    3eda:	c1 f4       	brne	.+48     	; 0x3f0c <find_volume+0x332>
    3edc:	23 28       	or	r2, r3
    3ede:	09 f0       	breq	.+2      	; 0x3ee2 <find_volume+0x308>
    3ee0:	e9 c0       	rjmp	.+466    	; 0x40b4 <find_volume+0x4da>
    3ee2:	f8 01       	movw	r30, r16
    3ee4:	e2 5a       	subi	r30, 0xA2	; 162
    3ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee8:	80 81       	ld	r24, Z
    3eea:	91 81       	ldd	r25, Z+1	; 0x01
    3eec:	a2 81       	ldd	r26, Z+2	; 0x02
    3eee:	b3 81       	ldd	r27, Z+3	; 0x03
    3ef0:	f8 01       	movw	r30, r16
    3ef2:	86 a3       	std	Z+38, r24	; 0x26
    3ef4:	97 a3       	std	Z+39, r25	; 0x27
    3ef6:	a0 a7       	std	Z+40, r26	; 0x28
    3ef8:	b1 a7       	std	Z+41, r27	; 0x29
    3efa:	88 0c       	add	r8, r8
    3efc:	99 1c       	adc	r9, r9
    3efe:	aa 1c       	adc	r10, r10
    3f00:	bb 1c       	adc	r11, r11
    3f02:	88 0c       	add	r8, r8
    3f04:	99 1c       	adc	r9, r9
    3f06:	aa 1c       	adc	r10, r10
    3f08:	bb 1c       	adc	r11, r11
    3f0a:	2d c0       	rjmp	.+90     	; 0x3f66 <find_volume+0x38c>
    3f0c:	23 28       	or	r2, r3
    3f0e:	09 f4       	brne	.+2      	; 0x3f12 <find_volume+0x338>
    3f10:	d3 c0       	rjmp	.+422    	; 0x40b8 <find_volume+0x4de>
    3f12:	2a 8d       	ldd	r18, Y+26	; 0x1a
    3f14:	3b 8d       	ldd	r19, Y+27	; 0x1b
    3f16:	4c 8d       	ldd	r20, Y+28	; 0x1c
    3f18:	5d 8d       	ldd	r21, Y+29	; 0x1d
    3f1a:	82 0f       	add	r24, r18
    3f1c:	93 1f       	adc	r25, r19
    3f1e:	a4 1f       	adc	r26, r20
    3f20:	b5 1f       	adc	r27, r21
    3f22:	f8 01       	movw	r30, r16
    3f24:	86 a3       	std	Z+38, r24	; 0x26
    3f26:	97 a3       	std	Z+39, r25	; 0x27
    3f28:	a0 a7       	std	Z+40, r26	; 0x28
    3f2a:	b1 a7       	std	Z+41, r27	; 0x29
    3f2c:	f9 89       	ldd	r31, Y+17	; 0x11
    3f2e:	f2 30       	cpi	r31, 0x02	; 2
    3f30:	29 f4       	brne	.+10     	; 0x3f3c <find_volume+0x362>
    3f32:	88 0c       	add	r8, r8
    3f34:	99 1c       	adc	r9, r9
    3f36:	aa 1c       	adc	r10, r10
    3f38:	bb 1c       	adc	r11, r11
    3f3a:	15 c0       	rjmp	.+42     	; 0x3f66 <find_volume+0x38c>
    3f3c:	a3 e0       	ldi	r26, 0x03	; 3
    3f3e:	b0 e0       	ldi	r27, 0x00	; 0
    3f40:	a5 01       	movw	r20, r10
    3f42:	94 01       	movw	r18, r8
    3f44:	0e 94 4a 31 	call	0x6294	; 0x6294 <__muluhisi3>
    3f48:	dc 01       	movw	r26, r24
    3f4a:	cb 01       	movw	r24, r22
    3f4c:	b6 95       	lsr	r27
    3f4e:	a7 95       	ror	r26
    3f50:	97 95       	ror	r25
    3f52:	87 95       	ror	r24
    3f54:	21 e0       	ldi	r18, 0x01	; 1
    3f56:	82 22       	and	r8, r18
    3f58:	99 24       	eor	r9, r9
    3f5a:	aa 24       	eor	r10, r10
    3f5c:	bb 24       	eor	r11, r11
    3f5e:	88 0e       	add	r8, r24
    3f60:	99 1e       	adc	r9, r25
    3f62:	aa 1e       	adc	r10, r26
    3f64:	bb 1e       	adc	r11, r27
    3f66:	3f ef       	ldi	r19, 0xFF	; 255
    3f68:	83 0e       	add	r8, r19
    3f6a:	31 e0       	ldi	r19, 0x01	; 1
    3f6c:	93 1e       	adc	r9, r19
    3f6e:	a1 1c       	adc	r10, r1
    3f70:	b1 1c       	adc	r11, r1
    3f72:	07 2e       	mov	r0, r23
    3f74:	79 e0       	ldi	r23, 0x09	; 9
    3f76:	b6 94       	lsr	r11
    3f78:	a7 94       	ror	r10
    3f7a:	97 94       	ror	r9
    3f7c:	87 94       	ror	r8
    3f7e:	7a 95       	dec	r23
    3f80:	d1 f7       	brne	.-12     	; 0x3f76 <find_volume+0x39c>
    3f82:	70 2d       	mov	r23, r0
    3f84:	c8 14       	cp	r12, r8
    3f86:	d9 04       	cpc	r13, r9
    3f88:	ea 04       	cpc	r14, r10
    3f8a:	fb 04       	cpc	r15, r11
    3f8c:	08 f4       	brcc	.+2      	; 0x3f90 <find_volume+0x3b6>
    3f8e:	96 c0       	rjmp	.+300    	; 0x40bc <find_volume+0x4e2>
    3f90:	8f ef       	ldi	r24, 0xFF	; 255
    3f92:	9f ef       	ldi	r25, 0xFF	; 255
    3f94:	dc 01       	movw	r26, r24
    3f96:	f8 01       	movw	r30, r16
    3f98:	86 87       	std	Z+14, r24	; 0x0e
    3f9a:	97 87       	std	Z+15, r25	; 0x0f
    3f9c:	a0 8b       	std	Z+16, r26	; 0x10
    3f9e:	b1 8b       	std	Z+17, r27	; 0x11
    3fa0:	82 87       	std	Z+10, r24	; 0x0a
    3fa2:	93 87       	std	Z+11, r25	; 0x0b
    3fa4:	a4 87       	std	Z+12, r26	; 0x0c
    3fa6:	b5 87       	std	Z+13, r27	; 0x0d
    3fa8:	80 e8       	ldi	r24, 0x80	; 128
    3faa:	85 83       	std	Z+5, r24	; 0x05
    3fac:	f9 89       	ldd	r31, Y+17	; 0x11
    3fae:	f3 30       	cpi	r31, 0x03	; 3
    3fb0:	09 f0       	breq	.+2      	; 0x3fb4 <find_volume+0x3da>
    3fb2:	48 c0       	rjmp	.+144    	; 0x4044 <find_volume+0x46a>
    3fb4:	f8 01       	movw	r30, r16
    3fb6:	ee 59       	subi	r30, 0x9E	; 158
    3fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fba:	80 81       	ld	r24, Z
    3fbc:	91 81       	ldd	r25, Z+1	; 0x01
    3fbe:	01 97       	sbiw	r24, 0x01	; 1
    3fc0:	09 f0       	breq	.+2      	; 0x3fc4 <find_volume+0x3ea>
    3fc2:	40 c0       	rjmp	.+128    	; 0x4044 <find_volume+0x46a>
    3fc4:	b3 01       	movw	r22, r6
    3fc6:	a2 01       	movw	r20, r4
    3fc8:	4f 5f       	subi	r20, 0xFF	; 255
    3fca:	5f 4f       	sbci	r21, 0xFF	; 255
    3fcc:	6f 4f       	sbci	r22, 0xFF	; 255
    3fce:	7f 4f       	sbci	r23, 0xFF	; 255
    3fd0:	c8 01       	movw	r24, r16
    3fd2:	64 dd       	rcall	.-1336   	; 0x3a9c <move_window>
    3fd4:	81 11       	cpse	r24, r1
    3fd6:	36 c0       	rjmp	.+108    	; 0x4044 <find_volume+0x46a>
    3fd8:	d8 01       	movw	r26, r16
    3fda:	15 96       	adiw	r26, 0x05	; 5
    3fdc:	1c 92       	st	X, r1
    3fde:	f8 01       	movw	r30, r16
    3fe0:	e0 5d       	subi	r30, 0xD0	; 208
    3fe2:	fd 4f       	sbci	r31, 0xFD	; 253
    3fe4:	80 81       	ld	r24, Z
    3fe6:	91 81       	ldd	r25, Z+1	; 0x01
    3fe8:	85 35       	cpi	r24, 0x55	; 85
    3fea:	9a 4a       	sbci	r25, 0xAA	; 170
    3fec:	59 f5       	brne	.+86     	; 0x4044 <find_volume+0x46a>
    3fee:	f8 01       	movw	r30, r16
    3ff0:	82 a9       	ldd	r24, Z+50	; 0x32
    3ff2:	93 a9       	ldd	r25, Z+51	; 0x33
    3ff4:	a4 a9       	ldd	r26, Z+52	; 0x34
    3ff6:	b5 a9       	ldd	r27, Z+53	; 0x35
    3ff8:	82 35       	cpi	r24, 0x52	; 82
    3ffa:	92 45       	sbci	r25, 0x52	; 82
    3ffc:	a1 46       	sbci	r26, 0x61	; 97
    3ffe:	b1 44       	sbci	r27, 0x41	; 65
    4000:	09 f5       	brne	.+66     	; 0x4044 <find_volume+0x46a>
    4002:	f8 01       	movw	r30, r16
    4004:	ea 5e       	subi	r30, 0xEA	; 234
    4006:	fd 4f       	sbci	r31, 0xFD	; 253
    4008:	80 81       	ld	r24, Z
    400a:	91 81       	ldd	r25, Z+1	; 0x01
    400c:	a2 81       	ldd	r26, Z+2	; 0x02
    400e:	b3 81       	ldd	r27, Z+3	; 0x03
    4010:	82 37       	cpi	r24, 0x72	; 114
    4012:	92 47       	sbci	r25, 0x72	; 114
    4014:	a1 44       	sbci	r26, 0x41	; 65
    4016:	b1 46       	sbci	r27, 0x61	; 97
    4018:	a9 f4       	brne	.+42     	; 0x4044 <find_volume+0x46a>
    401a:	34 96       	adiw	r30, 0x04	; 4
    401c:	80 81       	ld	r24, Z
    401e:	91 81       	ldd	r25, Z+1	; 0x01
    4020:	a2 81       	ldd	r26, Z+2	; 0x02
    4022:	b3 81       	ldd	r27, Z+3	; 0x03
    4024:	f8 01       	movw	r30, r16
    4026:	86 87       	std	Z+14, r24	; 0x0e
    4028:	97 87       	std	Z+15, r25	; 0x0f
    402a:	a0 8b       	std	Z+16, r26	; 0x10
    402c:	b1 8b       	std	Z+17, r27	; 0x11
    402e:	e2 5e       	subi	r30, 0xE2	; 226
    4030:	fd 4f       	sbci	r31, 0xFD	; 253
    4032:	80 81       	ld	r24, Z
    4034:	91 81       	ldd	r25, Z+1	; 0x01
    4036:	a2 81       	ldd	r26, Z+2	; 0x02
    4038:	b3 81       	ldd	r27, Z+3	; 0x03
    403a:	f8 01       	movw	r30, r16
    403c:	82 87       	std	Z+10, r24	; 0x0a
    403e:	93 87       	std	Z+11, r25	; 0x0b
    4040:	a4 87       	std	Z+12, r26	; 0x0c
    4042:	b5 87       	std	Z+13, r27	; 0x0d
    4044:	e9 89       	ldd	r30, Y+17	; 0x11
    4046:	d8 01       	movw	r26, r16
    4048:	ec 93       	st	X, r30
    404a:	80 91 76 25 	lds	r24, 0x2576
    404e:	90 91 77 25 	lds	r25, 0x2577
    4052:	01 96       	adiw	r24, 0x01	; 1
    4054:	80 93 76 25 	sts	0x2576, r24
    4058:	90 93 77 25 	sts	0x2577, r25
    405c:	16 96       	adiw	r26, 0x06	; 6
    405e:	8d 93       	st	X+, r24
    4060:	9c 93       	st	X, r25
    4062:	17 97       	sbiw	r26, 0x07	; 7
    4064:	52 96       	adiw	r26, 0x12	; 18
    4066:	1d 92       	st	X+, r1
    4068:	1d 92       	st	X+, r1
    406a:	1d 92       	st	X+, r1
    406c:	1c 92       	st	X, r1
    406e:	55 97       	sbiw	r26, 0x15	; 21
    4070:	80 e0       	ldi	r24, 0x00	; 0
    4072:	51 c0       	rjmp	.+162    	; 0x4116 <find_volume+0x53c>
    4074:	8b e0       	ldi	r24, 0x0B	; 11
    4076:	4f c0       	rjmp	.+158    	; 0x4116 <find_volume+0x53c>
    4078:	8c e0       	ldi	r24, 0x0C	; 12
    407a:	4d c0       	rjmp	.+154    	; 0x4116 <find_volume+0x53c>
    407c:	80 e0       	ldi	r24, 0x00	; 0
    407e:	4b c0       	rjmp	.+150    	; 0x4116 <find_volume+0x53c>
    4080:	8a e0       	ldi	r24, 0x0A	; 10
    4082:	49 c0       	rjmp	.+146    	; 0x4116 <find_volume+0x53c>
    4084:	83 e0       	ldi	r24, 0x03	; 3
    4086:	47 c0       	rjmp	.+142    	; 0x4116 <find_volume+0x53c>
    4088:	8a e0       	ldi	r24, 0x0A	; 10
    408a:	45 c0       	rjmp	.+138    	; 0x4116 <find_volume+0x53c>
    408c:	81 e0       	ldi	r24, 0x01	; 1
    408e:	43 c0       	rjmp	.+134    	; 0x4116 <find_volume+0x53c>
    4090:	8d e0       	ldi	r24, 0x0D	; 13
    4092:	41 c0       	rjmp	.+130    	; 0x4116 <find_volume+0x53c>
    4094:	8d e0       	ldi	r24, 0x0D	; 13
    4096:	3f c0       	rjmp	.+126    	; 0x4116 <find_volume+0x53c>
    4098:	8d e0       	ldi	r24, 0x0D	; 13
    409a:	3d c0       	rjmp	.+122    	; 0x4116 <find_volume+0x53c>
    409c:	8d e0       	ldi	r24, 0x0D	; 13
    409e:	3b c0       	rjmp	.+118    	; 0x4116 <find_volume+0x53c>
    40a0:	8d e0       	ldi	r24, 0x0D	; 13
    40a2:	39 c0       	rjmp	.+114    	; 0x4116 <find_volume+0x53c>
    40a4:	8d e0       	ldi	r24, 0x0D	; 13
    40a6:	37 c0       	rjmp	.+110    	; 0x4116 <find_volume+0x53c>
    40a8:	8d e0       	ldi	r24, 0x0D	; 13
    40aa:	35 c0       	rjmp	.+106    	; 0x4116 <find_volume+0x53c>
    40ac:	8d e0       	ldi	r24, 0x0D	; 13
    40ae:	33 c0       	rjmp	.+102    	; 0x4116 <find_volume+0x53c>
    40b0:	8d e0       	ldi	r24, 0x0D	; 13
    40b2:	31 c0       	rjmp	.+98     	; 0x4116 <find_volume+0x53c>
    40b4:	8d e0       	ldi	r24, 0x0D	; 13
    40b6:	2f c0       	rjmp	.+94     	; 0x4116 <find_volume+0x53c>
    40b8:	8d e0       	ldi	r24, 0x0D	; 13
    40ba:	2d c0       	rjmp	.+90     	; 0x4116 <find_volume+0x53c>
    40bc:	8d e0       	ldi	r24, 0x0D	; 13
    40be:	2b c0       	rjmp	.+86     	; 0x4116 <find_volume+0x53c>
    40c0:	49 01       	movw	r8, r18
    40c2:	5a 01       	movw	r10, r20
    40c4:	b2 e0       	ldi	r27, 0x02	; 2
    40c6:	8b 0e       	add	r8, r27
    40c8:	91 1c       	adc	r9, r1
    40ca:	a1 1c       	adc	r10, r1
    40cc:	b1 1c       	adc	r11, r1
    40ce:	f8 01       	movw	r30, r16
    40d0:	86 8a       	std	Z+22, r8	; 0x16
    40d2:	97 8a       	std	Z+23, r9	; 0x17
    40d4:	a0 8e       	std	Z+24, r10	; 0x18
    40d6:	b1 8e       	std	Z+25, r11	; 0x19
    40d8:	46 8e       	std	Z+30, r4	; 0x1e
    40da:	57 8e       	std	Z+31, r5	; 0x1f
    40dc:	60 a2       	std	Z+32, r6	; 0x20
    40de:	71 a2       	std	Z+33, r7	; 0x21
    40e0:	8e 89       	ldd	r24, Y+22	; 0x16
    40e2:	9f 89       	ldd	r25, Y+23	; 0x17
    40e4:	a8 8d       	ldd	r26, Y+24	; 0x18
    40e6:	b9 8d       	ldd	r27, Y+25	; 0x19
    40e8:	84 0d       	add	r24, r4
    40ea:	95 1d       	adc	r25, r5
    40ec:	a6 1d       	adc	r26, r6
    40ee:	b7 1d       	adc	r27, r7
    40f0:	82 a3       	std	Z+34, r24	; 0x22
    40f2:	93 a3       	std	Z+35, r25	; 0x23
    40f4:	a4 a3       	std	Z+36, r26	; 0x24
    40f6:	b5 a3       	std	Z+37, r27	; 0x25
    40f8:	8a 89       	ldd	r24, Y+18	; 0x12
    40fa:	9b 89       	ldd	r25, Y+19	; 0x13
    40fc:	ac 89       	ldd	r26, Y+20	; 0x14
    40fe:	bd 89       	ldd	r27, Y+21	; 0x15
    4100:	84 0d       	add	r24, r4
    4102:	95 1d       	adc	r25, r5
    4104:	a6 1d       	adc	r26, r6
    4106:	b7 1d       	adc	r27, r7
    4108:	82 a7       	std	Z+42, r24	; 0x2a
    410a:	93 a7       	std	Z+43, r25	; 0x2b
    410c:	a4 a7       	std	Z+44, r26	; 0x2c
    410e:	b5 a7       	std	Z+45, r27	; 0x2d
    4110:	f3 e0       	ldi	r31, 0x03	; 3
    4112:	f9 8b       	std	Y+17, r31	; 0x11
    4114:	e3 ce       	rjmp	.-570    	; 0x3edc <find_volume+0x302>
    4116:	6d 96       	adiw	r28, 0x1d	; 29
    4118:	cd bf       	out	0x3d, r28	; 61
    411a:	de bf       	out	0x3e, r29	; 62
    411c:	df 91       	pop	r29
    411e:	cf 91       	pop	r28
    4120:	1f 91       	pop	r17
    4122:	0f 91       	pop	r16
    4124:	ff 90       	pop	r15
    4126:	ef 90       	pop	r14
    4128:	df 90       	pop	r13
    412a:	cf 90       	pop	r12
    412c:	bf 90       	pop	r11
    412e:	af 90       	pop	r10
    4130:	9f 90       	pop	r9
    4132:	8f 90       	pop	r8
    4134:	7f 90       	pop	r7
    4136:	6f 90       	pop	r6
    4138:	5f 90       	pop	r5
    413a:	4f 90       	pop	r4
    413c:	3f 90       	pop	r3
    413e:	2f 90       	pop	r2
    4140:	08 95       	ret

00004142 <sync_fs>:
    4142:	ef 92       	push	r14
    4144:	ff 92       	push	r15
    4146:	0f 93       	push	r16
    4148:	1f 93       	push	r17
    414a:	cf 93       	push	r28
    414c:	df 93       	push	r29
    414e:	ec 01       	movw	r28, r24
    4150:	3a dc       	rcall	.-1932   	; 0x39c6 <sync_window>
    4152:	98 2f       	mov	r25, r24
    4154:	81 11       	cpse	r24, r1
    4156:	5b c0       	rjmp	.+182    	; 0x420e <sync_fs+0xcc>
    4158:	88 81       	ld	r24, Y
    415a:	83 30       	cpi	r24, 0x03	; 3
    415c:	09 f0       	breq	.+2      	; 0x4160 <sync_fs+0x1e>
    415e:	4d c0       	rjmp	.+154    	; 0x41fa <sync_fs+0xb8>
    4160:	8d 81       	ldd	r24, Y+5	; 0x05
    4162:	81 30       	cpi	r24, 0x01	; 1
    4164:	09 f0       	breq	.+2      	; 0x4168 <sync_fs+0x26>
    4166:	49 c0       	rjmp	.+146    	; 0x41fa <sync_fs+0xb8>
    4168:	40 e0       	ldi	r20, 0x00	; 0
    416a:	52 e0       	ldi	r21, 0x02	; 2
    416c:	60 e0       	ldi	r22, 0x00	; 0
    416e:	70 e0       	ldi	r23, 0x00	; 0
    4170:	7e 01       	movw	r14, r28
    4172:	82 e3       	ldi	r24, 0x32	; 50
    4174:	e8 0e       	add	r14, r24
    4176:	f1 1c       	adc	r15, r1
    4178:	c7 01       	movw	r24, r14
    417a:	c7 db       	rcall	.-2162   	; 0x390a <mem_set>
    417c:	85 e5       	ldi	r24, 0x55	; 85
    417e:	9a ea       	ldi	r25, 0xAA	; 170
    4180:	fe 01       	movw	r30, r28
    4182:	e0 5d       	subi	r30, 0xD0	; 208
    4184:	fd 4f       	sbci	r31, 0xFD	; 253
    4186:	80 83       	st	Z, r24
    4188:	91 83       	std	Z+1, r25	; 0x01
    418a:	82 e5       	ldi	r24, 0x52	; 82
    418c:	92 e5       	ldi	r25, 0x52	; 82
    418e:	a1 e6       	ldi	r26, 0x61	; 97
    4190:	b1 e4       	ldi	r27, 0x41	; 65
    4192:	8a ab       	std	Y+50, r24	; 0x32
    4194:	9b ab       	std	Y+51, r25	; 0x33
    4196:	ac ab       	std	Y+52, r26	; 0x34
    4198:	bd ab       	std	Y+53, r27	; 0x35
    419a:	82 e7       	ldi	r24, 0x72	; 114
    419c:	92 e7       	ldi	r25, 0x72	; 114
    419e:	a1 e4       	ldi	r26, 0x41	; 65
    41a0:	b1 e6       	ldi	r27, 0x61	; 97
    41a2:	7a 97       	sbiw	r30, 0x1a	; 26
    41a4:	80 83       	st	Z, r24
    41a6:	91 83       	std	Z+1, r25	; 0x01
    41a8:	a2 83       	std	Z+2, r26	; 0x02
    41aa:	b3 83       	std	Z+3, r27	; 0x03
    41ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    41ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    41b0:	a8 89       	ldd	r26, Y+16	; 0x10
    41b2:	b9 89       	ldd	r27, Y+17	; 0x11
    41b4:	34 96       	adiw	r30, 0x04	; 4
    41b6:	80 83       	st	Z, r24
    41b8:	91 83       	std	Z+1, r25	; 0x01
    41ba:	a2 83       	std	Z+2, r26	; 0x02
    41bc:	b3 83       	std	Z+3, r27	; 0x03
    41be:	8a 85       	ldd	r24, Y+10	; 0x0a
    41c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    41c2:	ac 85       	ldd	r26, Y+12	; 0x0c
    41c4:	bd 85       	ldd	r27, Y+13	; 0x0d
    41c6:	34 96       	adiw	r30, 0x04	; 4
    41c8:	80 83       	st	Z, r24
    41ca:	91 83       	std	Z+1, r25	; 0x01
    41cc:	a2 83       	std	Z+2, r26	; 0x02
    41ce:	b3 83       	std	Z+3, r27	; 0x03
    41d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    41d2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    41d4:	a8 a1       	ldd	r26, Y+32	; 0x20
    41d6:	b9 a1       	ldd	r27, Y+33	; 0x21
    41d8:	9c 01       	movw	r18, r24
    41da:	ad 01       	movw	r20, r26
    41dc:	2f 5f       	subi	r18, 0xFF	; 255
    41de:	3f 4f       	sbci	r19, 0xFF	; 255
    41e0:	4f 4f       	sbci	r20, 0xFF	; 255
    41e2:	5f 4f       	sbci	r21, 0xFF	; 255
    41e4:	2e a7       	std	Y+46, r18	; 0x2e
    41e6:	3f a7       	std	Y+47, r19	; 0x2f
    41e8:	48 ab       	std	Y+48, r20	; 0x30
    41ea:	59 ab       	std	Y+49, r21	; 0x31
    41ec:	01 e0       	ldi	r16, 0x01	; 1
    41ee:	10 e0       	ldi	r17, 0x00	; 0
    41f0:	b7 01       	movw	r22, r14
    41f2:	89 81       	ldd	r24, Y+1	; 0x01
    41f4:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <disk_write>
    41f8:	1d 82       	std	Y+5, r1	; 0x05
    41fa:	40 e0       	ldi	r20, 0x00	; 0
    41fc:	50 e0       	ldi	r21, 0x00	; 0
    41fe:	60 e0       	ldi	r22, 0x00	; 0
    4200:	89 81       	ldd	r24, Y+1	; 0x01
    4202:	0e 94 db 2d 	call	0x5bb6	; 0x5bb6 <disk_ioctl>
    4206:	91 e0       	ldi	r25, 0x01	; 1
    4208:	81 11       	cpse	r24, r1
    420a:	01 c0       	rjmp	.+2      	; 0x420e <sync_fs+0xcc>
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	89 2f       	mov	r24, r25
    4210:	df 91       	pop	r29
    4212:	cf 91       	pop	r28
    4214:	1f 91       	pop	r17
    4216:	0f 91       	pop	r16
    4218:	ff 90       	pop	r15
    421a:	ef 90       	pop	r14
    421c:	08 95       	ret

0000421e <clust2sect>:
    421e:	cf 92       	push	r12
    4220:	df 92       	push	r13
    4222:	ef 92       	push	r14
    4224:	ff 92       	push	r15
    4226:	fc 01       	movw	r30, r24
    4228:	9a 01       	movw	r18, r20
    422a:	ab 01       	movw	r20, r22
    422c:	22 50       	subi	r18, 0x02	; 2
    422e:	31 09       	sbc	r19, r1
    4230:	41 09       	sbc	r20, r1
    4232:	51 09       	sbc	r21, r1
    4234:	c6 88       	ldd	r12, Z+22	; 0x16
    4236:	d7 88       	ldd	r13, Z+23	; 0x17
    4238:	e0 8c       	ldd	r14, Z+24	; 0x18
    423a:	f1 8c       	ldd	r15, Z+25	; 0x19
    423c:	82 e0       	ldi	r24, 0x02	; 2
    423e:	c8 1a       	sub	r12, r24
    4240:	d1 08       	sbc	r13, r1
    4242:	e1 08       	sbc	r14, r1
    4244:	f1 08       	sbc	r15, r1
    4246:	2c 15       	cp	r18, r12
    4248:	3d 05       	cpc	r19, r13
    424a:	4e 05       	cpc	r20, r14
    424c:	5f 05       	cpc	r21, r15
    424e:	68 f4       	brcc	.+26     	; 0x426a <clust2sect+0x4c>
    4250:	a2 81       	ldd	r26, Z+2	; 0x02
    4252:	b0 e0       	ldi	r27, 0x00	; 0
    4254:	0e 94 4a 31 	call	0x6294	; 0x6294 <__muluhisi3>
    4258:	c2 a4       	ldd	r12, Z+42	; 0x2a
    425a:	d3 a4       	ldd	r13, Z+43	; 0x2b
    425c:	e4 a4       	ldd	r14, Z+44	; 0x2c
    425e:	f5 a4       	ldd	r15, Z+45	; 0x2d
    4260:	6c 0d       	add	r22, r12
    4262:	7d 1d       	adc	r23, r13
    4264:	8e 1d       	adc	r24, r14
    4266:	9f 1d       	adc	r25, r15
    4268:	03 c0       	rjmp	.+6      	; 0x4270 <clust2sect+0x52>
    426a:	60 e0       	ldi	r22, 0x00	; 0
    426c:	70 e0       	ldi	r23, 0x00	; 0
    426e:	cb 01       	movw	r24, r22
    4270:	ff 90       	pop	r15
    4272:	ef 90       	pop	r14
    4274:	df 90       	pop	r13
    4276:	cf 90       	pop	r12
    4278:	08 95       	ret

0000427a <get_fat>:
    427a:	af 92       	push	r10
    427c:	bf 92       	push	r11
    427e:	cf 92       	push	r12
    4280:	df 92       	push	r13
    4282:	ef 92       	push	r14
    4284:	ff 92       	push	r15
    4286:	0f 93       	push	r16
    4288:	1f 93       	push	r17
    428a:	cf 93       	push	r28
    428c:	df 93       	push	r29
    428e:	ec 01       	movw	r28, r24
    4290:	6a 01       	movw	r12, r20
    4292:	7b 01       	movw	r14, r22
    4294:	42 30       	cpi	r20, 0x02	; 2
    4296:	51 05       	cpc	r21, r1
    4298:	61 05       	cpc	r22, r1
    429a:	71 05       	cpc	r23, r1
    429c:	08 f4       	brcc	.+2      	; 0x42a0 <get_fat+0x26>
    429e:	aa c0       	rjmp	.+340    	; 0x43f4 <get_fat+0x17a>
    42a0:	4e 89       	ldd	r20, Y+22	; 0x16
    42a2:	5f 89       	ldd	r21, Y+23	; 0x17
    42a4:	68 8d       	ldd	r22, Y+24	; 0x18
    42a6:	79 8d       	ldd	r23, Y+25	; 0x19
    42a8:	c4 16       	cp	r12, r20
    42aa:	d5 06       	cpc	r13, r21
    42ac:	e6 06       	cpc	r14, r22
    42ae:	f7 06       	cpc	r15, r23
    42b0:	08 f0       	brcs	.+2      	; 0x42b4 <get_fat+0x3a>
    42b2:	a5 c0       	rjmp	.+330    	; 0x43fe <get_fat+0x184>
    42b4:	88 81       	ld	r24, Y
    42b6:	82 30       	cpi	r24, 0x02	; 2
    42b8:	09 f4       	brne	.+2      	; 0x42bc <get_fat+0x42>
    42ba:	4b c0       	rjmp	.+150    	; 0x4352 <get_fat+0xd8>
    42bc:	83 30       	cpi	r24, 0x03	; 3
    42be:	09 f4       	brne	.+2      	; 0x42c2 <get_fat+0x48>
    42c0:	6a c0       	rjmp	.+212    	; 0x4396 <get_fat+0x11c>
    42c2:	81 30       	cpi	r24, 0x01	; 1
    42c4:	09 f0       	breq	.+2      	; 0x42c8 <get_fat+0x4e>
    42c6:	a0 c0       	rjmp	.+320    	; 0x4408 <get_fat+0x18e>
    42c8:	86 01       	movw	r16, r12
    42ca:	16 95       	lsr	r17
    42cc:	07 95       	ror	r16
    42ce:	0c 0d       	add	r16, r12
    42d0:	1d 1d       	adc	r17, r13
    42d2:	c8 01       	movw	r24, r16
    42d4:	89 2f       	mov	r24, r25
    42d6:	99 27       	eor	r25, r25
    42d8:	86 95       	lsr	r24
    42da:	4a a1       	ldd	r20, Y+34	; 0x22
    42dc:	5b a1       	ldd	r21, Y+35	; 0x23
    42de:	6c a1       	ldd	r22, Y+36	; 0x24
    42e0:	7d a1       	ldd	r23, Y+37	; 0x25
    42e2:	48 0f       	add	r20, r24
    42e4:	59 1f       	adc	r21, r25
    42e6:	61 1d       	adc	r22, r1
    42e8:	71 1d       	adc	r23, r1
    42ea:	ce 01       	movw	r24, r28
    42ec:	d7 db       	rcall	.-2130   	; 0x3a9c <move_window>
    42ee:	81 11       	cpse	r24, r1
    42f0:	90 c0       	rjmp	.+288    	; 0x4412 <get_fat+0x198>
    42f2:	58 01       	movw	r10, r16
    42f4:	8f ef       	ldi	r24, 0xFF	; 255
    42f6:	a8 1a       	sub	r10, r24
    42f8:	b8 0a       	sbc	r11, r24
    42fa:	11 70       	andi	r17, 0x01	; 1
    42fc:	fe 01       	movw	r30, r28
    42fe:	e0 0f       	add	r30, r16
    4300:	f1 1f       	adc	r31, r17
    4302:	12 a9       	ldd	r17, Z+50	; 0x32
    4304:	c5 01       	movw	r24, r10
    4306:	89 2f       	mov	r24, r25
    4308:	99 27       	eor	r25, r25
    430a:	86 95       	lsr	r24
    430c:	4a a1       	ldd	r20, Y+34	; 0x22
    430e:	5b a1       	ldd	r21, Y+35	; 0x23
    4310:	6c a1       	ldd	r22, Y+36	; 0x24
    4312:	7d a1       	ldd	r23, Y+37	; 0x25
    4314:	48 0f       	add	r20, r24
    4316:	59 1f       	adc	r21, r25
    4318:	61 1d       	adc	r22, r1
    431a:	71 1d       	adc	r23, r1
    431c:	ce 01       	movw	r24, r28
    431e:	be db       	rcall	.-2180   	; 0x3a9c <move_window>
    4320:	81 11       	cpse	r24, r1
    4322:	7b c0       	rjmp	.+246    	; 0x441a <get_fat+0x1a0>
    4324:	81 e0       	ldi	r24, 0x01	; 1
    4326:	b8 22       	and	r11, r24
    4328:	ca 0d       	add	r28, r10
    432a:	db 1d       	adc	r29, r11
    432c:	8a a9       	ldd	r24, Y+50	; 0x32
    432e:	61 2f       	mov	r22, r17
    4330:	70 e0       	ldi	r23, 0x00	; 0
    4332:	78 2b       	or	r23, r24
    4334:	c0 fe       	sbrs	r12, 0
    4336:	09 c0       	rjmp	.+18     	; 0x434a <get_fat+0xd0>
    4338:	72 95       	swap	r23
    433a:	62 95       	swap	r22
    433c:	6f 70       	andi	r22, 0x0F	; 15
    433e:	67 27       	eor	r22, r23
    4340:	7f 70       	andi	r23, 0x0F	; 15
    4342:	67 27       	eor	r22, r23
    4344:	80 e0       	ldi	r24, 0x00	; 0
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	73 c0       	rjmp	.+230    	; 0x4430 <get_fat+0x1b6>
    434a:	7f 70       	andi	r23, 0x0F	; 15
    434c:	80 e0       	ldi	r24, 0x00	; 0
    434e:	90 e0       	ldi	r25, 0x00	; 0
    4350:	6f c0       	rjmp	.+222    	; 0x4430 <get_fat+0x1b6>
    4352:	77 27       	eor	r23, r23
    4354:	6f 2d       	mov	r22, r15
    4356:	5e 2d       	mov	r21, r14
    4358:	4d 2d       	mov	r20, r13
    435a:	0a a1       	ldd	r16, Y+34	; 0x22
    435c:	1b a1       	ldd	r17, Y+35	; 0x23
    435e:	2c a1       	ldd	r18, Y+36	; 0x24
    4360:	3d a1       	ldd	r19, Y+37	; 0x25
    4362:	40 0f       	add	r20, r16
    4364:	51 1f       	adc	r21, r17
    4366:	62 1f       	adc	r22, r18
    4368:	73 1f       	adc	r23, r19
    436a:	ce 01       	movw	r24, r28
    436c:	97 db       	rcall	.-2258   	; 0x3a9c <move_window>
    436e:	81 11       	cpse	r24, r1
    4370:	58 c0       	rjmp	.+176    	; 0x4422 <get_fat+0x1a8>
    4372:	cc 0c       	add	r12, r12
    4374:	dd 1c       	adc	r13, r13
    4376:	ee 1c       	adc	r14, r14
    4378:	ff 1c       	adc	r15, r15
    437a:	e8 94       	clt
    437c:	c0 f8       	bld	r12, 0
    437e:	81 e0       	ldi	r24, 0x01	; 1
    4380:	d8 22       	and	r13, r24
    4382:	ee 24       	eor	r14, r14
    4384:	ff 24       	eor	r15, r15
    4386:	fe 01       	movw	r30, r28
    4388:	ec 0d       	add	r30, r12
    438a:	fd 1d       	adc	r31, r13
    438c:	62 a9       	ldd	r22, Z+50	; 0x32
    438e:	73 a9       	ldd	r23, Z+51	; 0x33
    4390:	80 e0       	ldi	r24, 0x00	; 0
    4392:	90 e0       	ldi	r25, 0x00	; 0
    4394:	4d c0       	rjmp	.+154    	; 0x4430 <get_fat+0x1b6>
    4396:	4a a1       	ldd	r20, Y+34	; 0x22
    4398:	5b a1       	ldd	r21, Y+35	; 0x23
    439a:	6c a1       	ldd	r22, Y+36	; 0x24
    439c:	7d a1       	ldd	r23, Y+37	; 0x25
    439e:	97 01       	movw	r18, r14
    43a0:	86 01       	movw	r16, r12
    43a2:	68 94       	set
    43a4:	16 f8       	bld	r1, 6
    43a6:	36 95       	lsr	r19
    43a8:	27 95       	ror	r18
    43aa:	17 95       	ror	r17
    43ac:	07 95       	ror	r16
    43ae:	16 94       	lsr	r1
    43b0:	d1 f7       	brne	.-12     	; 0x43a6 <get_fat+0x12c>
    43b2:	40 0f       	add	r20, r16
    43b4:	51 1f       	adc	r21, r17
    43b6:	62 1f       	adc	r22, r18
    43b8:	73 1f       	adc	r23, r19
    43ba:	ce 01       	movw	r24, r28
    43bc:	6f db       	rcall	.-2338   	; 0x3a9c <move_window>
    43be:	81 11       	cpse	r24, r1
    43c0:	34 c0       	rjmp	.+104    	; 0x442a <get_fat+0x1b0>
    43c2:	cc 0c       	add	r12, r12
    43c4:	dd 1c       	adc	r13, r13
    43c6:	ee 1c       	adc	r14, r14
    43c8:	ff 1c       	adc	r15, r15
    43ca:	cc 0c       	add	r12, r12
    43cc:	dd 1c       	adc	r13, r13
    43ce:	ee 1c       	adc	r14, r14
    43d0:	ff 1c       	adc	r15, r15
    43d2:	8c ef       	ldi	r24, 0xFC	; 252
    43d4:	c8 22       	and	r12, r24
    43d6:	81 e0       	ldi	r24, 0x01	; 1
    43d8:	d8 22       	and	r13, r24
    43da:	ee 24       	eor	r14, r14
    43dc:	ff 24       	eor	r15, r15
    43de:	fe 01       	movw	r30, r28
    43e0:	ec 0d       	add	r30, r12
    43e2:	fd 1d       	adc	r31, r13
    43e4:	82 a9       	ldd	r24, Z+50	; 0x32
    43e6:	93 a9       	ldd	r25, Z+51	; 0x33
    43e8:	a4 a9       	ldd	r26, Z+52	; 0x34
    43ea:	b5 a9       	ldd	r27, Z+53	; 0x35
    43ec:	bc 01       	movw	r22, r24
    43ee:	cd 01       	movw	r24, r26
    43f0:	9f 70       	andi	r25, 0x0F	; 15
    43f2:	1e c0       	rjmp	.+60     	; 0x4430 <get_fat+0x1b6>
    43f4:	61 e0       	ldi	r22, 0x01	; 1
    43f6:	70 e0       	ldi	r23, 0x00	; 0
    43f8:	80 e0       	ldi	r24, 0x00	; 0
    43fa:	90 e0       	ldi	r25, 0x00	; 0
    43fc:	19 c0       	rjmp	.+50     	; 0x4430 <get_fat+0x1b6>
    43fe:	61 e0       	ldi	r22, 0x01	; 1
    4400:	70 e0       	ldi	r23, 0x00	; 0
    4402:	80 e0       	ldi	r24, 0x00	; 0
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	14 c0       	rjmp	.+40     	; 0x4430 <get_fat+0x1b6>
    4408:	61 e0       	ldi	r22, 0x01	; 1
    440a:	70 e0       	ldi	r23, 0x00	; 0
    440c:	80 e0       	ldi	r24, 0x00	; 0
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	0f c0       	rjmp	.+30     	; 0x4430 <get_fat+0x1b6>
    4412:	6f ef       	ldi	r22, 0xFF	; 255
    4414:	7f ef       	ldi	r23, 0xFF	; 255
    4416:	cb 01       	movw	r24, r22
    4418:	0b c0       	rjmp	.+22     	; 0x4430 <get_fat+0x1b6>
    441a:	6f ef       	ldi	r22, 0xFF	; 255
    441c:	7f ef       	ldi	r23, 0xFF	; 255
    441e:	cb 01       	movw	r24, r22
    4420:	07 c0       	rjmp	.+14     	; 0x4430 <get_fat+0x1b6>
    4422:	6f ef       	ldi	r22, 0xFF	; 255
    4424:	7f ef       	ldi	r23, 0xFF	; 255
    4426:	cb 01       	movw	r24, r22
    4428:	03 c0       	rjmp	.+6      	; 0x4430 <get_fat+0x1b6>
    442a:	6f ef       	ldi	r22, 0xFF	; 255
    442c:	7f ef       	ldi	r23, 0xFF	; 255
    442e:	cb 01       	movw	r24, r22
    4430:	df 91       	pop	r29
    4432:	cf 91       	pop	r28
    4434:	1f 91       	pop	r17
    4436:	0f 91       	pop	r16
    4438:	ff 90       	pop	r15
    443a:	ef 90       	pop	r14
    443c:	df 90       	pop	r13
    443e:	cf 90       	pop	r12
    4440:	bf 90       	pop	r11
    4442:	af 90       	pop	r10
    4444:	08 95       	ret

00004446 <dir_sdi>:
    4446:	af 92       	push	r10
    4448:	bf 92       	push	r11
    444a:	cf 92       	push	r12
    444c:	df 92       	push	r13
    444e:	ef 92       	push	r14
    4450:	ff 92       	push	r15
    4452:	0f 93       	push	r16
    4454:	1f 93       	push	r17
    4456:	cf 93       	push	r28
    4458:	df 93       	push	r29
    445a:	ec 01       	movw	r28, r24
    445c:	8b 01       	movw	r16, r22
    445e:	6c 83       	std	Y+4, r22	; 0x04
    4460:	7d 83       	std	Y+5, r23	; 0x05
    4462:	ce 80       	ldd	r12, Y+6	; 0x06
    4464:	df 80       	ldd	r13, Y+7	; 0x07
    4466:	e8 84       	ldd	r14, Y+8	; 0x08
    4468:	f9 84       	ldd	r15, Y+9	; 0x09
    446a:	81 e0       	ldi	r24, 0x01	; 1
    446c:	c8 16       	cp	r12, r24
    446e:	d1 04       	cpc	r13, r1
    4470:	e1 04       	cpc	r14, r1
    4472:	f1 04       	cpc	r15, r1
    4474:	09 f4       	brne	.+2      	; 0x4478 <dir_sdi+0x32>
    4476:	8a c0       	rjmp	.+276    	; 0x458c <dir_sdi+0x146>
    4478:	e8 81       	ld	r30, Y
    447a:	f9 81       	ldd	r31, Y+1	; 0x01
    447c:	86 89       	ldd	r24, Z+22	; 0x16
    447e:	97 89       	ldd	r25, Z+23	; 0x17
    4480:	a0 8d       	ldd	r26, Z+24	; 0x18
    4482:	b1 8d       	ldd	r27, Z+25	; 0x19
    4484:	c8 16       	cp	r12, r24
    4486:	d9 06       	cpc	r13, r25
    4488:	ea 06       	cpc	r14, r26
    448a:	fb 06       	cpc	r15, r27
    448c:	08 f0       	brcs	.+2      	; 0x4490 <dir_sdi+0x4a>
    448e:	80 c0       	rjmp	.+256    	; 0x4590 <dir_sdi+0x14a>
    4490:	c1 14       	cp	r12, r1
    4492:	d1 04       	cpc	r13, r1
    4494:	e1 04       	cpc	r14, r1
    4496:	f1 04       	cpc	r15, r1
    4498:	c1 f4       	brne	.+48     	; 0x44ca <dir_sdi+0x84>
    449a:	80 81       	ld	r24, Z
    449c:	83 30       	cpi	r24, 0x03	; 3
    449e:	41 f4       	brne	.+16     	; 0x44b0 <dir_sdi+0x6a>
    44a0:	86 a1       	ldd	r24, Z+38	; 0x26
    44a2:	97 a1       	ldd	r25, Z+39	; 0x27
    44a4:	a0 a5       	ldd	r26, Z+40	; 0x28
    44a6:	b1 a5       	ldd	r27, Z+41	; 0x29
    44a8:	00 97       	sbiw	r24, 0x00	; 0
    44aa:	a1 05       	cpc	r26, r1
    44ac:	b1 05       	cpc	r27, r1
    44ae:	59 f4       	brne	.+22     	; 0x44c6 <dir_sdi+0x80>
    44b0:	80 85       	ldd	r24, Z+8	; 0x08
    44b2:	91 85       	ldd	r25, Z+9	; 0x09
    44b4:	08 17       	cp	r16, r24
    44b6:	19 07       	cpc	r17, r25
    44b8:	08 f0       	brcs	.+2      	; 0x44bc <dir_sdi+0x76>
    44ba:	6c c0       	rjmp	.+216    	; 0x4594 <dir_sdi+0x14e>
    44bc:	66 a1       	ldd	r22, Z+38	; 0x26
    44be:	77 a1       	ldd	r23, Z+39	; 0x27
    44c0:	80 a5       	ldd	r24, Z+40	; 0x28
    44c2:	91 a5       	ldd	r25, Z+41	; 0x29
    44c4:	35 c0       	rjmp	.+106    	; 0x4530 <dir_sdi+0xea>
    44c6:	6c 01       	movw	r12, r24
    44c8:	7d 01       	movw	r14, r26
    44ca:	a2 80       	ldd	r10, Z+2	; 0x02
    44cc:	80 e1       	ldi	r24, 0x10	; 16
    44ce:	a8 9e       	mul	r10, r24
    44d0:	50 01       	movw	r10, r0
    44d2:	11 24       	eor	r1, r1
    44d4:	0a 15       	cp	r16, r10
    44d6:	1b 05       	cpc	r17, r11
    44d8:	30 f1       	brcs	.+76     	; 0x4526 <dir_sdi+0xe0>
    44da:	b7 01       	movw	r22, r14
    44dc:	a6 01       	movw	r20, r12
    44de:	88 81       	ld	r24, Y
    44e0:	99 81       	ldd	r25, Y+1	; 0x01
    44e2:	cb de       	rcall	.-618    	; 0x427a <get_fat>
    44e4:	6b 01       	movw	r12, r22
    44e6:	7c 01       	movw	r14, r24
    44e8:	8f ef       	ldi	r24, 0xFF	; 255
    44ea:	c8 16       	cp	r12, r24
    44ec:	d8 06       	cpc	r13, r24
    44ee:	e8 06       	cpc	r14, r24
    44f0:	f8 06       	cpc	r15, r24
    44f2:	09 f4       	brne	.+2      	; 0x44f6 <dir_sdi+0xb0>
    44f4:	51 c0       	rjmp	.+162    	; 0x4598 <dir_sdi+0x152>
    44f6:	82 e0       	ldi	r24, 0x02	; 2
    44f8:	c8 16       	cp	r12, r24
    44fa:	d1 04       	cpc	r13, r1
    44fc:	e1 04       	cpc	r14, r1
    44fe:	f1 04       	cpc	r15, r1
    4500:	08 f4       	brcc	.+2      	; 0x4504 <dir_sdi+0xbe>
    4502:	4c c0       	rjmp	.+152    	; 0x459c <dir_sdi+0x156>
    4504:	e8 81       	ld	r30, Y
    4506:	f9 81       	ldd	r31, Y+1	; 0x01
    4508:	86 89       	ldd	r24, Z+22	; 0x16
    450a:	97 89       	ldd	r25, Z+23	; 0x17
    450c:	a0 8d       	ldd	r26, Z+24	; 0x18
    450e:	b1 8d       	ldd	r27, Z+25	; 0x19
    4510:	c8 16       	cp	r12, r24
    4512:	d9 06       	cpc	r13, r25
    4514:	ea 06       	cpc	r14, r26
    4516:	fb 06       	cpc	r15, r27
    4518:	08 f0       	brcs	.+2      	; 0x451c <dir_sdi+0xd6>
    451a:	42 c0       	rjmp	.+132    	; 0x45a0 <dir_sdi+0x15a>
    451c:	0a 19       	sub	r16, r10
    451e:	1b 09       	sbc	r17, r11
    4520:	0a 15       	cp	r16, r10
    4522:	1b 05       	cpc	r17, r11
    4524:	d0 f6       	brcc	.-76     	; 0x44da <dir_sdi+0x94>
    4526:	b7 01       	movw	r22, r14
    4528:	a6 01       	movw	r20, r12
    452a:	88 81       	ld	r24, Y
    452c:	99 81       	ldd	r25, Y+1	; 0x01
    452e:	77 de       	rcall	.-786    	; 0x421e <clust2sect>
    4530:	ca 86       	std	Y+10, r12	; 0x0a
    4532:	db 86       	std	Y+11, r13	; 0x0b
    4534:	ec 86       	std	Y+12, r14	; 0x0c
    4536:	fd 86       	std	Y+13, r15	; 0x0d
    4538:	61 15       	cp	r22, r1
    453a:	71 05       	cpc	r23, r1
    453c:	81 05       	cpc	r24, r1
    453e:	91 05       	cpc	r25, r1
    4540:	89 f1       	breq	.+98     	; 0x45a4 <dir_sdi+0x15e>
    4542:	98 01       	movw	r18, r16
    4544:	32 95       	swap	r19
    4546:	22 95       	swap	r18
    4548:	2f 70       	andi	r18, 0x0F	; 15
    454a:	23 27       	eor	r18, r19
    454c:	3f 70       	andi	r19, 0x0F	; 15
    454e:	23 27       	eor	r18, r19
    4550:	dc 01       	movw	r26, r24
    4552:	cb 01       	movw	r24, r22
    4554:	82 0f       	add	r24, r18
    4556:	93 1f       	adc	r25, r19
    4558:	a1 1d       	adc	r26, r1
    455a:	b1 1d       	adc	r27, r1
    455c:	8e 87       	std	Y+14, r24	; 0x0e
    455e:	9f 87       	std	Y+15, r25	; 0x0f
    4560:	a8 8b       	std	Y+16, r26	; 0x10
    4562:	b9 8b       	std	Y+17, r27	; 0x11
    4564:	0f 70       	andi	r16, 0x0F	; 15
    4566:	11 27       	eor	r17, r17
    4568:	c8 01       	movw	r24, r16
    456a:	88 0f       	add	r24, r24
    456c:	99 1f       	adc	r25, r25
    456e:	82 95       	swap	r24
    4570:	92 95       	swap	r25
    4572:	90 7f       	andi	r25, 0xF0	; 240
    4574:	98 27       	eor	r25, r24
    4576:	80 7f       	andi	r24, 0xF0	; 240
    4578:	98 27       	eor	r25, r24
    457a:	c2 96       	adiw	r24, 0x32	; 50
    457c:	28 81       	ld	r18, Y
    457e:	39 81       	ldd	r19, Y+1	; 0x01
    4580:	82 0f       	add	r24, r18
    4582:	93 1f       	adc	r25, r19
    4584:	8a 8b       	std	Y+18, r24	; 0x12
    4586:	9b 8b       	std	Y+19, r25	; 0x13
    4588:	80 e0       	ldi	r24, 0x00	; 0
    458a:	0d c0       	rjmp	.+26     	; 0x45a6 <dir_sdi+0x160>
    458c:	82 e0       	ldi	r24, 0x02	; 2
    458e:	0b c0       	rjmp	.+22     	; 0x45a6 <dir_sdi+0x160>
    4590:	82 e0       	ldi	r24, 0x02	; 2
    4592:	09 c0       	rjmp	.+18     	; 0x45a6 <dir_sdi+0x160>
    4594:	82 e0       	ldi	r24, 0x02	; 2
    4596:	07 c0       	rjmp	.+14     	; 0x45a6 <dir_sdi+0x160>
    4598:	81 e0       	ldi	r24, 0x01	; 1
    459a:	05 c0       	rjmp	.+10     	; 0x45a6 <dir_sdi+0x160>
    459c:	82 e0       	ldi	r24, 0x02	; 2
    459e:	03 c0       	rjmp	.+6      	; 0x45a6 <dir_sdi+0x160>
    45a0:	82 e0       	ldi	r24, 0x02	; 2
    45a2:	01 c0       	rjmp	.+2      	; 0x45a6 <dir_sdi+0x160>
    45a4:	82 e0       	ldi	r24, 0x02	; 2
    45a6:	df 91       	pop	r29
    45a8:	cf 91       	pop	r28
    45aa:	1f 91       	pop	r17
    45ac:	0f 91       	pop	r16
    45ae:	ff 90       	pop	r15
    45b0:	ef 90       	pop	r14
    45b2:	df 90       	pop	r13
    45b4:	cf 90       	pop	r12
    45b6:	bf 90       	pop	r11
    45b8:	af 90       	pop	r10
    45ba:	08 95       	ret

000045bc <put_fat>:
    45bc:	4f 92       	push	r4
    45be:	5f 92       	push	r5
    45c0:	6f 92       	push	r6
    45c2:	7f 92       	push	r7
    45c4:	8f 92       	push	r8
    45c6:	9f 92       	push	r9
    45c8:	af 92       	push	r10
    45ca:	bf 92       	push	r11
    45cc:	cf 92       	push	r12
    45ce:	df 92       	push	r13
    45d0:	ef 92       	push	r14
    45d2:	ff 92       	push	r15
    45d4:	0f 93       	push	r16
    45d6:	1f 93       	push	r17
    45d8:	cf 93       	push	r28
    45da:	df 93       	push	r29
    45dc:	ec 01       	movw	r28, r24
    45de:	6a 01       	movw	r12, r20
    45e0:	7b 01       	movw	r14, r22
    45e2:	28 01       	movw	r4, r16
    45e4:	39 01       	movw	r6, r18
    45e6:	42 30       	cpi	r20, 0x02	; 2
    45e8:	51 05       	cpc	r21, r1
    45ea:	61 05       	cpc	r22, r1
    45ec:	71 05       	cpc	r23, r1
    45ee:	08 f4       	brcc	.+2      	; 0x45f2 <put_fat+0x36>
    45f0:	d7 c0       	rjmp	.+430    	; 0x47a0 <put_fat+0x1e4>
    45f2:	8e 89       	ldd	r24, Y+22	; 0x16
    45f4:	9f 89       	ldd	r25, Y+23	; 0x17
    45f6:	a8 8d       	ldd	r26, Y+24	; 0x18
    45f8:	b9 8d       	ldd	r27, Y+25	; 0x19
    45fa:	48 17       	cp	r20, r24
    45fc:	59 07       	cpc	r21, r25
    45fe:	6a 07       	cpc	r22, r26
    4600:	7b 07       	cpc	r23, r27
    4602:	08 f0       	brcs	.+2      	; 0x4606 <put_fat+0x4a>
    4604:	cf c0       	rjmp	.+414    	; 0x47a4 <put_fat+0x1e8>
    4606:	88 81       	ld	r24, Y
    4608:	82 30       	cpi	r24, 0x02	; 2
    460a:	09 f4       	brne	.+2      	; 0x460e <put_fat+0x52>
    460c:	69 c0       	rjmp	.+210    	; 0x46e0 <put_fat+0x124>
    460e:	83 30       	cpi	r24, 0x03	; 3
    4610:	09 f4       	brne	.+2      	; 0x4614 <put_fat+0x58>
    4612:	8b c0       	rjmp	.+278    	; 0x472a <put_fat+0x16e>
    4614:	81 30       	cpi	r24, 0x01	; 1
    4616:	09 f0       	breq	.+2      	; 0x461a <put_fat+0x5e>
    4618:	c7 c0       	rjmp	.+398    	; 0x47a8 <put_fat+0x1ec>
    461a:	5a 01       	movw	r10, r20
    461c:	b6 94       	lsr	r11
    461e:	a7 94       	ror	r10
    4620:	a4 0e       	add	r10, r20
    4622:	b5 1e       	adc	r11, r21
    4624:	c5 01       	movw	r24, r10
    4626:	89 2f       	mov	r24, r25
    4628:	99 27       	eor	r25, r25
    462a:	86 95       	lsr	r24
    462c:	4a a1       	ldd	r20, Y+34	; 0x22
    462e:	5b a1       	ldd	r21, Y+35	; 0x23
    4630:	6c a1       	ldd	r22, Y+36	; 0x24
    4632:	7d a1       	ldd	r23, Y+37	; 0x25
    4634:	48 0f       	add	r20, r24
    4636:	59 1f       	adc	r21, r25
    4638:	61 1d       	adc	r22, r1
    463a:	71 1d       	adc	r23, r1
    463c:	ce 01       	movw	r24, r28
    463e:	2e da       	rcall	.-2980   	; 0x3a9c <move_window>
    4640:	81 11       	cpse	r24, r1
    4642:	b3 c0       	rjmp	.+358    	; 0x47aa <put_fat+0x1ee>
    4644:	85 01       	movw	r16, r10
    4646:	0f 5f       	subi	r16, 0xFF	; 255
    4648:	1f 4f       	sbci	r17, 0xFF	; 255
    464a:	c5 01       	movw	r24, r10
    464c:	91 70       	andi	r25, 0x01	; 1
    464e:	46 01       	movw	r8, r12
    4650:	57 01       	movw	r10, r14
    4652:	51 e0       	ldi	r21, 0x01	; 1
    4654:	85 22       	and	r8, r21
    4656:	99 24       	eor	r9, r9
    4658:	aa 24       	eor	r10, r10
    465a:	bb 24       	eor	r11, r11
    465c:	c0 fe       	sbrs	r12, 0
    465e:	0b c0       	rjmp	.+22     	; 0x4676 <put_fat+0xba>
    4660:	fe 01       	movw	r30, r28
    4662:	e8 0f       	add	r30, r24
    4664:	f9 1f       	adc	r31, r25
    4666:	42 a9       	ldd	r20, Z+50	; 0x32
    4668:	4f 70       	andi	r20, 0x0F	; 15
    466a:	50 e1       	ldi	r21, 0x10	; 16
    466c:	45 9e       	mul	r4, r21
    466e:	90 01       	movw	r18, r0
    4670:	11 24       	eor	r1, r1
    4672:	24 2b       	or	r18, r20
    4674:	01 c0       	rjmp	.+2      	; 0x4678 <put_fat+0xbc>
    4676:	24 2d       	mov	r18, r4
    4678:	fe 01       	movw	r30, r28
    467a:	e8 0f       	add	r30, r24
    467c:	f9 1f       	adc	r31, r25
    467e:	22 ab       	std	Z+50, r18	; 0x32
    4680:	81 e0       	ldi	r24, 0x01	; 1
    4682:	8c 83       	std	Y+4, r24	; 0x04
    4684:	4a a1       	ldd	r20, Y+34	; 0x22
    4686:	5b a1       	ldd	r21, Y+35	; 0x23
    4688:	6c a1       	ldd	r22, Y+36	; 0x24
    468a:	7d a1       	ldd	r23, Y+37	; 0x25
    468c:	c8 01       	movw	r24, r16
    468e:	89 2f       	mov	r24, r25
    4690:	99 27       	eor	r25, r25
    4692:	86 95       	lsr	r24
    4694:	48 0f       	add	r20, r24
    4696:	59 1f       	adc	r21, r25
    4698:	61 1d       	adc	r22, r1
    469a:	71 1d       	adc	r23, r1
    469c:	ce 01       	movw	r24, r28
    469e:	fe d9       	rcall	.-3076   	; 0x3a9c <move_window>
    46a0:	81 11       	cpse	r24, r1
    46a2:	83 c0       	rjmp	.+262    	; 0x47aa <put_fat+0x1ee>
    46a4:	11 70       	andi	r17, 0x01	; 1
    46a6:	89 28       	or	r8, r9
    46a8:	8a 28       	or	r8, r10
    46aa:	8b 28       	or	r8, r11
    46ac:	49 f0       	breq	.+18     	; 0x46c0 <put_fat+0x104>
    46ae:	68 94       	set
    46b0:	13 f8       	bld	r1, 3
    46b2:	76 94       	lsr	r7
    46b4:	67 94       	ror	r6
    46b6:	57 94       	ror	r5
    46b8:	47 94       	ror	r4
    46ba:	16 94       	lsr	r1
    46bc:	d1 f7       	brne	.-12     	; 0x46b2 <put_fat+0xf6>
    46be:	09 c0       	rjmp	.+18     	; 0x46d2 <put_fat+0x116>
    46c0:	fe 01       	movw	r30, r28
    46c2:	e0 0f       	add	r30, r16
    46c4:	f1 1f       	adc	r31, r17
    46c6:	22 a9       	ldd	r18, Z+50	; 0x32
    46c8:	20 7f       	andi	r18, 0xF0	; 240
    46ca:	95 2d       	mov	r25, r5
    46cc:	9f 70       	andi	r25, 0x0F	; 15
    46ce:	42 2e       	mov	r4, r18
    46d0:	49 2a       	or	r4, r25
    46d2:	fe 01       	movw	r30, r28
    46d4:	e0 0f       	add	r30, r16
    46d6:	f1 1f       	adc	r31, r17
    46d8:	42 aa       	std	Z+50, r4	; 0x32
    46da:	91 e0       	ldi	r25, 0x01	; 1
    46dc:	9c 83       	std	Y+4, r25	; 0x04
    46de:	65 c0       	rjmp	.+202    	; 0x47aa <put_fat+0x1ee>
    46e0:	45 2f       	mov	r20, r21
    46e2:	56 2f       	mov	r21, r22
    46e4:	67 2f       	mov	r22, r23
    46e6:	77 27       	eor	r23, r23
    46e8:	8a a1       	ldd	r24, Y+34	; 0x22
    46ea:	9b a1       	ldd	r25, Y+35	; 0x23
    46ec:	ac a1       	ldd	r26, Y+36	; 0x24
    46ee:	bd a1       	ldd	r27, Y+37	; 0x25
    46f0:	48 0f       	add	r20, r24
    46f2:	59 1f       	adc	r21, r25
    46f4:	6a 1f       	adc	r22, r26
    46f6:	7b 1f       	adc	r23, r27
    46f8:	ce 01       	movw	r24, r28
    46fa:	d0 d9       	rcall	.-3168   	; 0x3a9c <move_window>
    46fc:	81 11       	cpse	r24, r1
    46fe:	55 c0       	rjmp	.+170    	; 0x47aa <put_fat+0x1ee>
    4700:	cc 0c       	add	r12, r12
    4702:	dd 1c       	adc	r13, r13
    4704:	ee 1c       	adc	r14, r14
    4706:	ff 1c       	adc	r15, r15
    4708:	e8 94       	clt
    470a:	c0 f8       	bld	r12, 0
    470c:	91 e0       	ldi	r25, 0x01	; 1
    470e:	d9 22       	and	r13, r25
    4710:	ee 24       	eor	r14, r14
    4712:	ff 24       	eor	r15, r15
    4714:	22 e3       	ldi	r18, 0x32	; 50
    4716:	c2 0e       	add	r12, r18
    4718:	d1 1c       	adc	r13, r1
    471a:	fe 01       	movw	r30, r28
    471c:	ec 0d       	add	r30, r12
    471e:	fd 1d       	adc	r31, r13
    4720:	40 82       	st	Z, r4
    4722:	51 82       	std	Z+1, r5	; 0x01
    4724:	91 e0       	ldi	r25, 0x01	; 1
    4726:	9c 83       	std	Y+4, r25	; 0x04
    4728:	40 c0       	rjmp	.+128    	; 0x47aa <put_fat+0x1ee>
    472a:	8a a1       	ldd	r24, Y+34	; 0x22
    472c:	9b a1       	ldd	r25, Y+35	; 0x23
    472e:	ac a1       	ldd	r26, Y+36	; 0x24
    4730:	bd a1       	ldd	r27, Y+37	; 0x25
    4732:	68 94       	set
    4734:	16 f8       	bld	r1, 6
    4736:	76 95       	lsr	r23
    4738:	67 95       	ror	r22
    473a:	57 95       	ror	r21
    473c:	47 95       	ror	r20
    473e:	16 94       	lsr	r1
    4740:	d1 f7       	brne	.-12     	; 0x4736 <put_fat+0x17a>
    4742:	48 0f       	add	r20, r24
    4744:	59 1f       	adc	r21, r25
    4746:	6a 1f       	adc	r22, r26
    4748:	7b 1f       	adc	r23, r27
    474a:	ce 01       	movw	r24, r28
    474c:	a7 d9       	rcall	.-3250   	; 0x3a9c <move_window>
    474e:	81 11       	cpse	r24, r1
    4750:	2c c0       	rjmp	.+88     	; 0x47aa <put_fat+0x1ee>
    4752:	cc 0c       	add	r12, r12
    4754:	dd 1c       	adc	r13, r13
    4756:	ee 1c       	adc	r14, r14
    4758:	ff 1c       	adc	r15, r15
    475a:	cc 0c       	add	r12, r12
    475c:	dd 1c       	adc	r13, r13
    475e:	ee 1c       	adc	r14, r14
    4760:	ff 1c       	adc	r15, r15
    4762:	5c ef       	ldi	r21, 0xFC	; 252
    4764:	c5 22       	and	r12, r21
    4766:	51 e0       	ldi	r21, 0x01	; 1
    4768:	d5 22       	and	r13, r21
    476a:	ee 24       	eor	r14, r14
    476c:	ff 24       	eor	r15, r15
    476e:	92 e3       	ldi	r25, 0x32	; 50
    4770:	c9 0e       	add	r12, r25
    4772:	d1 1c       	adc	r13, r1
    4774:	fe 01       	movw	r30, r28
    4776:	ec 0d       	add	r30, r12
    4778:	fd 1d       	adc	r31, r13
    477a:	40 81       	ld	r20, Z
    477c:	51 81       	ldd	r21, Z+1	; 0x01
    477e:	62 81       	ldd	r22, Z+2	; 0x02
    4780:	73 81       	ldd	r23, Z+3	; 0x03
    4782:	44 27       	eor	r20, r20
    4784:	55 27       	eor	r21, r21
    4786:	66 27       	eor	r22, r22
    4788:	70 7f       	andi	r23, 0xF0	; 240
    478a:	44 2a       	or	r4, r20
    478c:	55 2a       	or	r5, r21
    478e:	66 2a       	or	r6, r22
    4790:	77 2a       	or	r7, r23
    4792:	40 82       	st	Z, r4
    4794:	51 82       	std	Z+1, r5	; 0x01
    4796:	62 82       	std	Z+2, r6	; 0x02
    4798:	73 82       	std	Z+3, r7	; 0x03
    479a:	91 e0       	ldi	r25, 0x01	; 1
    479c:	9c 83       	std	Y+4, r25	; 0x04
    479e:	05 c0       	rjmp	.+10     	; 0x47aa <put_fat+0x1ee>
    47a0:	82 e0       	ldi	r24, 0x02	; 2
    47a2:	03 c0       	rjmp	.+6      	; 0x47aa <put_fat+0x1ee>
    47a4:	82 e0       	ldi	r24, 0x02	; 2
    47a6:	01 c0       	rjmp	.+2      	; 0x47aa <put_fat+0x1ee>
    47a8:	82 e0       	ldi	r24, 0x02	; 2
    47aa:	df 91       	pop	r29
    47ac:	cf 91       	pop	r28
    47ae:	1f 91       	pop	r17
    47b0:	0f 91       	pop	r16
    47b2:	ff 90       	pop	r15
    47b4:	ef 90       	pop	r14
    47b6:	df 90       	pop	r13
    47b8:	cf 90       	pop	r12
    47ba:	bf 90       	pop	r11
    47bc:	af 90       	pop	r10
    47be:	9f 90       	pop	r9
    47c0:	8f 90       	pop	r8
    47c2:	7f 90       	pop	r7
    47c4:	6f 90       	pop	r6
    47c6:	5f 90       	pop	r5
    47c8:	4f 90       	pop	r4
    47ca:	08 95       	ret

000047cc <create_chain>:
    47cc:	4f 92       	push	r4
    47ce:	5f 92       	push	r5
    47d0:	6f 92       	push	r6
    47d2:	7f 92       	push	r7
    47d4:	8f 92       	push	r8
    47d6:	9f 92       	push	r9
    47d8:	af 92       	push	r10
    47da:	bf 92       	push	r11
    47dc:	cf 92       	push	r12
    47de:	df 92       	push	r13
    47e0:	ef 92       	push	r14
    47e2:	ff 92       	push	r15
    47e4:	0f 93       	push	r16
    47e6:	1f 93       	push	r17
    47e8:	cf 93       	push	r28
    47ea:	df 93       	push	r29
    47ec:	ec 01       	movw	r28, r24
    47ee:	2a 01       	movw	r4, r20
    47f0:	3b 01       	movw	r6, r22
    47f2:	41 15       	cp	r20, r1
    47f4:	51 05       	cpc	r21, r1
    47f6:	61 05       	cpc	r22, r1
    47f8:	71 05       	cpc	r23, r1
    47fa:	99 f4       	brne	.+38     	; 0x4822 <create_chain+0x56>
    47fc:	8a 84       	ldd	r8, Y+10	; 0x0a
    47fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    4800:	ac 84       	ldd	r10, Y+12	; 0x0c
    4802:	bd 84       	ldd	r11, Y+13	; 0x0d
    4804:	81 14       	cp	r8, r1
    4806:	91 04       	cpc	r9, r1
    4808:	a1 04       	cpc	r10, r1
    480a:	b1 04       	cpc	r11, r1
    480c:	29 f1       	breq	.+74     	; 0x4858 <create_chain+0x8c>
    480e:	8e 89       	ldd	r24, Y+22	; 0x16
    4810:	9f 89       	ldd	r25, Y+23	; 0x17
    4812:	a8 8d       	ldd	r26, Y+24	; 0x18
    4814:	b9 8d       	ldd	r27, Y+25	; 0x19
    4816:	88 16       	cp	r8, r24
    4818:	99 06       	cpc	r9, r25
    481a:	aa 06       	cpc	r10, r26
    481c:	bb 06       	cpc	r11, r27
    481e:	08 f5       	brcc	.+66     	; 0x4862 <create_chain+0x96>
    4820:	24 c0       	rjmp	.+72     	; 0x486a <create_chain+0x9e>
    4822:	2b dd       	rcall	.-1450   	; 0x427a <get_fat>
    4824:	62 30       	cpi	r22, 0x02	; 2
    4826:	71 05       	cpc	r23, r1
    4828:	81 05       	cpc	r24, r1
    482a:	91 05       	cpc	r25, r1
    482c:	08 f4       	brcc	.+2      	; 0x4830 <create_chain+0x64>
    482e:	96 c0       	rjmp	.+300    	; 0x495c <create_chain+0x190>
    4830:	6f 3f       	cpi	r22, 0xFF	; 255
    4832:	2f ef       	ldi	r18, 0xFF	; 255
    4834:	72 07       	cpc	r23, r18
    4836:	82 07       	cpc	r24, r18
    4838:	92 07       	cpc	r25, r18
    483a:	09 f4       	brne	.+2      	; 0x483e <create_chain+0x72>
    483c:	94 c0       	rjmp	.+296    	; 0x4966 <create_chain+0x19a>
    483e:	ce 88       	ldd	r12, Y+22	; 0x16
    4840:	df 88       	ldd	r13, Y+23	; 0x17
    4842:	e8 8c       	ldd	r14, Y+24	; 0x18
    4844:	f9 8c       	ldd	r15, Y+25	; 0x19
    4846:	6c 15       	cp	r22, r12
    4848:	7d 05       	cpc	r23, r13
    484a:	8e 05       	cpc	r24, r14
    484c:	9f 05       	cpc	r25, r15
    484e:	08 f4       	brcc	.+2      	; 0x4852 <create_chain+0x86>
    4850:	8e c0       	rjmp	.+284    	; 0x496e <create_chain+0x1a2>
    4852:	53 01       	movw	r10, r6
    4854:	42 01       	movw	r8, r4
    4856:	09 c0       	rjmp	.+18     	; 0x486a <create_chain+0x9e>
    4858:	81 2c       	mov	r8, r1
    485a:	91 2c       	mov	r9, r1
    485c:	54 01       	movw	r10, r8
    485e:	83 94       	inc	r8
    4860:	04 c0       	rjmp	.+8      	; 0x486a <create_chain+0x9e>
    4862:	81 2c       	mov	r8, r1
    4864:	91 2c       	mov	r9, r1
    4866:	54 01       	movw	r10, r8
    4868:	83 94       	inc	r8
    486a:	75 01       	movw	r14, r10
    486c:	64 01       	movw	r12, r8
    486e:	8f ef       	ldi	r24, 0xFF	; 255
    4870:	c8 1a       	sub	r12, r24
    4872:	d8 0a       	sbc	r13, r24
    4874:	e8 0a       	sbc	r14, r24
    4876:	f8 0a       	sbc	r15, r24
    4878:	8e 89       	ldd	r24, Y+22	; 0x16
    487a:	9f 89       	ldd	r25, Y+23	; 0x17
    487c:	a8 8d       	ldd	r26, Y+24	; 0x18
    487e:	b9 8d       	ldd	r27, Y+25	; 0x19
    4880:	c8 16       	cp	r12, r24
    4882:	d9 06       	cpc	r13, r25
    4884:	ea 06       	cpc	r14, r26
    4886:	fb 06       	cpc	r15, r27
    4888:	60 f0       	brcs	.+24     	; 0x48a2 <create_chain+0xd6>
    488a:	22 e0       	ldi	r18, 0x02	; 2
    488c:	82 16       	cp	r8, r18
    488e:	91 04       	cpc	r9, r1
    4890:	a1 04       	cpc	r10, r1
    4892:	b1 04       	cpc	r11, r1
    4894:	08 f4       	brcc	.+2      	; 0x4898 <create_chain+0xcc>
    4896:	6f c0       	rjmp	.+222    	; 0x4976 <create_chain+0x1aa>
    4898:	c1 2c       	mov	r12, r1
    489a:	d1 2c       	mov	r13, r1
    489c:	76 01       	movw	r14, r12
    489e:	68 94       	set
    48a0:	c1 f8       	bld	r12, 1
    48a2:	b7 01       	movw	r22, r14
    48a4:	a6 01       	movw	r20, r12
    48a6:	ce 01       	movw	r24, r28
    48a8:	e8 dc       	rcall	.-1584   	; 0x427a <get_fat>
    48aa:	61 15       	cp	r22, r1
    48ac:	71 05       	cpc	r23, r1
    48ae:	81 05       	cpc	r24, r1
    48b0:	91 05       	cpc	r25, r1
    48b2:	99 f0       	breq	.+38     	; 0x48da <create_chain+0x10e>
    48b4:	6f 3f       	cpi	r22, 0xFF	; 255
    48b6:	2f ef       	ldi	r18, 0xFF	; 255
    48b8:	72 07       	cpc	r23, r18
    48ba:	82 07       	cpc	r24, r18
    48bc:	92 07       	cpc	r25, r18
    48be:	09 f4       	brne	.+2      	; 0x48c2 <create_chain+0xf6>
    48c0:	5f c0       	rjmp	.+190    	; 0x4980 <create_chain+0x1b4>
    48c2:	61 30       	cpi	r22, 0x01	; 1
    48c4:	71 05       	cpc	r23, r1
    48c6:	81 05       	cpc	r24, r1
    48c8:	91 05       	cpc	r25, r1
    48ca:	09 f4       	brne	.+2      	; 0x48ce <create_chain+0x102>
    48cc:	5d c0       	rjmp	.+186    	; 0x4988 <create_chain+0x1bc>
    48ce:	c8 14       	cp	r12, r8
    48d0:	d9 04       	cpc	r13, r9
    48d2:	ea 04       	cpc	r14, r10
    48d4:	fb 04       	cpc	r15, r11
    48d6:	59 f6       	brne	.-106    	; 0x486e <create_chain+0xa2>
    48d8:	5b c0       	rjmp	.+182    	; 0x4990 <create_chain+0x1c4>
    48da:	8c 2c       	mov	r8, r12
    48dc:	9d 2c       	mov	r9, r13
    48de:	ae 2c       	mov	r10, r14
    48e0:	bf 2c       	mov	r11, r15
    48e2:	0f ef       	ldi	r16, 0xFF	; 255
    48e4:	1f ef       	ldi	r17, 0xFF	; 255
    48e6:	2f ef       	ldi	r18, 0xFF	; 255
    48e8:	3f e0       	ldi	r19, 0x0F	; 15
    48ea:	b7 01       	movw	r22, r14
    48ec:	a6 01       	movw	r20, r12
    48ee:	ce 01       	movw	r24, r28
    48f0:	65 de       	rcall	.-822    	; 0x45bc <put_fat>
    48f2:	81 11       	cpse	r24, r1
    48f4:	2c c0       	rjmp	.+88     	; 0x494e <create_chain+0x182>
    48f6:	41 14       	cp	r4, r1
    48f8:	51 04       	cpc	r5, r1
    48fa:	61 04       	cpc	r6, r1
    48fc:	71 04       	cpc	r7, r1
    48fe:	51 f0       	breq	.+20     	; 0x4914 <create_chain+0x148>
    4900:	0c 2d       	mov	r16, r12
    4902:	1d 2d       	mov	r17, r13
    4904:	2e 2d       	mov	r18, r14
    4906:	3f 2d       	mov	r19, r15
    4908:	b3 01       	movw	r22, r6
    490a:	a2 01       	movw	r20, r4
    490c:	ce 01       	movw	r24, r28
    490e:	56 de       	rcall	.-852    	; 0x45bc <put_fat>
    4910:	81 11       	cpse	r24, r1
    4912:	1d c0       	rjmp	.+58     	; 0x494e <create_chain+0x182>
    4914:	8a 86       	std	Y+10, r8	; 0x0a
    4916:	9b 86       	std	Y+11, r9	; 0x0b
    4918:	ac 86       	std	Y+12, r10	; 0x0c
    491a:	bd 86       	std	Y+13, r11	; 0x0d
    491c:	8e 85       	ldd	r24, Y+14	; 0x0e
    491e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4920:	a8 89       	ldd	r26, Y+16	; 0x10
    4922:	b9 89       	ldd	r27, Y+17	; 0x11
    4924:	8f 3f       	cpi	r24, 0xFF	; 255
    4926:	2f ef       	ldi	r18, 0xFF	; 255
    4928:	92 07       	cpc	r25, r18
    492a:	a2 07       	cpc	r26, r18
    492c:	b2 07       	cpc	r27, r18
    492e:	a9 f1       	breq	.+106    	; 0x499a <create_chain+0x1ce>
    4930:	01 97       	sbiw	r24, 0x01	; 1
    4932:	a1 09       	sbc	r26, r1
    4934:	b1 09       	sbc	r27, r1
    4936:	8e 87       	std	Y+14, r24	; 0x0e
    4938:	9f 87       	std	Y+15, r25	; 0x0f
    493a:	a8 8b       	std	Y+16, r26	; 0x10
    493c:	b9 8b       	std	Y+17, r27	; 0x11
    493e:	8d 81       	ldd	r24, Y+5	; 0x05
    4940:	81 60       	ori	r24, 0x01	; 1
    4942:	8d 83       	std	Y+5, r24	; 0x05
    4944:	4c 2d       	mov	r20, r12
    4946:	3d 2d       	mov	r19, r13
    4948:	2e 2d       	mov	r18, r14
    494a:	9f 2d       	mov	r25, r15
    494c:	2f c0       	rjmp	.+94     	; 0x49ac <create_chain+0x1e0>
    494e:	81 30       	cpi	r24, 0x01	; 1
    4950:	49 f5       	brne	.+82     	; 0x49a4 <create_chain+0x1d8>
    4952:	4f ef       	ldi	r20, 0xFF	; 255
    4954:	3f ef       	ldi	r19, 0xFF	; 255
    4956:	2f ef       	ldi	r18, 0xFF	; 255
    4958:	9f ef       	ldi	r25, 0xFF	; 255
    495a:	28 c0       	rjmp	.+80     	; 0x49ac <create_chain+0x1e0>
    495c:	41 e0       	ldi	r20, 0x01	; 1
    495e:	30 e0       	ldi	r19, 0x00	; 0
    4960:	20 e0       	ldi	r18, 0x00	; 0
    4962:	90 e0       	ldi	r25, 0x00	; 0
    4964:	23 c0       	rjmp	.+70     	; 0x49ac <create_chain+0x1e0>
    4966:	46 2f       	mov	r20, r22
    4968:	37 2f       	mov	r19, r23
    496a:	28 2f       	mov	r18, r24
    496c:	1f c0       	rjmp	.+62     	; 0x49ac <create_chain+0x1e0>
    496e:	46 2f       	mov	r20, r22
    4970:	37 2f       	mov	r19, r23
    4972:	28 2f       	mov	r18, r24
    4974:	1b c0       	rjmp	.+54     	; 0x49ac <create_chain+0x1e0>
    4976:	40 e0       	ldi	r20, 0x00	; 0
    4978:	30 e0       	ldi	r19, 0x00	; 0
    497a:	20 e0       	ldi	r18, 0x00	; 0
    497c:	90 e0       	ldi	r25, 0x00	; 0
    497e:	16 c0       	rjmp	.+44     	; 0x49ac <create_chain+0x1e0>
    4980:	46 2f       	mov	r20, r22
    4982:	37 2f       	mov	r19, r23
    4984:	28 2f       	mov	r18, r24
    4986:	12 c0       	rjmp	.+36     	; 0x49ac <create_chain+0x1e0>
    4988:	46 2f       	mov	r20, r22
    498a:	37 2f       	mov	r19, r23
    498c:	28 2f       	mov	r18, r24
    498e:	0e c0       	rjmp	.+28     	; 0x49ac <create_chain+0x1e0>
    4990:	40 e0       	ldi	r20, 0x00	; 0
    4992:	30 e0       	ldi	r19, 0x00	; 0
    4994:	20 e0       	ldi	r18, 0x00	; 0
    4996:	90 e0       	ldi	r25, 0x00	; 0
    4998:	09 c0       	rjmp	.+18     	; 0x49ac <create_chain+0x1e0>
    499a:	4c 2d       	mov	r20, r12
    499c:	3d 2d       	mov	r19, r13
    499e:	2e 2d       	mov	r18, r14
    49a0:	9f 2d       	mov	r25, r15
    49a2:	04 c0       	rjmp	.+8      	; 0x49ac <create_chain+0x1e0>
    49a4:	41 e0       	ldi	r20, 0x01	; 1
    49a6:	30 e0       	ldi	r19, 0x00	; 0
    49a8:	20 e0       	ldi	r18, 0x00	; 0
    49aa:	90 e0       	ldi	r25, 0x00	; 0
    49ac:	64 2f       	mov	r22, r20
    49ae:	73 2f       	mov	r23, r19
    49b0:	82 2f       	mov	r24, r18
    49b2:	df 91       	pop	r29
    49b4:	cf 91       	pop	r28
    49b6:	1f 91       	pop	r17
    49b8:	0f 91       	pop	r16
    49ba:	ff 90       	pop	r15
    49bc:	ef 90       	pop	r14
    49be:	df 90       	pop	r13
    49c0:	cf 90       	pop	r12
    49c2:	bf 90       	pop	r11
    49c4:	af 90       	pop	r10
    49c6:	9f 90       	pop	r9
    49c8:	8f 90       	pop	r8
    49ca:	7f 90       	pop	r7
    49cc:	6f 90       	pop	r6
    49ce:	5f 90       	pop	r5
    49d0:	4f 90       	pop	r4
    49d2:	08 95       	ret

000049d4 <dir_next>:
    49d4:	7f 92       	push	r7
    49d6:	8f 92       	push	r8
    49d8:	9f 92       	push	r9
    49da:	af 92       	push	r10
    49dc:	bf 92       	push	r11
    49de:	cf 92       	push	r12
    49e0:	df 92       	push	r13
    49e2:	ef 92       	push	r14
    49e4:	ff 92       	push	r15
    49e6:	0f 93       	push	r16
    49e8:	1f 93       	push	r17
    49ea:	cf 93       	push	r28
    49ec:	df 93       	push	r29
    49ee:	ec 01       	movw	r28, r24
    49f0:	7b 01       	movw	r14, r22
    49f2:	0c 81       	ldd	r16, Y+4	; 0x04
    49f4:	1d 81       	ldd	r17, Y+5	; 0x05
    49f6:	0f 5f       	subi	r16, 0xFF	; 255
    49f8:	1f 4f       	sbci	r17, 0xFF	; 255
    49fa:	01 15       	cp	r16, r1
    49fc:	11 05       	cpc	r17, r1
    49fe:	09 f4       	brne	.+2      	; 0x4a02 <dir_next+0x2e>
    4a00:	e4 c0       	rjmp	.+456    	; 0x4bca <dir_next+0x1f6>
    4a02:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a04:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a06:	a8 89       	ldd	r26, Y+16	; 0x10
    4a08:	b9 89       	ldd	r27, Y+17	; 0x11
    4a0a:	00 97       	sbiw	r24, 0x00	; 0
    4a0c:	a1 05       	cpc	r26, r1
    4a0e:	b1 05       	cpc	r27, r1
    4a10:	09 f4       	brne	.+2      	; 0x4a14 <dir_next+0x40>
    4a12:	dd c0       	rjmp	.+442    	; 0x4bce <dir_next+0x1fa>
    4a14:	68 01       	movw	r12, r16
    4a16:	2f e0       	ldi	r18, 0x0F	; 15
    4a18:	c2 22       	and	r12, r18
    4a1a:	dd 24       	eor	r13, r13
    4a1c:	c1 14       	cp	r12, r1
    4a1e:	d1 04       	cpc	r13, r1
    4a20:	09 f0       	breq	.+2      	; 0x4a24 <dir_next+0x50>
    4a22:	bc c0       	rjmp	.+376    	; 0x4b9c <dir_next+0x1c8>
    4a24:	01 96       	adiw	r24, 0x01	; 1
    4a26:	a1 1d       	adc	r26, r1
    4a28:	b1 1d       	adc	r27, r1
    4a2a:	8e 87       	std	Y+14, r24	; 0x0e
    4a2c:	9f 87       	std	Y+15, r25	; 0x0f
    4a2e:	a8 8b       	std	Y+16, r26	; 0x10
    4a30:	b9 8b       	std	Y+17, r27	; 0x11
    4a32:	4a 85       	ldd	r20, Y+10	; 0x0a
    4a34:	5b 85       	ldd	r21, Y+11	; 0x0b
    4a36:	6c 85       	ldd	r22, Y+12	; 0x0c
    4a38:	7d 85       	ldd	r23, Y+13	; 0x0d
    4a3a:	41 15       	cp	r20, r1
    4a3c:	51 05       	cpc	r21, r1
    4a3e:	61 05       	cpc	r22, r1
    4a40:	71 05       	cpc	r23, r1
    4a42:	49 f4       	brne	.+18     	; 0x4a56 <dir_next+0x82>
    4a44:	e8 81       	ld	r30, Y
    4a46:	f9 81       	ldd	r31, Y+1	; 0x01
    4a48:	80 85       	ldd	r24, Z+8	; 0x08
    4a4a:	91 85       	ldd	r25, Z+9	; 0x09
    4a4c:	08 17       	cp	r16, r24
    4a4e:	19 07       	cpc	r17, r25
    4a50:	08 f0       	brcs	.+2      	; 0x4a54 <dir_next+0x80>
    4a52:	bf c0       	rjmp	.+382    	; 0x4bd2 <dir_next+0x1fe>
    4a54:	a3 c0       	rjmp	.+326    	; 0x4b9c <dir_next+0x1c8>
    4a56:	e8 81       	ld	r30, Y
    4a58:	f9 81       	ldd	r31, Y+1	; 0x01
    4a5a:	82 81       	ldd	r24, Z+2	; 0x02
    4a5c:	90 e0       	ldi	r25, 0x00	; 0
    4a5e:	01 97       	sbiw	r24, 0x01	; 1
    4a60:	98 01       	movw	r18, r16
    4a62:	32 95       	swap	r19
    4a64:	22 95       	swap	r18
    4a66:	2f 70       	andi	r18, 0x0F	; 15
    4a68:	23 27       	eor	r18, r19
    4a6a:	3f 70       	andi	r19, 0x0F	; 15
    4a6c:	23 27       	eor	r18, r19
    4a6e:	82 23       	and	r24, r18
    4a70:	93 23       	and	r25, r19
    4a72:	89 2b       	or	r24, r25
    4a74:	09 f0       	breq	.+2      	; 0x4a78 <dir_next+0xa4>
    4a76:	92 c0       	rjmp	.+292    	; 0x4b9c <dir_next+0x1c8>
    4a78:	cf 01       	movw	r24, r30
    4a7a:	ff db       	rcall	.-2050   	; 0x427a <get_fat>
    4a7c:	4b 01       	movw	r8, r22
    4a7e:	5c 01       	movw	r10, r24
    4a80:	82 e0       	ldi	r24, 0x02	; 2
    4a82:	88 16       	cp	r8, r24
    4a84:	91 04       	cpc	r9, r1
    4a86:	a1 04       	cpc	r10, r1
    4a88:	b1 04       	cpc	r11, r1
    4a8a:	08 f4       	brcc	.+2      	; 0x4a8e <dir_next+0xba>
    4a8c:	a4 c0       	rjmp	.+328    	; 0x4bd6 <dir_next+0x202>
    4a8e:	ef ef       	ldi	r30, 0xFF	; 255
    4a90:	8e 16       	cp	r8, r30
    4a92:	9e 06       	cpc	r9, r30
    4a94:	ae 06       	cpc	r10, r30
    4a96:	be 06       	cpc	r11, r30
    4a98:	09 f4       	brne	.+2      	; 0x4a9c <dir_next+0xc8>
    4a9a:	9f c0       	rjmp	.+318    	; 0x4bda <dir_next+0x206>
    4a9c:	e8 81       	ld	r30, Y
    4a9e:	f9 81       	ldd	r31, Y+1	; 0x01
    4aa0:	86 89       	ldd	r24, Z+22	; 0x16
    4aa2:	97 89       	ldd	r25, Z+23	; 0x17
    4aa4:	a0 8d       	ldd	r26, Z+24	; 0x18
    4aa6:	b1 8d       	ldd	r27, Z+25	; 0x19
    4aa8:	88 16       	cp	r8, r24
    4aaa:	99 06       	cpc	r9, r25
    4aac:	aa 06       	cpc	r10, r26
    4aae:	bb 06       	cpc	r11, r27
    4ab0:	08 f4       	brcc	.+2      	; 0x4ab4 <dir_next+0xe0>
    4ab2:	67 c0       	rjmp	.+206    	; 0x4b82 <dir_next+0x1ae>
    4ab4:	ef 28       	or	r14, r15
    4ab6:	09 f4       	brne	.+2      	; 0x4aba <dir_next+0xe6>
    4ab8:	92 c0       	rjmp	.+292    	; 0x4bde <dir_next+0x20a>
    4aba:	4a 85       	ldd	r20, Y+10	; 0x0a
    4abc:	5b 85       	ldd	r21, Y+11	; 0x0b
    4abe:	6c 85       	ldd	r22, Y+12	; 0x0c
    4ac0:	7d 85       	ldd	r23, Y+13	; 0x0d
    4ac2:	cf 01       	movw	r24, r30
    4ac4:	83 de       	rcall	.-762    	; 0x47cc <create_chain>
    4ac6:	4b 01       	movw	r8, r22
    4ac8:	5c 01       	movw	r10, r24
    4aca:	61 15       	cp	r22, r1
    4acc:	71 05       	cpc	r23, r1
    4ace:	81 05       	cpc	r24, r1
    4ad0:	91 05       	cpc	r25, r1
    4ad2:	09 f4       	brne	.+2      	; 0x4ad6 <dir_next+0x102>
    4ad4:	86 c0       	rjmp	.+268    	; 0x4be2 <dir_next+0x20e>
    4ad6:	61 30       	cpi	r22, 0x01	; 1
    4ad8:	71 05       	cpc	r23, r1
    4ada:	81 05       	cpc	r24, r1
    4adc:	91 05       	cpc	r25, r1
    4ade:	09 f4       	brne	.+2      	; 0x4ae2 <dir_next+0x10e>
    4ae0:	82 c0       	rjmp	.+260    	; 0x4be6 <dir_next+0x212>
    4ae2:	6f 3f       	cpi	r22, 0xFF	; 255
    4ae4:	2f ef       	ldi	r18, 0xFF	; 255
    4ae6:	72 07       	cpc	r23, r18
    4ae8:	82 07       	cpc	r24, r18
    4aea:	92 07       	cpc	r25, r18
    4aec:	09 f4       	brne	.+2      	; 0x4af0 <dir_next+0x11c>
    4aee:	7d c0       	rjmp	.+250    	; 0x4bea <dir_next+0x216>
    4af0:	88 81       	ld	r24, Y
    4af2:	99 81       	ldd	r25, Y+1	; 0x01
    4af4:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <sync_window>
    4af8:	81 11       	cpse	r24, r1
    4afa:	79 c0       	rjmp	.+242    	; 0x4bee <dir_next+0x21a>
    4afc:	88 81       	ld	r24, Y
    4afe:	99 81       	ldd	r25, Y+1	; 0x01
    4b00:	40 e0       	ldi	r20, 0x00	; 0
    4b02:	52 e0       	ldi	r21, 0x02	; 2
    4b04:	60 e0       	ldi	r22, 0x00	; 0
    4b06:	70 e0       	ldi	r23, 0x00	; 0
    4b08:	c2 96       	adiw	r24, 0x32	; 50
    4b0a:	0e 94 85 1c 	call	0x390a	; 0x390a <mem_set>
    4b0e:	e8 80       	ld	r14, Y
    4b10:	f9 80       	ldd	r15, Y+1	; 0x01
    4b12:	b5 01       	movw	r22, r10
    4b14:	a4 01       	movw	r20, r8
    4b16:	c7 01       	movw	r24, r14
    4b18:	82 db       	rcall	.-2300   	; 0x421e <clust2sect>
    4b1a:	f7 01       	movw	r30, r14
    4b1c:	66 a7       	std	Z+46, r22	; 0x2e
    4b1e:	77 a7       	std	Z+47, r23	; 0x2f
    4b20:	80 ab       	std	Z+48, r24	; 0x30
    4b22:	91 ab       	std	Z+49, r25	; 0x31
    4b24:	e1 2c       	mov	r14, r1
    4b26:	f1 2c       	mov	r15, r1
    4b28:	77 24       	eor	r7, r7
    4b2a:	73 94       	inc	r7
    4b2c:	17 c0       	rjmp	.+46     	; 0x4b5c <dir_next+0x188>
    4b2e:	74 82       	std	Z+4, r7	; 0x04
    4b30:	88 81       	ld	r24, Y
    4b32:	99 81       	ldd	r25, Y+1	; 0x01
    4b34:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <sync_window>
    4b38:	81 11       	cpse	r24, r1
    4b3a:	5b c0       	rjmp	.+182    	; 0x4bf2 <dir_next+0x21e>
    4b3c:	e8 81       	ld	r30, Y
    4b3e:	f9 81       	ldd	r31, Y+1	; 0x01
    4b40:	86 a5       	ldd	r24, Z+46	; 0x2e
    4b42:	97 a5       	ldd	r25, Z+47	; 0x2f
    4b44:	a0 a9       	ldd	r26, Z+48	; 0x30
    4b46:	b1 a9       	ldd	r27, Z+49	; 0x31
    4b48:	01 96       	adiw	r24, 0x01	; 1
    4b4a:	a1 1d       	adc	r26, r1
    4b4c:	b1 1d       	adc	r27, r1
    4b4e:	86 a7       	std	Z+46, r24	; 0x2e
    4b50:	97 a7       	std	Z+47, r25	; 0x2f
    4b52:	a0 ab       	std	Z+48, r26	; 0x30
    4b54:	b1 ab       	std	Z+49, r27	; 0x31
    4b56:	ff ef       	ldi	r31, 0xFF	; 255
    4b58:	ef 1a       	sub	r14, r31
    4b5a:	ff 0a       	sbc	r15, r31
    4b5c:	e8 81       	ld	r30, Y
    4b5e:	f9 81       	ldd	r31, Y+1	; 0x01
    4b60:	82 81       	ldd	r24, Z+2	; 0x02
    4b62:	90 e0       	ldi	r25, 0x00	; 0
    4b64:	e8 16       	cp	r14, r24
    4b66:	f9 06       	cpc	r15, r25
    4b68:	10 f3       	brcs	.-60     	; 0x4b2e <dir_next+0x15a>
    4b6a:	86 a5       	ldd	r24, Z+46	; 0x2e
    4b6c:	97 a5       	ldd	r25, Z+47	; 0x2f
    4b6e:	a0 a9       	ldd	r26, Z+48	; 0x30
    4b70:	b1 a9       	ldd	r27, Z+49	; 0x31
    4b72:	8e 19       	sub	r24, r14
    4b74:	9f 09       	sbc	r25, r15
    4b76:	a1 09       	sbc	r26, r1
    4b78:	b1 09       	sbc	r27, r1
    4b7a:	86 a7       	std	Z+46, r24	; 0x2e
    4b7c:	97 a7       	std	Z+47, r25	; 0x2f
    4b7e:	a0 ab       	std	Z+48, r26	; 0x30
    4b80:	b1 ab       	std	Z+49, r27	; 0x31
    4b82:	8a 86       	std	Y+10, r8	; 0x0a
    4b84:	9b 86       	std	Y+11, r9	; 0x0b
    4b86:	ac 86       	std	Y+12, r10	; 0x0c
    4b88:	bd 86       	std	Y+13, r11	; 0x0d
    4b8a:	b5 01       	movw	r22, r10
    4b8c:	a4 01       	movw	r20, r8
    4b8e:	88 81       	ld	r24, Y
    4b90:	99 81       	ldd	r25, Y+1	; 0x01
    4b92:	45 db       	rcall	.-2422   	; 0x421e <clust2sect>
    4b94:	6e 87       	std	Y+14, r22	; 0x0e
    4b96:	7f 87       	std	Y+15, r23	; 0x0f
    4b98:	88 8b       	std	Y+16, r24	; 0x10
    4b9a:	99 8b       	std	Y+17, r25	; 0x11
    4b9c:	0c 83       	std	Y+4, r16	; 0x04
    4b9e:	1d 83       	std	Y+5, r17	; 0x05
    4ba0:	cc 0c       	add	r12, r12
    4ba2:	dd 1c       	adc	r13, r13
    4ba4:	cc 0c       	add	r12, r12
    4ba6:	dd 1c       	adc	r13, r13
    4ba8:	cc 0c       	add	r12, r12
    4baa:	dd 1c       	adc	r13, r13
    4bac:	cc 0c       	add	r12, r12
    4bae:	dd 1c       	adc	r13, r13
    4bb0:	cc 0c       	add	r12, r12
    4bb2:	dd 1c       	adc	r13, r13
    4bb4:	22 e3       	ldi	r18, 0x32	; 50
    4bb6:	c2 0e       	add	r12, r18
    4bb8:	d1 1c       	adc	r13, r1
    4bba:	88 81       	ld	r24, Y
    4bbc:	99 81       	ldd	r25, Y+1	; 0x01
    4bbe:	c8 0e       	add	r12, r24
    4bc0:	d9 1e       	adc	r13, r25
    4bc2:	ca 8a       	std	Y+18, r12	; 0x12
    4bc4:	db 8a       	std	Y+19, r13	; 0x13
    4bc6:	80 e0       	ldi	r24, 0x00	; 0
    4bc8:	15 c0       	rjmp	.+42     	; 0x4bf4 <dir_next+0x220>
    4bca:	84 e0       	ldi	r24, 0x04	; 4
    4bcc:	13 c0       	rjmp	.+38     	; 0x4bf4 <dir_next+0x220>
    4bce:	84 e0       	ldi	r24, 0x04	; 4
    4bd0:	11 c0       	rjmp	.+34     	; 0x4bf4 <dir_next+0x220>
    4bd2:	84 e0       	ldi	r24, 0x04	; 4
    4bd4:	0f c0       	rjmp	.+30     	; 0x4bf4 <dir_next+0x220>
    4bd6:	82 e0       	ldi	r24, 0x02	; 2
    4bd8:	0d c0       	rjmp	.+26     	; 0x4bf4 <dir_next+0x220>
    4bda:	81 e0       	ldi	r24, 0x01	; 1
    4bdc:	0b c0       	rjmp	.+22     	; 0x4bf4 <dir_next+0x220>
    4bde:	84 e0       	ldi	r24, 0x04	; 4
    4be0:	09 c0       	rjmp	.+18     	; 0x4bf4 <dir_next+0x220>
    4be2:	87 e0       	ldi	r24, 0x07	; 7
    4be4:	07 c0       	rjmp	.+14     	; 0x4bf4 <dir_next+0x220>
    4be6:	82 e0       	ldi	r24, 0x02	; 2
    4be8:	05 c0       	rjmp	.+10     	; 0x4bf4 <dir_next+0x220>
    4bea:	81 e0       	ldi	r24, 0x01	; 1
    4bec:	03 c0       	rjmp	.+6      	; 0x4bf4 <dir_next+0x220>
    4bee:	81 e0       	ldi	r24, 0x01	; 1
    4bf0:	01 c0       	rjmp	.+2      	; 0x4bf4 <dir_next+0x220>
    4bf2:	81 e0       	ldi	r24, 0x01	; 1
    4bf4:	df 91       	pop	r29
    4bf6:	cf 91       	pop	r28
    4bf8:	1f 91       	pop	r17
    4bfa:	0f 91       	pop	r16
    4bfc:	ff 90       	pop	r15
    4bfe:	ef 90       	pop	r14
    4c00:	df 90       	pop	r13
    4c02:	cf 90       	pop	r12
    4c04:	bf 90       	pop	r11
    4c06:	af 90       	pop	r10
    4c08:	9f 90       	pop	r9
    4c0a:	8f 90       	pop	r8
    4c0c:	7f 90       	pop	r7
    4c0e:	08 95       	ret

00004c10 <follow_path>:
    4c10:	6f 92       	push	r6
    4c12:	7f 92       	push	r7
    4c14:	8f 92       	push	r8
    4c16:	af 92       	push	r10
    4c18:	bf 92       	push	r11
    4c1a:	cf 92       	push	r12
    4c1c:	df 92       	push	r13
    4c1e:	ef 92       	push	r14
    4c20:	ff 92       	push	r15
    4c22:	0f 93       	push	r16
    4c24:	1f 93       	push	r17
    4c26:	cf 93       	push	r28
    4c28:	df 93       	push	r29
    4c2a:	ec 01       	movw	r28, r24
    4c2c:	8b 01       	movw	r16, r22
    4c2e:	fb 01       	movw	r30, r22
    4c30:	80 81       	ld	r24, Z
    4c32:	8f 32       	cpi	r24, 0x2F	; 47
    4c34:	11 f0       	breq	.+4      	; 0x4c3a <follow_path+0x2a>
    4c36:	8c 35       	cpi	r24, 0x5C	; 92
    4c38:	39 f4       	brne	.+14     	; 0x4c48 <follow_path+0x38>
    4c3a:	0f 5f       	subi	r16, 0xFF	; 255
    4c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c3e:	1e 82       	std	Y+6, r1	; 0x06
    4c40:	1f 82       	std	Y+7, r1	; 0x07
    4c42:	18 86       	std	Y+8, r1	; 0x08
    4c44:	19 86       	std	Y+9, r1	; 0x09
    4c46:	0a c0       	rjmp	.+20     	; 0x4c5c <follow_path+0x4c>
    4c48:	e8 81       	ld	r30, Y
    4c4a:	f9 81       	ldd	r31, Y+1	; 0x01
    4c4c:	82 89       	ldd	r24, Z+18	; 0x12
    4c4e:	93 89       	ldd	r25, Z+19	; 0x13
    4c50:	a4 89       	ldd	r26, Z+20	; 0x14
    4c52:	b5 89       	ldd	r27, Z+21	; 0x15
    4c54:	8e 83       	std	Y+6, r24	; 0x06
    4c56:	9f 83       	std	Y+7, r25	; 0x07
    4c58:	a8 87       	std	Y+8, r26	; 0x08
    4c5a:	b9 87       	std	Y+9, r27	; 0x09
    4c5c:	f8 01       	movw	r30, r16
    4c5e:	80 81       	ld	r24, Z
    4c60:	80 32       	cpi	r24, 0x20	; 32
    4c62:	78 f0       	brcs	.+30     	; 0x4c82 <follow_path+0x72>
    4c64:	0f 2e       	mov	r0, r31
    4c66:	fe e2       	ldi	r31, 0x2E	; 46
    4c68:	df 2e       	mov	r13, r31
    4c6a:	f0 2d       	mov	r31, r0
    4c6c:	0f 2e       	mov	r0, r31
    4c6e:	f5 e0       	ldi	r31, 0x05	; 5
    4c70:	8f 2e       	mov	r8, r31
    4c72:	f0 2d       	mov	r31, r0
    4c74:	0f 2e       	mov	r0, r31
    4c76:	f7 e6       	ldi	r31, 0x67	; 103
    4c78:	af 2e       	mov	r10, r31
    4c7a:	f3 e2       	ldi	r31, 0x23	; 35
    4c7c:	bf 2e       	mov	r11, r31
    4c7e:	f0 2d       	mov	r31, r0
    4c80:	07 c0       	rjmp	.+14     	; 0x4c90 <follow_path+0x80>
    4c82:	60 e0       	ldi	r22, 0x00	; 0
    4c84:	70 e0       	ldi	r23, 0x00	; 0
    4c86:	ce 01       	movw	r24, r28
    4c88:	de db       	rcall	.-2116   	; 0x4446 <dir_sdi>
    4c8a:	1a 8a       	std	Y+18, r1	; 0x12
    4c8c:	1b 8a       	std	Y+19, r1	; 0x13
    4c8e:	4c c1       	rjmp	.+664    	; 0x4f28 <follow_path+0x318>
    4c90:	f8 01       	movw	r30, r16
    4c92:	8f 01       	movw	r16, r30
    4c94:	81 91       	ld	r24, Z+
    4c96:	8f 32       	cpi	r24, 0x2F	; 47
    4c98:	e1 f3       	breq	.-8      	; 0x4c92 <follow_path+0x82>
    4c9a:	8c 35       	cpi	r24, 0x5C	; 92
    4c9c:	d1 f3       	breq	.-12     	; 0x4c92 <follow_path+0x82>
    4c9e:	ec 88       	ldd	r14, Y+20	; 0x14
    4ca0:	fd 88       	ldd	r15, Y+21	; 0x15
    4ca2:	4b e0       	ldi	r20, 0x0B	; 11
    4ca4:	50 e0       	ldi	r21, 0x00	; 0
    4ca6:	60 e2       	ldi	r22, 0x20	; 32
    4ca8:	70 e0       	ldi	r23, 0x00	; 0
    4caa:	c7 01       	movw	r24, r14
    4cac:	0e 94 85 1c 	call	0x390a	; 0x390a <mem_set>
    4cb0:	f8 01       	movw	r30, r16
    4cb2:	80 81       	ld	r24, Z
    4cb4:	8e 32       	cpi	r24, 0x2E	; 46
    4cb6:	41 f0       	breq	.+16     	; 0x4cc8 <follow_path+0xb8>
    4cb8:	20 e0       	ldi	r18, 0x00	; 0
    4cba:	30 e0       	ldi	r19, 0x00	; 0
    4cbc:	60 e0       	ldi	r22, 0x00	; 0
    4cbe:	70 e0       	ldi	r23, 0x00	; 0
    4cc0:	88 e0       	ldi	r24, 0x08	; 8
    4cc2:	90 e0       	ldi	r25, 0x00	; 0
    4cc4:	c1 2c       	mov	r12, r1
    4cc6:	1f c0       	rjmp	.+62     	; 0x4d06 <follow_path+0xf6>
    4cc8:	f7 01       	movw	r30, r14
    4cca:	d0 82       	st	Z, r13
    4ccc:	f8 01       	movw	r30, r16
    4cce:	21 81       	ldd	r18, Z+1	; 0x01
    4cd0:	2e 32       	cpi	r18, 0x2E	; 46
    4cd2:	51 f4       	brne	.+20     	; 0x4ce8 <follow_path+0xd8>
    4cd4:	f7 01       	movw	r30, r14
    4cd6:	d1 82       	std	Z+1, r13	; 0x01
    4cd8:	f8 01       	movw	r30, r16
    4cda:	22 81       	ldd	r18, Z+2	; 0x02
    4cdc:	2e 32       	cpi	r18, 0x2E	; 46
    4cde:	09 f4       	brne	.+2      	; 0x4ce2 <follow_path+0xd2>
    4ce0:	0b c1       	rjmp	.+534    	; 0x4ef8 <follow_path+0x2e8>
    4ce2:	83 e0       	ldi	r24, 0x03	; 3
    4ce4:	90 e0       	ldi	r25, 0x00	; 0
    4ce6:	02 c0       	rjmp	.+4      	; 0x4cec <follow_path+0xdc>
    4ce8:	82 e0       	ldi	r24, 0x02	; 2
    4cea:	90 e0       	ldi	r25, 0x00	; 0
    4cec:	2f 32       	cpi	r18, 0x2F	; 47
    4cee:	09 f4       	brne	.+2      	; 0x4cf2 <follow_path+0xe2>
    4cf0:	e7 c0       	rjmp	.+462    	; 0x4ec0 <follow_path+0x2b0>
    4cf2:	2c 35       	cpi	r18, 0x5C	; 92
    4cf4:	09 f4       	brne	.+2      	; 0x4cf8 <follow_path+0xe8>
    4cf6:	e4 c0       	rjmp	.+456    	; 0x4ec0 <follow_path+0x2b0>
    4cf8:	21 32       	cpi	r18, 0x21	; 33
    4cfa:	08 f0       	brcs	.+2      	; 0x4cfe <follow_path+0xee>
    4cfc:	fd c0       	rjmp	.+506    	; 0x4ef8 <follow_path+0x2e8>
    4cfe:	e4 c0       	rjmp	.+456    	; 0x4ec8 <follow_path+0x2b8>
    4d00:	f7 01       	movw	r30, r14
    4d02:	83 87       	std	Z+11, r24	; 0x0b
    4d04:	fb c0       	rjmp	.+502    	; 0x4efc <follow_path+0x2ec>
    4d06:	ab 01       	movw	r20, r22
    4d08:	4f 5f       	subi	r20, 0xFF	; 255
    4d0a:	5f 4f       	sbci	r21, 0xFF	; 255
    4d0c:	f8 01       	movw	r30, r16
    4d0e:	e6 0f       	add	r30, r22
    4d10:	f7 1f       	adc	r31, r23
    4d12:	b0 81       	ld	r27, Z
    4d14:	b1 32       	cpi	r27, 0x21	; 33
    4d16:	08 f4       	brcc	.+2      	; 0x4d1a <follow_path+0x10a>
    4d18:	ea c0       	rjmp	.+468    	; 0x4eee <follow_path+0x2de>
    4d1a:	bf 32       	cpi	r27, 0x2F	; 47
    4d1c:	09 f4       	brne	.+2      	; 0x4d20 <follow_path+0x110>
    4d1e:	e2 c0       	rjmp	.+452    	; 0x4ee4 <follow_path+0x2d4>
    4d20:	bc 35       	cpi	r27, 0x5C	; 92
    4d22:	09 f4       	brne	.+2      	; 0x4d26 <follow_path+0x116>
    4d24:	df c0       	rjmp	.+446    	; 0x4ee4 <follow_path+0x2d4>
    4d26:	be 32       	cpi	r27, 0x2E	; 46
    4d28:	09 f4       	brne	.+2      	; 0x4d2c <follow_path+0x11c>
    4d2a:	d2 c0       	rjmp	.+420    	; 0x4ed0 <follow_path+0x2c0>
    4d2c:	28 17       	cp	r18, r24
    4d2e:	39 07       	cpc	r19, r25
    4d30:	08 f0       	brcs	.+2      	; 0x4d34 <follow_path+0x124>
    4d32:	be c0       	rjmp	.+380    	; 0x4eb0 <follow_path+0x2a0>
    4d34:	08 c0       	rjmp	.+16     	; 0x4d46 <follow_path+0x136>
    4d36:	cc 0c       	add	r12, r12
    4d38:	cc 0c       	add	r12, r12
    4d3a:	ba 01       	movw	r22, r20
    4d3c:	28 e0       	ldi	r18, 0x08	; 8
    4d3e:	30 e0       	ldi	r19, 0x00	; 0
    4d40:	8b e0       	ldi	r24, 0x0B	; 11
    4d42:	90 e0       	ldi	r25, 0x00	; 0
    4d44:	e0 cf       	rjmp	.-64     	; 0x4d06 <follow_path+0xf6>
    4d46:	bb 23       	and	r27, r27
    4d48:	1c f4       	brge	.+6      	; 0x4d50 <follow_path+0x140>
    4d4a:	fc 2d       	mov	r31, r12
    4d4c:	f3 60       	ori	r31, 0x03	; 3
    4d4e:	cf 2e       	mov	r12, r31
    4d50:	ef e7       	ldi	r30, 0x7F	; 127
    4d52:	eb 0f       	add	r30, r27
    4d54:	ef 31       	cpi	r30, 0x1F	; 31
    4d56:	20 f0       	brcs	.+8      	; 0x4d60 <follow_path+0x150>
    4d58:	e0 e2       	ldi	r30, 0x20	; 32
    4d5a:	eb 0f       	add	r30, r27
    4d5c:	ed 31       	cpi	r30, 0x1D	; 29
    4d5e:	10 f5       	brcc	.+68     	; 0x4da4 <follow_path+0x194>
    4d60:	6e 5f       	subi	r22, 0xFE	; 254
    4d62:	7f 4f       	sbci	r23, 0xFF	; 255
    4d64:	f8 01       	movw	r30, r16
    4d66:	e4 0f       	add	r30, r20
    4d68:	f5 1f       	adc	r31, r21
    4d6a:	a0 81       	ld	r26, Z
    4d6c:	40 ec       	ldi	r20, 0xC0	; 192
    4d6e:	4a 0f       	add	r20, r26
    4d70:	4f 33       	cpi	r20, 0x3F	; 63
    4d72:	28 f0       	brcs	.+10     	; 0x4d7e <follow_path+0x16e>
    4d74:	40 e8       	ldi	r20, 0x80	; 128
    4d76:	4a 0f       	add	r20, r26
    4d78:	4d 37       	cpi	r20, 0x7D	; 125
    4d7a:	08 f0       	brcs	.+2      	; 0x4d7e <follow_path+0x16e>
    4d7c:	bd c0       	rjmp	.+378    	; 0x4ef8 <follow_path+0x2e8>
    4d7e:	ac 01       	movw	r20, r24
    4d80:	41 50       	subi	r20, 0x01	; 1
    4d82:	51 09       	sbc	r21, r1
    4d84:	24 17       	cp	r18, r20
    4d86:	35 07       	cpc	r19, r21
    4d88:	08 f0       	brcs	.+2      	; 0x4d8c <follow_path+0x17c>
    4d8a:	b6 c0       	rjmp	.+364    	; 0x4ef8 <follow_path+0x2e8>
    4d8c:	f7 01       	movw	r30, r14
    4d8e:	e2 0f       	add	r30, r18
    4d90:	f3 1f       	adc	r31, r19
    4d92:	b0 83       	st	Z, r27
    4d94:	f9 01       	movw	r30, r18
    4d96:	31 96       	adiw	r30, 0x01	; 1
    4d98:	ee 0d       	add	r30, r14
    4d9a:	ff 1d       	adc	r31, r15
    4d9c:	2e 5f       	subi	r18, 0xFE	; 254
    4d9e:	3f 4f       	sbci	r19, 0xFF	; 255
    4da0:	a0 83       	st	Z, r26
    4da2:	b1 cf       	rjmp	.-158    	; 0x4d06 <follow_path+0xf6>
    4da4:	6b 2e       	mov	r6, r27
    4da6:	71 2c       	mov	r7, r1
    4da8:	62 e2       	ldi	r22, 0x22	; 34
    4daa:	66 16       	cp	r6, r22
    4dac:	71 04       	cpc	r7, r1
    4dae:	09 f4       	brne	.+2      	; 0x4db2 <follow_path+0x1a2>
    4db0:	a3 c0       	rjmp	.+326    	; 0x4ef8 <follow_path+0x2e8>
    4db2:	f5 01       	movw	r30, r10
    4db4:	61 91       	ld	r22, Z+
    4db6:	66 23       	and	r22, r22
    4db8:	09 f4       	brne	.+2      	; 0x4dbc <follow_path+0x1ac>
    4dba:	8e c0       	rjmp	.+284    	; 0x4ed8 <follow_path+0x2c8>
    4dbc:	70 e0       	ldi	r23, 0x00	; 0
    4dbe:	66 16       	cp	r6, r22
    4dc0:	77 06       	cpc	r7, r23
    4dc2:	c1 f7       	brne	.-16     	; 0x4db4 <follow_path+0x1a4>
    4dc4:	99 c0       	rjmp	.+306    	; 0x4ef8 <follow_path+0x2e8>
    4dc6:	ec 2d       	mov	r30, r12
    4dc8:	e2 60       	ori	r30, 0x02	; 2
    4dca:	ce 2e       	mov	r12, r30
    4dcc:	08 c0       	rjmp	.+16     	; 0x4dde <follow_path+0x1ce>
    4dce:	6f e9       	ldi	r22, 0x9F	; 159
    4dd0:	6b 0f       	add	r22, r27
    4dd2:	6a 31       	cpi	r22, 0x1A	; 26
    4dd4:	20 f4       	brcc	.+8      	; 0x4dde <follow_path+0x1ce>
    4dd6:	fc 2d       	mov	r31, r12
    4dd8:	f1 60       	ori	r31, 0x01	; 1
    4dda:	cf 2e       	mov	r12, r31
    4ddc:	b0 52       	subi	r27, 0x20	; 32
    4dde:	f7 01       	movw	r30, r14
    4de0:	e2 0f       	add	r30, r18
    4de2:	f3 1f       	adc	r31, r19
    4de4:	b0 83       	st	Z, r27
    4de6:	2f 5f       	subi	r18, 0xFF	; 255
    4de8:	3f 4f       	sbci	r19, 0xFF	; 255
    4dea:	ba 01       	movw	r22, r20
    4dec:	8c cf       	rjmp	.-232    	; 0x4d06 <follow_path+0xf6>
    4dee:	23 2b       	or	r18, r19
    4df0:	09 f4       	brne	.+2      	; 0x4df4 <follow_path+0x1e4>
    4df2:	82 c0       	rjmp	.+260    	; 0x4ef8 <follow_path+0x2e8>
    4df4:	f7 01       	movw	r30, r14
    4df6:	20 81       	ld	r18, Z
    4df8:	25 3e       	cpi	r18, 0xE5	; 229
    4dfa:	09 f4       	brne	.+2      	; 0x4dfe <follow_path+0x1ee>
    4dfc:	80 82       	st	Z, r8
    4dfe:	08 97       	sbiw	r24, 0x08	; 8
    4e00:	19 f4       	brne	.+6      	; 0x4e08 <follow_path+0x1f8>
    4e02:	c5 2e       	mov	r12, r21
    4e04:	cc 0c       	add	r12, r12
    4e06:	cc 0c       	add	r12, r12
    4e08:	8c 2d       	mov	r24, r12
    4e0a:	83 70       	andi	r24, 0x03	; 3
    4e0c:	81 30       	cpi	r24, 0x01	; 1
    4e0e:	09 f4       	brne	.+2      	; 0x4e12 <follow_path+0x202>
    4e10:	40 61       	ori	r20, 0x10	; 16
    4e12:	8c 2d       	mov	r24, r12
    4e14:	8c 70       	andi	r24, 0x0C	; 12
    4e16:	84 30       	cpi	r24, 0x04	; 4
    4e18:	09 f4       	brne	.+2      	; 0x4e1c <follow_path+0x20c>
    4e1a:	48 60       	ori	r20, 0x08	; 8
    4e1c:	f7 01       	movw	r30, r14
    4e1e:	43 87       	std	Z+11, r20	; 0x0b
    4e20:	6d c0       	rjmp	.+218    	; 0x4efc <follow_path+0x2ec>
    4e22:	4e 85       	ldd	r20, Y+14	; 0x0e
    4e24:	5f 85       	ldd	r21, Y+15	; 0x0f
    4e26:	68 89       	ldd	r22, Y+16	; 0x10
    4e28:	79 89       	ldd	r23, Y+17	; 0x11
    4e2a:	88 81       	ld	r24, Y
    4e2c:	99 81       	ldd	r25, Y+1	; 0x01
    4e2e:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <move_window>
    4e32:	81 11       	cpse	r24, r1
    4e34:	6a c0       	rjmp	.+212    	; 0x4f0a <follow_path+0x2fa>
    4e36:	6a 89       	ldd	r22, Y+18	; 0x12
    4e38:	7b 89       	ldd	r23, Y+19	; 0x13
    4e3a:	fb 01       	movw	r30, r22
    4e3c:	90 81       	ld	r25, Z
    4e3e:	99 23       	and	r25, r25
    4e40:	09 f4       	brne	.+2      	; 0x4e44 <follow_path+0x234>
    4e42:	6a c0       	rjmp	.+212    	; 0x4f18 <follow_path+0x308>
    4e44:	93 85       	ldd	r25, Z+11	; 0x0b
    4e46:	93 fd       	sbrc	r25, 3
    4e48:	0f c0       	rjmp	.+30     	; 0x4e68 <follow_path+0x258>
    4e4a:	4c 89       	ldd	r20, Y+20	; 0x14
    4e4c:	5d 89       	ldd	r21, Y+21	; 0x15
    4e4e:	da 01       	movw	r26, r20
    4e50:	9b 01       	movw	r18, r22
    4e52:	25 5f       	subi	r18, 0xF5	; 245
    4e54:	3f 4f       	sbci	r19, 0xFF	; 255
    4e56:	04 c0       	rjmp	.+8      	; 0x4e60 <follow_path+0x250>
    4e58:	e2 17       	cp	r30, r18
    4e5a:	f3 07       	cpc	r31, r19
    4e5c:	09 f4       	brne	.+2      	; 0x4e60 <follow_path+0x250>
    4e5e:	60 c0       	rjmp	.+192    	; 0x4f20 <follow_path+0x310>
    4e60:	f1 90       	ld	r15, Z+
    4e62:	9d 91       	ld	r25, X+
    4e64:	f9 16       	cp	r15, r25
    4e66:	c1 f3       	breq	.-16     	; 0x4e58 <follow_path+0x248>
    4e68:	60 e0       	ldi	r22, 0x00	; 0
    4e6a:	70 e0       	ldi	r23, 0x00	; 0
    4e6c:	ce 01       	movw	r24, r28
    4e6e:	b2 dd       	rcall	.-1180   	; 0x49d4 <dir_next>
    4e70:	88 23       	and	r24, r24
    4e72:	b9 f2       	breq	.-82     	; 0x4e22 <follow_path+0x212>
    4e74:	4a c0       	rjmp	.+148    	; 0x4f0a <follow_path+0x2fa>
    4e76:	95 ff       	sbrs	r25, 5
    4e78:	0a c0       	rjmp	.+20     	; 0x4e8e <follow_path+0x27e>
    4e7a:	1e 82       	std	Y+6, r1	; 0x06
    4e7c:	1f 82       	std	Y+7, r1	; 0x07
    4e7e:	18 86       	std	Y+8, r1	; 0x08
    4e80:	19 86       	std	Y+9, r1	; 0x09
    4e82:	1a 8a       	std	Y+18, r1	; 0x12
    4e84:	1b 8a       	std	Y+19, r1	; 0x13
    4e86:	92 ff       	sbrs	r25, 2
    4e88:	03 cf       	rjmp	.-506    	; 0x4c90 <follow_path+0x80>
    4e8a:	80 e0       	ldi	r24, 0x00	; 0
    4e8c:	4d c0       	rjmp	.+154    	; 0x4f28 <follow_path+0x318>
    4e8e:	92 ff       	sbrs	r25, 2
    4e90:	11 c0       	rjmp	.+34     	; 0x4eb4 <follow_path+0x2a4>
    4e92:	84 e0       	ldi	r24, 0x04	; 4
    4e94:	49 c0       	rjmp	.+146    	; 0x4f28 <follow_path+0x318>
    4e96:	fb 01       	movw	r30, r22
    4e98:	83 85       	ldd	r24, Z+11	; 0x0b
    4e9a:	84 ff       	sbrs	r24, 4
    4e9c:	0d c0       	rjmp	.+26     	; 0x4eb8 <follow_path+0x2a8>
    4e9e:	88 81       	ld	r24, Y
    4ea0:	99 81       	ldd	r25, Y+1	; 0x01
    4ea2:	0e 94 90 1c 	call	0x3920	; 0x3920 <ld_clust>
    4ea6:	6e 83       	std	Y+6, r22	; 0x06
    4ea8:	7f 83       	std	Y+7, r23	; 0x07
    4eaa:	88 87       	std	Y+8, r24	; 0x08
    4eac:	99 87       	std	Y+9, r25	; 0x09
    4eae:	f0 ce       	rjmp	.-544    	; 0x4c90 <follow_path+0x80>
    4eb0:	86 e0       	ldi	r24, 0x06	; 6
    4eb2:	3a c0       	rjmp	.+116    	; 0x4f28 <follow_path+0x318>
    4eb4:	85 e0       	ldi	r24, 0x05	; 5
    4eb6:	38 c0       	rjmp	.+112    	; 0x4f28 <follow_path+0x318>
    4eb8:	85 e0       	ldi	r24, 0x05	; 5
    4eba:	36 c0       	rjmp	.+108    	; 0x4f28 <follow_path+0x318>
    4ebc:	86 e0       	ldi	r24, 0x06	; 6
    4ebe:	34 c0       	rjmp	.+104    	; 0x4f28 <follow_path+0x318>
    4ec0:	08 0f       	add	r16, r24
    4ec2:	19 1f       	adc	r17, r25
    4ec4:	80 e2       	ldi	r24, 0x20	; 32
    4ec6:	1c cf       	rjmp	.-456    	; 0x4d00 <follow_path+0xf0>
    4ec8:	08 0f       	add	r16, r24
    4eca:	19 1f       	adc	r17, r25
    4ecc:	84 e2       	ldi	r24, 0x24	; 36
    4ece:	18 cf       	rjmp	.-464    	; 0x4d00 <follow_path+0xf0>
    4ed0:	08 97       	sbiw	r24, 0x08	; 8
    4ed2:	09 f4       	brne	.+2      	; 0x4ed6 <follow_path+0x2c6>
    4ed4:	30 cf       	rjmp	.-416    	; 0x4d36 <follow_path+0x126>
    4ed6:	f2 cf       	rjmp	.-28     	; 0x4ebc <follow_path+0x2ac>
    4ed8:	6f eb       	ldi	r22, 0xBF	; 191
    4eda:	6b 0f       	add	r22, r27
    4edc:	6a 31       	cpi	r22, 0x1A	; 26
    4ede:	08 f4       	brcc	.+2      	; 0x4ee2 <follow_path+0x2d2>
    4ee0:	72 cf       	rjmp	.-284    	; 0x4dc6 <follow_path+0x1b6>
    4ee2:	75 cf       	rjmp	.-278    	; 0x4dce <follow_path+0x1be>
    4ee4:	04 0f       	add	r16, r20
    4ee6:	15 1f       	adc	r17, r21
    4ee8:	5c 2d       	mov	r21, r12
    4eea:	40 e0       	ldi	r20, 0x00	; 0
    4eec:	80 cf       	rjmp	.-256    	; 0x4dee <follow_path+0x1de>
    4eee:	04 0f       	add	r16, r20
    4ef0:	15 1f       	adc	r17, r21
    4ef2:	5c 2d       	mov	r21, r12
    4ef4:	44 e0       	ldi	r20, 0x04	; 4
    4ef6:	7b cf       	rjmp	.-266    	; 0x4dee <follow_path+0x1de>
    4ef8:	86 e0       	ldi	r24, 0x06	; 6
    4efa:	16 c0       	rjmp	.+44     	; 0x4f28 <follow_path+0x318>
    4efc:	60 e0       	ldi	r22, 0x00	; 0
    4efe:	70 e0       	ldi	r23, 0x00	; 0
    4f00:	ce 01       	movw	r24, r28
    4f02:	a1 da       	rcall	.-2750   	; 0x4446 <dir_sdi>
    4f04:	88 23       	and	r24, r24
    4f06:	09 f4       	brne	.+2      	; 0x4f0a <follow_path+0x2fa>
    4f08:	8c cf       	rjmp	.-232    	; 0x4e22 <follow_path+0x212>
    4f0a:	ec 89       	ldd	r30, Y+20	; 0x14
    4f0c:	fd 89       	ldd	r31, Y+21	; 0x15
    4f0e:	93 85       	ldd	r25, Z+11	; 0x0b
    4f10:	84 30       	cpi	r24, 0x04	; 4
    4f12:	09 f4       	brne	.+2      	; 0x4f16 <follow_path+0x306>
    4f14:	b0 cf       	rjmp	.-160    	; 0x4e76 <follow_path+0x266>
    4f16:	08 c0       	rjmp	.+16     	; 0x4f28 <follow_path+0x318>
    4f18:	ec 89       	ldd	r30, Y+20	; 0x14
    4f1a:	fd 89       	ldd	r31, Y+21	; 0x15
    4f1c:	93 85       	ldd	r25, Z+11	; 0x0b
    4f1e:	ab cf       	rjmp	.-170    	; 0x4e76 <follow_path+0x266>
    4f20:	fa 01       	movw	r30, r20
    4f22:	93 85       	ldd	r25, Z+11	; 0x0b
    4f24:	92 ff       	sbrs	r25, 2
    4f26:	b7 cf       	rjmp	.-146    	; 0x4e96 <follow_path+0x286>
    4f28:	df 91       	pop	r29
    4f2a:	cf 91       	pop	r28
    4f2c:	1f 91       	pop	r17
    4f2e:	0f 91       	pop	r16
    4f30:	ff 90       	pop	r15
    4f32:	ef 90       	pop	r14
    4f34:	df 90       	pop	r13
    4f36:	cf 90       	pop	r12
    4f38:	bf 90       	pop	r11
    4f3a:	af 90       	pop	r10
    4f3c:	8f 90       	pop	r8
    4f3e:	7f 90       	pop	r7
    4f40:	6f 90       	pop	r6
    4f42:	08 95       	ret

00004f44 <dir_alloc>:
    4f44:	ef 92       	push	r14
    4f46:	ff 92       	push	r15
    4f48:	0f 93       	push	r16
    4f4a:	1f 93       	push	r17
    4f4c:	cf 93       	push	r28
    4f4e:	df 93       	push	r29
    4f50:	ec 01       	movw	r28, r24
    4f52:	7b 01       	movw	r14, r22
    4f54:	60 e0       	ldi	r22, 0x00	; 0
    4f56:	70 e0       	ldi	r23, 0x00	; 0
    4f58:	76 da       	rcall	.-2836   	; 0x4446 <dir_sdi>
    4f5a:	81 11       	cpse	r24, r1
    4f5c:	21 c0       	rjmp	.+66     	; 0x4fa0 <dir_alloc+0x5c>
    4f5e:	00 e0       	ldi	r16, 0x00	; 0
    4f60:	10 e0       	ldi	r17, 0x00	; 0
    4f62:	4e 85       	ldd	r20, Y+14	; 0x0e
    4f64:	5f 85       	ldd	r21, Y+15	; 0x0f
    4f66:	68 89       	ldd	r22, Y+16	; 0x10
    4f68:	79 89       	ldd	r23, Y+17	; 0x11
    4f6a:	88 81       	ld	r24, Y
    4f6c:	99 81       	ldd	r25, Y+1	; 0x01
    4f6e:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <move_window>
    4f72:	81 11       	cpse	r24, r1
    4f74:	15 c0       	rjmp	.+42     	; 0x4fa0 <dir_alloc+0x5c>
    4f76:	ea 89       	ldd	r30, Y+18	; 0x12
    4f78:	fb 89       	ldd	r31, Y+19	; 0x13
    4f7a:	90 81       	ld	r25, Z
    4f7c:	95 3e       	cpi	r25, 0xE5	; 229
    4f7e:	11 f0       	breq	.+4      	; 0x4f84 <dir_alloc+0x40>
    4f80:	91 11       	cpse	r25, r1
    4f82:	06 c0       	rjmp	.+12     	; 0x4f90 <dir_alloc+0x4c>
    4f84:	0f 5f       	subi	r16, 0xFF	; 255
    4f86:	1f 4f       	sbci	r17, 0xFF	; 255
    4f88:	0e 15       	cp	r16, r14
    4f8a:	1f 05       	cpc	r17, r15
    4f8c:	19 f4       	brne	.+6      	; 0x4f94 <dir_alloc+0x50>
    4f8e:	0b c0       	rjmp	.+22     	; 0x4fa6 <dir_alloc+0x62>
    4f90:	00 e0       	ldi	r16, 0x00	; 0
    4f92:	10 e0       	ldi	r17, 0x00	; 0
    4f94:	61 e0       	ldi	r22, 0x01	; 1
    4f96:	70 e0       	ldi	r23, 0x00	; 0
    4f98:	ce 01       	movw	r24, r28
    4f9a:	1c dd       	rcall	.-1480   	; 0x49d4 <dir_next>
    4f9c:	88 23       	and	r24, r24
    4f9e:	09 f3       	breq	.-62     	; 0x4f62 <dir_alloc+0x1e>
    4fa0:	84 30       	cpi	r24, 0x04	; 4
    4fa2:	09 f4       	brne	.+2      	; 0x4fa6 <dir_alloc+0x62>
    4fa4:	87 e0       	ldi	r24, 0x07	; 7
    4fa6:	df 91       	pop	r29
    4fa8:	cf 91       	pop	r28
    4faa:	1f 91       	pop	r17
    4fac:	0f 91       	pop	r16
    4fae:	ff 90       	pop	r15
    4fb0:	ef 90       	pop	r14
    4fb2:	08 95       	ret

00004fb4 <dir_register>:
    4fb4:	1f 93       	push	r17
    4fb6:	cf 93       	push	r28
    4fb8:	df 93       	push	r29
    4fba:	ec 01       	movw	r28, r24
    4fbc:	61 e0       	ldi	r22, 0x01	; 1
    4fbe:	70 e0       	ldi	r23, 0x00	; 0
    4fc0:	c1 df       	rcall	.-126    	; 0x4f44 <dir_alloc>
    4fc2:	18 2f       	mov	r17, r24
    4fc4:	81 11       	cpse	r24, r1
    4fc6:	1f c0       	rjmp	.+62     	; 0x5006 <dir_register+0x52>
    4fc8:	4e 85       	ldd	r20, Y+14	; 0x0e
    4fca:	5f 85       	ldd	r21, Y+15	; 0x0f
    4fcc:	68 89       	ldd	r22, Y+16	; 0x10
    4fce:	79 89       	ldd	r23, Y+17	; 0x11
    4fd0:	88 81       	ld	r24, Y
    4fd2:	99 81       	ldd	r25, Y+1	; 0x01
    4fd4:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <move_window>
    4fd8:	18 2f       	mov	r17, r24
    4fda:	81 11       	cpse	r24, r1
    4fdc:	14 c0       	rjmp	.+40     	; 0x5006 <dir_register+0x52>
    4fde:	40 e2       	ldi	r20, 0x20	; 32
    4fe0:	50 e0       	ldi	r21, 0x00	; 0
    4fe2:	60 e0       	ldi	r22, 0x00	; 0
    4fe4:	70 e0       	ldi	r23, 0x00	; 0
    4fe6:	8a 89       	ldd	r24, Y+18	; 0x12
    4fe8:	9b 89       	ldd	r25, Y+19	; 0x13
    4fea:	0e 94 85 1c 	call	0x390a	; 0x390a <mem_set>
    4fee:	6c 89       	ldd	r22, Y+20	; 0x14
    4ff0:	7d 89       	ldd	r23, Y+21	; 0x15
    4ff2:	4b e0       	ldi	r20, 0x0B	; 11
    4ff4:	50 e0       	ldi	r21, 0x00	; 0
    4ff6:	8a 89       	ldd	r24, Y+18	; 0x12
    4ff8:	9b 89       	ldd	r25, Y+19	; 0x13
    4ffa:	0e 94 55 1c 	call	0x38aa	; 0x38aa <mem_cpy>
    4ffe:	e8 81       	ld	r30, Y
    5000:	f9 81       	ldd	r31, Y+1	; 0x01
    5002:	81 e0       	ldi	r24, 0x01	; 1
    5004:	84 83       	std	Z+4, r24	; 0x04
    5006:	81 2f       	mov	r24, r17
    5008:	df 91       	pop	r29
    500a:	cf 91       	pop	r28
    500c:	1f 91       	pop	r17
    500e:	08 95       	ret

00005010 <remove_chain>:
    5010:	8f 92       	push	r8
    5012:	9f 92       	push	r9
    5014:	af 92       	push	r10
    5016:	bf 92       	push	r11
    5018:	cf 92       	push	r12
    501a:	df 92       	push	r13
    501c:	ef 92       	push	r14
    501e:	ff 92       	push	r15
    5020:	0f 93       	push	r16
    5022:	1f 93       	push	r17
    5024:	cf 93       	push	r28
    5026:	df 93       	push	r29
    5028:	ec 01       	movw	r28, r24
    502a:	4a 01       	movw	r8, r20
    502c:	5b 01       	movw	r10, r22
    502e:	42 30       	cpi	r20, 0x02	; 2
    5030:	51 05       	cpc	r21, r1
    5032:	61 05       	cpc	r22, r1
    5034:	71 05       	cpc	r23, r1
    5036:	08 f4       	brcc	.+2      	; 0x503a <remove_chain+0x2a>
    5038:	4b c0       	rjmp	.+150    	; 0x50d0 <remove_chain+0xc0>
    503a:	4e 89       	ldd	r20, Y+22	; 0x16
    503c:	5f 89       	ldd	r21, Y+23	; 0x17
    503e:	68 8d       	ldd	r22, Y+24	; 0x18
    5040:	79 8d       	ldd	r23, Y+25	; 0x19
    5042:	84 16       	cp	r8, r20
    5044:	95 06       	cpc	r9, r21
    5046:	a6 06       	cpc	r10, r22
    5048:	b7 06       	cpc	r11, r23
    504a:	08 f0       	brcs	.+2      	; 0x504e <remove_chain+0x3e>
    504c:	43 c0       	rjmp	.+134    	; 0x50d4 <remove_chain+0xc4>
    504e:	b5 01       	movw	r22, r10
    5050:	a4 01       	movw	r20, r8
    5052:	ce 01       	movw	r24, r28
    5054:	12 d9       	rcall	.-3548   	; 0x427a <get_fat>
    5056:	6b 01       	movw	r12, r22
    5058:	7c 01       	movw	r14, r24
    505a:	61 15       	cp	r22, r1
    505c:	71 05       	cpc	r23, r1
    505e:	81 05       	cpc	r24, r1
    5060:	91 05       	cpc	r25, r1
    5062:	d1 f1       	breq	.+116    	; 0x50d8 <remove_chain+0xc8>
    5064:	91 e0       	ldi	r25, 0x01	; 1
    5066:	c9 16       	cp	r12, r25
    5068:	d1 04       	cpc	r13, r1
    506a:	e1 04       	cpc	r14, r1
    506c:	f1 04       	cpc	r15, r1
    506e:	b1 f1       	breq	.+108    	; 0x50dc <remove_chain+0xcc>
    5070:	8f ef       	ldi	r24, 0xFF	; 255
    5072:	c8 16       	cp	r12, r24
    5074:	d8 06       	cpc	r13, r24
    5076:	e8 06       	cpc	r14, r24
    5078:	f8 06       	cpc	r15, r24
    507a:	91 f1       	breq	.+100    	; 0x50e0 <remove_chain+0xd0>
    507c:	00 e0       	ldi	r16, 0x00	; 0
    507e:	10 e0       	ldi	r17, 0x00	; 0
    5080:	98 01       	movw	r18, r16
    5082:	b5 01       	movw	r22, r10
    5084:	a4 01       	movw	r20, r8
    5086:	ce 01       	movw	r24, r28
    5088:	99 da       	rcall	.-2766   	; 0x45bc <put_fat>
    508a:	81 11       	cpse	r24, r1
    508c:	2a c0       	rjmp	.+84     	; 0x50e2 <remove_chain+0xd2>
    508e:	4e 85       	ldd	r20, Y+14	; 0x0e
    5090:	5f 85       	ldd	r21, Y+15	; 0x0f
    5092:	68 89       	ldd	r22, Y+16	; 0x10
    5094:	79 89       	ldd	r23, Y+17	; 0x11
    5096:	4f 3f       	cpi	r20, 0xFF	; 255
    5098:	9f ef       	ldi	r25, 0xFF	; 255
    509a:	59 07       	cpc	r21, r25
    509c:	69 07       	cpc	r22, r25
    509e:	79 07       	cpc	r23, r25
    50a0:	59 f0       	breq	.+22     	; 0x50b8 <remove_chain+0xa8>
    50a2:	4f 5f       	subi	r20, 0xFF	; 255
    50a4:	5f 4f       	sbci	r21, 0xFF	; 255
    50a6:	6f 4f       	sbci	r22, 0xFF	; 255
    50a8:	7f 4f       	sbci	r23, 0xFF	; 255
    50aa:	4e 87       	std	Y+14, r20	; 0x0e
    50ac:	5f 87       	std	Y+15, r21	; 0x0f
    50ae:	68 8b       	std	Y+16, r22	; 0x10
    50b0:	79 8b       	std	Y+17, r23	; 0x11
    50b2:	9d 81       	ldd	r25, Y+5	; 0x05
    50b4:	91 60       	ori	r25, 0x01	; 1
    50b6:	9d 83       	std	Y+5, r25	; 0x05
    50b8:	4e 89       	ldd	r20, Y+22	; 0x16
    50ba:	5f 89       	ldd	r21, Y+23	; 0x17
    50bc:	68 8d       	ldd	r22, Y+24	; 0x18
    50be:	79 8d       	ldd	r23, Y+25	; 0x19
    50c0:	c4 16       	cp	r12, r20
    50c2:	d5 06       	cpc	r13, r21
    50c4:	e6 06       	cpc	r14, r22
    50c6:	f7 06       	cpc	r15, r23
    50c8:	60 f4       	brcc	.+24     	; 0x50e2 <remove_chain+0xd2>
    50ca:	46 01       	movw	r8, r12
    50cc:	57 01       	movw	r10, r14
    50ce:	bf cf       	rjmp	.-130    	; 0x504e <remove_chain+0x3e>
    50d0:	82 e0       	ldi	r24, 0x02	; 2
    50d2:	07 c0       	rjmp	.+14     	; 0x50e2 <remove_chain+0xd2>
    50d4:	82 e0       	ldi	r24, 0x02	; 2
    50d6:	05 c0       	rjmp	.+10     	; 0x50e2 <remove_chain+0xd2>
    50d8:	80 e0       	ldi	r24, 0x00	; 0
    50da:	03 c0       	rjmp	.+6      	; 0x50e2 <remove_chain+0xd2>
    50dc:	82 e0       	ldi	r24, 0x02	; 2
    50de:	01 c0       	rjmp	.+2      	; 0x50e2 <remove_chain+0xd2>
    50e0:	81 e0       	ldi	r24, 0x01	; 1
    50e2:	df 91       	pop	r29
    50e4:	cf 91       	pop	r28
    50e6:	1f 91       	pop	r17
    50e8:	0f 91       	pop	r16
    50ea:	ff 90       	pop	r15
    50ec:	ef 90       	pop	r14
    50ee:	df 90       	pop	r13
    50f0:	cf 90       	pop	r12
    50f2:	bf 90       	pop	r11
    50f4:	af 90       	pop	r10
    50f6:	9f 90       	pop	r9
    50f8:	8f 90       	pop	r8
    50fa:	08 95       	ret

000050fc <f_mount>:
    50fc:	1f 93       	push	r17
    50fe:	cf 93       	push	r28
    5100:	df 93       	push	r29
    5102:	cd b7       	in	r28, 0x3d	; 61
    5104:	de b7       	in	r29, 0x3e	; 62
    5106:	26 97       	sbiw	r28, 0x06	; 6
    5108:	cd bf       	out	0x3d, r28	; 61
    510a:	de bf       	out	0x3e, r29	; 62
    510c:	8b 83       	std	Y+3, r24	; 0x03
    510e:	9c 83       	std	Y+4, r25	; 0x04
    5110:	6d 83       	std	Y+5, r22	; 0x05
    5112:	7e 83       	std	Y+6, r23	; 0x06
    5114:	14 2f       	mov	r17, r20
    5116:	69 83       	std	Y+1, r22	; 0x01
    5118:	7a 83       	std	Y+2, r23	; 0x02
    511a:	ce 01       	movw	r24, r28
    511c:	01 96       	adiw	r24, 0x01	; 1
    511e:	0e 94 a9 1c 	call	0x3952	; 0x3952 <get_ldnumber>
    5122:	99 23       	and	r25, r25
    5124:	34 f1       	brlt	.+76     	; 0x5172 <f_mount+0x76>
    5126:	fc 01       	movw	r30, r24
    5128:	ee 0f       	add	r30, r30
    512a:	ff 1f       	adc	r31, r31
    512c:	e8 58       	subi	r30, 0x88	; 136
    512e:	fa 4d       	sbci	r31, 0xDA	; 218
    5130:	01 90       	ld	r0, Z+
    5132:	f0 81       	ld	r31, Z
    5134:	e0 2d       	mov	r30, r0
    5136:	30 97       	sbiw	r30, 0x00	; 0
    5138:	09 f0       	breq	.+2      	; 0x513c <f_mount+0x40>
    513a:	10 82       	st	Z, r1
    513c:	eb 81       	ldd	r30, Y+3	; 0x03
    513e:	fc 81       	ldd	r31, Y+4	; 0x04
    5140:	30 97       	sbiw	r30, 0x00	; 0
    5142:	e9 f0       	breq	.+58     	; 0x517e <f_mount+0x82>
    5144:	10 82       	st	Z, r1
    5146:	2b 81       	ldd	r18, Y+3	; 0x03
    5148:	3c 81       	ldd	r19, Y+4	; 0x04
    514a:	fc 01       	movw	r30, r24
    514c:	ee 0f       	add	r30, r30
    514e:	ff 1f       	adc	r31, r31
    5150:	e8 58       	subi	r30, 0x88	; 136
    5152:	fa 4d       	sbci	r31, 0xDA	; 218
    5154:	20 83       	st	Z, r18
    5156:	31 83       	std	Z+1, r19	; 0x01
    5158:	23 2b       	or	r18, r19
    515a:	69 f0       	breq	.+26     	; 0x5176 <f_mount+0x7a>
    515c:	11 30       	cpi	r17, 0x01	; 1
    515e:	69 f4       	brne	.+26     	; 0x517a <f_mount+0x7e>
    5160:	40 e0       	ldi	r20, 0x00	; 0
    5162:	be 01       	movw	r22, r28
    5164:	6b 5f       	subi	r22, 0xFB	; 251
    5166:	7f 4f       	sbci	r23, 0xFF	; 255
    5168:	ce 01       	movw	r24, r28
    516a:	03 96       	adiw	r24, 0x03	; 3
    516c:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <find_volume>
    5170:	0e c0       	rjmp	.+28     	; 0x518e <f_mount+0x92>
    5172:	8b e0       	ldi	r24, 0x0B	; 11
    5174:	0c c0       	rjmp	.+24     	; 0x518e <f_mount+0x92>
    5176:	80 e0       	ldi	r24, 0x00	; 0
    5178:	0a c0       	rjmp	.+20     	; 0x518e <f_mount+0x92>
    517a:	80 e0       	ldi	r24, 0x00	; 0
    517c:	08 c0       	rjmp	.+16     	; 0x518e <f_mount+0x92>
    517e:	fc 01       	movw	r30, r24
    5180:	ee 0f       	add	r30, r30
    5182:	ff 1f       	adc	r31, r31
    5184:	e8 58       	subi	r30, 0x88	; 136
    5186:	fa 4d       	sbci	r31, 0xDA	; 218
    5188:	10 82       	st	Z, r1
    518a:	11 82       	std	Z+1, r1	; 0x01
    518c:	80 e0       	ldi	r24, 0x00	; 0
    518e:	26 96       	adiw	r28, 0x06	; 6
    5190:	cd bf       	out	0x3d, r28	; 61
    5192:	de bf       	out	0x3e, r29	; 62
    5194:	df 91       	pop	r29
    5196:	cf 91       	pop	r28
    5198:	1f 91       	pop	r17
    519a:	08 95       	ret

0000519c <f_open>:
    519c:	4f 92       	push	r4
    519e:	5f 92       	push	r5
    51a0:	6f 92       	push	r6
    51a2:	7f 92       	push	r7
    51a4:	bf 92       	push	r11
    51a6:	cf 92       	push	r12
    51a8:	df 92       	push	r13
    51aa:	ef 92       	push	r14
    51ac:	ff 92       	push	r15
    51ae:	0f 93       	push	r16
    51b0:	1f 93       	push	r17
    51b2:	cf 93       	push	r28
    51b4:	df 93       	push	r29
    51b6:	cd b7       	in	r28, 0x3d	; 61
    51b8:	de b7       	in	r29, 0x3e	; 62
    51ba:	a8 97       	sbiw	r28, 0x28	; 40
    51bc:	cd bf       	out	0x3d, r28	; 61
    51be:	de bf       	out	0x3e, r29	; 62
    51c0:	8c 01       	movw	r16, r24
    51c2:	6b a3       	std	Y+35, r22	; 0x23
    51c4:	7c a3       	std	Y+36, r23	; 0x24
    51c6:	f4 2e       	mov	r15, r20
    51c8:	00 97       	sbiw	r24, 0x00	; 0
    51ca:	09 f4       	brne	.+2      	; 0x51ce <f_open+0x32>
    51cc:	d2 c0       	rjmp	.+420    	; 0x5372 <f_open+0x1d6>
    51ce:	dc 01       	movw	r26, r24
    51d0:	1d 92       	st	X+, r1
    51d2:	1c 92       	st	X, r1
    51d4:	4e 71       	andi	r20, 0x1E	; 30
    51d6:	be 01       	movw	r22, r28
    51d8:	6d 5d       	subi	r22, 0xDD	; 221
    51da:	7f 4f       	sbci	r23, 0xFF	; 255
    51dc:	ce 01       	movw	r24, r28
    51de:	01 96       	adiw	r24, 0x01	; 1
    51e0:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <find_volume>
    51e4:	81 11       	cpse	r24, r1
    51e6:	d9 c0       	rjmp	.+434    	; 0x539a <f_open+0x1fe>
    51e8:	bf 2d       	mov	r27, r15
    51ea:	bf 71       	andi	r27, 0x1F	; 31
    51ec:	bb 2e       	mov	r11, r27
    51ee:	ce 01       	movw	r24, r28
    51f0:	47 96       	adiw	r24, 0x17	; 23
    51f2:	8d 8b       	std	Y+21, r24	; 0x15
    51f4:	9e 8b       	std	Y+22, r25	; 0x16
    51f6:	6b a1       	ldd	r22, Y+35	; 0x23
    51f8:	7c a1       	ldd	r23, Y+36	; 0x24
    51fa:	46 97       	sbiw	r24, 0x16	; 22
    51fc:	09 dd       	rcall	.-1518   	; 0x4c10 <follow_path>
    51fe:	cb 88       	ldd	r12, Y+19	; 0x13
    5200:	dc 88       	ldd	r13, Y+20	; 0x14
    5202:	81 11       	cpse	r24, r1
    5204:	be c0       	rjmp	.+380    	; 0x5382 <f_open+0x1e6>
    5206:	c1 14       	cp	r12, r1
    5208:	d1 04       	cpc	r13, r1
    520a:	09 f0       	breq	.+2      	; 0x520e <f_open+0x72>
    520c:	b4 c0       	rjmp	.+360    	; 0x5376 <f_open+0x1da>
    520e:	b8 c0       	rjmp	.+368    	; 0x5380 <f_open+0x1e4>
    5210:	88 23       	and	r24, r24
    5212:	71 f0       	breq	.+28     	; 0x5230 <f_open+0x94>
    5214:	84 30       	cpi	r24, 0x04	; 4
    5216:	09 f0       	breq	.+2      	; 0x521a <f_open+0x7e>
    5218:	c0 c0       	rjmp	.+384    	; 0x539a <f_open+0x1fe>
    521a:	ce 01       	movw	r24, r28
    521c:	01 96       	adiw	r24, 0x01	; 1
    521e:	ca de       	rcall	.-620    	; 0x4fb4 <dir_register>
    5220:	eb 2d       	mov	r30, r11
    5222:	e8 60       	ori	r30, 0x08	; 8
    5224:	be 2e       	mov	r11, r30
    5226:	cb 88       	ldd	r12, Y+19	; 0x13
    5228:	dc 88       	ldd	r13, Y+20	; 0x14
    522a:	88 23       	and	r24, r24
    522c:	49 f0       	breq	.+18     	; 0x5240 <f_open+0xa4>
    522e:	b5 c0       	rjmp	.+362    	; 0x539a <f_open+0x1fe>
    5230:	d6 01       	movw	r26, r12
    5232:	1b 96       	adiw	r26, 0x0b	; 11
    5234:	8c 91       	ld	r24, X
    5236:	81 71       	andi	r24, 0x11	; 17
    5238:	09 f0       	breq	.+2      	; 0x523c <f_open+0xa0>
    523a:	a8 c0       	rjmp	.+336    	; 0x538c <f_open+0x1f0>
    523c:	f2 fc       	sbrc	r15, 2
    523e:	a8 c0       	rjmp	.+336    	; 0x5390 <f_open+0x1f4>
    5240:	b3 fe       	sbrs	r11, 3
    5242:	55 c0       	rjmp	.+170    	; 0x52ee <f_open+0x152>
    5244:	80 e0       	ldi	r24, 0x00	; 0
    5246:	90 e0       	ldi	r25, 0x00	; 0
    5248:	af e4       	ldi	r26, 0x4F	; 79
    524a:	b5 e4       	ldi	r27, 0x45	; 69
    524c:	f6 01       	movw	r30, r12
    524e:	86 87       	std	Z+14, r24	; 0x0e
    5250:	97 87       	std	Z+15, r25	; 0x0f
    5252:	a0 8b       	std	Z+16, r26	; 0x10
    5254:	b1 8b       	std	Z+17, r27	; 0x11
    5256:	13 86       	std	Z+11, r1	; 0x0b
    5258:	14 8e       	std	Z+28, r1	; 0x1c
    525a:	15 8e       	std	Z+29, r1	; 0x1d
    525c:	16 8e       	std	Z+30, r1	; 0x1e
    525e:	17 8e       	std	Z+31, r1	; 0x1f
    5260:	e9 80       	ldd	r14, Y+1	; 0x01
    5262:	fa 80       	ldd	r15, Y+2	; 0x02
    5264:	b6 01       	movw	r22, r12
    5266:	c7 01       	movw	r24, r14
    5268:	0e 94 90 1c 	call	0x3920	; 0x3920 <ld_clust>
    526c:	2b 01       	movw	r4, r22
    526e:	3c 01       	movw	r6, r24
    5270:	f6 01       	movw	r30, r12
    5272:	12 8e       	std	Z+26, r1	; 0x1a
    5274:	13 8e       	std	Z+27, r1	; 0x1b
    5276:	14 8a       	std	Z+20, r1	; 0x14
    5278:	15 8a       	std	Z+21, r1	; 0x15
    527a:	81 e0       	ldi	r24, 0x01	; 1
    527c:	d7 01       	movw	r26, r14
    527e:	14 96       	adiw	r26, 0x04	; 4
    5280:	8c 93       	st	X, r24
    5282:	14 97       	sbiw	r26, 0x04	; 4
    5284:	41 14       	cp	r4, r1
    5286:	51 04       	cpc	r5, r1
    5288:	61 04       	cpc	r6, r1
    528a:	71 04       	cpc	r7, r1
    528c:	81 f1       	breq	.+96     	; 0x52ee <f_open+0x152>
    528e:	9e 96       	adiw	r26, 0x2e	; 46
    5290:	8d 91       	ld	r24, X+
    5292:	9d 91       	ld	r25, X+
    5294:	0d 90       	ld	r0, X+
    5296:	bc 91       	ld	r27, X
    5298:	a0 2d       	mov	r26, r0
    529a:	8d a3       	std	Y+37, r24	; 0x25
    529c:	9e a3       	std	Y+38, r25	; 0x26
    529e:	af a3       	std	Y+39, r26	; 0x27
    52a0:	b8 a7       	std	Y+40, r27	; 0x28
    52a2:	b3 01       	movw	r22, r6
    52a4:	a2 01       	movw	r20, r4
    52a6:	c7 01       	movw	r24, r14
    52a8:	b3 de       	rcall	.-666    	; 0x5010 <remove_chain>
    52aa:	81 11       	cpse	r24, r1
    52ac:	76 c0       	rjmp	.+236    	; 0x539a <f_open+0x1fe>
    52ae:	89 81       	ldd	r24, Y+1	; 0x01
    52b0:	9a 81       	ldd	r25, Y+2	; 0x02
    52b2:	b3 01       	movw	r22, r6
    52b4:	a2 01       	movw	r20, r4
    52b6:	41 50       	subi	r20, 0x01	; 1
    52b8:	51 09       	sbc	r21, r1
    52ba:	61 09       	sbc	r22, r1
    52bc:	71 09       	sbc	r23, r1
    52be:	fc 01       	movw	r30, r24
    52c0:	42 87       	std	Z+10, r20	; 0x0a
    52c2:	53 87       	std	Z+11, r21	; 0x0b
    52c4:	64 87       	std	Z+12, r22	; 0x0c
    52c6:	75 87       	std	Z+13, r23	; 0x0d
    52c8:	4d a1       	ldd	r20, Y+37	; 0x25
    52ca:	5e a1       	ldd	r21, Y+38	; 0x26
    52cc:	6f a1       	ldd	r22, Y+39	; 0x27
    52ce:	78 a5       	ldd	r23, Y+40	; 0x28
    52d0:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <move_window>
    52d4:	0a c0       	rjmp	.+20     	; 0x52ea <f_open+0x14e>
    52d6:	d6 01       	movw	r26, r12
    52d8:	1b 96       	adiw	r26, 0x0b	; 11
    52da:	8c 91       	ld	r24, X
    52dc:	84 fd       	sbrc	r24, 4
    52de:	5a c0       	rjmp	.+180    	; 0x5394 <f_open+0x1f8>
    52e0:	f1 fe       	sbrs	r15, 1
    52e2:	05 c0       	rjmp	.+10     	; 0x52ee <f_open+0x152>
    52e4:	80 fd       	sbrc	r24, 0
    52e6:	58 c0       	rjmp	.+176    	; 0x5398 <f_open+0x1fc>
    52e8:	02 c0       	rjmp	.+4      	; 0x52ee <f_open+0x152>
    52ea:	81 11       	cpse	r24, r1
    52ec:	56 c0       	rjmp	.+172    	; 0x539a <f_open+0x1fe>
    52ee:	b3 fe       	sbrs	r11, 3
    52f0:	03 c0       	rjmp	.+6      	; 0x52f8 <f_open+0x15c>
    52f2:	bb 2d       	mov	r27, r11
    52f4:	b0 62       	ori	r27, 0x20	; 32
    52f6:	bb 2e       	mov	r11, r27
    52f8:	e9 80       	ldd	r14, Y+1	; 0x01
    52fa:	fa 80       	ldd	r15, Y+2	; 0x02
    52fc:	f7 01       	movw	r30, r14
    52fe:	86 a5       	ldd	r24, Z+46	; 0x2e
    5300:	97 a5       	ldd	r25, Z+47	; 0x2f
    5302:	a0 a9       	ldd	r26, Z+48	; 0x30
    5304:	b1 a9       	ldd	r27, Z+49	; 0x31
    5306:	f8 01       	movw	r30, r16
    5308:	82 8f       	std	Z+26, r24	; 0x1a
    530a:	93 8f       	std	Z+27, r25	; 0x1b
    530c:	a4 8f       	std	Z+28, r26	; 0x1c
    530e:	b5 8f       	std	Z+29, r27	; 0x1d
    5310:	c6 8e       	std	Z+30, r12	; 0x1e
    5312:	d7 8e       	std	Z+31, r13	; 0x1f
    5314:	b4 82       	std	Z+4, r11	; 0x04
    5316:	15 82       	std	Z+5, r1	; 0x05
    5318:	b6 01       	movw	r22, r12
    531a:	c7 01       	movw	r24, r14
    531c:	0e 94 90 1c 	call	0x3920	; 0x3920 <ld_clust>
    5320:	d8 01       	movw	r26, r16
    5322:	1e 96       	adiw	r26, 0x0e	; 14
    5324:	6d 93       	st	X+, r22
    5326:	7d 93       	st	X+, r23
    5328:	8d 93       	st	X+, r24
    532a:	9c 93       	st	X, r25
    532c:	51 97       	sbiw	r26, 0x11	; 17
    532e:	f6 01       	movw	r30, r12
    5330:	44 8d       	ldd	r20, Z+28	; 0x1c
    5332:	55 8d       	ldd	r21, Z+29	; 0x1d
    5334:	66 8d       	ldd	r22, Z+30	; 0x1e
    5336:	77 8d       	ldd	r23, Z+31	; 0x1f
    5338:	1a 96       	adiw	r26, 0x0a	; 10
    533a:	4d 93       	st	X+, r20
    533c:	5d 93       	st	X+, r21
    533e:	6d 93       	st	X+, r22
    5340:	7c 93       	st	X, r23
    5342:	1d 97       	sbiw	r26, 0x0d	; 13
    5344:	f8 01       	movw	r30, r16
    5346:	16 82       	std	Z+6, r1	; 0x06
    5348:	17 82       	std	Z+7, r1	; 0x07
    534a:	10 86       	std	Z+8, r1	; 0x08
    534c:	11 86       	std	Z+9, r1	; 0x09
    534e:	56 96       	adiw	r26, 0x16	; 22
    5350:	1d 92       	st	X+, r1
    5352:	1d 92       	st	X+, r1
    5354:	1d 92       	st	X+, r1
    5356:	1c 92       	st	X, r1
    5358:	59 97       	sbiw	r26, 0x19	; 25
    535a:	ed 92       	st	X+, r14
    535c:	fc 92       	st	X, r15
    535e:	11 97       	sbiw	r26, 0x01	; 1
    5360:	f7 01       	movw	r30, r14
    5362:	86 81       	ldd	r24, Z+6	; 0x06
    5364:	97 81       	ldd	r25, Z+7	; 0x07
    5366:	12 96       	adiw	r26, 0x02	; 2
    5368:	8d 93       	st	X+, r24
    536a:	9c 93       	st	X, r25
    536c:	13 97       	sbiw	r26, 0x03	; 3
    536e:	80 e0       	ldi	r24, 0x00	; 0
    5370:	14 c0       	rjmp	.+40     	; 0x539a <f_open+0x1fe>
    5372:	89 e0       	ldi	r24, 0x09	; 9
    5374:	12 c0       	rjmp	.+36     	; 0x539a <f_open+0x1fe>
    5376:	8f 2d       	mov	r24, r15
    5378:	8c 71       	andi	r24, 0x1C	; 28
    537a:	09 f0       	breq	.+2      	; 0x537e <f_open+0x1e2>
    537c:	59 cf       	rjmp	.-334    	; 0x5230 <f_open+0x94>
    537e:	ab cf       	rjmp	.-170    	; 0x52d6 <f_open+0x13a>
    5380:	86 e0       	ldi	r24, 0x06	; 6
    5382:	9f 2d       	mov	r25, r15
    5384:	9c 71       	andi	r25, 0x1C	; 28
    5386:	09 f0       	breq	.+2      	; 0x538a <f_open+0x1ee>
    5388:	43 cf       	rjmp	.-378    	; 0x5210 <f_open+0x74>
    538a:	af cf       	rjmp	.-162    	; 0x52ea <f_open+0x14e>
    538c:	87 e0       	ldi	r24, 0x07	; 7
    538e:	05 c0       	rjmp	.+10     	; 0x539a <f_open+0x1fe>
    5390:	88 e0       	ldi	r24, 0x08	; 8
    5392:	03 c0       	rjmp	.+6      	; 0x539a <f_open+0x1fe>
    5394:	84 e0       	ldi	r24, 0x04	; 4
    5396:	01 c0       	rjmp	.+2      	; 0x539a <f_open+0x1fe>
    5398:	87 e0       	ldi	r24, 0x07	; 7
    539a:	a8 96       	adiw	r28, 0x28	; 40
    539c:	cd bf       	out	0x3d, r28	; 61
    539e:	de bf       	out	0x3e, r29	; 62
    53a0:	df 91       	pop	r29
    53a2:	cf 91       	pop	r28
    53a4:	1f 91       	pop	r17
    53a6:	0f 91       	pop	r16
    53a8:	ff 90       	pop	r15
    53aa:	ef 90       	pop	r14
    53ac:	df 90       	pop	r13
    53ae:	cf 90       	pop	r12
    53b0:	bf 90       	pop	r11
    53b2:	7f 90       	pop	r7
    53b4:	6f 90       	pop	r6
    53b6:	5f 90       	pop	r5
    53b8:	4f 90       	pop	r4
    53ba:	08 95       	ret

000053bc <f_read>:
    53bc:	2f 92       	push	r2
    53be:	3f 92       	push	r3
    53c0:	4f 92       	push	r4
    53c2:	5f 92       	push	r5
    53c4:	6f 92       	push	r6
    53c6:	7f 92       	push	r7
    53c8:	8f 92       	push	r8
    53ca:	9f 92       	push	r9
    53cc:	af 92       	push	r10
    53ce:	bf 92       	push	r11
    53d0:	cf 92       	push	r12
    53d2:	df 92       	push	r13
    53d4:	ef 92       	push	r14
    53d6:	ff 92       	push	r15
    53d8:	0f 93       	push	r16
    53da:	1f 93       	push	r17
    53dc:	cf 93       	push	r28
    53de:	df 93       	push	r29
    53e0:	ec 01       	movw	r28, r24
    53e2:	5b 01       	movw	r10, r22
    53e4:	7a 01       	movw	r14, r20
    53e6:	69 01       	movw	r12, r18
    53e8:	f9 01       	movw	r30, r18
    53ea:	10 82       	st	Z, r1
    53ec:	11 82       	std	Z+1, r1	; 0x01
    53ee:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <validate>
    53f2:	81 11       	cpse	r24, r1
    53f4:	0d c1       	rjmp	.+538    	; 0x5610 <f_read+0x254>
    53f6:	8d 81       	ldd	r24, Y+5	; 0x05
    53f8:	81 11       	cpse	r24, r1
    53fa:	0a c1       	rjmp	.+532    	; 0x5610 <f_read+0x254>
    53fc:	8c 81       	ldd	r24, Y+4	; 0x04
    53fe:	80 ff       	sbrs	r24, 0
    5400:	02 c1       	rjmp	.+516    	; 0x5606 <f_read+0x24a>
    5402:	8a 85       	ldd	r24, Y+10	; 0x0a
    5404:	9b 85       	ldd	r25, Y+11	; 0x0b
    5406:	ac 85       	ldd	r26, Y+12	; 0x0c
    5408:	bd 85       	ldd	r27, Y+13	; 0x0d
    540a:	4e 81       	ldd	r20, Y+6	; 0x06
    540c:	5f 81       	ldd	r21, Y+7	; 0x07
    540e:	68 85       	ldd	r22, Y+8	; 0x08
    5410:	79 85       	ldd	r23, Y+9	; 0x09
    5412:	84 1b       	sub	r24, r20
    5414:	95 0b       	sbc	r25, r21
    5416:	a6 0b       	sbc	r26, r22
    5418:	b7 0b       	sbc	r27, r23
    541a:	a7 01       	movw	r20, r14
    541c:	60 e0       	ldi	r22, 0x00	; 0
    541e:	70 e0       	ldi	r23, 0x00	; 0
    5420:	84 17       	cp	r24, r20
    5422:	95 07       	cpc	r25, r21
    5424:	a6 07       	cpc	r26, r22
    5426:	b7 07       	cpc	r27, r23
    5428:	08 f4       	brcc	.+2      	; 0x542c <f_read+0x70>
    542a:	7c 01       	movw	r14, r24
    542c:	e1 14       	cp	r14, r1
    542e:	f1 04       	cpc	r15, r1
    5430:	09 f4       	brne	.+2      	; 0x5434 <f_read+0x78>
    5432:	eb c0       	rjmp	.+470    	; 0x560a <f_read+0x24e>
    5434:	8e 81       	ldd	r24, Y+6	; 0x06
    5436:	9f 81       	ldd	r25, Y+7	; 0x07
    5438:	a8 85       	ldd	r26, Y+8	; 0x08
    543a:	b9 85       	ldd	r27, Y+9	; 0x09
    543c:	ac 01       	movw	r20, r24
    543e:	bd 01       	movw	r22, r26
    5440:	51 70       	andi	r21, 0x01	; 1
    5442:	66 27       	eor	r22, r22
    5444:	77 27       	eor	r23, r23
    5446:	45 2b       	or	r20, r21
    5448:	46 2b       	or	r20, r22
    544a:	47 2b       	or	r20, r23
    544c:	09 f0       	breq	.+2      	; 0x5450 <f_read+0x94>
    544e:	97 c0       	rjmp	.+302    	; 0x557e <f_read+0x1c2>
    5450:	e8 81       	ld	r30, Y
    5452:	f9 81       	ldd	r31, Y+1	; 0x01
    5454:	12 81       	ldd	r17, Z+2	; 0x02
    5456:	11 50       	subi	r17, 0x01	; 1
    5458:	ac 01       	movw	r20, r24
    545a:	bd 01       	movw	r22, r26
    545c:	03 2e       	mov	r0, r19
    545e:	39 e0       	ldi	r19, 0x09	; 9
    5460:	76 95       	lsr	r23
    5462:	67 95       	ror	r22
    5464:	57 95       	ror	r21
    5466:	47 95       	ror	r20
    5468:	3a 95       	dec	r19
    546a:	d1 f7       	brne	.-12     	; 0x5460 <f_read+0xa4>
    546c:	30 2d       	mov	r19, r0
    546e:	14 23       	and	r17, r20
    5470:	29 f5       	brne	.+74     	; 0x54bc <f_read+0x100>
    5472:	89 2b       	or	r24, r25
    5474:	8a 2b       	or	r24, r26
    5476:	8b 2b       	or	r24, r27
    5478:	29 f4       	brne	.+10     	; 0x5484 <f_read+0xc8>
    547a:	6e 85       	ldd	r22, Y+14	; 0x0e
    547c:	7f 85       	ldd	r23, Y+15	; 0x0f
    547e:	88 89       	ldd	r24, Y+16	; 0x10
    5480:	99 89       	ldd	r25, Y+17	; 0x11
    5482:	07 c0       	rjmp	.+14     	; 0x5492 <f_read+0xd6>
    5484:	4a 89       	ldd	r20, Y+18	; 0x12
    5486:	5b 89       	ldd	r21, Y+19	; 0x13
    5488:	6c 89       	ldd	r22, Y+20	; 0x14
    548a:	7d 89       	ldd	r23, Y+21	; 0x15
    548c:	cf 01       	movw	r24, r30
    548e:	0e 94 3d 21 	call	0x427a	; 0x427a <get_fat>
    5492:	62 30       	cpi	r22, 0x02	; 2
    5494:	71 05       	cpc	r23, r1
    5496:	81 05       	cpc	r24, r1
    5498:	91 05       	cpc	r25, r1
    549a:	18 f4       	brcc	.+6      	; 0x54a2 <f_read+0xe6>
    549c:	82 e0       	ldi	r24, 0x02	; 2
    549e:	8d 83       	std	Y+5, r24	; 0x05
    54a0:	b7 c0       	rjmp	.+366    	; 0x5610 <f_read+0x254>
    54a2:	6f 3f       	cpi	r22, 0xFF	; 255
    54a4:	ff ef       	ldi	r31, 0xFF	; 255
    54a6:	7f 07       	cpc	r23, r31
    54a8:	8f 07       	cpc	r24, r31
    54aa:	9f 07       	cpc	r25, r31
    54ac:	19 f4       	brne	.+6      	; 0x54b4 <f_read+0xf8>
    54ae:	81 e0       	ldi	r24, 0x01	; 1
    54b0:	8d 83       	std	Y+5, r24	; 0x05
    54b2:	ae c0       	rjmp	.+348    	; 0x5610 <f_read+0x254>
    54b4:	6a 8b       	std	Y+18, r22	; 0x12
    54b6:	7b 8b       	std	Y+19, r23	; 0x13
    54b8:	8c 8b       	std	Y+20, r24	; 0x14
    54ba:	9d 8b       	std	Y+21, r25	; 0x15
    54bc:	28 80       	ld	r2, Y
    54be:	39 80       	ldd	r3, Y+1	; 0x01
    54c0:	4a 89       	ldd	r20, Y+18	; 0x12
    54c2:	5b 89       	ldd	r21, Y+19	; 0x13
    54c4:	6c 89       	ldd	r22, Y+20	; 0x14
    54c6:	7d 89       	ldd	r23, Y+21	; 0x15
    54c8:	c1 01       	movw	r24, r2
    54ca:	0e 94 0f 21 	call	0x421e	; 0x421e <clust2sect>
    54ce:	61 15       	cp	r22, r1
    54d0:	71 05       	cpc	r23, r1
    54d2:	81 05       	cpc	r24, r1
    54d4:	91 05       	cpc	r25, r1
    54d6:	19 f4       	brne	.+6      	; 0x54de <f_read+0x122>
    54d8:	82 e0       	ldi	r24, 0x02	; 2
    54da:	8d 83       	std	Y+5, r24	; 0x05
    54dc:	99 c0       	rjmp	.+306    	; 0x5610 <f_read+0x254>
    54de:	2b 01       	movw	r4, r22
    54e0:	3c 01       	movw	r6, r24
    54e2:	41 0e       	add	r4, r17
    54e4:	51 1c       	adc	r5, r1
    54e6:	61 1c       	adc	r6, r1
    54e8:	71 1c       	adc	r7, r1
    54ea:	47 01       	movw	r8, r14
    54ec:	89 2c       	mov	r8, r9
    54ee:	99 24       	eor	r9, r9
    54f0:	86 94       	lsr	r8
    54f2:	81 14       	cp	r8, r1
    54f4:	91 04       	cpc	r9, r1
    54f6:	09 f4       	brne	.+2      	; 0x54fa <f_read+0x13e>
    54f8:	3e c0       	rjmp	.+124    	; 0x5576 <f_read+0x1ba>
    54fa:	f1 01       	movw	r30, r2
    54fc:	42 81       	ldd	r20, Z+2	; 0x02
    54fe:	24 2f       	mov	r18, r20
    5500:	30 e0       	ldi	r19, 0x00	; 0
    5502:	c4 01       	movw	r24, r8
    5504:	81 0f       	add	r24, r17
    5506:	91 1d       	adc	r25, r1
    5508:	28 17       	cp	r18, r24
    550a:	39 07       	cpc	r19, r25
    550c:	18 f4       	brcc	.+6      	; 0x5514 <f_read+0x158>
    550e:	49 01       	movw	r8, r18
    5510:	81 1a       	sub	r8, r17
    5512:	91 08       	sbc	r9, r1
    5514:	84 01       	movw	r16, r8
    5516:	a3 01       	movw	r20, r6
    5518:	92 01       	movw	r18, r4
    551a:	b5 01       	movw	r22, r10
    551c:	f1 01       	movw	r30, r2
    551e:	81 81       	ldd	r24, Z+1	; 0x01
    5520:	86 d2       	rcall	.+1292   	; 0x5a2e <disk_read>
    5522:	88 23       	and	r24, r24
    5524:	19 f0       	breq	.+6      	; 0x552c <f_read+0x170>
    5526:	81 e0       	ldi	r24, 0x01	; 1
    5528:	8d 83       	std	Y+5, r24	; 0x05
    552a:	72 c0       	rjmp	.+228    	; 0x5610 <f_read+0x254>
    552c:	e8 81       	ld	r30, Y
    552e:	f9 81       	ldd	r31, Y+1	; 0x01
    5530:	84 81       	ldd	r24, Z+4	; 0x04
    5532:	88 23       	and	r24, r24
    5534:	e1 f0       	breq	.+56     	; 0x556e <f_read+0x1b2>
    5536:	86 a5       	ldd	r24, Z+46	; 0x2e
    5538:	97 a5       	ldd	r25, Z+47	; 0x2f
    553a:	a0 a9       	ldd	r26, Z+48	; 0x30
    553c:	b1 a9       	ldd	r27, Z+49	; 0x31
    553e:	84 19       	sub	r24, r4
    5540:	95 09       	sbc	r25, r5
    5542:	a6 09       	sbc	r26, r6
    5544:	b7 09       	sbc	r27, r7
    5546:	a4 01       	movw	r20, r8
    5548:	60 e0       	ldi	r22, 0x00	; 0
    554a:	70 e0       	ldi	r23, 0x00	; 0
    554c:	84 17       	cp	r24, r20
    554e:	95 07       	cpc	r25, r21
    5550:	a6 07       	cpc	r26, r22
    5552:	b7 07       	cpc	r27, r23
    5554:	60 f4       	brcc	.+24     	; 0x556e <f_read+0x1b2>
    5556:	bf 01       	movw	r22, r30
    5558:	6e 5c       	subi	r22, 0xCE	; 206
    555a:	7f 4f       	sbci	r23, 0xFF	; 255
    555c:	98 2f       	mov	r25, r24
    555e:	88 27       	eor	r24, r24
    5560:	99 0f       	add	r25, r25
    5562:	40 e0       	ldi	r20, 0x00	; 0
    5564:	52 e0       	ldi	r21, 0x02	; 2
    5566:	8a 0d       	add	r24, r10
    5568:	9b 1d       	adc	r25, r11
    556a:	0e 94 55 1c 	call	0x38aa	; 0x38aa <mem_cpy>
    556e:	98 2c       	mov	r9, r8
    5570:	88 24       	eor	r8, r8
    5572:	99 0c       	add	r9, r9
    5574:	2e c0       	rjmp	.+92     	; 0x55d2 <f_read+0x216>
    5576:	4e 8a       	std	Y+22, r4	; 0x16
    5578:	5f 8a       	std	Y+23, r5	; 0x17
    557a:	68 8e       	std	Y+24, r6	; 0x18
    557c:	79 8e       	std	Y+25, r7	; 0x19
    557e:	8e 81       	ldd	r24, Y+6	; 0x06
    5580:	9f 81       	ldd	r25, Y+7	; 0x07
    5582:	91 70       	andi	r25, 0x01	; 1
    5584:	20 e0       	ldi	r18, 0x00	; 0
    5586:	32 e0       	ldi	r19, 0x02	; 2
    5588:	28 1b       	sub	r18, r24
    558a:	39 0b       	sbc	r19, r25
    558c:	47 01       	movw	r8, r14
    558e:	2e 15       	cp	r18, r14
    5590:	3f 05       	cpc	r19, r15
    5592:	08 f4       	brcc	.+2      	; 0x5596 <f_read+0x1da>
    5594:	49 01       	movw	r8, r18
    5596:	4e 89       	ldd	r20, Y+22	; 0x16
    5598:	5f 89       	ldd	r21, Y+23	; 0x17
    559a:	68 8d       	ldd	r22, Y+24	; 0x18
    559c:	79 8d       	ldd	r23, Y+25	; 0x19
    559e:	88 81       	ld	r24, Y
    55a0:	99 81       	ldd	r25, Y+1	; 0x01
    55a2:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <move_window>
    55a6:	88 23       	and	r24, r24
    55a8:	19 f0       	breq	.+6      	; 0x55b0 <f_read+0x1f4>
    55aa:	81 e0       	ldi	r24, 0x01	; 1
    55ac:	8d 83       	std	Y+5, r24	; 0x05
    55ae:	30 c0       	rjmp	.+96     	; 0x5610 <f_read+0x254>
    55b0:	8e 81       	ldd	r24, Y+6	; 0x06
    55b2:	9f 81       	ldd	r25, Y+7	; 0x07
    55b4:	a8 85       	ldd	r26, Y+8	; 0x08
    55b6:	b9 85       	ldd	r27, Y+9	; 0x09
    55b8:	91 70       	andi	r25, 0x01	; 1
    55ba:	aa 27       	eor	r26, r26
    55bc:	bb 27       	eor	r27, r27
    55be:	c2 96       	adiw	r24, 0x32	; 50
    55c0:	28 81       	ld	r18, Y
    55c2:	39 81       	ldd	r19, Y+1	; 0x01
    55c4:	b9 01       	movw	r22, r18
    55c6:	68 0f       	add	r22, r24
    55c8:	79 1f       	adc	r23, r25
    55ca:	a4 01       	movw	r20, r8
    55cc:	c5 01       	movw	r24, r10
    55ce:	0e 94 55 1c 	call	0x38aa	; 0x38aa <mem_cpy>
    55d2:	a8 0c       	add	r10, r8
    55d4:	b9 1c       	adc	r11, r9
    55d6:	8e 81       	ldd	r24, Y+6	; 0x06
    55d8:	9f 81       	ldd	r25, Y+7	; 0x07
    55da:	a8 85       	ldd	r26, Y+8	; 0x08
    55dc:	b9 85       	ldd	r27, Y+9	; 0x09
    55de:	88 0d       	add	r24, r8
    55e0:	99 1d       	adc	r25, r9
    55e2:	a1 1d       	adc	r26, r1
    55e4:	b1 1d       	adc	r27, r1
    55e6:	8e 83       	std	Y+6, r24	; 0x06
    55e8:	9f 83       	std	Y+7, r25	; 0x07
    55ea:	a8 87       	std	Y+8, r26	; 0x08
    55ec:	b9 87       	std	Y+9, r27	; 0x09
    55ee:	f6 01       	movw	r30, r12
    55f0:	80 81       	ld	r24, Z
    55f2:	91 81       	ldd	r25, Z+1	; 0x01
    55f4:	88 0d       	add	r24, r8
    55f6:	99 1d       	adc	r25, r9
    55f8:	80 83       	st	Z, r24
    55fa:	91 83       	std	Z+1, r25	; 0x01
    55fc:	e8 18       	sub	r14, r8
    55fe:	f9 08       	sbc	r15, r9
    5600:	09 f0       	breq	.+2      	; 0x5604 <f_read+0x248>
    5602:	18 cf       	rjmp	.-464    	; 0x5434 <f_read+0x78>
    5604:	04 c0       	rjmp	.+8      	; 0x560e <f_read+0x252>
    5606:	87 e0       	ldi	r24, 0x07	; 7
    5608:	03 c0       	rjmp	.+6      	; 0x5610 <f_read+0x254>
    560a:	80 e0       	ldi	r24, 0x00	; 0
    560c:	01 c0       	rjmp	.+2      	; 0x5610 <f_read+0x254>
    560e:	80 e0       	ldi	r24, 0x00	; 0
    5610:	df 91       	pop	r29
    5612:	cf 91       	pop	r28
    5614:	1f 91       	pop	r17
    5616:	0f 91       	pop	r16
    5618:	ff 90       	pop	r15
    561a:	ef 90       	pop	r14
    561c:	df 90       	pop	r13
    561e:	cf 90       	pop	r12
    5620:	bf 90       	pop	r11
    5622:	af 90       	pop	r10
    5624:	9f 90       	pop	r9
    5626:	8f 90       	pop	r8
    5628:	7f 90       	pop	r7
    562a:	6f 90       	pop	r6
    562c:	5f 90       	pop	r5
    562e:	4f 90       	pop	r4
    5630:	3f 90       	pop	r3
    5632:	2f 90       	pop	r2
    5634:	08 95       	ret

00005636 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    5636:	cf 93       	push	r28
    5638:	df 93       	push	r29
    563a:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    563c:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <validate>
	if (res == FR_OK) {
    5640:	81 11       	cpse	r24, r1
    5642:	37 c0       	rjmp	.+110    	; 0x56b2 <f_sync+0x7c>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    5644:	9c 81       	ldd	r25, Y+4	; 0x04
    5646:	95 ff       	sbrs	r25, 5
    5648:	34 c0       	rjmp	.+104    	; 0x56b2 <f_sync+0x7c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    564a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    564c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    564e:	6c 8d       	ldd	r22, Y+28	; 0x1c
    5650:	7d 8d       	ldd	r23, Y+29	; 0x1d
    5652:	88 81       	ld	r24, Y
    5654:	99 81       	ldd	r25, Y+1	; 0x01
    5656:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <move_window>
			if (res == FR_OK) {
    565a:	81 11       	cpse	r24, r1
    565c:	2a c0       	rjmp	.+84     	; 0x56b2 <f_sync+0x7c>
				dir = fp->dir_ptr;
    565e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5660:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    5662:	83 85       	ldd	r24, Z+11	; 0x0b
    5664:	80 62       	ori	r24, 0x20	; 32
    5666:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    5668:	4a 85       	ldd	r20, Y+10	; 0x0a
    566a:	5b 85       	ldd	r21, Y+11	; 0x0b
    566c:	6c 85       	ldd	r22, Y+12	; 0x0c
    566e:	7d 85       	ldd	r23, Y+13	; 0x0d
    5670:	44 8f       	std	Z+28, r20	; 0x1c
    5672:	55 8f       	std	Z+29, r21	; 0x1d
    5674:	66 8f       	std	Z+30, r22	; 0x1e
    5676:	77 8f       	std	Z+31, r23	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    5678:	4e 85       	ldd	r20, Y+14	; 0x0e
    567a:	5f 85       	ldd	r21, Y+15	; 0x0f
    567c:	68 89       	ldd	r22, Y+16	; 0x10
    567e:	79 89       	ldd	r23, Y+17	; 0x11
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
    5680:	42 8f       	std	Z+26, r20	; 0x1a
    5682:	53 8f       	std	Z+27, r21	; 0x1b
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
    5684:	64 8b       	std	Z+20, r22	; 0x14
    5686:	75 8b       	std	Z+21, r23	; 0x15
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tm = GET_FATTIME();							/* Update updated time */
				ST_DWORD(dir+DIR_WrtTime, tm);
    5688:	40 e0       	ldi	r20, 0x00	; 0
    568a:	50 e0       	ldi	r21, 0x00	; 0
    568c:	6f e4       	ldi	r22, 0x4F	; 79
    568e:	75 e4       	ldi	r23, 0x45	; 69
    5690:	46 8b       	std	Z+22, r20	; 0x16
    5692:	57 8b       	std	Z+23, r21	; 0x17
    5694:	60 8f       	std	Z+24, r22	; 0x18
    5696:	71 8f       	std	Z+25, r23	; 0x19
				ST_WORD(dir+DIR_LstAccDate, 0);
    5698:	12 8a       	std	Z+18, r1	; 0x12
    569a:	13 8a       	std	Z+19, r1	; 0x13
				fp->flag &= ~FA__WRITTEN;
    569c:	8c 81       	ldd	r24, Y+4	; 0x04
    569e:	8f 7d       	andi	r24, 0xDF	; 223
    56a0:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    56a2:	e8 81       	ld	r30, Y
    56a4:	f9 81       	ldd	r31, Y+1	; 0x01
    56a6:	81 e0       	ldi	r24, 0x01	; 1
    56a8:	84 83       	std	Z+4, r24	; 0x04
				res = sync_fs(fp->fs);
    56aa:	88 81       	ld	r24, Y
    56ac:	99 81       	ldd	r25, Y+1	; 0x01
    56ae:	0e 94 a1 20 	call	0x4142	; 0x4142 <sync_fs>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    56b2:	df 91       	pop	r29
    56b4:	cf 91       	pop	r28
    56b6:	08 95       	ret

000056b8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    56b8:	cf 93       	push	r28
    56ba:	df 93       	push	r29
    56bc:	ec 01       	movw	r28, r24
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    56be:	bb df       	rcall	.-138    	; 0x5636 <f_sync>
	if (res == FR_OK)
    56c0:	81 11       	cpse	r24, r1
    56c2:	07 c0       	rjmp	.+14     	; 0x56d2 <f_close+0x1a>
#endif
	{
		res = validate(fp);				/* Lock volume */
    56c4:	ce 01       	movw	r24, r28
    56c6:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <validate>
		if (res == FR_OK) {
    56ca:	81 11       	cpse	r24, r1
    56cc:	02 c0       	rjmp	.+4      	; 0x56d2 <f_close+0x1a>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
    56ce:	18 82       	st	Y, r1
    56d0:	19 82       	std	Y+1, r1	; 0x01
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    56d2:	df 91       	pop	r29
    56d4:	cf 91       	pop	r28
    56d6:	08 95       	ret

000056d8 <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    56d8:	0c 94 48 1b 	jmp	0x3690	; 0x3690 <spi_wr_rd>
}
    56dc:	08 95       	ret

000056de <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    56de:	80 e1       	ldi	r24, 0x10	; 16
    56e0:	e0 e4       	ldi	r30, 0x40	; 64
    56e2:	f6 e0       	ldi	r31, 0x06	; 6
    56e4:	85 83       	std	Z+5, r24	; 0x05
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    56e6:	8f ef       	ldi	r24, 0xFF	; 255
    56e8:	f7 cf       	rjmp	.-18     	; 0x56d8 <xchg_spi>
    56ea:	08 95       	ret

000056ec <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
    56ec:	80 e1       	ldi	r24, 0x10	; 16
    56ee:	e0 e4       	ldi	r30, 0x40	; 64
    56f0:	f6 e0       	ldi	r31, 0x06	; 6
    56f2:	86 83       	std	Z+6, r24	; 0x06
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    56f4:	8f ef       	ldi	r24, 0xFF	; 255
    56f6:	f0 df       	rcall	.-32     	; 0x56d8 <xchg_spi>
	UINT wt			/* Timeout [ms] */
)
{
	BYTE d;

	Timer2 = wt / 10;
    56f8:	82 e3       	ldi	r24, 0x32	; 50
    56fa:	80 93 7d 25 	sts	0x257D, r24
	do
		d = xchg_spi(0xFF);
    56fe:	8f ef       	ldi	r24, 0xFF	; 255
    5700:	eb df       	rcall	.-42     	; 0x56d8 <xchg_spi>
	while (d != 0xFF && Timer2);
    5702:	8f 3f       	cpi	r24, 0xFF	; 255
    5704:	41 f0       	breq	.+16     	; 0x5716 <select+0x2a>
    5706:	80 91 7d 25 	lds	r24, 0x257D
    570a:	81 11       	cpse	r24, r1
    570c:	f8 cf       	rjmp	.-16     	; 0x56fe <select+0x12>
{
	CS_LOW();
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready(500)) return 1;	/* OK */
	deselect();
    570e:	e7 df       	rcall	.-50     	; 0x56de <deselect>
	return 0;	/* Timeout */
    5710:	80 e0       	ldi	r24, 0x00	; 0
    5712:	90 e0       	ldi	r25, 0x00	; 0
    5714:	08 95       	ret
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready(500)) return 1;	/* OK */
    5716:	81 e0       	ldi	r24, 0x01	; 1
    5718:	90 e0       	ldi	r25, 0x00	; 0
	deselect();
	return 0;	/* Timeout */
}
    571a:	08 95       	ret

0000571c <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    571c:	ff 92       	push	r15
    571e:	0f 93       	push	r16
    5720:	1f 93       	push	r17
    5722:	cf 93       	push	r28
    5724:	df 93       	push	r29
    5726:	c8 2f       	mov	r28, r24
    5728:	d4 2f       	mov	r29, r20
    572a:	15 2f       	mov	r17, r21
    572c:	06 2f       	mov	r16, r22
    572e:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    5730:	88 23       	and	r24, r24
    5732:	4c f4       	brge	.+18     	; 0x5746 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    5734:	40 e0       	ldi	r20, 0x00	; 0
    5736:	50 e0       	ldi	r21, 0x00	; 0
    5738:	ba 01       	movw	r22, r20
    573a:	87 e3       	ldi	r24, 0x37	; 55
    573c:	ef df       	rcall	.-34     	; 0x571c <send_cmd>
		if (res > 1) return res;
    573e:	82 30       	cpi	r24, 0x02	; 2
    5740:	08 f0       	brcs	.+2      	; 0x5744 <send_cmd+0x28>
    5742:	37 c0       	rjmp	.+110    	; 0x57b2 <send_cmd+0x96>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    5744:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    5746:	cc 30       	cpi	r28, 0x0C	; 12
    5748:	19 f1       	breq	.+70     	; 0x5790 <send_cmd+0x74>
		deselect();
    574a:	c9 df       	rcall	.-110    	; 0x56de <deselect>
		if (!select()) return 0xFF;
    574c:	cf df       	rcall	.-98     	; 0x56ec <select>
    574e:	89 2b       	or	r24, r25
    5750:	e9 f0       	breq	.+58     	; 0x578c <send_cmd+0x70>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    5752:	8c 2f       	mov	r24, r28
    5754:	80 64       	ori	r24, 0x40	; 64
    5756:	c0 df       	rcall	.-128    	; 0x56d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    5758:	8f 2d       	mov	r24, r15
    575a:	be df       	rcall	.-132    	; 0x56d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    575c:	80 2f       	mov	r24, r16
    575e:	bc df       	rcall	.-136    	; 0x56d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    5760:	81 2f       	mov	r24, r17
    5762:	ba df       	rcall	.-140    	; 0x56d8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    5764:	8d 2f       	mov	r24, r29
    5766:	b8 df       	rcall	.-144    	; 0x56d8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    5768:	cc 23       	and	r28, r28
    576a:	01 f1       	breq	.+64     	; 0x57ac <send_cmd+0x90>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    576c:	c8 30       	cpi	r28, 0x08	; 8
    576e:	d9 f0       	breq	.+54     	; 0x57a6 <send_cmd+0x8a>
	xchg_spi(n);
    5770:	81 e0       	ldi	r24, 0x01	; 1
    5772:	b2 df       	rcall	.-156    	; 0x56d8 <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    5774:	cc 30       	cpi	r28, 0x0C	; 12
    5776:	11 f4       	brne	.+4      	; 0x577c <send_cmd+0x60>
    5778:	8f ef       	ldi	r24, 0xFF	; 255
    577a:	ae df       	rcall	.-164    	; 0x56d8 <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    577c:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
    577e:	8f ef       	ldi	r24, 0xFF	; 255
    5780:	ab df       	rcall	.-170    	; 0x56d8 <xchg_spi>
	while ((res & 0x80) && --n);
    5782:	88 23       	and	r24, r24
    5784:	b4 f4       	brge	.+44     	; 0x57b2 <send_cmd+0x96>
    5786:	c1 50       	subi	r28, 0x01	; 1
    5788:	d1 f7       	brne	.-12     	; 0x577e <send_cmd+0x62>
    578a:	13 c0       	rjmp	.+38     	; 0x57b2 <send_cmd+0x96>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    578c:	8f ef       	ldi	r24, 0xFF	; 255
    578e:	11 c0       	rjmp	.+34     	; 0x57b2 <send_cmd+0x96>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    5790:	8c e4       	ldi	r24, 0x4C	; 76
    5792:	a2 df       	rcall	.-188    	; 0x56d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    5794:	8f 2d       	mov	r24, r15
    5796:	a0 df       	rcall	.-192    	; 0x56d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    5798:	80 2f       	mov	r24, r16
    579a:	9e df       	rcall	.-196    	; 0x56d8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    579c:	81 2f       	mov	r24, r17
    579e:	9c df       	rcall	.-200    	; 0x56d8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    57a0:	8d 2f       	mov	r24, r29
    57a2:	9a df       	rcall	.-204    	; 0x56d8 <xchg_spi>
    57a4:	e5 cf       	rjmp	.-54     	; 0x5770 <send_cmd+0x54>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    57a6:	87 e8       	ldi	r24, 0x87	; 135
    57a8:	97 df       	rcall	.-210    	; 0x56d8 <xchg_spi>
    57aa:	e8 cf       	rjmp	.-48     	; 0x577c <send_cmd+0x60>
    57ac:	85 e9       	ldi	r24, 0x95	; 149
    57ae:	94 df       	rcall	.-216    	; 0x56d8 <xchg_spi>
    57b0:	e5 cf       	rjmp	.-54     	; 0x577c <send_cmd+0x60>
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    57b2:	df 91       	pop	r29
    57b4:	cf 91       	pop	r28
    57b6:	1f 91       	pop	r17
    57b8:	0f 91       	pop	r16
    57ba:	ff 90       	pop	r15
    57bc:	08 95       	ret

000057be <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    57be:	ef 92       	push	r14
    57c0:	ff 92       	push	r15
    57c2:	0f 93       	push	r16
    57c4:	1f 93       	push	r17
    57c6:	cf 93       	push	r28
    57c8:	df 93       	push	r29
    57ca:	e8 2e       	mov	r14, r24
    57cc:	f9 2e       	mov	r15, r25
    57ce:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
    57d0:	24 e1       	ldi	r18, 0x14	; 20
    57d2:	20 93 7e 25 	sts	0x257E, r18
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
    57d6:	8f ef       	ldi	r24, 0xFF	; 255
    57d8:	7f df       	rcall	.-258    	; 0x56d8 <xchg_spi>
	} while ((token == 0xFF) && Timer1);
    57da:	8f 3f       	cpi	r24, 0xFF	; 255
    57dc:	29 f4       	brne	.+10     	; 0x57e8 <rcvr_datablock+0x2a>
    57de:	20 91 7e 25 	lds	r18, 0x257E
    57e2:	21 11       	cpse	r18, r1
    57e4:	f8 cf       	rjmp	.-16     	; 0x57d6 <rcvr_datablock+0x18>
    57e6:	19 c0       	rjmp	.+50     	; 0x581a <rcvr_datablock+0x5c>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    57e8:	8e 3f       	cpi	r24, 0xFE	; 254
    57ea:	d1 f4       	brne	.+52     	; 0x5820 <rcvr_datablock+0x62>
    57ec:	ce 2d       	mov	r28, r14
    57ee:	df 2d       	mov	r29, r15
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		*p++ = spi_wr_rd(0xff);
    57f0:	8f ef       	ldi	r24, 0xFF	; 255
    57f2:	0e 94 48 1b 	call	0x3690	; 0x3690 <spi_wr_rd>
    57f6:	88 83       	st	Y, r24
		*p++ = spi_wr_rd(0xff);
    57f8:	8f ef       	ldi	r24, 0xFF	; 255
    57fa:	0e 94 48 1b 	call	0x3690	; 0x3690 <spi_wr_rd>
    57fe:	89 83       	std	Y+1, r24	; 0x01
		
	} while (cnt -= 2);
    5800:	02 50       	subi	r16, 0x02	; 2
    5802:	11 09       	sbc	r17, r1
    5804:	22 96       	adiw	r28, 0x02	; 2
    5806:	01 15       	cp	r16, r1
    5808:	11 05       	cpc	r17, r1
    580a:	91 f7       	brne	.-28     	; 0x57f0 <rcvr_datablock+0x32>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    580c:	8f ef       	ldi	r24, 0xFF	; 255
    580e:	64 df       	rcall	.-312    	; 0x56d8 <xchg_spi>
	xchg_spi(0xFF);
    5810:	8f ef       	ldi	r24, 0xFF	; 255
    5812:	62 df       	rcall	.-316    	; 0x56d8 <xchg_spi>

	return 1;						/* Return with success */
    5814:	81 e0       	ldi	r24, 0x01	; 1
    5816:	90 e0       	ldi	r25, 0x00	; 0
    5818:	05 c0       	rjmp	.+10     	; 0x5824 <rcvr_datablock+0x66>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    581a:	80 e0       	ldi	r24, 0x00	; 0
    581c:	90 e0       	ldi	r25, 0x00	; 0
    581e:	02 c0       	rjmp	.+4      	; 0x5824 <rcvr_datablock+0x66>
    5820:	80 e0       	ldi	r24, 0x00	; 0
    5822:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    5824:	df 91       	pop	r29
    5826:	cf 91       	pop	r28
    5828:	1f 91       	pop	r17
    582a:	0f 91       	pop	r16
    582c:	ff 90       	pop	r15
    582e:	ef 90       	pop	r14
    5830:	08 95       	ret

00005832 <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    5832:	0f 93       	push	r16
    5834:	1f 93       	push	r17
    5836:	cf 93       	push	r28
    5838:	df 93       	push	r29
    583a:	8c 01       	movw	r16, r24
    583c:	c6 2f       	mov	r28, r22
	UINT wt			/* Timeout [ms] */
)
{
	BYTE d;

	Timer2 = wt / 10;
    583e:	92 e3       	ldi	r25, 0x32	; 50
    5840:	90 93 7d 25 	sts	0x257D, r25
	do
		d = xchg_spi(0xFF);
    5844:	8f ef       	ldi	r24, 0xFF	; 255
    5846:	48 df       	rcall	.-368    	; 0x56d8 <xchg_spi>
	while (d != 0xFF && Timer2);
    5848:	8f 3f       	cpi	r24, 0xFF	; 255
    584a:	29 f0       	breq	.+10     	; 0x5856 <xmit_datablock+0x24>
    584c:	90 91 7d 25 	lds	r25, 0x257D
    5850:	91 11       	cpse	r25, r1
    5852:	f8 cf       	rjmp	.-16     	; 0x5844 <xmit_datablock+0x12>
    5854:	1e c0       	rjmp	.+60     	; 0x5892 <xmit_datablock+0x60>
	BYTE resp;


	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
    5856:	8c 2f       	mov	r24, r28
    5858:	3f df       	rcall	.-386    	; 0x56d8 <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
    585a:	cd 3f       	cpi	r28, 0xFD	; 253
    585c:	e9 f0       	breq	.+58     	; 0x5898 <xmit_datablock+0x66>
    585e:	e8 01       	movw	r28, r16
    5860:	1e 5f       	subi	r17, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	do {
		spi_wr_rd(*p++);
    5862:	88 81       	ld	r24, Y
    5864:	0e 94 48 1b 	call	0x3690	; 0x3690 <spi_wr_rd>
		spi_wr_rd(*p++);
    5868:	89 81       	ldd	r24, Y+1	; 0x01
    586a:	0e 94 48 1b 	call	0x3690	; 0x3690 <spi_wr_rd>
    586e:	22 96       	adiw	r28, 0x02	; 2
		
	} while (cnt -= 2);
    5870:	c0 17       	cp	r28, r16
    5872:	d1 07       	cpc	r29, r17
    5874:	b1 f7       	brne	.-20     	; 0x5862 <xmit_datablock+0x30>
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
    5876:	8f ef       	ldi	r24, 0xFF	; 255
    5878:	2f df       	rcall	.-418    	; 0x56d8 <xchg_spi>
		xchg_spi(0xFF);
    587a:	8f ef       	ldi	r24, 0xFF	; 255
    587c:	2d df       	rcall	.-422    	; 0x56d8 <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
    587e:	8f ef       	ldi	r24, 0xFF	; 255
    5880:	2b df       	rcall	.-426    	; 0x56d8 <xchg_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
    5882:	28 2f       	mov	r18, r24
    5884:	2f 71       	andi	r18, 0x1F	; 31
    5886:	81 e0       	ldi	r24, 0x01	; 1
    5888:	90 e0       	ldi	r25, 0x00	; 0
    588a:	25 30       	cpi	r18, 0x05	; 5
    588c:	39 f0       	breq	.+14     	; 0x589c <xmit_datablock+0x6a>
    588e:	80 e0       	ldi	r24, 0x00	; 0
    5890:	05 c0       	rjmp	.+10     	; 0x589c <xmit_datablock+0x6a>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    5892:	80 e0       	ldi	r24, 0x00	; 0
    5894:	90 e0       	ldi	r25, 0x00	; 0
    5896:	02 c0       	rjmp	.+4      	; 0x589c <xmit_datablock+0x6a>
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
    5898:	81 e0       	ldi	r24, 0x01	; 1
    589a:	90 e0       	ldi	r25, 0x00	; 0
}
    589c:	df 91       	pop	r29
    589e:	cf 91       	pop	r28
    58a0:	1f 91       	pop	r17
    58a2:	0f 91       	pop	r16
    58a4:	08 95       	ret

000058a6 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
    58a6:	ef 92       	push	r14
    58a8:	ff 92       	push	r15
    58aa:	0f 93       	push	r16
    58ac:	1f 93       	push	r17
    58ae:	cf 93       	push	r28
    58b0:	df 93       	push	r29
    58b2:	00 d0       	rcall	.+0      	; 0x58b4 <disk_initialize+0xe>
    58b4:	00 d0       	rcall	.+0      	; 0x58b6 <disk_initialize+0x10>
    58b6:	cd b7       	in	r28, 0x3d	; 61
    58b8:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    58ba:	81 11       	cpse	r24, r1
    58bc:	9c c0       	rjmp	.+312    	; 0x59f6 <disk_initialize+0x150>

static
void power_off (void)
{
	//TCC1.CTRLA = TC_CLKSEL_OFF_gc;
	spi_off();
    58be:	0e 94 39 1b 	call	0x3672	; 0x3672 <spi_off>
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    58c2:	80 91 18 20 	lds	r24, 0x2018
    58c6:	81 ff       	sbrs	r24, 1
    58c8:	03 c0       	rjmp	.+6      	; 0x58d0 <disk_initialize+0x2a>
    58ca:	80 91 18 20 	lds	r24, 0x2018
    58ce:	9e c0       	rjmp	.+316    	; 0x5a0c <disk_initialize+0x166>
	//Used to check for a timeout, not needed
	//TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
	//TCC1.PER = F_CPU/DIVIDER;
	//TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc;
	
	spi_setup();
    58d0:	0e 94 2f 1b 	call	0x365e	; 0x365e <spi_setup>

	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
    58d4:	82 ed       	ldi	r24, 0xD2	; 210
    58d6:	80 93 c0 08 	sts	0x08C0, r24
    58da:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    58dc:	8f ef       	ldi	r24, 0xFF	; 255
    58de:	fc de       	rcall	.-520    	; 0x56d8 <xchg_spi>
    58e0:	11 50       	subi	r17, 0x01	; 1
    58e2:	e1 f7       	brne	.-8      	; 0x58dc <disk_initialize+0x36>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    58e4:	40 e0       	ldi	r20, 0x00	; 0
    58e6:	50 e0       	ldi	r21, 0x00	; 0
    58e8:	ba 01       	movw	r22, r20
    58ea:	80 e0       	ldi	r24, 0x00	; 0
    58ec:	17 df       	rcall	.-466    	; 0x571c <send_cmd>
    58ee:	81 30       	cpi	r24, 0x01	; 1
    58f0:	09 f0       	breq	.+2      	; 0x58f4 <disk_initialize+0x4e>
    58f2:	88 c0       	rjmp	.+272    	; 0x5a04 <disk_initialize+0x15e>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    58f4:	84 e6       	ldi	r24, 0x64	; 100
    58f6:	80 93 7e 25 	sts	0x257E, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    58fa:	4a ea       	ldi	r20, 0xAA	; 170
    58fc:	51 e0       	ldi	r21, 0x01	; 1
    58fe:	60 e0       	ldi	r22, 0x00	; 0
    5900:	70 e0       	ldi	r23, 0x00	; 0
    5902:	88 e0       	ldi	r24, 0x08	; 8
    5904:	0b df       	rcall	.-490    	; 0x571c <send_cmd>
    5906:	81 30       	cpi	r24, 0x01	; 1
    5908:	09 f0       	breq	.+2      	; 0x590c <disk_initialize+0x66>
    590a:	3f c0       	rjmp	.+126    	; 0x598a <disk_initialize+0xe4>
    590c:	7e 01       	movw	r14, r28
    590e:	85 e0       	ldi	r24, 0x05	; 5
    5910:	e8 0e       	add	r14, r24
    5912:	f1 1c       	adc	r15, r1
    5914:	8e 01       	movw	r16, r28
    5916:	0f 5f       	subi	r16, 0xFF	; 255
    5918:	1f 4f       	sbci	r17, 0xFF	; 255
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    591a:	8f ef       	ldi	r24, 0xFF	; 255
    591c:	dd de       	rcall	.-582    	; 0x56d8 <xchg_spi>
    591e:	f8 01       	movw	r30, r16
    5920:	81 93       	st	Z+, r24
    5922:	8f 01       	movw	r16, r30
    5924:	ee 15       	cp	r30, r14
    5926:	ff 05       	cpc	r31, r15
    5928:	c1 f7       	brne	.-16     	; 0x591a <disk_initialize+0x74>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    592a:	8b 81       	ldd	r24, Y+3	; 0x03
    592c:	81 30       	cpi	r24, 0x01	; 1
    592e:	09 f0       	breq	.+2      	; 0x5932 <disk_initialize+0x8c>
    5930:	69 c0       	rjmp	.+210    	; 0x5a04 <disk_initialize+0x15e>
    5932:	8c 81       	ldd	r24, Y+4	; 0x04
    5934:	8a 3a       	cpi	r24, 0xAA	; 170
    5936:	09 f0       	breq	.+2      	; 0x593a <disk_initialize+0x94>
    5938:	65 c0       	rjmp	.+202    	; 0x5a04 <disk_initialize+0x15e>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    593a:	80 91 7e 25 	lds	r24, 0x257E
    593e:	88 23       	and	r24, r24
    5940:	41 f0       	breq	.+16     	; 0x5952 <disk_initialize+0xac>
    5942:	40 e0       	ldi	r20, 0x00	; 0
    5944:	50 e0       	ldi	r21, 0x00	; 0
    5946:	60 e0       	ldi	r22, 0x00	; 0
    5948:	70 e4       	ldi	r23, 0x40	; 64
    594a:	89 ea       	ldi	r24, 0xA9	; 169
    594c:	e7 de       	rcall	.-562    	; 0x571c <send_cmd>
    594e:	81 11       	cpse	r24, r1
    5950:	f4 cf       	rjmp	.-24     	; 0x593a <disk_initialize+0x94>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    5952:	80 91 7e 25 	lds	r24, 0x257E
    5956:	88 23       	and	r24, r24
    5958:	09 f4       	brne	.+2      	; 0x595c <disk_initialize+0xb6>
    595a:	54 c0       	rjmp	.+168    	; 0x5a04 <disk_initialize+0x15e>
    595c:	40 e0       	ldi	r20, 0x00	; 0
    595e:	50 e0       	ldi	r21, 0x00	; 0
    5960:	ba 01       	movw	r22, r20
    5962:	8a e3       	ldi	r24, 0x3A	; 58
    5964:	db de       	rcall	.-586    	; 0x571c <send_cmd>
    5966:	81 11       	cpse	r24, r1
    5968:	4d c0       	rjmp	.+154    	; 0x5a04 <disk_initialize+0x15e>
    596a:	8e 01       	movw	r16, r28
    596c:	0f 5f       	subi	r16, 0xFF	; 255
    596e:	1f 4f       	sbci	r17, 0xFF	; 255
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    5970:	8f ef       	ldi	r24, 0xFF	; 255
    5972:	b2 de       	rcall	.-668    	; 0x56d8 <xchg_spi>
    5974:	f8 01       	movw	r30, r16
    5976:	81 93       	st	Z+, r24
    5978:	8f 01       	movw	r16, r30
    597a:	ee 16       	cp	r14, r30
    597c:	ff 06       	cpc	r15, r31
    597e:	c1 f7       	brne	.-16     	; 0x5970 <disk_initialize+0xca>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    5980:	89 81       	ldd	r24, Y+1	; 0x01
    5982:	86 fd       	sbrc	r24, 6
    5984:	3a c0       	rjmp	.+116    	; 0x59fa <disk_initialize+0x154>
    5986:	84 e0       	ldi	r24, 0x04	; 4
    5988:	39 c0       	rjmp	.+114    	; 0x59fc <disk_initialize+0x156>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    598a:	40 e0       	ldi	r20, 0x00	; 0
    598c:	50 e0       	ldi	r21, 0x00	; 0
    598e:	ba 01       	movw	r22, r20
    5990:	89 ea       	ldi	r24, 0xA9	; 169
    5992:	c4 de       	rcall	.-632    	; 0x571c <send_cmd>
    5994:	82 30       	cpi	r24, 0x02	; 2
    5996:	18 f4       	brcc	.+6      	; 0x599e <disk_initialize+0xf8>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    5998:	02 e0       	ldi	r16, 0x02	; 2
    599a:	19 ea       	ldi	r17, 0xA9	; 169
    599c:	02 c0       	rjmp	.+4      	; 0x59a2 <disk_initialize+0xfc>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    599e:	01 e0       	ldi	r16, 0x01	; 1
    59a0:	11 e0       	ldi	r17, 0x01	; 1
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    59a2:	90 91 7e 25 	lds	r25, 0x257E
    59a6:	99 23       	and	r25, r25
    59a8:	39 f0       	breq	.+14     	; 0x59b8 <disk_initialize+0x112>
    59aa:	40 e0       	ldi	r20, 0x00	; 0
    59ac:	50 e0       	ldi	r21, 0x00	; 0
    59ae:	ba 01       	movw	r22, r20
    59b0:	81 2f       	mov	r24, r17
    59b2:	b4 de       	rcall	.-664    	; 0x571c <send_cmd>
    59b4:	81 11       	cpse	r24, r1
    59b6:	f5 cf       	rjmp	.-22     	; 0x59a2 <disk_initialize+0xfc>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    59b8:	80 91 7e 25 	lds	r24, 0x257E
    59bc:	88 23       	and	r24, r24
    59be:	11 f1       	breq	.+68     	; 0x5a04 <disk_initialize+0x15e>
    59c0:	40 e0       	ldi	r20, 0x00	; 0
    59c2:	52 e0       	ldi	r21, 0x02	; 2
    59c4:	60 e0       	ldi	r22, 0x00	; 0
    59c6:	70 e0       	ldi	r23, 0x00	; 0
    59c8:	80 e1       	ldi	r24, 0x10	; 16
    59ca:	a8 de       	rcall	.-688    	; 0x571c <send_cmd>
    59cc:	81 11       	cpse	r24, r1
    59ce:	1a c0       	rjmp	.+52     	; 0x5a04 <disk_initialize+0x15e>
				ty = 0;
		}
	}
	CardType = ty;
    59d0:	00 93 7c 25 	sts	0x257C, r16
	deselect();
    59d4:	84 de       	rcall	.-760    	; 0x56de <deselect>

	if (ty) {			/* Initialization succeded */
    59d6:	00 23       	and	r16, r16
    59d8:	49 f0       	breq	.+18     	; 0x59ec <disk_initialize+0x146>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    59da:	80 91 18 20 	lds	r24, 0x2018
    59de:	8e 7f       	andi	r24, 0xFE	; 254
    59e0:	80 93 18 20 	sts	0x2018, r24
		FCLK_FAST();
    59e4:	80 ed       	ldi	r24, 0xD0	; 208
    59e6:	80 93 c0 08 	sts	0x08C0, r24
    59ea:	02 c0       	rjmp	.+4      	; 0x59f0 <disk_initialize+0x14a>

static
void power_off (void)
{
	//TCC1.CTRLA = TC_CLKSEL_OFF_gc;
	spi_off();
    59ec:	0e 94 39 1b 	call	0x3672	; 0x3672 <spi_off>
		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
    59f0:	80 91 18 20 	lds	r24, 0x2018
    59f4:	0b c0       	rjmp	.+22     	; 0x5a0c <disk_initialize+0x166>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    59f6:	81 e0       	ldi	r24, 0x01	; 1
    59f8:	09 c0       	rjmp	.+18     	; 0x5a0c <disk_initialize+0x166>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    59fa:	8c e0       	ldi	r24, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    59fc:	80 93 7c 25 	sts	0x257C, r24
	deselect();
    5a00:	6e de       	rcall	.-804    	; 0x56de <deselect>
    5a02:	eb cf       	rjmp	.-42     	; 0x59da <disk_initialize+0x134>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    5a04:	10 92 7c 25 	sts	0x257C, r1
	deselect();
    5a08:	6a de       	rcall	.-812    	; 0x56de <deselect>
    5a0a:	f0 cf       	rjmp	.-32     	; 0x59ec <disk_initialize+0x146>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    5a0c:	24 96       	adiw	r28, 0x04	; 4
    5a0e:	cd bf       	out	0x3d, r28	; 61
    5a10:	de bf       	out	0x3e, r29	; 62
    5a12:	df 91       	pop	r29
    5a14:	cf 91       	pop	r28
    5a16:	1f 91       	pop	r17
    5a18:	0f 91       	pop	r16
    5a1a:	ff 90       	pop	r15
    5a1c:	ef 90       	pop	r14
    5a1e:	08 95       	ret

00005a20 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    5a20:	81 11       	cpse	r24, r1
    5a22:	03 c0       	rjmp	.+6      	; 0x5a2a <disk_status+0xa>
	return Stat;
    5a24:	80 91 18 20 	lds	r24, 0x2018
    5a28:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    5a2a:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    5a2c:	08 95       	ret

00005a2e <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    5a2e:	ff 92       	push	r15
    5a30:	0f 93       	push	r16
    5a32:	1f 93       	push	r17
    5a34:	cf 93       	push	r28
    5a36:	df 93       	push	r29
    5a38:	eb 01       	movw	r28, r22
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    5a3a:	81 11       	cpse	r24, r1
    5a3c:	41 c0       	rjmp	.+130    	; 0x5ac0 <disk_read+0x92>
    5a3e:	01 15       	cp	r16, r1
    5a40:	11 05       	cpc	r17, r1
    5a42:	09 f4       	brne	.+2      	; 0x5a46 <disk_read+0x18>
    5a44:	3f c0       	rjmp	.+126    	; 0x5ac4 <disk_read+0x96>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    5a46:	80 91 18 20 	lds	r24, 0x2018
    5a4a:	80 fd       	sbrc	r24, 0
    5a4c:	3d c0       	rjmp	.+122    	; 0x5ac8 <disk_read+0x9a>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    5a4e:	80 91 7c 25 	lds	r24, 0x257C
    5a52:	83 fd       	sbrc	r24, 3
    5a54:	09 c0       	rjmp	.+18     	; 0x5a68 <disk_read+0x3a>
    5a56:	01 2e       	mov	r0, r17
    5a58:	19 e0       	ldi	r17, 0x09	; 9
    5a5a:	22 0f       	add	r18, r18
    5a5c:	33 1f       	adc	r19, r19
    5a5e:	44 1f       	adc	r20, r20
    5a60:	55 1f       	adc	r21, r21
    5a62:	1a 95       	dec	r17
    5a64:	d1 f7       	brne	.-12     	; 0x5a5a <disk_read+0x2c>
    5a66:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    5a68:	02 30       	cpi	r16, 0x02	; 2
    5a6a:	11 05       	cpc	r17, r1
    5a6c:	28 f0       	brcs	.+10     	; 0x5a78 <disk_read+0x4a>
    5a6e:	0f 2e       	mov	r0, r31
    5a70:	f2 e1       	ldi	r31, 0x12	; 18
    5a72:	ff 2e       	mov	r15, r31
    5a74:	f0 2d       	mov	r31, r0
    5a76:	04 c0       	rjmp	.+8      	; 0x5a80 <disk_read+0x52>
    5a78:	0f 2e       	mov	r0, r31
    5a7a:	f1 e1       	ldi	r31, 0x11	; 17
    5a7c:	ff 2e       	mov	r15, r31
    5a7e:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    5a80:	ba 01       	movw	r22, r20
    5a82:	a9 01       	movw	r20, r18
    5a84:	8f 2d       	mov	r24, r15
    5a86:	4a de       	rcall	.-876    	; 0x571c <send_cmd>
    5a88:	81 11       	cpse	r24, r1
    5a8a:	14 c0       	rjmp	.+40     	; 0x5ab4 <disk_read+0x86>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    5a8c:	60 e0       	ldi	r22, 0x00	; 0
    5a8e:	72 e0       	ldi	r23, 0x02	; 2
    5a90:	ce 01       	movw	r24, r28
    5a92:	95 de       	rcall	.-726    	; 0x57be <rcvr_datablock>
    5a94:	89 2b       	or	r24, r25
    5a96:	31 f0       	breq	.+12     	; 0x5aa4 <disk_read+0x76>
			buff += 512;
    5a98:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    5a9a:	01 50       	subi	r16, 0x01	; 1
    5a9c:	11 09       	sbc	r17, r1
    5a9e:	01 15       	cp	r16, r1
    5aa0:	11 05       	cpc	r17, r1
    5aa2:	a1 f7       	brne	.-24     	; 0x5a8c <disk_read+0x5e>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    5aa4:	82 e1       	ldi	r24, 0x12	; 18
    5aa6:	f8 12       	cpse	r15, r24
    5aa8:	05 c0       	rjmp	.+10     	; 0x5ab4 <disk_read+0x86>
    5aaa:	40 e0       	ldi	r20, 0x00	; 0
    5aac:	50 e0       	ldi	r21, 0x00	; 0
    5aae:	ba 01       	movw	r22, r20
    5ab0:	8c e0       	ldi	r24, 0x0C	; 12
    5ab2:	34 de       	rcall	.-920    	; 0x571c <send_cmd>
	}
	deselect();
    5ab4:	14 de       	rcall	.-984    	; 0x56de <deselect>

	return count ? RES_ERROR : RES_OK;
    5ab6:	81 e0       	ldi	r24, 0x01	; 1
    5ab8:	01 2b       	or	r16, r17
    5aba:	39 f4       	brne	.+14     	; 0x5aca <disk_read+0x9c>
    5abc:	80 e0       	ldi	r24, 0x00	; 0
    5abe:	05 c0       	rjmp	.+10     	; 0x5aca <disk_read+0x9c>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    5ac0:	84 e0       	ldi	r24, 0x04	; 4
    5ac2:	03 c0       	rjmp	.+6      	; 0x5aca <disk_read+0x9c>
    5ac4:	84 e0       	ldi	r24, 0x04	; 4
    5ac6:	01 c0       	rjmp	.+2      	; 0x5aca <disk_read+0x9c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    5ac8:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    5aca:	df 91       	pop	r29
    5acc:	cf 91       	pop	r28
    5ace:	1f 91       	pop	r17
    5ad0:	0f 91       	pop	r16
    5ad2:	ff 90       	pop	r15
    5ad4:	08 95       	ret

00005ad6 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    5ad6:	cf 92       	push	r12
    5ad8:	df 92       	push	r13
    5ada:	ef 92       	push	r14
    5adc:	ff 92       	push	r15
    5ade:	0f 93       	push	r16
    5ae0:	1f 93       	push	r17
    5ae2:	cf 93       	push	r28
    5ae4:	df 93       	push	r29
    5ae6:	eb 01       	movw	r28, r22
    5ae8:	69 01       	movw	r12, r18
    5aea:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    5aec:	81 11       	cpse	r24, r1
    5aee:	53 c0       	rjmp	.+166    	; 0x5b96 <disk_write+0xc0>
    5af0:	01 15       	cp	r16, r1
    5af2:	11 05       	cpc	r17, r1
    5af4:	09 f4       	brne	.+2      	; 0x5af8 <disk_write+0x22>
    5af6:	51 c0       	rjmp	.+162    	; 0x5b9a <disk_write+0xc4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    5af8:	80 91 18 20 	lds	r24, 0x2018
    5afc:	80 fd       	sbrc	r24, 0
    5afe:	4f c0       	rjmp	.+158    	; 0x5b9e <disk_write+0xc8>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    5b00:	80 91 18 20 	lds	r24, 0x2018
    5b04:	82 fd       	sbrc	r24, 2
    5b06:	4d c0       	rjmp	.+154    	; 0x5ba2 <disk_write+0xcc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    5b08:	80 91 7c 25 	lds	r24, 0x257C
    5b0c:	83 fd       	sbrc	r24, 3
    5b0e:	09 c0       	rjmp	.+18     	; 0x5b22 <disk_write+0x4c>
    5b10:	0b 2e       	mov	r0, r27
    5b12:	b9 e0       	ldi	r27, 0x09	; 9
    5b14:	cc 0c       	add	r12, r12
    5b16:	dd 1c       	adc	r13, r13
    5b18:	ee 1c       	adc	r14, r14
    5b1a:	ff 1c       	adc	r15, r15
    5b1c:	ba 95       	dec	r27
    5b1e:	d1 f7       	brne	.-12     	; 0x5b14 <disk_write+0x3e>
    5b20:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    5b22:	01 30       	cpi	r16, 0x01	; 1
    5b24:	11 05       	cpc	r17, r1
    5b26:	89 f4       	brne	.+34     	; 0x5b4a <disk_write+0x74>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    5b28:	b7 01       	movw	r22, r14
    5b2a:	a6 01       	movw	r20, r12
    5b2c:	88 e1       	ldi	r24, 0x18	; 24
    5b2e:	f6 dd       	rcall	.-1044   	; 0x571c <send_cmd>
    5b30:	81 11       	cpse	r24, r1
    5b32:	2b c0       	rjmp	.+86     	; 0x5b8a <disk_write+0xb4>
			&& xmit_datablock(buff, 0xFE))
    5b34:	6e ef       	ldi	r22, 0xFE	; 254
    5b36:	ce 01       	movw	r24, r28
    5b38:	7c de       	rcall	.-776    	; 0x5832 <xmit_datablock>
    5b3a:	31 e0       	ldi	r19, 0x01	; 1
    5b3c:	20 e0       	ldi	r18, 0x00	; 0
    5b3e:	89 2b       	or	r24, r25
    5b40:	09 f0       	breq	.+2      	; 0x5b44 <disk_write+0x6e>
    5b42:	30 e0       	ldi	r19, 0x00	; 0
    5b44:	03 2f       	mov	r16, r19
    5b46:	12 2f       	mov	r17, r18
    5b48:	20 c0       	rjmp	.+64     	; 0x5b8a <disk_write+0xb4>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    5b4a:	86 70       	andi	r24, 0x06	; 6
    5b4c:	29 f0       	breq	.+10     	; 0x5b58 <disk_write+0x82>
    5b4e:	a8 01       	movw	r20, r16
    5b50:	60 e0       	ldi	r22, 0x00	; 0
    5b52:	70 e0       	ldi	r23, 0x00	; 0
    5b54:	87 e9       	ldi	r24, 0x97	; 151
    5b56:	e2 dd       	rcall	.-1084   	; 0x571c <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    5b58:	b7 01       	movw	r22, r14
    5b5a:	a6 01       	movw	r20, r12
    5b5c:	89 e1       	ldi	r24, 0x19	; 25
    5b5e:	de dd       	rcall	.-1092   	; 0x571c <send_cmd>
    5b60:	81 11       	cpse	r24, r1
    5b62:	13 c0       	rjmp	.+38     	; 0x5b8a <disk_write+0xb4>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    5b64:	6c ef       	ldi	r22, 0xFC	; 252
    5b66:	ce 01       	movw	r24, r28
    5b68:	64 de       	rcall	.-824    	; 0x5832 <xmit_datablock>
    5b6a:	89 2b       	or	r24, r25
    5b6c:	31 f0       	breq	.+12     	; 0x5b7a <disk_write+0xa4>
				buff += 512;
    5b6e:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    5b70:	01 50       	subi	r16, 0x01	; 1
    5b72:	11 09       	sbc	r17, r1
    5b74:	01 15       	cp	r16, r1
    5b76:	11 05       	cpc	r17, r1
    5b78:	a9 f7       	brne	.-22     	; 0x5b64 <disk_write+0x8e>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    5b7a:	6d ef       	ldi	r22, 0xFD	; 253
    5b7c:	80 e0       	ldi	r24, 0x00	; 0
    5b7e:	90 e0       	ldi	r25, 0x00	; 0
    5b80:	58 de       	rcall	.-848    	; 0x5832 <xmit_datablock>
    5b82:	89 2b       	or	r24, r25
    5b84:	11 f4       	brne	.+4      	; 0x5b8a <disk_write+0xb4>
				count = 1;
    5b86:	01 e0       	ldi	r16, 0x01	; 1
    5b88:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    5b8a:	a9 dd       	rcall	.-1198   	; 0x56de <deselect>

	return count ? RES_ERROR : RES_OK;
    5b8c:	81 e0       	ldi	r24, 0x01	; 1
    5b8e:	01 2b       	or	r16, r17
    5b90:	49 f4       	brne	.+18     	; 0x5ba4 <disk_write+0xce>
    5b92:	80 e0       	ldi	r24, 0x00	; 0
    5b94:	07 c0       	rjmp	.+14     	; 0x5ba4 <disk_write+0xce>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    5b96:	84 e0       	ldi	r24, 0x04	; 4
    5b98:	05 c0       	rjmp	.+10     	; 0x5ba4 <disk_write+0xce>
    5b9a:	84 e0       	ldi	r24, 0x04	; 4
    5b9c:	03 c0       	rjmp	.+6      	; 0x5ba4 <disk_write+0xce>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    5b9e:	83 e0       	ldi	r24, 0x03	; 3
    5ba0:	01 c0       	rjmp	.+2      	; 0x5ba4 <disk_write+0xce>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    5ba2:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    5ba4:	df 91       	pop	r29
    5ba6:	cf 91       	pop	r28
    5ba8:	1f 91       	pop	r17
    5baa:	0f 91       	pop	r16
    5bac:	ff 90       	pop	r15
    5bae:	ef 90       	pop	r14
    5bb0:	df 90       	pop	r13
    5bb2:	cf 90       	pop	r12
    5bb4:	08 95       	ret

00005bb6 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    5bb6:	ef 92       	push	r14
    5bb8:	ff 92       	push	r15
    5bba:	0f 93       	push	r16
    5bbc:	1f 93       	push	r17
    5bbe:	cf 93       	push	r28
    5bc0:	df 93       	push	r29
    5bc2:	cd b7       	in	r28, 0x3d	; 61
    5bc4:	de b7       	in	r29, 0x3e	; 62
    5bc6:	60 97       	sbiw	r28, 0x10	; 16
    5bc8:	cd bf       	out	0x3d, r28	; 61
    5bca:	de bf       	out	0x3e, r29	; 62
    5bcc:	7a 01       	movw	r14, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    5bce:	81 11       	cpse	r24, r1
    5bd0:	83 c1       	rjmp	.+774    	; 0x5ed8 <disk_ioctl+0x322>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    5bd2:	80 91 18 20 	lds	r24, 0x2018
    5bd6:	80 fd       	sbrc	r24, 0
    5bd8:	81 c1       	rjmp	.+770    	; 0x5edc <disk_ioctl+0x326>

	switch (cmd) {
    5bda:	06 2f       	mov	r16, r22
    5bdc:	10 e0       	ldi	r17, 0x00	; 0
    5bde:	07 33       	cpi	r16, 0x37	; 55
    5be0:	11 05       	cpc	r17, r1
    5be2:	08 f0       	brcs	.+2      	; 0x5be6 <disk_ioctl+0x30>
    5be4:	5f c1       	rjmp	.+702    	; 0x5ea4 <disk_ioctl+0x2ee>
    5be6:	f8 01       	movw	r30, r16
    5be8:	e6 5f       	subi	r30, 0xF6	; 246
    5bea:	fe 4f       	sbci	r31, 0xFE	; 254
    5bec:	3e c3       	rjmp	.+1660   	; 0x626a <__tablejump2__>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    5bee:	7e dd       	rcall	.-1284   	; 0x56ec <select>
    5bf0:	11 e0       	ldi	r17, 0x01	; 1
    5bf2:	89 2b       	or	r24, r25
    5bf4:	09 f4       	brne	.+2      	; 0x5bf8 <disk_ioctl+0x42>
    5bf6:	6d c1       	rjmp	.+730    	; 0x5ed2 <disk_ioctl+0x31c>
    5bf8:	10 e0       	ldi	r17, 0x00	; 0
    5bfa:	6b c1       	rjmp	.+726    	; 0x5ed2 <disk_ioctl+0x31c>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    5bfc:	40 e0       	ldi	r20, 0x00	; 0
    5bfe:	50 e0       	ldi	r21, 0x00	; 0
    5c00:	ba 01       	movw	r22, r20
    5c02:	89 e0       	ldi	r24, 0x09	; 9
    5c04:	8b dd       	rcall	.-1258   	; 0x571c <send_cmd>
    5c06:	81 11       	cpse	r24, r1
    5c08:	4f c1       	rjmp	.+670    	; 0x5ea8 <disk_ioctl+0x2f2>
    5c0a:	60 e1       	ldi	r22, 0x10	; 16
    5c0c:	70 e0       	ldi	r23, 0x00	; 0
    5c0e:	ce 01       	movw	r24, r28
    5c10:	01 96       	adiw	r24, 0x01	; 1
    5c12:	d5 dd       	rcall	.-1110   	; 0x57be <rcvr_datablock>
    5c14:	89 2b       	or	r24, r25
    5c16:	09 f4       	brne	.+2      	; 0x5c1a <disk_ioctl+0x64>
    5c18:	49 c1       	rjmp	.+658    	; 0x5eac <disk_ioctl+0x2f6>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    5c1a:	89 81       	ldd	r24, Y+1	; 0x01
    5c1c:	82 95       	swap	r24
    5c1e:	86 95       	lsr	r24
    5c20:	86 95       	lsr	r24
    5c22:	83 70       	andi	r24, 0x03	; 3
    5c24:	81 30       	cpi	r24, 0x01	; 1
    5c26:	31 f5       	brne	.+76     	; 0x5c74 <disk_ioctl+0xbe>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    5c28:	88 85       	ldd	r24, Y+8	; 0x08
    5c2a:	8f 73       	andi	r24, 0x3F	; 63
    5c2c:	90 e0       	ldi	r25, 0x00	; 0
    5c2e:	a0 e0       	ldi	r26, 0x00	; 0
    5c30:	b0 e0       	ldi	r27, 0x00	; 0
    5c32:	dc 01       	movw	r26, r24
    5c34:	99 27       	eor	r25, r25
    5c36:	88 27       	eor	r24, r24
    5c38:	01 96       	adiw	r24, 0x01	; 1
    5c3a:	a1 1d       	adc	r26, r1
    5c3c:	b1 1d       	adc	r27, r1
    5c3e:	29 85       	ldd	r18, Y+9	; 0x09
    5c40:	30 e0       	ldi	r19, 0x00	; 0
    5c42:	32 2f       	mov	r19, r18
    5c44:	22 27       	eor	r18, r18
    5c46:	4a 85       	ldd	r20, Y+10	; 0x0a
    5c48:	24 0f       	add	r18, r20
    5c4a:	31 1d       	adc	r19, r1
    5c4c:	82 0f       	add	r24, r18
    5c4e:	93 1f       	adc	r25, r19
    5c50:	a1 1d       	adc	r26, r1
    5c52:	b1 1d       	adc	r27, r1
				*(DWORD*)buff = csize << 10;
    5c54:	07 2e       	mov	r0, r23
    5c56:	7a e0       	ldi	r23, 0x0A	; 10
    5c58:	88 0f       	add	r24, r24
    5c5a:	99 1f       	adc	r25, r25
    5c5c:	aa 1f       	adc	r26, r26
    5c5e:	bb 1f       	adc	r27, r27
    5c60:	7a 95       	dec	r23
    5c62:	d1 f7       	brne	.-12     	; 0x5c58 <disk_ioctl+0xa2>
    5c64:	70 2d       	mov	r23, r0
    5c66:	f7 01       	movw	r30, r14
    5c68:	80 83       	st	Z, r24
    5c6a:	91 83       	std	Z+1, r25	; 0x01
    5c6c:	a2 83       	std	Z+2, r26	; 0x02
    5c6e:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    5c70:	10 e0       	ldi	r17, 0x00	; 0
    5c72:	2f c1       	rjmp	.+606    	; 0x5ed2 <disk_ioctl+0x31c>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    5c74:	49 85       	ldd	r20, Y+9	; 0x09
    5c76:	42 95       	swap	r20
    5c78:	46 95       	lsr	r20
    5c7a:	46 95       	lsr	r20
    5c7c:	43 70       	andi	r20, 0x03	; 3
    5c7e:	88 85       	ldd	r24, Y+8	; 0x08
    5c80:	50 e0       	ldi	r21, 0x00	; 0
    5c82:	f4 e0       	ldi	r31, 0x04	; 4
    5c84:	8f 9f       	mul	r24, r31
    5c86:	40 0d       	add	r20, r0
    5c88:	51 1d       	adc	r21, r1
    5c8a:	11 24       	eor	r1, r1
    5c8c:	4f 5f       	subi	r20, 0xFF	; 255
    5c8e:	5f 4f       	sbci	r21, 0xFF	; 255
    5c90:	8f 81       	ldd	r24, Y+7	; 0x07
    5c92:	83 70       	andi	r24, 0x03	; 3
    5c94:	90 e0       	ldi	r25, 0x00	; 0
    5c96:	98 2f       	mov	r25, r24
    5c98:	88 27       	eor	r24, r24
    5c9a:	99 0f       	add	r25, r25
    5c9c:	99 0f       	add	r25, r25
    5c9e:	48 0f       	add	r20, r24
    5ca0:	59 1f       	adc	r21, r25
    5ca2:	60 e0       	ldi	r22, 0x00	; 0
    5ca4:	70 e0       	ldi	r23, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    5ca6:	9e 81       	ldd	r25, Y+6	; 0x06
    5ca8:	9f 70       	andi	r25, 0x0F	; 15
    5caa:	8b 85       	ldd	r24, Y+11	; 0x0b
    5cac:	88 1f       	adc	r24, r24
    5cae:	88 27       	eor	r24, r24
    5cb0:	88 1f       	adc	r24, r24
    5cb2:	98 0f       	add	r25, r24
    5cb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    5cb6:	83 70       	andi	r24, 0x03	; 3
    5cb8:	88 0f       	add	r24, r24
    5cba:	89 0f       	add	r24, r25
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    5cbc:	87 50       	subi	r24, 0x07	; 7
    5cbe:	8a 01       	movw	r16, r20
    5cc0:	9b 01       	movw	r18, r22
    5cc2:	04 c0       	rjmp	.+8      	; 0x5ccc <disk_ioctl+0x116>
    5cc4:	00 0f       	add	r16, r16
    5cc6:	11 1f       	adc	r17, r17
    5cc8:	22 1f       	adc	r18, r18
    5cca:	33 1f       	adc	r19, r19
    5ccc:	8a 95       	dec	r24
    5cce:	d2 f7       	brpl	.-12     	; 0x5cc4 <disk_ioctl+0x10e>
    5cd0:	f7 01       	movw	r30, r14
    5cd2:	00 83       	st	Z, r16
    5cd4:	11 83       	std	Z+1, r17	; 0x01
    5cd6:	22 83       	std	Z+2, r18	; 0x02
    5cd8:	33 83       	std	Z+3, r19	; 0x03
			}
			res = RES_OK;
    5cda:	10 e0       	ldi	r17, 0x00	; 0
    5cdc:	fa c0       	rjmp	.+500    	; 0x5ed2 <disk_ioctl+0x31c>
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    5cde:	80 91 7c 25 	lds	r24, 0x257C
    5ce2:	82 ff       	sbrs	r24, 2
    5ce4:	2d c0       	rjmp	.+90     	; 0x5d40 <disk_ioctl+0x18a>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    5ce6:	40 e0       	ldi	r20, 0x00	; 0
    5ce8:	50 e0       	ldi	r21, 0x00	; 0
    5cea:	ba 01       	movw	r22, r20
    5cec:	8d e8       	ldi	r24, 0x8D	; 141
    5cee:	16 dd       	rcall	.-1492   	; 0x571c <send_cmd>
    5cf0:	81 11       	cpse	r24, r1
    5cf2:	de c0       	rjmp	.+444    	; 0x5eb0 <disk_ioctl+0x2fa>
				xchg_spi(0xFF);
    5cf4:	8f ef       	ldi	r24, 0xFF	; 255
    5cf6:	f0 dc       	rcall	.-1568   	; 0x56d8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    5cf8:	60 e1       	ldi	r22, 0x10	; 16
    5cfa:	70 e0       	ldi	r23, 0x00	; 0
    5cfc:	ce 01       	movw	r24, r28
    5cfe:	01 96       	adiw	r24, 0x01	; 1
    5d00:	5e dd       	rcall	.-1348   	; 0x57be <rcvr_datablock>
    5d02:	89 2b       	or	r24, r25
    5d04:	09 f4       	brne	.+2      	; 0x5d08 <disk_ioctl+0x152>
    5d06:	d6 c0       	rjmp	.+428    	; 0x5eb4 <disk_ioctl+0x2fe>
    5d08:	10 e3       	ldi	r17, 0x30	; 48
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    5d0a:	8f ef       	ldi	r24, 0xFF	; 255
    5d0c:	e5 dc       	rcall	.-1590   	; 0x56d8 <xchg_spi>
    5d0e:	11 50       	subi	r17, 0x01	; 1
    5d10:	e1 f7       	brne	.-8      	; 0x5d0a <disk_ioctl+0x154>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    5d12:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d14:	82 95       	swap	r24
    5d16:	8f 70       	andi	r24, 0x0F	; 15
    5d18:	40 e1       	ldi	r20, 0x10	; 16
    5d1a:	50 e0       	ldi	r21, 0x00	; 0
    5d1c:	60 e0       	ldi	r22, 0x00	; 0
    5d1e:	70 e0       	ldi	r23, 0x00	; 0
    5d20:	8a 01       	movw	r16, r20
    5d22:	9b 01       	movw	r18, r22
    5d24:	04 c0       	rjmp	.+8      	; 0x5d2e <disk_ioctl+0x178>
    5d26:	00 0f       	add	r16, r16
    5d28:	11 1f       	adc	r17, r17
    5d2a:	22 1f       	adc	r18, r18
    5d2c:	33 1f       	adc	r19, r19
    5d2e:	8a 95       	dec	r24
    5d30:	d2 f7       	brpl	.-12     	; 0x5d26 <disk_ioctl+0x170>
    5d32:	f7 01       	movw	r30, r14
    5d34:	00 83       	st	Z, r16
    5d36:	11 83       	std	Z+1, r17	; 0x01
    5d38:	22 83       	std	Z+2, r18	; 0x02
    5d3a:	33 83       	std	Z+3, r19	; 0x03
					res = RES_OK;
    5d3c:	10 e0       	ldi	r17, 0x00	; 0
    5d3e:	c9 c0       	rjmp	.+402    	; 0x5ed2 <disk_ioctl+0x31c>
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    5d40:	40 e0       	ldi	r20, 0x00	; 0
    5d42:	50 e0       	ldi	r21, 0x00	; 0
    5d44:	ba 01       	movw	r22, r20
    5d46:	89 e0       	ldi	r24, 0x09	; 9
    5d48:	e9 dc       	rcall	.-1582   	; 0x571c <send_cmd>
    5d4a:	81 11       	cpse	r24, r1
    5d4c:	b5 c0       	rjmp	.+362    	; 0x5eb8 <disk_ioctl+0x302>
    5d4e:	60 e1       	ldi	r22, 0x10	; 16
    5d50:	70 e0       	ldi	r23, 0x00	; 0
    5d52:	ce 01       	movw	r24, r28
    5d54:	01 96       	adiw	r24, 0x01	; 1
    5d56:	33 dd       	rcall	.-1434   	; 0x57be <rcvr_datablock>
    5d58:	89 2b       	or	r24, r25
    5d5a:	09 f4       	brne	.+2      	; 0x5d5e <disk_ioctl+0x1a8>
    5d5c:	af c0       	rjmp	.+350    	; 0x5ebc <disk_ioctl+0x306>
				if (CardType & CT_SD1) {	/* SDv1 */
    5d5e:	80 91 7c 25 	lds	r24, 0x257C
    5d62:	81 ff       	sbrs	r24, 1
    5d64:	20 c0       	rjmp	.+64     	; 0x5da6 <disk_ioctl+0x1f0>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    5d66:	8c 85       	ldd	r24, Y+12	; 0x0c
    5d68:	88 1f       	adc	r24, r24
    5d6a:	88 27       	eor	r24, r24
    5d6c:	88 1f       	adc	r24, r24
    5d6e:	90 e0       	ldi	r25, 0x00	; 0
    5d70:	01 96       	adiw	r24, 0x01	; 1
    5d72:	2b 85       	ldd	r18, Y+11	; 0x0b
    5d74:	2f 73       	andi	r18, 0x3F	; 63
    5d76:	82 0f       	add	r24, r18
    5d78:	91 1d       	adc	r25, r1
    5d7a:	82 0f       	add	r24, r18
    5d7c:	91 1d       	adc	r25, r1
    5d7e:	2e 85       	ldd	r18, Y+14	; 0x0e
    5d80:	22 95       	swap	r18
    5d82:	26 95       	lsr	r18
    5d84:	26 95       	lsr	r18
    5d86:	23 70       	andi	r18, 0x03	; 3
    5d88:	21 50       	subi	r18, 0x01	; 1
    5d8a:	02 c0       	rjmp	.+4      	; 0x5d90 <disk_ioctl+0x1da>
    5d8c:	88 0f       	add	r24, r24
    5d8e:	99 1f       	adc	r25, r25
    5d90:	2a 95       	dec	r18
    5d92:	e2 f7       	brpl	.-8      	; 0x5d8c <disk_ioctl+0x1d6>
    5d94:	a0 e0       	ldi	r26, 0x00	; 0
    5d96:	b0 e0       	ldi	r27, 0x00	; 0
    5d98:	f7 01       	movw	r30, r14
    5d9a:	80 83       	st	Z, r24
    5d9c:	91 83       	std	Z+1, r25	; 0x01
    5d9e:	a2 83       	std	Z+2, r26	; 0x02
    5da0:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
    5da2:	10 e0       	ldi	r17, 0x00	; 0
    5da4:	96 c0       	rjmp	.+300    	; 0x5ed2 <disk_ioctl+0x31c>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    5da6:	8c 85       	ldd	r24, Y+12	; 0x0c
    5da8:	98 2f       	mov	r25, r24
    5daa:	93 70       	andi	r25, 0x03	; 3
    5dac:	82 95       	swap	r24
    5dae:	86 95       	lsr	r24
    5db0:	87 70       	andi	r24, 0x07	; 7
    5db2:	48 2f       	mov	r20, r24
    5db4:	50 e0       	ldi	r21, 0x00	; 0
    5db6:	f8 e0       	ldi	r31, 0x08	; 8
    5db8:	9f 9f       	mul	r25, r31
    5dba:	40 0d       	add	r20, r0
    5dbc:	51 1d       	adc	r21, r1
    5dbe:	11 24       	eor	r1, r1
    5dc0:	4f 5f       	subi	r20, 0xFF	; 255
    5dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    5dc4:	2b 85       	ldd	r18, Y+11	; 0x0b
    5dc6:	2c 77       	andi	r18, 0x7C	; 124
    5dc8:	30 e0       	ldi	r19, 0x00	; 0
    5dca:	35 95       	asr	r19
    5dcc:	27 95       	ror	r18
    5dce:	35 95       	asr	r19
    5dd0:	27 95       	ror	r18
    5dd2:	2f 5f       	subi	r18, 0xFF	; 255
    5dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    5dd6:	42 9f       	mul	r20, r18
    5dd8:	c0 01       	movw	r24, r0
    5dda:	43 9f       	mul	r20, r19
    5ddc:	90 0d       	add	r25, r0
    5dde:	52 9f       	mul	r21, r18
    5de0:	90 0d       	add	r25, r0
    5de2:	11 24       	eor	r1, r1
    5de4:	a0 e0       	ldi	r26, 0x00	; 0
    5de6:	b0 e0       	ldi	r27, 0x00	; 0
    5de8:	f7 01       	movw	r30, r14
    5dea:	80 83       	st	Z, r24
    5dec:	91 83       	std	Z+1, r25	; 0x01
    5dee:	a2 83       	std	Z+2, r26	; 0x02
    5df0:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    5df2:	10 e0       	ldi	r17, 0x00	; 0
    5df4:	6e c0       	rjmp	.+220    	; 0x5ed2 <disk_ioctl+0x31c>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    5df6:	80 91 7c 25 	lds	r24, 0x257C
    5dfa:	fa 01       	movw	r30, r20
    5dfc:	80 83       	st	Z, r24
		res = RES_OK;
    5dfe:	10 e0       	ldi	r17, 0x00	; 0
		break;
    5e00:	68 c0       	rjmp	.+208    	; 0x5ed2 <disk_ioctl+0x31c>

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    5e02:	40 e0       	ldi	r20, 0x00	; 0
    5e04:	50 e0       	ldi	r21, 0x00	; 0
    5e06:	ba 01       	movw	r22, r20
    5e08:	89 e0       	ldi	r24, 0x09	; 9
    5e0a:	88 dc       	rcall	.-1776   	; 0x571c <send_cmd>
    5e0c:	81 11       	cpse	r24, r1
    5e0e:	58 c0       	rjmp	.+176    	; 0x5ec0 <disk_ioctl+0x30a>
			&& rcvr_datablock(ptr, 16))
    5e10:	60 e1       	ldi	r22, 0x10	; 16
    5e12:	70 e0       	ldi	r23, 0x00	; 0
    5e14:	c7 01       	movw	r24, r14
    5e16:	d3 dc       	rcall	.-1626   	; 0x57be <rcvr_datablock>
    5e18:	11 e0       	ldi	r17, 0x01	; 1
    5e1a:	89 2b       	or	r24, r25
    5e1c:	09 f4       	brne	.+2      	; 0x5e20 <disk_ioctl+0x26a>
    5e1e:	59 c0       	rjmp	.+178    	; 0x5ed2 <disk_ioctl+0x31c>
    5e20:	10 e0       	ldi	r17, 0x00	; 0
    5e22:	57 c0       	rjmp	.+174    	; 0x5ed2 <disk_ioctl+0x31c>
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    5e24:	40 e0       	ldi	r20, 0x00	; 0
    5e26:	50 e0       	ldi	r21, 0x00	; 0
    5e28:	ba 01       	movw	r22, r20
    5e2a:	8a e0       	ldi	r24, 0x0A	; 10
    5e2c:	77 dc       	rcall	.-1810   	; 0x571c <send_cmd>
    5e2e:	81 11       	cpse	r24, r1
    5e30:	49 c0       	rjmp	.+146    	; 0x5ec4 <disk_ioctl+0x30e>
			&& rcvr_datablock(ptr, 16))
    5e32:	60 e1       	ldi	r22, 0x10	; 16
    5e34:	70 e0       	ldi	r23, 0x00	; 0
    5e36:	c7 01       	movw	r24, r14
    5e38:	c2 dc       	rcall	.-1660   	; 0x57be <rcvr_datablock>
    5e3a:	11 e0       	ldi	r17, 0x01	; 1
    5e3c:	89 2b       	or	r24, r25
    5e3e:	09 f4       	brne	.+2      	; 0x5e42 <disk_ioctl+0x28c>
    5e40:	48 c0       	rjmp	.+144    	; 0x5ed2 <disk_ioctl+0x31c>
    5e42:	10 e0       	ldi	r17, 0x00	; 0
    5e44:	46 c0       	rjmp	.+140    	; 0x5ed2 <disk_ioctl+0x31c>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    5e46:	40 e0       	ldi	r20, 0x00	; 0
    5e48:	50 e0       	ldi	r21, 0x00	; 0
    5e4a:	ba 01       	movw	r22, r20
    5e4c:	8a e3       	ldi	r24, 0x3A	; 58
    5e4e:	66 dc       	rcall	.-1844   	; 0x571c <send_cmd>
    5e50:	81 11       	cpse	r24, r1
    5e52:	3a c0       	rjmp	.+116    	; 0x5ec8 <disk_ioctl+0x312>
    5e54:	87 01       	movw	r16, r14
    5e56:	f4 e0       	ldi	r31, 0x04	; 4
    5e58:	ef 0e       	add	r14, r31
    5e5a:	f1 1c       	adc	r15, r1
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    5e5c:	8f ef       	ldi	r24, 0xFF	; 255
    5e5e:	3c dc       	rcall	.-1928   	; 0x56d8 <xchg_spi>
    5e60:	f8 01       	movw	r30, r16
    5e62:	81 93       	st	Z+, r24
    5e64:	8f 01       	movw	r16, r30
    5e66:	ee 15       	cp	r30, r14
    5e68:	ff 05       	cpc	r31, r15
    5e6a:	c1 f7       	brne	.-16     	; 0x5e5c <disk_ioctl+0x2a6>
    5e6c:	2f c0       	rjmp	.+94     	; 0x5ecc <disk_ioctl+0x316>
			res = RES_OK;
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    5e6e:	40 e0       	ldi	r20, 0x00	; 0
    5e70:	50 e0       	ldi	r21, 0x00	; 0
    5e72:	ba 01       	movw	r22, r20
    5e74:	8d e8       	ldi	r24, 0x8D	; 141
    5e76:	52 dc       	rcall	.-1884   	; 0x571c <send_cmd>
    5e78:	81 11       	cpse	r24, r1
    5e7a:	2a c0       	rjmp	.+84     	; 0x5ed0 <disk_ioctl+0x31a>
			xchg_spi(0xFF);
    5e7c:	8f ef       	ldi	r24, 0xFF	; 255
    5e7e:	2c dc       	rcall	.-1960   	; 0x56d8 <xchg_spi>
			if (rcvr_datablock(ptr, 64))
    5e80:	60 e4       	ldi	r22, 0x40	; 64
    5e82:	70 e0       	ldi	r23, 0x00	; 0
    5e84:	c7 01       	movw	r24, r14
    5e86:	9b dc       	rcall	.-1738   	; 0x57be <rcvr_datablock>
    5e88:	11 e0       	ldi	r17, 0x01	; 1
    5e8a:	89 2b       	or	r24, r25
    5e8c:	11 f1       	breq	.+68     	; 0x5ed2 <disk_ioctl+0x31c>
    5e8e:	10 e0       	ldi	r17, 0x00	; 0
    5e90:	20 c0       	rjmp	.+64     	; 0x5ed2 <disk_ioctl+0x31c>

static
void power_off (void)
{
	//TCC1.CTRLA = TC_CLKSEL_OFF_gc;
	spi_off();
    5e92:	0e 94 39 1b 	call	0x3672	; 0x3672 <spi_off>
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
		Stat |= STA_NOINIT;
    5e96:	80 91 18 20 	lds	r24, 0x2018
    5e9a:	81 60       	ori	r24, 0x01	; 1
    5e9c:	80 93 18 20 	sts	0x2018, r24
		res = RES_OK;
    5ea0:	10 e0       	ldi	r17, 0x00	; 0
		break;
    5ea2:	17 c0       	rjmp	.+46     	; 0x5ed2 <disk_ioctl+0x31c>

	default:
		res = RES_PARERR;
    5ea4:	14 e0       	ldi	r17, 0x04	; 4
    5ea6:	15 c0       	rjmp	.+42     	; 0x5ed2 <disk_ioctl+0x31c>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    5ea8:	11 e0       	ldi	r17, 0x01	; 1
    5eaa:	13 c0       	rjmp	.+38     	; 0x5ed2 <disk_ioctl+0x31c>
    5eac:	11 e0       	ldi	r17, 0x01	; 1
    5eae:	11 c0       	rjmp	.+34     	; 0x5ed2 <disk_ioctl+0x31c>
    5eb0:	11 e0       	ldi	r17, 0x01	; 1
    5eb2:	0f c0       	rjmp	.+30     	; 0x5ed2 <disk_ioctl+0x31c>
    5eb4:	11 e0       	ldi	r17, 0x01	; 1
    5eb6:	0d c0       	rjmp	.+26     	; 0x5ed2 <disk_ioctl+0x31c>
    5eb8:	11 e0       	ldi	r17, 0x01	; 1
    5eba:	0b c0       	rjmp	.+22     	; 0x5ed2 <disk_ioctl+0x31c>
    5ebc:	11 e0       	ldi	r17, 0x01	; 1
    5ebe:	09 c0       	rjmp	.+18     	; 0x5ed2 <disk_ioctl+0x31c>
    5ec0:	11 e0       	ldi	r17, 0x01	; 1
    5ec2:	07 c0       	rjmp	.+14     	; 0x5ed2 <disk_ioctl+0x31c>
    5ec4:	11 e0       	ldi	r17, 0x01	; 1
    5ec6:	05 c0       	rjmp	.+10     	; 0x5ed2 <disk_ioctl+0x31c>
    5ec8:	11 e0       	ldi	r17, 0x01	; 1
    5eca:	03 c0       	rjmp	.+6      	; 0x5ed2 <disk_ioctl+0x31c>
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
			res = RES_OK;
    5ecc:	10 e0       	ldi	r17, 0x00	; 0
    5ece:	01 c0       	rjmp	.+2      	; 0x5ed2 <disk_ioctl+0x31c>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    5ed0:	11 e0       	ldi	r17, 0x01	; 1

	default:
		res = RES_PARERR;
	}

	deselect();
    5ed2:	05 dc       	rcall	.-2038   	; 0x56de <deselect>

	return res;
    5ed4:	81 2f       	mov	r24, r17
    5ed6:	03 c0       	rjmp	.+6      	; 0x5ede <disk_ioctl+0x328>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    5ed8:	84 e0       	ldi	r24, 0x04	; 4
    5eda:	01 c0       	rjmp	.+2      	; 0x5ede <disk_ioctl+0x328>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    5edc:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    5ede:	60 96       	adiw	r28, 0x10	; 16
    5ee0:	cd bf       	out	0x3d, r28	; 61
    5ee2:	de bf       	out	0x3e, r29	; 62
    5ee4:	df 91       	pop	r29
    5ee6:	cf 91       	pop	r28
    5ee8:	1f 91       	pop	r17
    5eea:	0f 91       	pop	r16
    5eec:	ff 90       	pop	r15
    5eee:	ef 90       	pop	r14
    5ef0:	08 95       	ret

00005ef2 <__vector_14>:

/*-----------------------------------------------------*/
/* Sound sampling ISR                                  */

ISR(TCC0_OVF_vect)
{
    5ef2:	1f 92       	push	r1
    5ef4:	0f 92       	push	r0
    5ef6:	0f b6       	in	r0, 0x3f	; 63
    5ef8:	0f 92       	push	r0
    5efa:	11 24       	eor	r1, r1
    5efc:	0b b6       	in	r0, 0x3b	; 59
    5efe:	0f 92       	push	r0
    5f00:	2f 93       	push	r18
    5f02:	3f 93       	push	r19
    5f04:	4f 93       	push	r20
    5f06:	5f 93       	push	r21
    5f08:	8f 93       	push	r24
    5f0a:	9f 93       	push	r25
    5f0c:	af 93       	push	r26
    5f0e:	bf 93       	push	r27
    5f10:	ef 93       	push	r30
    5f12:	ff 93       	push	r31
	WAVFIFO *fcb = WavFifo;	/* Pointer to FIFO controls */
    5f14:	e0 91 5a 27 	lds	r30, 0x275A
    5f18:	f0 91 5b 27 	lds	r31, 0x275B
	UINT ri, ct;
	BYTE *buff, l1, l2, r1, r2;
	
	static uint16_t prev = 0;
		
	if (!fcb) return;
    5f1c:	30 97       	sbiw	r30, 0x00	; 0
    5f1e:	09 f4       	brne	.+2      	; 0x5f22 <__vector_14+0x30>
    5f20:	47 c0       	rjmp	.+142    	; 0x5fb0 <__vector_14+0xbe>
	ct = fcb->ct; ri = fcb->ri;
    5f22:	46 81       	ldd	r20, Z+6	; 0x06
    5f24:	57 81       	ldd	r21, Z+7	; 0x07
    5f26:	22 81       	ldd	r18, Z+2	; 0x02
    5f28:	33 81       	ldd	r19, Z+3	; 0x03
	buff = fcb->buff + ri;
    5f2a:	80 85       	ldd	r24, Z+8	; 0x08
    5f2c:	91 85       	ldd	r25, Z+9	; 0x09
    5f2e:	dc 01       	movw	r26, r24
    5f30:	a2 0f       	add	r26, r18
    5f32:	b3 1f       	adc	r27, r19

	switch (fcb->mode) {
    5f34:	80 81       	ld	r24, Z
    5f36:	91 81       	ldd	r25, Z+1	; 0x01
    5f38:	81 30       	cpi	r24, 0x01	; 1
    5f3a:	91 05       	cpc	r25, r1
    5f3c:	69 f0       	breq	.+26     	; 0x5f58 <__vector_14+0x66>
    5f3e:	18 f0       	brcs	.+6      	; 0x5f46 <__vector_14+0x54>
    5f40:	02 97       	sbiw	r24, 0x02	; 2
    5f42:	99 f0       	breq	.+38     	; 0x5f6a <__vector_14+0x78>
    5f44:	1d c0       	rjmp	.+58     	; 0x5f80 <__vector_14+0x8e>
		case 0:		/* Mono, 8bit */
		if (ct < 1) return;
    5f46:	41 15       	cp	r20, r1
    5f48:	51 05       	cpc	r21, r1
    5f4a:	91 f1       	breq	.+100    	; 0x5fb0 <__vector_14+0xbe>
		l1 = r2 = buff[0];
    5f4c:	8c 91       	ld	r24, X
		ct -= 1; ri += 1;
    5f4e:	41 50       	subi	r20, 0x01	; 1
    5f50:	51 09       	sbc	r21, r1
    5f52:	2f 5f       	subi	r18, 0xFF	; 255
    5f54:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    5f56:	1d c0       	rjmp	.+58     	; 0x5f92 <__vector_14+0xa0>
		case 1:		/* Stereo, 8bit */
		if (ct < 2) return;
    5f58:	42 30       	cpi	r20, 0x02	; 2
    5f5a:	51 05       	cpc	r21, r1
    5f5c:	48 f1       	brcs	.+82     	; 0x5fb0 <__vector_14+0xbe>
		l1 = buff[0]; r2 = buff[1];
    5f5e:	8c 91       	ld	r24, X
		ct -= 2; ri += 2;
    5f60:	42 50       	subi	r20, 0x02	; 2
    5f62:	51 09       	sbc	r21, r1
    5f64:	2e 5f       	subi	r18, 0xFE	; 254
    5f66:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    5f68:	14 c0       	rjmp	.+40     	; 0x5f92 <__vector_14+0xa0>
		case 2:		/* Mono, 16bit */
		if (ct < 2) return;
    5f6a:	42 30       	cpi	r20, 0x02	; 2
    5f6c:	51 05       	cpc	r21, r1
    5f6e:	00 f1       	brcs	.+64     	; 0x5fb0 <__vector_14+0xbe>
		l1 = r2 = buff[1] + 128;
    5f70:	11 96       	adiw	r26, 0x01	; 1
    5f72:	8c 91       	ld	r24, X
    5f74:	80 58       	subi	r24, 0x80	; 128
		ct -= 2; ri += 2;
    5f76:	42 50       	subi	r20, 0x02	; 2
    5f78:	51 09       	sbc	r21, r1
    5f7a:	2e 5f       	subi	r18, 0xFE	; 254
    5f7c:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    5f7e:	09 c0       	rjmp	.+18     	; 0x5f92 <__vector_14+0xa0>
		default:	/* Stereo, 16bit */
		if (ct < 4) return;
    5f80:	44 30       	cpi	r20, 0x04	; 4
    5f82:	51 05       	cpc	r21, r1
    5f84:	a8 f0       	brcs	.+42     	; 0x5fb0 <__vector_14+0xbe>
		l2 = buff[0]; 
		l1 = buff[1];
    5f86:	11 96       	adiw	r26, 0x01	; 1
    5f88:	8c 91       	ld	r24, X
		r2 = buff[2];
		r1 = buff[3];
		ct -= 4; 
    5f8a:	44 50       	subi	r20, 0x04	; 4
    5f8c:	51 09       	sbc	r21, r1
		ri += 4;
    5f8e:	2c 5f       	subi	r18, 0xFC	; 252
    5f90:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	fcb->ct = ct;
    5f92:	46 83       	std	Z+6, r20	; 0x06
    5f94:	57 83       	std	Z+7, r21	; 0x07
	fcb->ri = ri & (fcb->sz_buff - 1);
    5f96:	42 85       	ldd	r20, Z+10	; 0x0a
    5f98:	53 85       	ldd	r21, Z+11	; 0x0b
    5f9a:	41 50       	subi	r20, 0x01	; 1
    5f9c:	51 09       	sbc	r21, r1
    5f9e:	24 23       	and	r18, r20
    5fa0:	35 23       	and	r19, r21
    5fa2:	22 83       	std	Z+2, r18	; 0x02
    5fa4:	33 83       	std	Z+3, r19	; 0x03
	
	//uint16_t data = smooth(l1,0.35,data);
	
	DACB.CH0DATA = l1;
    5fa6:	90 e0       	ldi	r25, 0x00	; 0
    5fa8:	e0 e2       	ldi	r30, 0x20	; 32
    5faa:	f3 e0       	ldi	r31, 0x03	; 3
    5fac:	80 8f       	std	Z+24, r24	; 0x18
    5fae:	91 8f       	std	Z+25, r25	; 0x19
	
	//prev = data;
}
    5fb0:	ff 91       	pop	r31
    5fb2:	ef 91       	pop	r30
    5fb4:	bf 91       	pop	r27
    5fb6:	af 91       	pop	r26
    5fb8:	9f 91       	pop	r25
    5fba:	8f 91       	pop	r24
    5fbc:	5f 91       	pop	r21
    5fbe:	4f 91       	pop	r20
    5fc0:	3f 91       	pop	r19
    5fc2:	2f 91       	pop	r18
    5fc4:	0f 90       	pop	r0
    5fc6:	0b be       	out	0x3b, r0	; 59
    5fc8:	0f 90       	pop	r0
    5fca:	0f be       	out	0x3f, r0	; 63
    5fcc:	0f 90       	pop	r0
    5fce:	1f 90       	pop	r1
    5fd0:	18 95       	reti

00005fd2 <main>:
	printf("token[%d]: %s \r\n",i,keyString);
}

esp8266_status_t wifi_status = 0;

int main(void) {
    5fd2:	cf 93       	push	r28
    5fd4:	df 93       	push	r29
    5fd6:	cd b7       	in	r28, 0x3d	; 61
    5fd8:	de b7       	in	r29, 0x3e	; 62
    5fda:	64 97       	sbiw	r28, 0x14	; 20
    5fdc:	cd bf       	out	0x3d, r28	; 61
    5fde:	de bf       	out	0x3e, r29	; 62
	
	//Structures
	SI114X_IRQ_SAMPLE sensor_data;
	
	//System
	clock_setup_32_mhz();
    5fe0:	0e 94 f6 06 	call	0xdec	; 0xdec <clock_setup_32_mhz>
	
	//LED Matrix init
	ht1632c_setup(HT1632_COMMON_16NMOS);
    5fe4:	84 e2       	ldi	r24, 0x24	; 36
    5fe6:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <ht1632c_setup>
	ht1632c_set_brightness(1);
    5fea:	81 e0       	ldi	r24, 0x01	; 1
    5fec:	0e 94 6f 0c 	call	0x18de	; 0x18de <ht1632c_set_brightness>
	ht1632c_clear_screen();
    5ff0:	0e 94 37 0c 	call	0x186e	; 0x186e <ht1632c_clear_screen>
	ht1632c_send_command(HT1632_LED_ON);
    5ff4:	83 e0       	ldi	r24, 0x03	; 3
    5ff6:	0e 94 41 0c 	call	0x1882	; 0x1882 <ht1632c_send_command>
	
	//Init env variables
	if(1)
	//if (!EEPROM_ReadEnv())
	{
		EEPROM_EraseAll();
    5ffa:	0e 94 76 07 	call	0xeec	; 0xeec <EEPROM_EraseAll>
		
		strncpy(env_var.name,CLOCK_NAME,sizeof(env_var.name));
    5ffe:	4a e0       	ldi	r20, 0x0A	; 10
    6000:	50 e0       	ldi	r21, 0x00	; 0
    6002:	62 e0       	ldi	r22, 0x02	; 2
    6004:	74 e2       	ldi	r23, 0x24	; 36
    6006:	81 e8       	ldi	r24, 0x81	; 129
    6008:	95 e2       	ldi	r25, 0x25	; 37
    600a:	c0 d2       	rcall	.+1408   	; 0x658c <strncpy>
		env_var.id = CLOCK_ID;
    600c:	81 e0       	ldi	r24, 0x01	; 1
    600e:	90 e0       	ldi	r25, 0x00	; 0
    6010:	80 93 7f 25 	sts	0x257F, r24
    6014:	90 93 80 25 	sts	0x2580, r25
		env_var.temperature[0] = '0';
    6018:	80 e3       	ldi	r24, 0x30	; 48
    601a:	80 93 94 25 	sts	0x2594, r24
		env_var.brightness = 1;
    601e:	81 e0       	ldi	r24, 0x01	; 1
    6020:	80 93 b0 25 	sts	0x25B0, r24
		env_var.menu_id = 0;
    6024:	10 92 db 25 	sts	0x25DB, r1
		strncpy(env_var.wifi_pswd,PASS,sizeof(env_var.wifi_pswd));
    6028:	44 e1       	ldi	r20, 0x14	; 20
    602a:	50 e0       	ldi	r21, 0x00	; 0
    602c:	67 e0       	ldi	r22, 0x07	; 7
    602e:	74 e2       	ldi	r23, 0x24	; 36
    6030:	83 eb       	ldi	r24, 0xB3	; 179
    6032:	95 e2       	ldi	r25, 0x25	; 37
    6034:	ab d2       	rcall	.+1366   	; 0x658c <strncpy>
		strncpy(env_var.wifi_ssid,SSID,sizeof(env_var.wifi_ssid));
    6036:	44 e1       	ldi	r20, 0x14	; 20
    6038:	50 e0       	ldi	r21, 0x00	; 0
    603a:	62 e1       	ldi	r22, 0x12	; 18
    603c:	74 e2       	ldi	r23, 0x24	; 36
    603e:	87 ec       	ldi	r24, 0xC7	; 199
    6040:	95 e2       	ldi	r25, 0x25	; 37
    6042:	a4 d2       	rcall	.+1352   	; 0x658c <strncpy>
			
		env_var.time.seconds = 30;
    6044:	8e e1       	ldi	r24, 0x1E	; 30
    6046:	80 93 8b 25 	sts	0x258B, r24
		env_var.time.minutes = 59;
    604a:	8b e3       	ldi	r24, 0x3B	; 59
    604c:	80 93 8c 25 	sts	0x258C, r24
		env_var.time.hours = 23;
    6050:	87 e1       	ldi	r24, 0x17	; 23
    6052:	80 93 8d 25 	sts	0x258D, r24
		env_var.time.day = 31;
    6056:	8f e1       	ldi	r24, 0x1F	; 31
    6058:	80 93 8e 25 	sts	0x258E, r24
		env_var.time.weekday = Sunday;
    605c:	10 92 8f 25 	sts	0x258F, r1
		env_var.time.week = 52;
    6060:	84 e3       	ldi	r24, 0x34	; 52
    6062:	80 93 90 25 	sts	0x2590, r24
		env_var.time.month = December;
    6066:	8c e0       	ldi	r24, 0x0C	; 12
    6068:	80 93 91 25 	sts	0x2591, r24
		env_var.time.year = 2015;
    606c:	8f ed       	ldi	r24, 0xDF	; 223
    606e:	97 e0       	ldi	r25, 0x07	; 7
    6070:	80 93 92 25 	sts	0x2592, r24
    6074:	90 93 93 25 	sts	0x2593, r25
		
		env_var.alarm.hours = 0;
    6078:	10 92 dd 25 	sts	0x25DD, r1
		env_var.alarm.minutes = 0;
    607c:	10 92 dc 25 	sts	0x25DC, r1
	}
	
	//WiFi off
	esp8266_off();
    6080:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <esp8266_off>
	
	//Debug interface
	uart_setup();
    6084:	67 d0       	rcall	.+206    	; 0x6154 <uart_setup>
	stdout = stdin = &mystdout;
    6086:	89 e1       	ldi	r24, 0x19	; 25
    6088:	90 e2       	ldi	r25, 0x20	; 32
    608a:	80 93 60 27 	sts	0x2760, r24
    608e:	90 93 61 27 	sts	0x2761, r25
    6092:	80 93 62 27 	sts	0x2762, r24
    6096:	90 93 63 27 	sts	0x2763, r25

#ifdef DEBUG_ON
	puts("LED MATRIX Clock - By: Erlend Hestnes\r\n");
    609a:	8c e1       	ldi	r24, 0x1C	; 28
    609c:	94 e2       	ldi	r25, 0x24	; 36
    609e:	b0 d2       	rcall	.+1376   	; 0x6600 <puts>
void uart_put_char(char c);
static FILE mystdout = FDEV_SETUP_STREAM(uart_put_char,uart_get_char,_FDEV_SETUP_WRITE);

void pmic_setup(void) 
{
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    60a0:	87 e0       	ldi	r24, 0x07	; 7
    60a2:	e0 ea       	ldi	r30, 0xA0	; 160
    60a4:	f0 e0       	ldi	r31, 0x00	; 0
    60a6:	82 83       	std	Z+2, r24	; 0x02
	puts("LED MATRIX Clock - By: Erlend Hestnes\r\n");
#endif

	//Enable interrupts
	pmic_setup();
	btn_setup(false);
    60a8:	80 e0       	ldi	r24, 0x00	; 0
    60aa:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <btn_setup>
	
	twi_setup(&TWIC);
    60ae:	80 e8       	ldi	r24, 0x80	; 128
    60b0:	94 e0       	ldi	r25, 0x04	; 4
    60b2:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <twi_setup>

	SLEEP.CTRL |= SLEEP_MODE_PWR_SAVE;
    60b6:	e8 e4       	ldi	r30, 0x48	; 72
    60b8:	f0 e0       	ldi	r31, 0x00	; 0
    60ba:	80 81       	ld	r24, Z
    60bc:	86 60       	ori	r24, 0x06	; 6
    60be:	80 83       	st	Z, r24
	
	sei();
    60c0:	78 94       	sei
	
	//Calculate baseline for Si114x
	si114x_baseline_calibration(&sensor_data);
    60c2:	ce 01       	movw	r24, r28
    60c4:	01 96       	adiw	r24, 0x01	; 1
    60c6:	0e 94 58 14 	call	0x28b0	; 0x28b0 <si114x_baseline_calibration>

	//Turn on proximity channel 1 with ISR and threshold
	si114x_setup_ps1_only();
    60ca:	0e 94 76 13 	call	0x26ec	; 0x26ec <si114x_setup_ps1_only>
	
	//Turn on RTC
	rtc_enable_time_render();
    60ce:	0e 94 b4 10 	call	0x2168	; 0x2168 <rtc_enable_time_render>
	ht1632c_refresh_screen();
    60d2:	0e 94 0c 0c 	call	0x1818	; 0x1818 <ht1632c_refresh_screen>
	rtc_setup();
    60d6:	0e 94 0e 10 	call	0x201c	; 0x201c <rtc_setup>
	
	EEPROM_WriteEnv();
    60da:	0e 94 8a 07 	call	0xf14	; 0xf14 <EEPROM_WriteEnv>
	
	
	//play_sound("care");
	
	esp8266_on();
    60de:	0e 94 c9 08 	call	0x1192	; 0x1192 <esp8266_on>
	//esp8266_setup();
	esp8266_setup_webserver(false, true);
    60e2:	61 e0       	ldi	r22, 0x01	; 1
    60e4:	80 e0       	ldi	r24, 0x00	; 0
    60e6:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <esp8266_setup_webserver>
	while (1)
	{
		esp8266_run_simple_webserver();
    60ea:	0e 94 32 0a 	call	0x1464	; 0x1464 <esp8266_run_simple_webserver>
    60ee:	fd cf       	rjmp	.-6      	; 0x60ea <main+0x118>

000060f0 <__vector_16>:
#endif
	
	return 1;
}

ISR(TCC0_CCA_vect) {
    60f0:	1f 92       	push	r1
    60f2:	0f 92       	push	r0
    60f4:	0f b6       	in	r0, 0x3f	; 63
    60f6:	0f 92       	push	r0
    60f8:	11 24       	eor	r1, r1
    60fa:	0b b6       	in	r0, 0x3b	; 59
    60fc:	0f 92       	push	r0
    60fe:	2f 93       	push	r18
    6100:	3f 93       	push	r19
    6102:	4f 93       	push	r20
    6104:	5f 93       	push	r21
    6106:	6f 93       	push	r22
    6108:	7f 93       	push	r23
    610a:	8f 93       	push	r24
    610c:	9f 93       	push	r25
    610e:	af 93       	push	r26
    6110:	bf 93       	push	r27
    6112:	ef 93       	push	r30
    6114:	ff 93       	push	r31
	ht1632c_loading2();
    6116:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <ht1632c_loading2>
}
    611a:	ff 91       	pop	r31
    611c:	ef 91       	pop	r30
    611e:	bf 91       	pop	r27
    6120:	af 91       	pop	r26
    6122:	9f 91       	pop	r25
    6124:	8f 91       	pop	r24
    6126:	7f 91       	pop	r23
    6128:	6f 91       	pop	r22
    612a:	5f 91       	pop	r21
    612c:	4f 91       	pop	r20
    612e:	3f 91       	pop	r19
    6130:	2f 91       	pop	r18
    6132:	0f 90       	pop	r0
    6134:	0b be       	out	0x3b, r0	; 59
    6136:	0f 90       	pop	r0
    6138:	0f be       	out	0x3f, r0	; 63
    613a:	0f 90       	pop	r0
    613c:	1f 90       	pop	r1
    613e:	18 95       	reti

00006140 <__vector_17>:

ISR(TCC0_CCB_vect) {
    6140:	1f 92       	push	r1
    6142:	0f 92       	push	r0
    6144:	0f b6       	in	r0, 0x3f	; 63
    6146:	0f 92       	push	r0
    6148:	11 24       	eor	r1, r1
	//ht1632c_loading3();
    614a:	0f 90       	pop	r0
    614c:	0f be       	out	0x3f, r0	; 63
    614e:	0f 90       	pop	r0
    6150:	1f 90       	pop	r1
    6152:	18 95       	reti

00006154 <uart_setup>:

#include "uart.h"

void uart_setup(void) {
	
	PORTD.DIRSET = PIN3_bm; //TX
    6154:	e0 e6       	ldi	r30, 0x60	; 96
    6156:	f6 e0       	ldi	r31, 0x06	; 6
    6158:	88 e0       	ldi	r24, 0x08	; 8
    615a:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; //RX
    615c:	84 e0       	ldi	r24, 0x04	; 4
    615e:	82 83       	std	Z+2, r24	; 0x02
	
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc;
    6160:	e0 ea       	ldi	r30, 0xA0	; 160
    6162:	f9 e0       	ldi	r31, 0x09	; 9
    6164:	80 e2       	ldi	r24, 0x20	; 32
    6166:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.BAUDCTRLA = 2094;//207;//0x1111;
    6168:	8e e2       	ldi	r24, 0x2E	; 46
    616a:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (-7 << 4) | (2094 >> 8);
    616c:	88 e9       	ldi	r24, 0x98	; 152
    616e:	87 83       	std	Z+7, r24	; 0x07
	USARTD0.CTRLC = USART_CHSIZE_8BIT_gc;
    6170:	83 e0       	ldi	r24, 0x03	; 3
    6172:	85 83       	std	Z+5, r24	; 0x05

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    6174:	88 e1       	ldi	r24, 0x18	; 24
    6176:	84 83       	std	Z+4, r24	; 0x04
    6178:	08 95       	ret

0000617a <uart_put_char>:
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    617a:	e0 ea       	ldi	r30, 0xA0	; 160
    617c:	f9 e0       	ldi	r31, 0x09	; 9
    617e:	91 81       	ldd	r25, Z+1	; 0x01
    6180:	95 ff       	sbrs	r25, 5
    6182:	fd cf       	rjmp	.-6      	; 0x617e <uart_put_char+0x4>
	USARTD0.DATA = c;
    6184:	80 93 a0 09 	sts	0x09A0, r24
    6188:	08 95       	ret

0000618a <uart_get_char>:
}

char uart_get_char(void) {
	while (!(USARTD0.STATUS & USART_RXCIF_bm));
    618a:	e0 ea       	ldi	r30, 0xA0	; 160
    618c:	f9 e0       	ldi	r31, 0x09	; 9
    618e:	81 81       	ldd	r24, Z+1	; 0x01
    6190:	88 23       	and	r24, r24
    6192:	ec f7       	brge	.-6      	; 0x618e <uart_get_char+0x4>
	return USARTD0.DATA;
    6194:	80 91 a0 09 	lds	r24, 0x09A0
}
    6198:	08 95       	ret

0000619a <uart_write_str>:

void uart_write_str(char *str) {
    619a:	cf 93       	push	r28
    619c:	df 93       	push	r29
    619e:	ec 01       	movw	r28, r24
	while (*str) {
    61a0:	88 81       	ld	r24, Y
    61a2:	88 23       	and	r24, r24
    61a4:	29 f0       	breq	.+10     	; 0x61b0 <uart_write_str+0x16>
    61a6:	21 96       	adiw	r28, 0x01	; 1
		uart_put_char(*str++);
    61a8:	e8 df       	rcall	.-48     	; 0x617a <uart_put_char>
	while (!(USARTD0.STATUS & USART_RXCIF_bm));
	return USARTD0.DATA;
}

void uart_write_str(char *str) {
	while (*str) {
    61aa:	89 91       	ld	r24, Y+
    61ac:	81 11       	cpse	r24, r1
    61ae:	fc cf       	rjmp	.-8      	; 0x61a8 <uart_write_str+0xe>
		uart_put_char(*str++);
	}
	uart_put_char('\r');
    61b0:	8d e0       	ldi	r24, 0x0D	; 13
    61b2:	e3 df       	rcall	.-58     	; 0x617a <uart_put_char>
	uart_put_char('\n');
    61b4:	8a e0       	ldi	r24, 0x0A	; 10
    61b6:	e1 df       	rcall	.-62     	; 0x617a <uart_put_char>
}
    61b8:	df 91       	pop	r29
    61ba:	cf 91       	pop	r28
    61bc:	08 95       	ret

000061be <uwrite_hex>:

void uwrite_hex(unsigned char n) {
    61be:	cf 93       	push	r28
    61c0:	c8 2f       	mov	r28, r24
	if(((n>>4) & 15) < 10)
    61c2:	82 95       	swap	r24
    61c4:	8f 70       	andi	r24, 0x0F	; 15
    61c6:	28 2f       	mov	r18, r24
    61c8:	30 e0       	ldi	r19, 0x00	; 0
    61ca:	2a 30       	cpi	r18, 0x0A	; 10
    61cc:	31 05       	cpc	r19, r1
    61ce:	1c f4       	brge	.+6      	; 0x61d6 <uwrite_hex+0x18>
	uart_put_char('0' + ((n>>4)&15));
    61d0:	80 5d       	subi	r24, 0xD0	; 208
    61d2:	d3 df       	rcall	.-90     	; 0x617a <uart_put_char>
    61d4:	02 c0       	rjmp	.+4      	; 0x61da <uwrite_hex+0x1c>
	else
	uart_put_char('A' + ((n>>4)&15) - 10);
    61d6:	89 5c       	subi	r24, 0xC9	; 201
    61d8:	d0 df       	rcall	.-96     	; 0x617a <uart_put_char>
	n <<= 4;
	if(((n>>4) & 15) < 10)
    61da:	8c 2f       	mov	r24, r28
    61dc:	8f 70       	andi	r24, 0x0F	; 15
    61de:	28 2f       	mov	r18, r24
    61e0:	2f 70       	andi	r18, 0x0F	; 15
    61e2:	30 e0       	ldi	r19, 0x00	; 0
    61e4:	2a 30       	cpi	r18, 0x0A	; 10
    61e6:	31 05       	cpc	r19, r1
    61e8:	1c f4       	brge	.+6      	; 0x61f0 <uwrite_hex+0x32>
	uart_put_char('0' + ((n>>4)&15));
    61ea:	80 5d       	subi	r24, 0xD0	; 208
    61ec:	c6 df       	rcall	.-116    	; 0x617a <uart_put_char>
    61ee:	02 c0       	rjmp	.+4      	; 0x61f4 <uwrite_hex+0x36>
	else
	uart_put_char('A' + ((n>>4)&15) - 10);
    61f0:	89 5c       	subi	r24, 0xC9	; 201
    61f2:	c3 df       	rcall	.-122    	; 0x617a <uart_put_char>
	
	uart_put_char('\r');
    61f4:	8d e0       	ldi	r24, 0x0D	; 13
    61f6:	c1 df       	rcall	.-126    	; 0x617a <uart_put_char>
	uart_put_char('\n');
    61f8:	8a e0       	ldi	r24, 0x0A	; 10
    61fa:	bf df       	rcall	.-130    	; 0x617a <uart_put_char>
    61fc:	cf 91       	pop	r28
    61fe:	08 95       	ret

00006200 <__divmodhi4>:
    6200:	97 fb       	bst	r25, 7
    6202:	07 2e       	mov	r0, r23
    6204:	16 f4       	brtc	.+4      	; 0x620a <__divmodhi4+0xa>
    6206:	00 94       	com	r0
    6208:	06 d0       	rcall	.+12     	; 0x6216 <__divmodhi4_neg1>
    620a:	77 fd       	sbrc	r23, 7
    620c:	08 d0       	rcall	.+16     	; 0x621e <__divmodhi4_neg2>
    620e:	4c d0       	rcall	.+152    	; 0x62a8 <__udivmodhi4>
    6210:	07 fc       	sbrc	r0, 7
    6212:	05 d0       	rcall	.+10     	; 0x621e <__divmodhi4_neg2>
    6214:	3e f4       	brtc	.+14     	; 0x6224 <__divmodhi4_exit>

00006216 <__divmodhi4_neg1>:
    6216:	90 95       	com	r25
    6218:	81 95       	neg	r24
    621a:	9f 4f       	sbci	r25, 0xFF	; 255
    621c:	08 95       	ret

0000621e <__divmodhi4_neg2>:
    621e:	70 95       	com	r23
    6220:	61 95       	neg	r22
    6222:	7f 4f       	sbci	r23, 0xFF	; 255

00006224 <__divmodhi4_exit>:
    6224:	08 95       	ret

00006226 <__udivmodsi4>:
    6226:	a1 e2       	ldi	r26, 0x21	; 33
    6228:	1a 2e       	mov	r1, r26
    622a:	aa 1b       	sub	r26, r26
    622c:	bb 1b       	sub	r27, r27
    622e:	fd 01       	movw	r30, r26
    6230:	0d c0       	rjmp	.+26     	; 0x624c <__udivmodsi4_ep>

00006232 <__udivmodsi4_loop>:
    6232:	aa 1f       	adc	r26, r26
    6234:	bb 1f       	adc	r27, r27
    6236:	ee 1f       	adc	r30, r30
    6238:	ff 1f       	adc	r31, r31
    623a:	a2 17       	cp	r26, r18
    623c:	b3 07       	cpc	r27, r19
    623e:	e4 07       	cpc	r30, r20
    6240:	f5 07       	cpc	r31, r21
    6242:	20 f0       	brcs	.+8      	; 0x624c <__udivmodsi4_ep>
    6244:	a2 1b       	sub	r26, r18
    6246:	b3 0b       	sbc	r27, r19
    6248:	e4 0b       	sbc	r30, r20
    624a:	f5 0b       	sbc	r31, r21

0000624c <__udivmodsi4_ep>:
    624c:	66 1f       	adc	r22, r22
    624e:	77 1f       	adc	r23, r23
    6250:	88 1f       	adc	r24, r24
    6252:	99 1f       	adc	r25, r25
    6254:	1a 94       	dec	r1
    6256:	69 f7       	brne	.-38     	; 0x6232 <__udivmodsi4_loop>
    6258:	60 95       	com	r22
    625a:	70 95       	com	r23
    625c:	80 95       	com	r24
    625e:	90 95       	com	r25
    6260:	9b 01       	movw	r18, r22
    6262:	ac 01       	movw	r20, r24
    6264:	bd 01       	movw	r22, r26
    6266:	cf 01       	movw	r24, r30
    6268:	08 95       	ret

0000626a <__tablejump2__>:
    626a:	ee 0f       	add	r30, r30
    626c:	ff 1f       	adc	r31, r31

0000626e <__tablejump__>:
    626e:	05 90       	lpm	r0, Z+
    6270:	f4 91       	lpm	r31, Z
    6272:	e0 2d       	mov	r30, r0
    6274:	09 94       	ijmp

00006276 <__umulhisi3>:
    6276:	a2 9f       	mul	r26, r18
    6278:	b0 01       	movw	r22, r0
    627a:	b3 9f       	mul	r27, r19
    627c:	c0 01       	movw	r24, r0
    627e:	a3 9f       	mul	r26, r19
    6280:	70 0d       	add	r23, r0
    6282:	81 1d       	adc	r24, r1
    6284:	11 24       	eor	r1, r1
    6286:	91 1d       	adc	r25, r1
    6288:	b2 9f       	mul	r27, r18
    628a:	70 0d       	add	r23, r0
    628c:	81 1d       	adc	r24, r1
    628e:	11 24       	eor	r1, r1
    6290:	91 1d       	adc	r25, r1
    6292:	08 95       	ret

00006294 <__muluhisi3>:
    6294:	f0 df       	rcall	.-32     	; 0x6276 <__umulhisi3>
    6296:	a5 9f       	mul	r26, r21
    6298:	90 0d       	add	r25, r0
    629a:	b4 9f       	mul	r27, r20
    629c:	90 0d       	add	r25, r0
    629e:	a4 9f       	mul	r26, r20
    62a0:	80 0d       	add	r24, r0
    62a2:	91 1d       	adc	r25, r1
    62a4:	11 24       	eor	r1, r1
    62a6:	08 95       	ret

000062a8 <__udivmodhi4>:
    62a8:	aa 1b       	sub	r26, r26
    62aa:	bb 1b       	sub	r27, r27
    62ac:	51 e1       	ldi	r21, 0x11	; 17
    62ae:	07 c0       	rjmp	.+14     	; 0x62be <__udivmodhi4_ep>

000062b0 <__udivmodhi4_loop>:
    62b0:	aa 1f       	adc	r26, r26
    62b2:	bb 1f       	adc	r27, r27
    62b4:	a6 17       	cp	r26, r22
    62b6:	b7 07       	cpc	r27, r23
    62b8:	10 f0       	brcs	.+4      	; 0x62be <__udivmodhi4_ep>
    62ba:	a6 1b       	sub	r26, r22
    62bc:	b7 0b       	sbc	r27, r23

000062be <__udivmodhi4_ep>:
    62be:	88 1f       	adc	r24, r24
    62c0:	99 1f       	adc	r25, r25
    62c2:	5a 95       	dec	r21
    62c4:	a9 f7       	brne	.-22     	; 0x62b0 <__udivmodhi4_loop>
    62c6:	80 95       	com	r24
    62c8:	90 95       	com	r25
    62ca:	bc 01       	movw	r22, r24
    62cc:	cd 01       	movw	r24, r26
    62ce:	08 95       	ret

000062d0 <calloc>:
    62d0:	0f 93       	push	r16
    62d2:	1f 93       	push	r17
    62d4:	cf 93       	push	r28
    62d6:	df 93       	push	r29
    62d8:	86 9f       	mul	r24, r22
    62da:	80 01       	movw	r16, r0
    62dc:	87 9f       	mul	r24, r23
    62de:	10 0d       	add	r17, r0
    62e0:	96 9f       	mul	r25, r22
    62e2:	10 0d       	add	r17, r0
    62e4:	11 24       	eor	r1, r1
    62e6:	c8 01       	movw	r24, r16
    62e8:	0d d0       	rcall	.+26     	; 0x6304 <malloc>
    62ea:	ec 01       	movw	r28, r24
    62ec:	00 97       	sbiw	r24, 0x00	; 0
    62ee:	21 f0       	breq	.+8      	; 0x62f8 <calloc+0x28>
    62f0:	a8 01       	movw	r20, r16
    62f2:	60 e0       	ldi	r22, 0x00	; 0
    62f4:	70 e0       	ldi	r23, 0x00	; 0
    62f6:	2d d1       	rcall	.+602    	; 0x6552 <memset>
    62f8:	ce 01       	movw	r24, r28
    62fa:	df 91       	pop	r29
    62fc:	cf 91       	pop	r28
    62fe:	1f 91       	pop	r17
    6300:	0f 91       	pop	r16
    6302:	08 95       	ret

00006304 <malloc>:
    6304:	cf 93       	push	r28
    6306:	df 93       	push	r29
    6308:	82 30       	cpi	r24, 0x02	; 2
    630a:	91 05       	cpc	r25, r1
    630c:	10 f4       	brcc	.+4      	; 0x6312 <malloc+0xe>
    630e:	82 e0       	ldi	r24, 0x02	; 2
    6310:	90 e0       	ldi	r25, 0x00	; 0
    6312:	e0 91 5e 27 	lds	r30, 0x275E
    6316:	f0 91 5f 27 	lds	r31, 0x275F
    631a:	20 e0       	ldi	r18, 0x00	; 0
    631c:	30 e0       	ldi	r19, 0x00	; 0
    631e:	a0 e0       	ldi	r26, 0x00	; 0
    6320:	b0 e0       	ldi	r27, 0x00	; 0
    6322:	30 97       	sbiw	r30, 0x00	; 0
    6324:	39 f1       	breq	.+78     	; 0x6374 <malloc+0x70>
    6326:	40 81       	ld	r20, Z
    6328:	51 81       	ldd	r21, Z+1	; 0x01
    632a:	48 17       	cp	r20, r24
    632c:	59 07       	cpc	r21, r25
    632e:	b8 f0       	brcs	.+46     	; 0x635e <malloc+0x5a>
    6330:	48 17       	cp	r20, r24
    6332:	59 07       	cpc	r21, r25
    6334:	71 f4       	brne	.+28     	; 0x6352 <malloc+0x4e>
    6336:	82 81       	ldd	r24, Z+2	; 0x02
    6338:	93 81       	ldd	r25, Z+3	; 0x03
    633a:	10 97       	sbiw	r26, 0x00	; 0
    633c:	29 f0       	breq	.+10     	; 0x6348 <malloc+0x44>
    633e:	12 96       	adiw	r26, 0x02	; 2
    6340:	8d 93       	st	X+, r24
    6342:	9c 93       	st	X, r25
    6344:	13 97       	sbiw	r26, 0x03	; 3
    6346:	2c c0       	rjmp	.+88     	; 0x63a0 <malloc+0x9c>
    6348:	80 93 5e 27 	sts	0x275E, r24
    634c:	90 93 5f 27 	sts	0x275F, r25
    6350:	27 c0       	rjmp	.+78     	; 0x63a0 <malloc+0x9c>
    6352:	21 15       	cp	r18, r1
    6354:	31 05       	cpc	r19, r1
    6356:	31 f0       	breq	.+12     	; 0x6364 <malloc+0x60>
    6358:	42 17       	cp	r20, r18
    635a:	53 07       	cpc	r21, r19
    635c:	18 f0       	brcs	.+6      	; 0x6364 <malloc+0x60>
    635e:	a9 01       	movw	r20, r18
    6360:	db 01       	movw	r26, r22
    6362:	01 c0       	rjmp	.+2      	; 0x6366 <malloc+0x62>
    6364:	ef 01       	movw	r28, r30
    6366:	9a 01       	movw	r18, r20
    6368:	bd 01       	movw	r22, r26
    636a:	df 01       	movw	r26, r30
    636c:	02 80       	ldd	r0, Z+2	; 0x02
    636e:	f3 81       	ldd	r31, Z+3	; 0x03
    6370:	e0 2d       	mov	r30, r0
    6372:	d7 cf       	rjmp	.-82     	; 0x6322 <malloc+0x1e>
    6374:	21 15       	cp	r18, r1
    6376:	31 05       	cpc	r19, r1
    6378:	f9 f0       	breq	.+62     	; 0x63b8 <malloc+0xb4>
    637a:	28 1b       	sub	r18, r24
    637c:	39 0b       	sbc	r19, r25
    637e:	24 30       	cpi	r18, 0x04	; 4
    6380:	31 05       	cpc	r19, r1
    6382:	80 f4       	brcc	.+32     	; 0x63a4 <malloc+0xa0>
    6384:	8a 81       	ldd	r24, Y+2	; 0x02
    6386:	9b 81       	ldd	r25, Y+3	; 0x03
    6388:	61 15       	cp	r22, r1
    638a:	71 05       	cpc	r23, r1
    638c:	21 f0       	breq	.+8      	; 0x6396 <malloc+0x92>
    638e:	fb 01       	movw	r30, r22
    6390:	82 83       	std	Z+2, r24	; 0x02
    6392:	93 83       	std	Z+3, r25	; 0x03
    6394:	04 c0       	rjmp	.+8      	; 0x639e <malloc+0x9a>
    6396:	80 93 5e 27 	sts	0x275E, r24
    639a:	90 93 5f 27 	sts	0x275F, r25
    639e:	fe 01       	movw	r30, r28
    63a0:	32 96       	adiw	r30, 0x02	; 2
    63a2:	44 c0       	rjmp	.+136    	; 0x642c <malloc+0x128>
    63a4:	fe 01       	movw	r30, r28
    63a6:	e2 0f       	add	r30, r18
    63a8:	f3 1f       	adc	r31, r19
    63aa:	81 93       	st	Z+, r24
    63ac:	91 93       	st	Z+, r25
    63ae:	22 50       	subi	r18, 0x02	; 2
    63b0:	31 09       	sbc	r19, r1
    63b2:	28 83       	st	Y, r18
    63b4:	39 83       	std	Y+1, r19	; 0x01
    63b6:	3a c0       	rjmp	.+116    	; 0x642c <malloc+0x128>
    63b8:	20 91 5c 27 	lds	r18, 0x275C
    63bc:	30 91 5d 27 	lds	r19, 0x275D
    63c0:	23 2b       	or	r18, r19
    63c2:	41 f4       	brne	.+16     	; 0x63d4 <malloc+0xd0>
    63c4:	20 91 02 20 	lds	r18, 0x2002
    63c8:	30 91 03 20 	lds	r19, 0x2003
    63cc:	20 93 5c 27 	sts	0x275C, r18
    63d0:	30 93 5d 27 	sts	0x275D, r19
    63d4:	20 91 00 20 	lds	r18, 0x2000
    63d8:	30 91 01 20 	lds	r19, 0x2001
    63dc:	21 15       	cp	r18, r1
    63de:	31 05       	cpc	r19, r1
    63e0:	41 f4       	brne	.+16     	; 0x63f2 <malloc+0xee>
    63e2:	2d b7       	in	r18, 0x3d	; 61
    63e4:	3e b7       	in	r19, 0x3e	; 62
    63e6:	40 91 04 20 	lds	r20, 0x2004
    63ea:	50 91 05 20 	lds	r21, 0x2005
    63ee:	24 1b       	sub	r18, r20
    63f0:	35 0b       	sbc	r19, r21
    63f2:	e0 91 5c 27 	lds	r30, 0x275C
    63f6:	f0 91 5d 27 	lds	r31, 0x275D
    63fa:	e2 17       	cp	r30, r18
    63fc:	f3 07       	cpc	r31, r19
    63fe:	a0 f4       	brcc	.+40     	; 0x6428 <malloc+0x124>
    6400:	2e 1b       	sub	r18, r30
    6402:	3f 0b       	sbc	r19, r31
    6404:	28 17       	cp	r18, r24
    6406:	39 07       	cpc	r19, r25
    6408:	78 f0       	brcs	.+30     	; 0x6428 <malloc+0x124>
    640a:	ac 01       	movw	r20, r24
    640c:	4e 5f       	subi	r20, 0xFE	; 254
    640e:	5f 4f       	sbci	r21, 0xFF	; 255
    6410:	24 17       	cp	r18, r20
    6412:	35 07       	cpc	r19, r21
    6414:	48 f0       	brcs	.+18     	; 0x6428 <malloc+0x124>
    6416:	4e 0f       	add	r20, r30
    6418:	5f 1f       	adc	r21, r31
    641a:	40 93 5c 27 	sts	0x275C, r20
    641e:	50 93 5d 27 	sts	0x275D, r21
    6422:	81 93       	st	Z+, r24
    6424:	91 93       	st	Z+, r25
    6426:	02 c0       	rjmp	.+4      	; 0x642c <malloc+0x128>
    6428:	e0 e0       	ldi	r30, 0x00	; 0
    642a:	f0 e0       	ldi	r31, 0x00	; 0
    642c:	cf 01       	movw	r24, r30
    642e:	df 91       	pop	r29
    6430:	cf 91       	pop	r28
    6432:	08 95       	ret

00006434 <free>:
    6434:	cf 93       	push	r28
    6436:	df 93       	push	r29
    6438:	00 97       	sbiw	r24, 0x00	; 0
    643a:	09 f4       	brne	.+2      	; 0x643e <free+0xa>
    643c:	87 c0       	rjmp	.+270    	; 0x654c <free+0x118>
    643e:	fc 01       	movw	r30, r24
    6440:	32 97       	sbiw	r30, 0x02	; 2
    6442:	12 82       	std	Z+2, r1	; 0x02
    6444:	13 82       	std	Z+3, r1	; 0x03
    6446:	c0 91 5e 27 	lds	r28, 0x275E
    644a:	d0 91 5f 27 	lds	r29, 0x275F
    644e:	20 97       	sbiw	r28, 0x00	; 0
    6450:	81 f4       	brne	.+32     	; 0x6472 <free+0x3e>
    6452:	20 81       	ld	r18, Z
    6454:	31 81       	ldd	r19, Z+1	; 0x01
    6456:	28 0f       	add	r18, r24
    6458:	39 1f       	adc	r19, r25
    645a:	80 91 5c 27 	lds	r24, 0x275C
    645e:	90 91 5d 27 	lds	r25, 0x275D
    6462:	82 17       	cp	r24, r18
    6464:	93 07       	cpc	r25, r19
    6466:	79 f5       	brne	.+94     	; 0x64c6 <free+0x92>
    6468:	e0 93 5c 27 	sts	0x275C, r30
    646c:	f0 93 5d 27 	sts	0x275D, r31
    6470:	6d c0       	rjmp	.+218    	; 0x654c <free+0x118>
    6472:	de 01       	movw	r26, r28
    6474:	20 e0       	ldi	r18, 0x00	; 0
    6476:	30 e0       	ldi	r19, 0x00	; 0
    6478:	ae 17       	cp	r26, r30
    647a:	bf 07       	cpc	r27, r31
    647c:	50 f4       	brcc	.+20     	; 0x6492 <free+0x5e>
    647e:	12 96       	adiw	r26, 0x02	; 2
    6480:	4d 91       	ld	r20, X+
    6482:	5c 91       	ld	r21, X
    6484:	13 97       	sbiw	r26, 0x03	; 3
    6486:	9d 01       	movw	r18, r26
    6488:	41 15       	cp	r20, r1
    648a:	51 05       	cpc	r21, r1
    648c:	09 f1       	breq	.+66     	; 0x64d0 <free+0x9c>
    648e:	da 01       	movw	r26, r20
    6490:	f3 cf       	rjmp	.-26     	; 0x6478 <free+0x44>
    6492:	a2 83       	std	Z+2, r26	; 0x02
    6494:	b3 83       	std	Z+3, r27	; 0x03
    6496:	40 81       	ld	r20, Z
    6498:	51 81       	ldd	r21, Z+1	; 0x01
    649a:	84 0f       	add	r24, r20
    649c:	95 1f       	adc	r25, r21
    649e:	8a 17       	cp	r24, r26
    64a0:	9b 07       	cpc	r25, r27
    64a2:	71 f4       	brne	.+28     	; 0x64c0 <free+0x8c>
    64a4:	8d 91       	ld	r24, X+
    64a6:	9c 91       	ld	r25, X
    64a8:	11 97       	sbiw	r26, 0x01	; 1
    64aa:	84 0f       	add	r24, r20
    64ac:	95 1f       	adc	r25, r21
    64ae:	02 96       	adiw	r24, 0x02	; 2
    64b0:	80 83       	st	Z, r24
    64b2:	91 83       	std	Z+1, r25	; 0x01
    64b4:	12 96       	adiw	r26, 0x02	; 2
    64b6:	8d 91       	ld	r24, X+
    64b8:	9c 91       	ld	r25, X
    64ba:	13 97       	sbiw	r26, 0x03	; 3
    64bc:	82 83       	std	Z+2, r24	; 0x02
    64be:	93 83       	std	Z+3, r25	; 0x03
    64c0:	21 15       	cp	r18, r1
    64c2:	31 05       	cpc	r19, r1
    64c4:	29 f4       	brne	.+10     	; 0x64d0 <free+0x9c>
    64c6:	e0 93 5e 27 	sts	0x275E, r30
    64ca:	f0 93 5f 27 	sts	0x275F, r31
    64ce:	3e c0       	rjmp	.+124    	; 0x654c <free+0x118>
    64d0:	d9 01       	movw	r26, r18
    64d2:	12 96       	adiw	r26, 0x02	; 2
    64d4:	ed 93       	st	X+, r30
    64d6:	fc 93       	st	X, r31
    64d8:	13 97       	sbiw	r26, 0x03	; 3
    64da:	4d 91       	ld	r20, X+
    64dc:	5d 91       	ld	r21, X+
    64de:	a4 0f       	add	r26, r20
    64e0:	b5 1f       	adc	r27, r21
    64e2:	ea 17       	cp	r30, r26
    64e4:	fb 07       	cpc	r31, r27
    64e6:	79 f4       	brne	.+30     	; 0x6506 <free+0xd2>
    64e8:	80 81       	ld	r24, Z
    64ea:	91 81       	ldd	r25, Z+1	; 0x01
    64ec:	84 0f       	add	r24, r20
    64ee:	95 1f       	adc	r25, r21
    64f0:	02 96       	adiw	r24, 0x02	; 2
    64f2:	d9 01       	movw	r26, r18
    64f4:	8d 93       	st	X+, r24
    64f6:	9c 93       	st	X, r25
    64f8:	11 97       	sbiw	r26, 0x01	; 1
    64fa:	82 81       	ldd	r24, Z+2	; 0x02
    64fc:	93 81       	ldd	r25, Z+3	; 0x03
    64fe:	12 96       	adiw	r26, 0x02	; 2
    6500:	8d 93       	st	X+, r24
    6502:	9c 93       	st	X, r25
    6504:	13 97       	sbiw	r26, 0x03	; 3
    6506:	e0 e0       	ldi	r30, 0x00	; 0
    6508:	f0 e0       	ldi	r31, 0x00	; 0
    650a:	8a 81       	ldd	r24, Y+2	; 0x02
    650c:	9b 81       	ldd	r25, Y+3	; 0x03
    650e:	00 97       	sbiw	r24, 0x00	; 0
    6510:	19 f0       	breq	.+6      	; 0x6518 <free+0xe4>
    6512:	fe 01       	movw	r30, r28
    6514:	ec 01       	movw	r28, r24
    6516:	f9 cf       	rjmp	.-14     	; 0x650a <free+0xd6>
    6518:	ce 01       	movw	r24, r28
    651a:	02 96       	adiw	r24, 0x02	; 2
    651c:	28 81       	ld	r18, Y
    651e:	39 81       	ldd	r19, Y+1	; 0x01
    6520:	82 0f       	add	r24, r18
    6522:	93 1f       	adc	r25, r19
    6524:	20 91 5c 27 	lds	r18, 0x275C
    6528:	30 91 5d 27 	lds	r19, 0x275D
    652c:	28 17       	cp	r18, r24
    652e:	39 07       	cpc	r19, r25
    6530:	69 f4       	brne	.+26     	; 0x654c <free+0x118>
    6532:	30 97       	sbiw	r30, 0x00	; 0
    6534:	29 f4       	brne	.+10     	; 0x6540 <free+0x10c>
    6536:	10 92 5e 27 	sts	0x275E, r1
    653a:	10 92 5f 27 	sts	0x275F, r1
    653e:	02 c0       	rjmp	.+4      	; 0x6544 <free+0x110>
    6540:	12 82       	std	Z+2, r1	; 0x02
    6542:	13 82       	std	Z+3, r1	; 0x03
    6544:	c0 93 5c 27 	sts	0x275C, r28
    6548:	d0 93 5d 27 	sts	0x275D, r29
    654c:	df 91       	pop	r29
    654e:	cf 91       	pop	r28
    6550:	08 95       	ret

00006552 <memset>:
    6552:	dc 01       	movw	r26, r24
    6554:	01 c0       	rjmp	.+2      	; 0x6558 <memset+0x6>
    6556:	6d 93       	st	X+, r22
    6558:	41 50       	subi	r20, 0x01	; 1
    655a:	50 40       	sbci	r21, 0x00	; 0
    655c:	e0 f7       	brcc	.-8      	; 0x6556 <memset+0x4>
    655e:	08 95       	ret

00006560 <strcat>:
    6560:	fb 01       	movw	r30, r22
    6562:	dc 01       	movw	r26, r24
    6564:	0d 90       	ld	r0, X+
    6566:	00 20       	and	r0, r0
    6568:	e9 f7       	brne	.-6      	; 0x6564 <strcat+0x4>
    656a:	11 97       	sbiw	r26, 0x01	; 1
    656c:	01 90       	ld	r0, Z+
    656e:	0d 92       	st	X+, r0
    6570:	00 20       	and	r0, r0
    6572:	e1 f7       	brne	.-8      	; 0x656c <strcat+0xc>
    6574:	08 95       	ret

00006576 <strchr>:
    6576:	fc 01       	movw	r30, r24
    6578:	81 91       	ld	r24, Z+
    657a:	86 17       	cp	r24, r22
    657c:	21 f0       	breq	.+8      	; 0x6586 <strchr+0x10>
    657e:	88 23       	and	r24, r24
    6580:	d9 f7       	brne	.-10     	; 0x6578 <strchr+0x2>
    6582:	99 27       	eor	r25, r25
    6584:	08 95       	ret
    6586:	31 97       	sbiw	r30, 0x01	; 1
    6588:	cf 01       	movw	r24, r30
    658a:	08 95       	ret

0000658c <strncpy>:
    658c:	fb 01       	movw	r30, r22
    658e:	dc 01       	movw	r26, r24
    6590:	41 50       	subi	r20, 0x01	; 1
    6592:	50 40       	sbci	r21, 0x00	; 0
    6594:	48 f0       	brcs	.+18     	; 0x65a8 <strncpy+0x1c>
    6596:	01 90       	ld	r0, Z+
    6598:	0d 92       	st	X+, r0
    659a:	00 20       	and	r0, r0
    659c:	c9 f7       	brne	.-14     	; 0x6590 <strncpy+0x4>
    659e:	01 c0       	rjmp	.+2      	; 0x65a2 <strncpy+0x16>
    65a0:	1d 92       	st	X+, r1
    65a2:	41 50       	subi	r20, 0x01	; 1
    65a4:	50 40       	sbci	r21, 0x00	; 0
    65a6:	e0 f7       	brcc	.-8      	; 0x65a0 <strncpy+0x14>
    65a8:	08 95       	ret

000065aa <strstr>:
    65aa:	fb 01       	movw	r30, r22
    65ac:	51 91       	ld	r21, Z+
    65ae:	55 23       	and	r21, r21
    65b0:	a9 f0       	breq	.+42     	; 0x65dc <strstr+0x32>
    65b2:	bf 01       	movw	r22, r30
    65b4:	dc 01       	movw	r26, r24
    65b6:	4d 91       	ld	r20, X+
    65b8:	45 17       	cp	r20, r21
    65ba:	41 11       	cpse	r20, r1
    65bc:	e1 f7       	brne	.-8      	; 0x65b6 <strstr+0xc>
    65be:	59 f4       	brne	.+22     	; 0x65d6 <strstr+0x2c>
    65c0:	cd 01       	movw	r24, r26
    65c2:	01 90       	ld	r0, Z+
    65c4:	00 20       	and	r0, r0
    65c6:	49 f0       	breq	.+18     	; 0x65da <strstr+0x30>
    65c8:	4d 91       	ld	r20, X+
    65ca:	40 15       	cp	r20, r0
    65cc:	41 11       	cpse	r20, r1
    65ce:	c9 f3       	breq	.-14     	; 0x65c2 <strstr+0x18>
    65d0:	fb 01       	movw	r30, r22
    65d2:	41 11       	cpse	r20, r1
    65d4:	ef cf       	rjmp	.-34     	; 0x65b4 <strstr+0xa>
    65d6:	81 e0       	ldi	r24, 0x01	; 1
    65d8:	90 e0       	ldi	r25, 0x00	; 0
    65da:	01 97       	sbiw	r24, 0x01	; 1
    65dc:	08 95       	ret

000065de <printf>:
    65de:	cf 93       	push	r28
    65e0:	df 93       	push	r29
    65e2:	cd b7       	in	r28, 0x3d	; 61
    65e4:	de b7       	in	r29, 0x3e	; 62
    65e6:	fe 01       	movw	r30, r28
    65e8:	35 96       	adiw	r30, 0x05	; 5
    65ea:	61 91       	ld	r22, Z+
    65ec:	71 91       	ld	r23, Z+
    65ee:	af 01       	movw	r20, r30
    65f0:	80 91 62 27 	lds	r24, 0x2762
    65f4:	90 91 63 27 	lds	r25, 0x2763
    65f8:	30 d0       	rcall	.+96     	; 0x665a <vfprintf>
    65fa:	df 91       	pop	r29
    65fc:	cf 91       	pop	r28
    65fe:	08 95       	ret

00006600 <puts>:
    6600:	0f 93       	push	r16
    6602:	1f 93       	push	r17
    6604:	cf 93       	push	r28
    6606:	df 93       	push	r29
    6608:	e0 91 62 27 	lds	r30, 0x2762
    660c:	f0 91 63 27 	lds	r31, 0x2763
    6610:	23 81       	ldd	r18, Z+3	; 0x03
    6612:	21 ff       	sbrs	r18, 1
    6614:	1b c0       	rjmp	.+54     	; 0x664c <puts+0x4c>
    6616:	ec 01       	movw	r28, r24
    6618:	00 e0       	ldi	r16, 0x00	; 0
    661a:	10 e0       	ldi	r17, 0x00	; 0
    661c:	89 91       	ld	r24, Y+
    661e:	60 91 62 27 	lds	r22, 0x2762
    6622:	70 91 63 27 	lds	r23, 0x2763
    6626:	db 01       	movw	r26, r22
    6628:	18 96       	adiw	r26, 0x08	; 8
    662a:	ed 91       	ld	r30, X+
    662c:	fc 91       	ld	r31, X
    662e:	19 97       	sbiw	r26, 0x09	; 9
    6630:	88 23       	and	r24, r24
    6632:	31 f0       	breq	.+12     	; 0x6640 <puts+0x40>
    6634:	09 95       	icall
    6636:	89 2b       	or	r24, r25
    6638:	89 f3       	breq	.-30     	; 0x661c <puts+0x1c>
    663a:	0f ef       	ldi	r16, 0xFF	; 255
    663c:	1f ef       	ldi	r17, 0xFF	; 255
    663e:	ee cf       	rjmp	.-36     	; 0x661c <puts+0x1c>
    6640:	8a e0       	ldi	r24, 0x0A	; 10
    6642:	09 95       	icall
    6644:	89 2b       	or	r24, r25
    6646:	11 f4       	brne	.+4      	; 0x664c <puts+0x4c>
    6648:	c8 01       	movw	r24, r16
    664a:	02 c0       	rjmp	.+4      	; 0x6650 <puts+0x50>
    664c:	8f ef       	ldi	r24, 0xFF	; 255
    664e:	9f ef       	ldi	r25, 0xFF	; 255
    6650:	df 91       	pop	r29
    6652:	cf 91       	pop	r28
    6654:	1f 91       	pop	r17
    6656:	0f 91       	pop	r16
    6658:	08 95       	ret

0000665a <vfprintf>:
    665a:	2f 92       	push	r2
    665c:	3f 92       	push	r3
    665e:	4f 92       	push	r4
    6660:	5f 92       	push	r5
    6662:	6f 92       	push	r6
    6664:	7f 92       	push	r7
    6666:	8f 92       	push	r8
    6668:	9f 92       	push	r9
    666a:	af 92       	push	r10
    666c:	bf 92       	push	r11
    666e:	cf 92       	push	r12
    6670:	df 92       	push	r13
    6672:	ef 92       	push	r14
    6674:	ff 92       	push	r15
    6676:	0f 93       	push	r16
    6678:	1f 93       	push	r17
    667a:	cf 93       	push	r28
    667c:	df 93       	push	r29
    667e:	cd b7       	in	r28, 0x3d	; 61
    6680:	de b7       	in	r29, 0x3e	; 62
    6682:	2c 97       	sbiw	r28, 0x0c	; 12
    6684:	cd bf       	out	0x3d, r28	; 61
    6686:	de bf       	out	0x3e, r29	; 62
    6688:	7c 01       	movw	r14, r24
    668a:	6b 01       	movw	r12, r22
    668c:	8a 01       	movw	r16, r20
    668e:	fc 01       	movw	r30, r24
    6690:	16 82       	std	Z+6, r1	; 0x06
    6692:	17 82       	std	Z+7, r1	; 0x07
    6694:	83 81       	ldd	r24, Z+3	; 0x03
    6696:	81 ff       	sbrs	r24, 1
    6698:	b0 c1       	rjmp	.+864    	; 0x69fa <vfprintf+0x3a0>
    669a:	ce 01       	movw	r24, r28
    669c:	01 96       	adiw	r24, 0x01	; 1
    669e:	4c 01       	movw	r8, r24
    66a0:	f7 01       	movw	r30, r14
    66a2:	93 81       	ldd	r25, Z+3	; 0x03
    66a4:	f6 01       	movw	r30, r12
    66a6:	93 fd       	sbrc	r25, 3
    66a8:	85 91       	lpm	r24, Z+
    66aa:	93 ff       	sbrs	r25, 3
    66ac:	81 91       	ld	r24, Z+
    66ae:	6f 01       	movw	r12, r30
    66b0:	88 23       	and	r24, r24
    66b2:	09 f4       	brne	.+2      	; 0x66b6 <vfprintf+0x5c>
    66b4:	9e c1       	rjmp	.+828    	; 0x69f2 <vfprintf+0x398>
    66b6:	85 32       	cpi	r24, 0x25	; 37
    66b8:	39 f4       	brne	.+14     	; 0x66c8 <vfprintf+0x6e>
    66ba:	93 fd       	sbrc	r25, 3
    66bc:	85 91       	lpm	r24, Z+
    66be:	93 ff       	sbrs	r25, 3
    66c0:	81 91       	ld	r24, Z+
    66c2:	6f 01       	movw	r12, r30
    66c4:	85 32       	cpi	r24, 0x25	; 37
    66c6:	21 f4       	brne	.+8      	; 0x66d0 <vfprintf+0x76>
    66c8:	b7 01       	movw	r22, r14
    66ca:	90 e0       	ldi	r25, 0x00	; 0
    66cc:	c4 d1       	rcall	.+904    	; 0x6a56 <fputc>
    66ce:	e8 cf       	rjmp	.-48     	; 0x66a0 <vfprintf+0x46>
    66d0:	51 2c       	mov	r5, r1
    66d2:	31 2c       	mov	r3, r1
    66d4:	20 e0       	ldi	r18, 0x00	; 0
    66d6:	20 32       	cpi	r18, 0x20	; 32
    66d8:	a0 f4       	brcc	.+40     	; 0x6702 <vfprintf+0xa8>
    66da:	8b 32       	cpi	r24, 0x2B	; 43
    66dc:	69 f0       	breq	.+26     	; 0x66f8 <vfprintf+0x9e>
    66de:	30 f4       	brcc	.+12     	; 0x66ec <vfprintf+0x92>
    66e0:	80 32       	cpi	r24, 0x20	; 32
    66e2:	59 f0       	breq	.+22     	; 0x66fa <vfprintf+0xa0>
    66e4:	83 32       	cpi	r24, 0x23	; 35
    66e6:	69 f4       	brne	.+26     	; 0x6702 <vfprintf+0xa8>
    66e8:	20 61       	ori	r18, 0x10	; 16
    66ea:	2c c0       	rjmp	.+88     	; 0x6744 <vfprintf+0xea>
    66ec:	8d 32       	cpi	r24, 0x2D	; 45
    66ee:	39 f0       	breq	.+14     	; 0x66fe <vfprintf+0xa4>
    66f0:	80 33       	cpi	r24, 0x30	; 48
    66f2:	39 f4       	brne	.+14     	; 0x6702 <vfprintf+0xa8>
    66f4:	21 60       	ori	r18, 0x01	; 1
    66f6:	26 c0       	rjmp	.+76     	; 0x6744 <vfprintf+0xea>
    66f8:	22 60       	ori	r18, 0x02	; 2
    66fa:	24 60       	ori	r18, 0x04	; 4
    66fc:	23 c0       	rjmp	.+70     	; 0x6744 <vfprintf+0xea>
    66fe:	28 60       	ori	r18, 0x08	; 8
    6700:	21 c0       	rjmp	.+66     	; 0x6744 <vfprintf+0xea>
    6702:	27 fd       	sbrc	r18, 7
    6704:	27 c0       	rjmp	.+78     	; 0x6754 <vfprintf+0xfa>
    6706:	30 ed       	ldi	r19, 0xD0	; 208
    6708:	38 0f       	add	r19, r24
    670a:	3a 30       	cpi	r19, 0x0A	; 10
    670c:	78 f4       	brcc	.+30     	; 0x672c <vfprintf+0xd2>
    670e:	26 ff       	sbrs	r18, 6
    6710:	06 c0       	rjmp	.+12     	; 0x671e <vfprintf+0xc4>
    6712:	fa e0       	ldi	r31, 0x0A	; 10
    6714:	5f 9e       	mul	r5, r31
    6716:	30 0d       	add	r19, r0
    6718:	11 24       	eor	r1, r1
    671a:	53 2e       	mov	r5, r19
    671c:	13 c0       	rjmp	.+38     	; 0x6744 <vfprintf+0xea>
    671e:	8a e0       	ldi	r24, 0x0A	; 10
    6720:	38 9e       	mul	r3, r24
    6722:	30 0d       	add	r19, r0
    6724:	11 24       	eor	r1, r1
    6726:	33 2e       	mov	r3, r19
    6728:	20 62       	ori	r18, 0x20	; 32
    672a:	0c c0       	rjmp	.+24     	; 0x6744 <vfprintf+0xea>
    672c:	8e 32       	cpi	r24, 0x2E	; 46
    672e:	21 f4       	brne	.+8      	; 0x6738 <vfprintf+0xde>
    6730:	26 fd       	sbrc	r18, 6
    6732:	5f c1       	rjmp	.+702    	; 0x69f2 <vfprintf+0x398>
    6734:	20 64       	ori	r18, 0x40	; 64
    6736:	06 c0       	rjmp	.+12     	; 0x6744 <vfprintf+0xea>
    6738:	8c 36       	cpi	r24, 0x6C	; 108
    673a:	11 f4       	brne	.+4      	; 0x6740 <vfprintf+0xe6>
    673c:	20 68       	ori	r18, 0x80	; 128
    673e:	02 c0       	rjmp	.+4      	; 0x6744 <vfprintf+0xea>
    6740:	88 36       	cpi	r24, 0x68	; 104
    6742:	41 f4       	brne	.+16     	; 0x6754 <vfprintf+0xfa>
    6744:	f6 01       	movw	r30, r12
    6746:	93 fd       	sbrc	r25, 3
    6748:	85 91       	lpm	r24, Z+
    674a:	93 ff       	sbrs	r25, 3
    674c:	81 91       	ld	r24, Z+
    674e:	6f 01       	movw	r12, r30
    6750:	81 11       	cpse	r24, r1
    6752:	c1 cf       	rjmp	.-126    	; 0x66d6 <vfprintf+0x7c>
    6754:	98 2f       	mov	r25, r24
    6756:	9f 7d       	andi	r25, 0xDF	; 223
    6758:	95 54       	subi	r25, 0x45	; 69
    675a:	93 30       	cpi	r25, 0x03	; 3
    675c:	28 f4       	brcc	.+10     	; 0x6768 <vfprintf+0x10e>
    675e:	0c 5f       	subi	r16, 0xFC	; 252
    6760:	1f 4f       	sbci	r17, 0xFF	; 255
    6762:	ff e3       	ldi	r31, 0x3F	; 63
    6764:	f9 83       	std	Y+1, r31	; 0x01
    6766:	0d c0       	rjmp	.+26     	; 0x6782 <vfprintf+0x128>
    6768:	83 36       	cpi	r24, 0x63	; 99
    676a:	31 f0       	breq	.+12     	; 0x6778 <vfprintf+0x11e>
    676c:	83 37       	cpi	r24, 0x73	; 115
    676e:	71 f0       	breq	.+28     	; 0x678c <vfprintf+0x132>
    6770:	83 35       	cpi	r24, 0x53	; 83
    6772:	09 f0       	breq	.+2      	; 0x6776 <vfprintf+0x11c>
    6774:	57 c0       	rjmp	.+174    	; 0x6824 <vfprintf+0x1ca>
    6776:	21 c0       	rjmp	.+66     	; 0x67ba <vfprintf+0x160>
    6778:	f8 01       	movw	r30, r16
    677a:	80 81       	ld	r24, Z
    677c:	89 83       	std	Y+1, r24	; 0x01
    677e:	0e 5f       	subi	r16, 0xFE	; 254
    6780:	1f 4f       	sbci	r17, 0xFF	; 255
    6782:	44 24       	eor	r4, r4
    6784:	43 94       	inc	r4
    6786:	51 2c       	mov	r5, r1
    6788:	54 01       	movw	r10, r8
    678a:	14 c0       	rjmp	.+40     	; 0x67b4 <vfprintf+0x15a>
    678c:	38 01       	movw	r6, r16
    678e:	f2 e0       	ldi	r31, 0x02	; 2
    6790:	6f 0e       	add	r6, r31
    6792:	71 1c       	adc	r7, r1
    6794:	f8 01       	movw	r30, r16
    6796:	a0 80       	ld	r10, Z
    6798:	b1 80       	ldd	r11, Z+1	; 0x01
    679a:	26 ff       	sbrs	r18, 6
    679c:	03 c0       	rjmp	.+6      	; 0x67a4 <vfprintf+0x14a>
    679e:	65 2d       	mov	r22, r5
    67a0:	70 e0       	ldi	r23, 0x00	; 0
    67a2:	02 c0       	rjmp	.+4      	; 0x67a8 <vfprintf+0x14e>
    67a4:	6f ef       	ldi	r22, 0xFF	; 255
    67a6:	7f ef       	ldi	r23, 0xFF	; 255
    67a8:	c5 01       	movw	r24, r10
    67aa:	2c 87       	std	Y+12, r18	; 0x0c
    67ac:	49 d1       	rcall	.+658    	; 0x6a40 <strnlen>
    67ae:	2c 01       	movw	r4, r24
    67b0:	83 01       	movw	r16, r6
    67b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    67b4:	2f 77       	andi	r18, 0x7F	; 127
    67b6:	22 2e       	mov	r2, r18
    67b8:	16 c0       	rjmp	.+44     	; 0x67e6 <vfprintf+0x18c>
    67ba:	38 01       	movw	r6, r16
    67bc:	f2 e0       	ldi	r31, 0x02	; 2
    67be:	6f 0e       	add	r6, r31
    67c0:	71 1c       	adc	r7, r1
    67c2:	f8 01       	movw	r30, r16
    67c4:	a0 80       	ld	r10, Z
    67c6:	b1 80       	ldd	r11, Z+1	; 0x01
    67c8:	26 ff       	sbrs	r18, 6
    67ca:	03 c0       	rjmp	.+6      	; 0x67d2 <vfprintf+0x178>
    67cc:	65 2d       	mov	r22, r5
    67ce:	70 e0       	ldi	r23, 0x00	; 0
    67d0:	02 c0       	rjmp	.+4      	; 0x67d6 <vfprintf+0x17c>
    67d2:	6f ef       	ldi	r22, 0xFF	; 255
    67d4:	7f ef       	ldi	r23, 0xFF	; 255
    67d6:	c5 01       	movw	r24, r10
    67d8:	2c 87       	std	Y+12, r18	; 0x0c
    67da:	27 d1       	rcall	.+590    	; 0x6a2a <strnlen_P>
    67dc:	2c 01       	movw	r4, r24
    67de:	2c 85       	ldd	r18, Y+12	; 0x0c
    67e0:	20 68       	ori	r18, 0x80	; 128
    67e2:	22 2e       	mov	r2, r18
    67e4:	83 01       	movw	r16, r6
    67e6:	23 fc       	sbrc	r2, 3
    67e8:	19 c0       	rjmp	.+50     	; 0x681c <vfprintf+0x1c2>
    67ea:	83 2d       	mov	r24, r3
    67ec:	90 e0       	ldi	r25, 0x00	; 0
    67ee:	48 16       	cp	r4, r24
    67f0:	59 06       	cpc	r5, r25
    67f2:	a0 f4       	brcc	.+40     	; 0x681c <vfprintf+0x1c2>
    67f4:	b7 01       	movw	r22, r14
    67f6:	80 e2       	ldi	r24, 0x20	; 32
    67f8:	90 e0       	ldi	r25, 0x00	; 0
    67fa:	2d d1       	rcall	.+602    	; 0x6a56 <fputc>
    67fc:	3a 94       	dec	r3
    67fe:	f5 cf       	rjmp	.-22     	; 0x67ea <vfprintf+0x190>
    6800:	f5 01       	movw	r30, r10
    6802:	27 fc       	sbrc	r2, 7
    6804:	85 91       	lpm	r24, Z+
    6806:	27 fe       	sbrs	r2, 7
    6808:	81 91       	ld	r24, Z+
    680a:	5f 01       	movw	r10, r30
    680c:	b7 01       	movw	r22, r14
    680e:	90 e0       	ldi	r25, 0x00	; 0
    6810:	22 d1       	rcall	.+580    	; 0x6a56 <fputc>
    6812:	31 10       	cpse	r3, r1
    6814:	3a 94       	dec	r3
    6816:	f1 e0       	ldi	r31, 0x01	; 1
    6818:	4f 1a       	sub	r4, r31
    681a:	51 08       	sbc	r5, r1
    681c:	41 14       	cp	r4, r1
    681e:	51 04       	cpc	r5, r1
    6820:	79 f7       	brne	.-34     	; 0x6800 <vfprintf+0x1a6>
    6822:	de c0       	rjmp	.+444    	; 0x69e0 <vfprintf+0x386>
    6824:	84 36       	cpi	r24, 0x64	; 100
    6826:	11 f0       	breq	.+4      	; 0x682c <vfprintf+0x1d2>
    6828:	89 36       	cpi	r24, 0x69	; 105
    682a:	31 f5       	brne	.+76     	; 0x6878 <vfprintf+0x21e>
    682c:	f8 01       	movw	r30, r16
    682e:	27 ff       	sbrs	r18, 7
    6830:	07 c0       	rjmp	.+14     	; 0x6840 <vfprintf+0x1e6>
    6832:	60 81       	ld	r22, Z
    6834:	71 81       	ldd	r23, Z+1	; 0x01
    6836:	82 81       	ldd	r24, Z+2	; 0x02
    6838:	93 81       	ldd	r25, Z+3	; 0x03
    683a:	0c 5f       	subi	r16, 0xFC	; 252
    683c:	1f 4f       	sbci	r17, 0xFF	; 255
    683e:	08 c0       	rjmp	.+16     	; 0x6850 <vfprintf+0x1f6>
    6840:	60 81       	ld	r22, Z
    6842:	71 81       	ldd	r23, Z+1	; 0x01
    6844:	88 27       	eor	r24, r24
    6846:	77 fd       	sbrc	r23, 7
    6848:	80 95       	com	r24
    684a:	98 2f       	mov	r25, r24
    684c:	0e 5f       	subi	r16, 0xFE	; 254
    684e:	1f 4f       	sbci	r17, 0xFF	; 255
    6850:	2f 76       	andi	r18, 0x6F	; 111
    6852:	b2 2e       	mov	r11, r18
    6854:	97 ff       	sbrs	r25, 7
    6856:	09 c0       	rjmp	.+18     	; 0x686a <vfprintf+0x210>
    6858:	90 95       	com	r25
    685a:	80 95       	com	r24
    685c:	70 95       	com	r23
    685e:	61 95       	neg	r22
    6860:	7f 4f       	sbci	r23, 0xFF	; 255
    6862:	8f 4f       	sbci	r24, 0xFF	; 255
    6864:	9f 4f       	sbci	r25, 0xFF	; 255
    6866:	20 68       	ori	r18, 0x80	; 128
    6868:	b2 2e       	mov	r11, r18
    686a:	2a e0       	ldi	r18, 0x0A	; 10
    686c:	30 e0       	ldi	r19, 0x00	; 0
    686e:	a4 01       	movw	r20, r8
    6870:	24 d1       	rcall	.+584    	; 0x6aba <__ultoa_invert>
    6872:	a8 2e       	mov	r10, r24
    6874:	a8 18       	sub	r10, r8
    6876:	43 c0       	rjmp	.+134    	; 0x68fe <vfprintf+0x2a4>
    6878:	85 37       	cpi	r24, 0x75	; 117
    687a:	29 f4       	brne	.+10     	; 0x6886 <vfprintf+0x22c>
    687c:	2f 7e       	andi	r18, 0xEF	; 239
    687e:	b2 2e       	mov	r11, r18
    6880:	2a e0       	ldi	r18, 0x0A	; 10
    6882:	30 e0       	ldi	r19, 0x00	; 0
    6884:	25 c0       	rjmp	.+74     	; 0x68d0 <vfprintf+0x276>
    6886:	f2 2f       	mov	r31, r18
    6888:	f9 7f       	andi	r31, 0xF9	; 249
    688a:	bf 2e       	mov	r11, r31
    688c:	8f 36       	cpi	r24, 0x6F	; 111
    688e:	c1 f0       	breq	.+48     	; 0x68c0 <vfprintf+0x266>
    6890:	18 f4       	brcc	.+6      	; 0x6898 <vfprintf+0x23e>
    6892:	88 35       	cpi	r24, 0x58	; 88
    6894:	79 f0       	breq	.+30     	; 0x68b4 <vfprintf+0x25a>
    6896:	ad c0       	rjmp	.+346    	; 0x69f2 <vfprintf+0x398>
    6898:	80 37       	cpi	r24, 0x70	; 112
    689a:	19 f0       	breq	.+6      	; 0x68a2 <vfprintf+0x248>
    689c:	88 37       	cpi	r24, 0x78	; 120
    689e:	21 f0       	breq	.+8      	; 0x68a8 <vfprintf+0x24e>
    68a0:	a8 c0       	rjmp	.+336    	; 0x69f2 <vfprintf+0x398>
    68a2:	2f 2f       	mov	r18, r31
    68a4:	20 61       	ori	r18, 0x10	; 16
    68a6:	b2 2e       	mov	r11, r18
    68a8:	b4 fe       	sbrs	r11, 4
    68aa:	0d c0       	rjmp	.+26     	; 0x68c6 <vfprintf+0x26c>
    68ac:	8b 2d       	mov	r24, r11
    68ae:	84 60       	ori	r24, 0x04	; 4
    68b0:	b8 2e       	mov	r11, r24
    68b2:	09 c0       	rjmp	.+18     	; 0x68c6 <vfprintf+0x26c>
    68b4:	24 ff       	sbrs	r18, 4
    68b6:	0a c0       	rjmp	.+20     	; 0x68cc <vfprintf+0x272>
    68b8:	9f 2f       	mov	r25, r31
    68ba:	96 60       	ori	r25, 0x06	; 6
    68bc:	b9 2e       	mov	r11, r25
    68be:	06 c0       	rjmp	.+12     	; 0x68cc <vfprintf+0x272>
    68c0:	28 e0       	ldi	r18, 0x08	; 8
    68c2:	30 e0       	ldi	r19, 0x00	; 0
    68c4:	05 c0       	rjmp	.+10     	; 0x68d0 <vfprintf+0x276>
    68c6:	20 e1       	ldi	r18, 0x10	; 16
    68c8:	30 e0       	ldi	r19, 0x00	; 0
    68ca:	02 c0       	rjmp	.+4      	; 0x68d0 <vfprintf+0x276>
    68cc:	20 e1       	ldi	r18, 0x10	; 16
    68ce:	32 e0       	ldi	r19, 0x02	; 2
    68d0:	f8 01       	movw	r30, r16
    68d2:	b7 fe       	sbrs	r11, 7
    68d4:	07 c0       	rjmp	.+14     	; 0x68e4 <vfprintf+0x28a>
    68d6:	60 81       	ld	r22, Z
    68d8:	71 81       	ldd	r23, Z+1	; 0x01
    68da:	82 81       	ldd	r24, Z+2	; 0x02
    68dc:	93 81       	ldd	r25, Z+3	; 0x03
    68de:	0c 5f       	subi	r16, 0xFC	; 252
    68e0:	1f 4f       	sbci	r17, 0xFF	; 255
    68e2:	06 c0       	rjmp	.+12     	; 0x68f0 <vfprintf+0x296>
    68e4:	60 81       	ld	r22, Z
    68e6:	71 81       	ldd	r23, Z+1	; 0x01
    68e8:	80 e0       	ldi	r24, 0x00	; 0
    68ea:	90 e0       	ldi	r25, 0x00	; 0
    68ec:	0e 5f       	subi	r16, 0xFE	; 254
    68ee:	1f 4f       	sbci	r17, 0xFF	; 255
    68f0:	a4 01       	movw	r20, r8
    68f2:	e3 d0       	rcall	.+454    	; 0x6aba <__ultoa_invert>
    68f4:	a8 2e       	mov	r10, r24
    68f6:	a8 18       	sub	r10, r8
    68f8:	fb 2d       	mov	r31, r11
    68fa:	ff 77       	andi	r31, 0x7F	; 127
    68fc:	bf 2e       	mov	r11, r31
    68fe:	b6 fe       	sbrs	r11, 6
    6900:	0b c0       	rjmp	.+22     	; 0x6918 <vfprintf+0x2be>
    6902:	2b 2d       	mov	r18, r11
    6904:	2e 7f       	andi	r18, 0xFE	; 254
    6906:	a5 14       	cp	r10, r5
    6908:	50 f4       	brcc	.+20     	; 0x691e <vfprintf+0x2c4>
    690a:	b4 fe       	sbrs	r11, 4
    690c:	0a c0       	rjmp	.+20     	; 0x6922 <vfprintf+0x2c8>
    690e:	b2 fc       	sbrc	r11, 2
    6910:	08 c0       	rjmp	.+16     	; 0x6922 <vfprintf+0x2c8>
    6912:	2b 2d       	mov	r18, r11
    6914:	2e 7e       	andi	r18, 0xEE	; 238
    6916:	05 c0       	rjmp	.+10     	; 0x6922 <vfprintf+0x2c8>
    6918:	7a 2c       	mov	r7, r10
    691a:	2b 2d       	mov	r18, r11
    691c:	03 c0       	rjmp	.+6      	; 0x6924 <vfprintf+0x2ca>
    691e:	7a 2c       	mov	r7, r10
    6920:	01 c0       	rjmp	.+2      	; 0x6924 <vfprintf+0x2ca>
    6922:	75 2c       	mov	r7, r5
    6924:	24 ff       	sbrs	r18, 4
    6926:	0d c0       	rjmp	.+26     	; 0x6942 <vfprintf+0x2e8>
    6928:	fe 01       	movw	r30, r28
    692a:	ea 0d       	add	r30, r10
    692c:	f1 1d       	adc	r31, r1
    692e:	80 81       	ld	r24, Z
    6930:	80 33       	cpi	r24, 0x30	; 48
    6932:	11 f4       	brne	.+4      	; 0x6938 <vfprintf+0x2de>
    6934:	29 7e       	andi	r18, 0xE9	; 233
    6936:	09 c0       	rjmp	.+18     	; 0x694a <vfprintf+0x2f0>
    6938:	22 ff       	sbrs	r18, 2
    693a:	06 c0       	rjmp	.+12     	; 0x6948 <vfprintf+0x2ee>
    693c:	73 94       	inc	r7
    693e:	73 94       	inc	r7
    6940:	04 c0       	rjmp	.+8      	; 0x694a <vfprintf+0x2f0>
    6942:	82 2f       	mov	r24, r18
    6944:	86 78       	andi	r24, 0x86	; 134
    6946:	09 f0       	breq	.+2      	; 0x694a <vfprintf+0x2f0>
    6948:	73 94       	inc	r7
    694a:	23 fd       	sbrc	r18, 3
    694c:	12 c0       	rjmp	.+36     	; 0x6972 <vfprintf+0x318>
    694e:	20 ff       	sbrs	r18, 0
    6950:	06 c0       	rjmp	.+12     	; 0x695e <vfprintf+0x304>
    6952:	5a 2c       	mov	r5, r10
    6954:	73 14       	cp	r7, r3
    6956:	18 f4       	brcc	.+6      	; 0x695e <vfprintf+0x304>
    6958:	53 0c       	add	r5, r3
    695a:	57 18       	sub	r5, r7
    695c:	73 2c       	mov	r7, r3
    695e:	73 14       	cp	r7, r3
    6960:	60 f4       	brcc	.+24     	; 0x697a <vfprintf+0x320>
    6962:	b7 01       	movw	r22, r14
    6964:	80 e2       	ldi	r24, 0x20	; 32
    6966:	90 e0       	ldi	r25, 0x00	; 0
    6968:	2c 87       	std	Y+12, r18	; 0x0c
    696a:	75 d0       	rcall	.+234    	; 0x6a56 <fputc>
    696c:	73 94       	inc	r7
    696e:	2c 85       	ldd	r18, Y+12	; 0x0c
    6970:	f6 cf       	rjmp	.-20     	; 0x695e <vfprintf+0x304>
    6972:	73 14       	cp	r7, r3
    6974:	10 f4       	brcc	.+4      	; 0x697a <vfprintf+0x320>
    6976:	37 18       	sub	r3, r7
    6978:	01 c0       	rjmp	.+2      	; 0x697c <vfprintf+0x322>
    697a:	31 2c       	mov	r3, r1
    697c:	24 ff       	sbrs	r18, 4
    697e:	11 c0       	rjmp	.+34     	; 0x69a2 <vfprintf+0x348>
    6980:	b7 01       	movw	r22, r14
    6982:	80 e3       	ldi	r24, 0x30	; 48
    6984:	90 e0       	ldi	r25, 0x00	; 0
    6986:	2c 87       	std	Y+12, r18	; 0x0c
    6988:	66 d0       	rcall	.+204    	; 0x6a56 <fputc>
    698a:	2c 85       	ldd	r18, Y+12	; 0x0c
    698c:	22 ff       	sbrs	r18, 2
    698e:	16 c0       	rjmp	.+44     	; 0x69bc <vfprintf+0x362>
    6990:	21 ff       	sbrs	r18, 1
    6992:	03 c0       	rjmp	.+6      	; 0x699a <vfprintf+0x340>
    6994:	88 e5       	ldi	r24, 0x58	; 88
    6996:	90 e0       	ldi	r25, 0x00	; 0
    6998:	02 c0       	rjmp	.+4      	; 0x699e <vfprintf+0x344>
    699a:	88 e7       	ldi	r24, 0x78	; 120
    699c:	90 e0       	ldi	r25, 0x00	; 0
    699e:	b7 01       	movw	r22, r14
    69a0:	0c c0       	rjmp	.+24     	; 0x69ba <vfprintf+0x360>
    69a2:	82 2f       	mov	r24, r18
    69a4:	86 78       	andi	r24, 0x86	; 134
    69a6:	51 f0       	breq	.+20     	; 0x69bc <vfprintf+0x362>
    69a8:	21 fd       	sbrc	r18, 1
    69aa:	02 c0       	rjmp	.+4      	; 0x69b0 <vfprintf+0x356>
    69ac:	80 e2       	ldi	r24, 0x20	; 32
    69ae:	01 c0       	rjmp	.+2      	; 0x69b2 <vfprintf+0x358>
    69b0:	8b e2       	ldi	r24, 0x2B	; 43
    69b2:	27 fd       	sbrc	r18, 7
    69b4:	8d e2       	ldi	r24, 0x2D	; 45
    69b6:	b7 01       	movw	r22, r14
    69b8:	90 e0       	ldi	r25, 0x00	; 0
    69ba:	4d d0       	rcall	.+154    	; 0x6a56 <fputc>
    69bc:	a5 14       	cp	r10, r5
    69be:	30 f4       	brcc	.+12     	; 0x69cc <vfprintf+0x372>
    69c0:	b7 01       	movw	r22, r14
    69c2:	80 e3       	ldi	r24, 0x30	; 48
    69c4:	90 e0       	ldi	r25, 0x00	; 0
    69c6:	47 d0       	rcall	.+142    	; 0x6a56 <fputc>
    69c8:	5a 94       	dec	r5
    69ca:	f8 cf       	rjmp	.-16     	; 0x69bc <vfprintf+0x362>
    69cc:	aa 94       	dec	r10
    69ce:	f4 01       	movw	r30, r8
    69d0:	ea 0d       	add	r30, r10
    69d2:	f1 1d       	adc	r31, r1
    69d4:	80 81       	ld	r24, Z
    69d6:	b7 01       	movw	r22, r14
    69d8:	90 e0       	ldi	r25, 0x00	; 0
    69da:	3d d0       	rcall	.+122    	; 0x6a56 <fputc>
    69dc:	a1 10       	cpse	r10, r1
    69de:	f6 cf       	rjmp	.-20     	; 0x69cc <vfprintf+0x372>
    69e0:	33 20       	and	r3, r3
    69e2:	09 f4       	brne	.+2      	; 0x69e6 <vfprintf+0x38c>
    69e4:	5d ce       	rjmp	.-838    	; 0x66a0 <vfprintf+0x46>
    69e6:	b7 01       	movw	r22, r14
    69e8:	80 e2       	ldi	r24, 0x20	; 32
    69ea:	90 e0       	ldi	r25, 0x00	; 0
    69ec:	34 d0       	rcall	.+104    	; 0x6a56 <fputc>
    69ee:	3a 94       	dec	r3
    69f0:	f7 cf       	rjmp	.-18     	; 0x69e0 <vfprintf+0x386>
    69f2:	f7 01       	movw	r30, r14
    69f4:	86 81       	ldd	r24, Z+6	; 0x06
    69f6:	97 81       	ldd	r25, Z+7	; 0x07
    69f8:	02 c0       	rjmp	.+4      	; 0x69fe <vfprintf+0x3a4>
    69fa:	8f ef       	ldi	r24, 0xFF	; 255
    69fc:	9f ef       	ldi	r25, 0xFF	; 255
    69fe:	2c 96       	adiw	r28, 0x0c	; 12
    6a00:	cd bf       	out	0x3d, r28	; 61
    6a02:	de bf       	out	0x3e, r29	; 62
    6a04:	df 91       	pop	r29
    6a06:	cf 91       	pop	r28
    6a08:	1f 91       	pop	r17
    6a0a:	0f 91       	pop	r16
    6a0c:	ff 90       	pop	r15
    6a0e:	ef 90       	pop	r14
    6a10:	df 90       	pop	r13
    6a12:	cf 90       	pop	r12
    6a14:	bf 90       	pop	r11
    6a16:	af 90       	pop	r10
    6a18:	9f 90       	pop	r9
    6a1a:	8f 90       	pop	r8
    6a1c:	7f 90       	pop	r7
    6a1e:	6f 90       	pop	r6
    6a20:	5f 90       	pop	r5
    6a22:	4f 90       	pop	r4
    6a24:	3f 90       	pop	r3
    6a26:	2f 90       	pop	r2
    6a28:	08 95       	ret

00006a2a <strnlen_P>:
    6a2a:	fc 01       	movw	r30, r24
    6a2c:	05 90       	lpm	r0, Z+
    6a2e:	61 50       	subi	r22, 0x01	; 1
    6a30:	70 40       	sbci	r23, 0x00	; 0
    6a32:	01 10       	cpse	r0, r1
    6a34:	d8 f7       	brcc	.-10     	; 0x6a2c <strnlen_P+0x2>
    6a36:	80 95       	com	r24
    6a38:	90 95       	com	r25
    6a3a:	8e 0f       	add	r24, r30
    6a3c:	9f 1f       	adc	r25, r31
    6a3e:	08 95       	ret

00006a40 <strnlen>:
    6a40:	fc 01       	movw	r30, r24
    6a42:	61 50       	subi	r22, 0x01	; 1
    6a44:	70 40       	sbci	r23, 0x00	; 0
    6a46:	01 90       	ld	r0, Z+
    6a48:	01 10       	cpse	r0, r1
    6a4a:	d8 f7       	brcc	.-10     	; 0x6a42 <strnlen+0x2>
    6a4c:	80 95       	com	r24
    6a4e:	90 95       	com	r25
    6a50:	8e 0f       	add	r24, r30
    6a52:	9f 1f       	adc	r25, r31
    6a54:	08 95       	ret

00006a56 <fputc>:
    6a56:	0f 93       	push	r16
    6a58:	1f 93       	push	r17
    6a5a:	cf 93       	push	r28
    6a5c:	df 93       	push	r29
    6a5e:	18 2f       	mov	r17, r24
    6a60:	09 2f       	mov	r16, r25
    6a62:	eb 01       	movw	r28, r22
    6a64:	8b 81       	ldd	r24, Y+3	; 0x03
    6a66:	81 fd       	sbrc	r24, 1
    6a68:	03 c0       	rjmp	.+6      	; 0x6a70 <fputc+0x1a>
    6a6a:	8f ef       	ldi	r24, 0xFF	; 255
    6a6c:	9f ef       	ldi	r25, 0xFF	; 255
    6a6e:	20 c0       	rjmp	.+64     	; 0x6ab0 <fputc+0x5a>
    6a70:	82 ff       	sbrs	r24, 2
    6a72:	10 c0       	rjmp	.+32     	; 0x6a94 <fputc+0x3e>
    6a74:	4e 81       	ldd	r20, Y+6	; 0x06
    6a76:	5f 81       	ldd	r21, Y+7	; 0x07
    6a78:	2c 81       	ldd	r18, Y+4	; 0x04
    6a7a:	3d 81       	ldd	r19, Y+5	; 0x05
    6a7c:	42 17       	cp	r20, r18
    6a7e:	53 07       	cpc	r21, r19
    6a80:	7c f4       	brge	.+30     	; 0x6aa0 <fputc+0x4a>
    6a82:	e8 81       	ld	r30, Y
    6a84:	f9 81       	ldd	r31, Y+1	; 0x01
    6a86:	9f 01       	movw	r18, r30
    6a88:	2f 5f       	subi	r18, 0xFF	; 255
    6a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    6a8c:	28 83       	st	Y, r18
    6a8e:	39 83       	std	Y+1, r19	; 0x01
    6a90:	10 83       	st	Z, r17
    6a92:	06 c0       	rjmp	.+12     	; 0x6aa0 <fputc+0x4a>
    6a94:	e8 85       	ldd	r30, Y+8	; 0x08
    6a96:	f9 85       	ldd	r31, Y+9	; 0x09
    6a98:	81 2f       	mov	r24, r17
    6a9a:	09 95       	icall
    6a9c:	89 2b       	or	r24, r25
    6a9e:	29 f7       	brne	.-54     	; 0x6a6a <fputc+0x14>
    6aa0:	2e 81       	ldd	r18, Y+6	; 0x06
    6aa2:	3f 81       	ldd	r19, Y+7	; 0x07
    6aa4:	2f 5f       	subi	r18, 0xFF	; 255
    6aa6:	3f 4f       	sbci	r19, 0xFF	; 255
    6aa8:	2e 83       	std	Y+6, r18	; 0x06
    6aaa:	3f 83       	std	Y+7, r19	; 0x07
    6aac:	81 2f       	mov	r24, r17
    6aae:	90 2f       	mov	r25, r16
    6ab0:	df 91       	pop	r29
    6ab2:	cf 91       	pop	r28
    6ab4:	1f 91       	pop	r17
    6ab6:	0f 91       	pop	r16
    6ab8:	08 95       	ret

00006aba <__ultoa_invert>:
    6aba:	fa 01       	movw	r30, r20
    6abc:	aa 27       	eor	r26, r26
    6abe:	28 30       	cpi	r18, 0x08	; 8
    6ac0:	51 f1       	breq	.+84     	; 0x6b16 <__ultoa_invert+0x5c>
    6ac2:	20 31       	cpi	r18, 0x10	; 16
    6ac4:	81 f1       	breq	.+96     	; 0x6b26 <__ultoa_invert+0x6c>
    6ac6:	e8 94       	clt
    6ac8:	6f 93       	push	r22
    6aca:	6e 7f       	andi	r22, 0xFE	; 254
    6acc:	6e 5f       	subi	r22, 0xFE	; 254
    6ace:	7f 4f       	sbci	r23, 0xFF	; 255
    6ad0:	8f 4f       	sbci	r24, 0xFF	; 255
    6ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    6ad4:	af 4f       	sbci	r26, 0xFF	; 255
    6ad6:	b1 e0       	ldi	r27, 0x01	; 1
    6ad8:	3e d0       	rcall	.+124    	; 0x6b56 <__ultoa_invert+0x9c>
    6ada:	b4 e0       	ldi	r27, 0x04	; 4
    6adc:	3c d0       	rcall	.+120    	; 0x6b56 <__ultoa_invert+0x9c>
    6ade:	67 0f       	add	r22, r23
    6ae0:	78 1f       	adc	r23, r24
    6ae2:	89 1f       	adc	r24, r25
    6ae4:	9a 1f       	adc	r25, r26
    6ae6:	a1 1d       	adc	r26, r1
    6ae8:	68 0f       	add	r22, r24
    6aea:	79 1f       	adc	r23, r25
    6aec:	8a 1f       	adc	r24, r26
    6aee:	91 1d       	adc	r25, r1
    6af0:	a1 1d       	adc	r26, r1
    6af2:	6a 0f       	add	r22, r26
    6af4:	71 1d       	adc	r23, r1
    6af6:	81 1d       	adc	r24, r1
    6af8:	91 1d       	adc	r25, r1
    6afa:	a1 1d       	adc	r26, r1
    6afc:	20 d0       	rcall	.+64     	; 0x6b3e <__ultoa_invert+0x84>
    6afe:	09 f4       	brne	.+2      	; 0x6b02 <__ultoa_invert+0x48>
    6b00:	68 94       	set
    6b02:	3f 91       	pop	r19
    6b04:	2a e0       	ldi	r18, 0x0A	; 10
    6b06:	26 9f       	mul	r18, r22
    6b08:	11 24       	eor	r1, r1
    6b0a:	30 19       	sub	r19, r0
    6b0c:	30 5d       	subi	r19, 0xD0	; 208
    6b0e:	31 93       	st	Z+, r19
    6b10:	de f6       	brtc	.-74     	; 0x6ac8 <__ultoa_invert+0xe>
    6b12:	cf 01       	movw	r24, r30
    6b14:	08 95       	ret
    6b16:	46 2f       	mov	r20, r22
    6b18:	47 70       	andi	r20, 0x07	; 7
    6b1a:	40 5d       	subi	r20, 0xD0	; 208
    6b1c:	41 93       	st	Z+, r20
    6b1e:	b3 e0       	ldi	r27, 0x03	; 3
    6b20:	0f d0       	rcall	.+30     	; 0x6b40 <__ultoa_invert+0x86>
    6b22:	c9 f7       	brne	.-14     	; 0x6b16 <__ultoa_invert+0x5c>
    6b24:	f6 cf       	rjmp	.-20     	; 0x6b12 <__ultoa_invert+0x58>
    6b26:	46 2f       	mov	r20, r22
    6b28:	4f 70       	andi	r20, 0x0F	; 15
    6b2a:	40 5d       	subi	r20, 0xD0	; 208
    6b2c:	4a 33       	cpi	r20, 0x3A	; 58
    6b2e:	18 f0       	brcs	.+6      	; 0x6b36 <__ultoa_invert+0x7c>
    6b30:	49 5d       	subi	r20, 0xD9	; 217
    6b32:	31 fd       	sbrc	r19, 1
    6b34:	40 52       	subi	r20, 0x20	; 32
    6b36:	41 93       	st	Z+, r20
    6b38:	02 d0       	rcall	.+4      	; 0x6b3e <__ultoa_invert+0x84>
    6b3a:	a9 f7       	brne	.-22     	; 0x6b26 <__ultoa_invert+0x6c>
    6b3c:	ea cf       	rjmp	.-44     	; 0x6b12 <__ultoa_invert+0x58>
    6b3e:	b4 e0       	ldi	r27, 0x04	; 4
    6b40:	a6 95       	lsr	r26
    6b42:	97 95       	ror	r25
    6b44:	87 95       	ror	r24
    6b46:	77 95       	ror	r23
    6b48:	67 95       	ror	r22
    6b4a:	ba 95       	dec	r27
    6b4c:	c9 f7       	brne	.-14     	; 0x6b40 <__ultoa_invert+0x86>
    6b4e:	00 97       	sbiw	r24, 0x00	; 0
    6b50:	61 05       	cpc	r22, r1
    6b52:	71 05       	cpc	r23, r1
    6b54:	08 95       	ret
    6b56:	9b 01       	movw	r18, r22
    6b58:	ac 01       	movw	r20, r24
    6b5a:	0a 2e       	mov	r0, r26
    6b5c:	06 94       	lsr	r0
    6b5e:	57 95       	ror	r21
    6b60:	47 95       	ror	r20
    6b62:	37 95       	ror	r19
    6b64:	27 95       	ror	r18
    6b66:	ba 95       	dec	r27
    6b68:	c9 f7       	brne	.-14     	; 0x6b5c <__ultoa_invert+0xa2>
    6b6a:	62 0f       	add	r22, r18
    6b6c:	73 1f       	adc	r23, r19
    6b6e:	84 1f       	adc	r24, r20
    6b70:	95 1f       	adc	r25, r21
    6b72:	a0 1d       	adc	r26, r0
    6b74:	08 95       	ret

00006b76 <_exit>:
    6b76:	f8 94       	cli

00006b78 <__stop_program>:
    6b78:	ff cf       	rjmp	.-2      	; 0x6b78 <__stop_program>
